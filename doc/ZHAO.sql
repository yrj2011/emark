/*
Navicat Oracle Data Transfer
Oracle Client Version : 10.2.0.5.0

Source Server         : 192.168.0.196
Source Server Version : 110200
Source Host           : 192.168.0.196:1521
Source Schema         : ZHAO

Target Server Type    : ORACLE
Target Server Version : 110200
File Encoding         : 65001

Date: 2015-03-23 14:38:54
*/


-- ----------------------------
-- Table structure for AA
-- ----------------------------
DROP TABLE "ZHAO"."AA";
CREATE TABLE "ZHAO"."AA" (
"A" NUMBER NULL ,
"B" VARCHAR2(100 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for APPLICATION
-- ----------------------------
DROP TABLE "ZHAO"."APPLICATION";
CREATE TABLE "ZHAO"."APPLICATION" (
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for APPLICATIONUSERTYPE
-- ----------------------------
DROP TABLE "ZHAO"."APPLICATIONUSERTYPE";
CREATE TABLE "ZHAO"."APPLICATIONUSERTYPE" (
"APPNAME" VARCHAR2(100 BYTE) NOT NULL ,
"USERTYPENAME" VARCHAR2(100 BYTE) NOT NULL ,
"USERMETADATASTR" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ARTICLE_QUOTES
-- ----------------------------
DROP TABLE "ZHAO"."ARTICLE_QUOTES";
CREATE TABLE "ZHAO"."ARTICLE_QUOTES" (
"ID" NUMBER NOT NULL ,
"TYPE" NUMBER(2) NOT NULL ,
"TITLE" VARCHAR2(100 BYTE) NOT NULL ,
"AUTHOR" VARCHAR2(50 BYTE) NOT NULL ,
"CONTENT" CLOB NOT NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 0  NULL ,
"DISCUSS_FLG" CHAR(1 BYTE) DEFAULT 0  NULL ,
"BROWESE_NO" NUMBER DEFAULT 0  NULL ,
"DISCUSS_NO" NUMBER DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."ID" IS '资讯统一编号';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."TYPE" IS '所属分类，0：邮票，1：钱币';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."TITLE" IS '资讯标题';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."AUTHOR" IS '作者/来源';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."CONTENT" IS '文章内容';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."STATUS" IS '资讯状态，0：正常，1：隐藏';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."DISCUSS_FLG" IS '评论控制，0：开发，1：禁止';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."BROWESE_NO" IS '浏览次数';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."DISCUSS_NO" IS '评论次数';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."ARTICLE_QUOTES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for ARTISTS
-- ----------------------------
DROP TABLE "ZHAO"."ARTISTS";
CREATE TABLE "ZHAO"."ARTISTS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"FIRST_LETTER" CHAR(1 BYTE) NULL ,
"SEX" CHAR(1 BYTE) NULL ,
"BORN_DATE" VARCHAR2(4 BYTE) NULL ,
"DIE_DATE" VARCHAR2(4 BYTE) NULL ,
"COUNTRY_ID" NUMBER NULL ,
"NATIVE_ID" NUMBER NULL ,
"ERA" CHAR(1 BYTE) NULL ,
"TYPE" VARCHAR2(255 BYTE) NULL ,
"STATUS" CHAR(1 BYTE) NULL ,
"IMAGE" VARCHAR2(1000 BYTE) NULL ,
"TITLE" VARCHAR2(255 BYTE) NULL ,
"INTRODUCTION" VARCHAR2(4000 BYTE) NULL ,
"TAGS" VARCHAR2(255 BYTE) NULL ,
"CREATE_AT" DATE NULL ,
"UPDATE_AT" DATE NULL ,
"PROVINCE_ID" NUMBER(38) NULL ,
"CITY_ID" NUMBER(38) NULL ,
"DISPLAY" VARCHAR2(4000 BYTE) NULL ,
"PUBLISH" VARCHAR2(4000 BYTE) NULL ,
"COLLECTION" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."ARTISTS" IS '艺术家信息表';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."ID" IS '艺术家编号';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."NAME" IS '艺术家姓名';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."FIRST_LETTER" IS '姓名首字母';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."SEX" IS '性别(0，‘男’，1，女)';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."BORN_DATE" IS '出生年份';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."DIE_DATE" IS '去世年份';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."COUNTRY_ID" IS '国籍';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."NATIVE_ID" IS '籍贯';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."ERA" IS '时代（''0'', ''当代'',''1'', ''近现代'',
                                    ''2'', ''古代'',
''3'', ''其他''）';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."TYPE" IS '类别（0：书画，1：当代艺术）';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."STATUS" IS '状态（0：隐藏，1：正常）';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."IMAGE" IS '艺术家照片';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."TITLE" IS '艺术家头衔（抬头）';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."INTRODUCTION" IS '简介';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."CREATE_AT" IS '创建日期';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."UPDATE_AT" IS '更新日期';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."PROVINCE_ID" IS '省份Id';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."CITY_ID" IS '城市Id';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."DISPLAY" IS '展览';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."PUBLISH" IS '出版';
COMMENT ON COLUMN "ZHAO"."ARTISTS"."COLLECTION" IS '收藏';

-- ----------------------------
-- Table structure for ATTACHMENTS
-- ----------------------------
DROP TABLE "ZHAO"."ATTACHMENTS";
CREATE TABLE "ZHAO"."ATTACHMENTS" (
"ID" NUMBER(38) NOT NULL ,
"MESSAGE_ID" NUMBER(38) NULL ,
"FILE_PATH" VARCHAR2(1000 CHAR) NULL ,
"FILE_SIZE" VARCHAR2(255 CHAR) NULL ,
"ORIGINAL_NAME" VARCHAR2(1000 CHAR) NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"URL" VARCHAR2(500 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."ATTACHMENTS" IS '站内信附件表';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."MESSAGE_ID" IS '站内信ID';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."FILE_PATH" IS '文件路径';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."FILE_SIZE" IS '文件大小';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."ORIGINAL_NAME" IS '原始文件名';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."ATTACHMENTS"."URL" IS '站内信附件服务器url';

-- ----------------------------
-- Table structure for ATTRIBUTE_COLLECTION
-- ----------------------------
DROP TABLE "ZHAO"."ATTRIBUTE_COLLECTION";
CREATE TABLE "ZHAO"."ATTRIBUTE_COLLECTION" (
"ID" NUMBER NULL ,
"COLL_NAME" VARCHAR2(225 BYTE) NULL ,
"CREATED_ID" NUMBER NULL ,
"CREATED_NAME" VARCHAR2(225 BYTE) NULL ,
"UPDATED_ID" NUMBER NULL ,
"UPDATED_NAME" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ATTRIBUTE_GROUP
-- ----------------------------
DROP TABLE "ZHAO"."ATTRIBUTE_GROUP";
CREATE TABLE "ZHAO"."ATTRIBUTE_GROUP" (
"ID" NUMBER NULL ,
"ATTR_COLL_ID" NUMBER NULL ,
"GROUP_NAME" VARCHAR2(225 BYTE) NULL ,
"IS_COLL_ABLE" VARCHAR2(2 BYTE) NULL ,
"SORT_NUMBER" VARCHAR2(225 BYTE) NULL ,
"STATUS" VARCHAR2(225 BYTE) NULL ,
"REMARKS" VARCHAR2(1000 BYTE) NULL ,
"CREATED_ID" NUMBER NULL ,
"CREATED_NAME" VARCHAR2(225 BYTE) NULL ,
"UPDATED_ID" NUMBER NULL ,
"UPDATED_NAME" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ATTRIBUTES
-- ----------------------------
DROP TABLE "ZHAO"."ATTRIBUTES";
CREATE TABLE "ZHAO"."ATTRIBUTES" (
"ID" NUMBER NULL ,
"ATTRIBUTE_GROUP_ID" NUMBER NULL ,
"SIMPLE_NAME" VARCHAR2(225 BYTE) NULL ,
"IS_KEY" VARCHAR2(225 BYTE) NULL ,
"ATTRIBUTE_TYPE" VARCHAR2(2 BYTE) NULL ,
"STATUS" VARCHAR2(225 BYTE) NULL ,
"SORT_NUMBER" VARCHAR2(225 BYTE) NULL ,
"IS_ICON" VARCHAR2(2 BYTE) NULL ,
"CREATED_ID" NUMBER NULL ,
"CREATED_NAME" VARCHAR2(225 BYTE) NULL ,
"UPDATED_ID" NUMBER NULL ,
"UPDATED_NAME" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTION_APPLY_STORAGE
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_APPLY_STORAGE";
CREATE TABLE "ZHAO"."AUCTION_APPLY_STORAGE" (
"ID" NUMBER NOT NULL ,
"AUCTION_NO" NUMBER NOT NULL ,
"OP_NAME" VARCHAR2(225 BYTE) NULL ,
"OP_DATE" DATE NULL ,
"REMARKS" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTION_ART
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_ART";
CREATE TABLE "ZHAO"."AUCTION_ART" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(200 BYTE) NOT NULL ,
"NAME_EN" VARCHAR2(200 BYTE) NULL ,
"NAME_GBK" VARCHAR2(200 BYTE) NULL ,
"TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_ART" IS '艺术品特殊属性';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."TYPE" IS '类别';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_ART"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_AUDITS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_AUDITS";
CREATE TABLE "ZHAO"."AUCTION_AUDITS" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_NAME" VARCHAR2(1000 CHAR) NULL ,
"AUCTION_DESCR" CLOB NULL ,
"EXPERT_AUCTION_NAME" VARCHAR2(1000 CHAR) NULL ,
"EXPERT_AUCTION_DESCR" CLOB NULL ,
"EMPLOYEE_ID" NUMBER(38) NULL ,
"IS_FINISHED" NUMBER(1) DEFAULT 0  NULL ,
"FINISH_AT" DATE NULL ,
"IS_AUDITED" NUMBER(1) DEFAULT 0  NULL ,
"AUDIT_ID" NUMBER(38) NULL ,
"AUDIT_AT" DATE NULL ,
"REMARKS" CLOB NULL ,
"BUSINESS_ID" NUMBER(38) NULL ,
"IS_CHECKED" NUMBER(1) DEFAULT 0  NULL ,
"CHECK_AT" DATE NULL ,
"IS_ACCEPTED" NUMBER(1) DEFAULT 0  NULL ,
"ACCEPT_AT" DATE NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."CATEGORY_ID" IS '拍品分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."AUCTION_DESCR" IS '拍品描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."EXPERT_AUCTION_NAME" IS '拍品名称专业描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."EXPERT_AUCTION_DESCR" IS '拍品描述专业描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."EMPLOYEE_ID" IS '鉴定专家ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."IS_FINISHED" IS '鉴定是否完成(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."FINISH_AT" IS '完成时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."IS_AUDITED" IS '是否审核(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."AUDIT_ID" IS '审核人员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."AUDIT_AT" IS '审核时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."REMARKS" IS '审核备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."BUSINESS_ID" IS '业务人员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."IS_CHECKED" IS '是否审核(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."CHECK_AT" IS '业务复核时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."IS_ACCEPTED" IS '是否采纳(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."ACCEPT_AT" IS '采纳时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_AUDITS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_BASE
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_BASE";
CREATE TABLE "ZHAO"."AUCTION_BASE" (
"ID" NUMBER(38) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"AUCTION_MODE" VARCHAR2(255 CHAR) NULL ,
"NAME" VARCHAR2(2000 CHAR) NULL ,
"DESCR" VARCHAR2(4000 CHAR) NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_ID" NUMBER(38) NULL ,
"INITIAL_PRICE" NUMBER(16,2) DEFAULT 1.0  NULL ,
"ONLOAD_FEE" NUMBER(16,2) NULL ,
"INSURE_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"STORAGE_CHARGES" VARCHAR2(255 CHAR) NULL ,
"DOCUMENT_NO" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."AUCTION_MODE" IS '标准程度(STANDARD:标准  CUSTOM:自定义)';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."DESCR" IS '中文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."AUCTION_CATEGORY_ID" IS '分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."AUCTION_CHARACTER_ID" IS '品级ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."INITIAL_PRICE" IS '起拍价';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."ONLOAD_FEE" IS '委托制作费';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."INSURE_PRICE" IS '保险额';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."STORAGE_CHARGES" IS '体积重量(0:小 1:中  2:大)';
COMMENT ON COLUMN "ZHAO"."AUCTION_BASE"."DOCUMENT_NO" IS '底单编号';

-- ----------------------------
-- Table structure for AUCTION_BID_STATISTIC
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_BID_STATISTIC";
CREATE TABLE "ZHAO"."AUCTION_BID_STATISTIC" (
"AUCTION_NO" NUMBER(38) NULL ,
"WATCHING_COUNT" NUMBER(38) NULL ,
"BID_COUNT" NUMBER(38) NULL ,
"UPDATE_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_BID_STATISTIC"."AUCTION_NO" IS '拍品id';
COMMENT ON COLUMN "ZHAO"."AUCTION_BID_STATISTIC"."WATCHING_COUNT" IS '关注次数';
COMMENT ON COLUMN "ZHAO"."AUCTION_BID_STATISTIC"."BID_COUNT" IS '竞价次数';
COMMENT ON COLUMN "ZHAO"."AUCTION_BID_STATISTIC"."UPDATE_TIME" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_BIDDINGS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_BIDDINGS";
CREATE TABLE "ZHAO"."AUCTION_BIDDINGS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER NULL ,
"AUCTION_ID" NUMBER NULL ,
"BIDDING" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"END_AT" DATE NULL ,
"WATCHING" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"CONSIGN" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"IS_HIGHEST" NUMBER(1) DEFAULT '0'  NULL ,
"FLAG" NUMBER(1) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_BIDDINGS"."BIDDING" IS '是否竞拍';
COMMENT ON COLUMN "ZHAO"."AUCTION_BIDDINGS"."END_AT" IS '结标时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_BIDDINGS"."WATCHING" IS '是否关注1关注0未关注';
COMMENT ON COLUMN "ZHAO"."AUCTION_BIDDINGS"."CONSIGN" IS '是否委托1委托0不是委托';
COMMENT ON COLUMN "ZHAO"."AUCTION_BIDDINGS"."IS_HIGHEST" IS '是否最高出价-1出局,1领先,0没出过价';

-- ----------------------------
-- Table structure for AUCTION_CATALOGUE
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CATALOGUE";
CREATE TABLE "ZHAO"."AUCTION_CATALOGUE" (
"ID" NUMBER(38) NOT NULL ,
"PARENT_ID" NUMBER(38) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_PINYIN" VARCHAR2(255 CHAR) NULL ,
"RANK" NUMBER(38) DEFAULT 0  NULL ,
"CHARACTER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CATALOGUE" IS '拍品目录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."PARENT_ID" IS '父类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."NAME_PINYIN" IS '拼音名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."RANK" IS '级别(0:第一级 1:第二级 2:第三级 3:第四级)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."CHARACTER_TYPE" IS '类型(0无 1:邮票类 2:钱币类 3:磁卡4:杂项 5:文献 6:其他)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."IS_SHOW" IS '是否显示(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_CATALOGUE_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CATALOGUE_DETAILS";
CREATE TABLE "ZHAO"."AUCTION_CATALOGUE_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"STAMP_ID" VARCHAR2(100 CHAR) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_PINYIN" VARCHAR2(255 CHAR) NULL ,
"CATALOGUE_ID" NUMBER(38) NOT NULL ,
"CHARACTER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CATALOGUE_DETAILS" IS '拍品目录表明细表';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."STAMP_ID" IS '邮票志号ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."NAME_PINYIN" IS '拼音名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."CATALOGUE_ID" IS '目录id';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."CHARACTER_TYPE" IS '类型(0无 1:邮票类 2:钱币类 3:磁卡4:杂项 5:文献 6:其他)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."IS_SHOW" IS '是否显示(0:否 1:显示通用菜单 3:显示集藏用品)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATALOGUE_DETAILS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_CATEGORIES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CATEGORIES";
CREATE TABLE "ZHAO"."AUCTION_CATEGORIES" (
"ID" NUMBER(38) NOT NULL ,
"PARENT_ID" NUMBER(38) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_PINYIN" VARCHAR2(255 CHAR) NULL ,
"RANK" NUMBER(38) DEFAULT 0  NULL ,
"CATEGORY_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHARACTER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"BUY_CHARGE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"BUY_SCORE_PARAM" NUMBER(6,2) DEFAULT 40.0  NULL ,
"SELL_SCORE_PARAM" NUMBER(6,2) DEFAULT 40.0  NULL ,
"BUY_SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"SELL_SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"RANK_NUM" VARCHAR2(255 CHAR) NULL ,
"STORAGE_CHARGE_RATE" VARCHAR2(255 BYTE) NULL ,
"WAIT_SETT_DAY" NUMBER(38) NULL ,
"RANK_NUM_2" VARCHAR2(255 CHAR) NULL ,
"EXIT_BAN" CHAR(1 BYTE) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CATEGORIES" IS '拍品分类表';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."PARENT_ID" IS '父类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."NAME_PINYIN" IS '拼音名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."RANK" IS '级别(0:第一级 1:第二级 2:第三级 3:第四级)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."CATEGORY_TYPE" IS '类型(0:竞拍平台 3:商城)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."CHARACTER_TYPE" IS '品级类型(0无 1:邮票类 2:金银类 3:纸币类)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."IS_SHOW" IS '是否显示(0:否 1:显示通用菜单 3:显示集藏用品)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."BUY_CHARGE_PERCENT" IS '竞买方服务费';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."BUY_SCORE_PARAM" IS '竞买方积分参数';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."SELL_SCORE_PARAM" IS '委托方积分参数';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."BUY_SCORE_TIMES" IS '竞买方积分倍数';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."SELL_SCORE_TIMES" IS '委托方积分倍数';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."STORAGE_CHARGE_RATE" IS '仓储费率(元/天)    例如：\小\中\大\     分类为邮票类(100)、台湾票(800)、其他类(900)及其各级子分类的拍品，收费标准为0.2元/天
中国现代金银币(183)、铜章(188)分类的拍品，收费标准为0.5元/天
钱币类(157) 及其除183、188以外的各级子分类的拍品，收费标准为0.2元/天
分类为文献(600)及其各级子分类的拍品，按照体积和重量分成三类(小、中、大)，收费标准分别为1元/天、3元/天、5元/天。';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."WAIT_SETT_DAY" IS '待结算周期(天)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."RANK_NUM_2" IS '测试';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES"."EXIT_BAN" IS '是否禁止出境 1:是,0:否';

-- ----------------------------
-- Table structure for AUCTION_CATEGORIES_MAPPING
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CATEGORIES_MAPPING";
CREATE TABLE "ZHAO"."AUCTION_CATEGORIES_MAPPING" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID_ONE" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID_ONE_NAME" VARCHAR2(255 BYTE) NULL ,
"AUCTION_CATEGORY_ID_TWO" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID_TWO_NAME" VARCHAR2(255 BYTE) NULL ,
"AUCTION_CATEGORY_ID_THREE" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID_THREE_NAME" VARCHAR2(255 BYTE) NULL ,
"AUCTION_CATEGORY_ID_FOUR" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID_FOUR_NAME" VARCHAR2(255 BYTE) NULL ,
"STATUS" VARCHAR2(255 BYTE) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"AUCTION_CATEGORY_ID_FIVE" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID_FIVE_NAME" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CATEGORIES_MAPPING" IS '拍品分类对照表';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID" IS '拍品分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_ONE" IS '拍品一级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_ONE_NAME" IS '拍品一级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_TWO" IS '拍品二级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_TWO_NAME" IS '拍品二级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_THREE" IS '拍品三级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_THREE_NAME" IS '拍品三级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_FOUR" IS '拍品四级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_FOUR_NAME" IS '拍品四级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."STATUS" IS '状态(0:无效 1：有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_FIVE" IS '拍品五级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_MAPPING"."AUCTION_CATEGORY_ID_FIVE_NAME" IS '拍品五级分类名称';

-- ----------------------------
-- Table structure for AUCTION_CATEGORIES_SEO
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CATEGORIES_SEO";
CREATE TABLE "ZHAO"."AUCTION_CATEGORIES_SEO" (
"ID" NUMBER NOT NULL ,
"CATEGORY_ID" NUMBER NOT NULL ,
"TITLE" VARCHAR2(500 BYTE) NULL ,
"KEYWORDS" VARCHAR2(500 BYTE) NULL ,
"DESCR" VARCHAR2(1000 BYTE) NULL ,
"LABEL" VARCHAR2(500 BYTE) NULL ,
"LABEL2" VARCHAR2(500 BYTE) NULL ,
"TITLE_TRADE" VARCHAR2(500 BYTE) NULL ,
"KEYWORDS_TRADE" VARCHAR2(500 BYTE) NULL ,
"DESCR_TRADE" VARCHAR2(1000 BYTE) NULL ,
"LABEL2_TRADE" VARCHAR2(500 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"LABEL2_EN" VARCHAR2(500 BYTE) NULL ,
"LABEL2_TRADE_EN" VARCHAR2(500 BYTE) NULL ,
"TITLE_GBK" VARCHAR2(500 BYTE) NULL ,
"KEYWORDS_GBK" VARCHAR2(500 BYTE) NULL ,
"DESCR_GBK" VARCHAR2(500 BYTE) NULL ,
"LABEL2_GBK" VARCHAR2(500 BYTE) NULL ,
"TITLE_TRADE_GBK" VARCHAR2(500 BYTE) NULL ,
"KEYWORDS_TRADE_GBK" VARCHAR2(500 BYTE) NULL ,
"DESCR_TRADE_GBK" VARCHAR2(500 BYTE) NULL ,
"LABEL2_TRADE_GBK" VARCHAR2(500 BYTE) NULL ,
"LABEL_GBK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CATEGORIES_SEO" IS '拍品分类SEO表';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."CATEGORY_ID" IS '分类id';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."TITLE" IS '竞买分类标题';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."KEYWORDS" IS '竞买分类关键字';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."DESCR" IS '竞买分类描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL" IS '分类名称(竞买和成交共用)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL2" IS '竞买分类H2标签';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."TITLE_TRADE" IS '成交记录分类标题';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."KEYWORDS_TRADE" IS '成交记录关键字';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."DESCR_TRADE" IS '成交记录分类描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL2_TRADE" IS '成交记录分类H2标签';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL2_EN" IS '竞买英文H2标签';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL2_TRADE_EN" IS '成交记录英文H2标签';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."TITLE_GBK" IS '竞买分类标题繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."KEYWORDS_GBK" IS '竞买分类关键字繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."DESCR_GBK" IS '竞买分类描述繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL2_GBK" IS '竞买分类H2标签繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."TITLE_TRADE_GBK" IS '成交记录分类标题繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."KEYWORDS_TRADE_GBK" IS '成交记录关键字繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."DESCR_TRADE_GBK" IS '成交记录分类描述繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL2_TRADE_GBK" IS '成交记录分类H2标签繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CATEGORIES_SEO"."LABEL_GBK" IS '分类名称(竞买和成交共用)繁体';

-- ----------------------------
-- Table structure for AUCTION_CHARACTERS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CHARACTERS";
CREATE TABLE "ZHAO"."AUCTION_CHARACTERS" (
"ID" NUMBER(38) NOT NULL ,
"SYMBOL" VARCHAR2(255 CHAR) NULL ,
"CHARACTER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"DESCR" VARCHAR2(1000 CHAR) NULL ,
"DESCR_EN" VARCHAR2(1000 CHAR) NULL ,
"DESCR_GBK" VARCHAR2(1000 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CHARACTERS" IS '拍品品级表';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."SYMBOL" IS '品级符号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."CHARACTER_TYPE" IS '品级类型(0无 1:邮票类 2:金银类 3:纸币类)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."IS_SHOW" IS '是否显示(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."DESCR" IS '中文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."DESCR_EN" IS '英文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."DESCR_GBK" IS '繁体描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CHARACTERS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_CLASS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CLASS";
CREATE TABLE "ZHAO"."AUCTION_CLASS" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NOT NULL ,
"CLASS_ID" NUMBER(38) NOT NULL ,
"CLASS_AMOUNT" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"CLASS_NAME" VARCHAR2(255 BYTE) NULL ,
"CLASS_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"CLASS_NAME_GBK" VARCHAR2(255 BYTE) NULL ,
"SORT_NO" NUMBER(38) NULL ,
"UNIT" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CLASS" IS '拍品品种';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CLASS_ID" IS '品种编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CLASS_AMOUNT" IS '拍品数量';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CLASS_NAME" IS '品种名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CLASS_NAME_EN" IS '品种名称英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."CLASS_NAME_GBK" IS '品种名称繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."SORT_NO" IS '排序';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS"."UNIT" IS '量词';

-- ----------------------------
-- Table structure for AUCTION_CLASS_SUB
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_CLASS_SUB";
CREATE TABLE "ZHAO"."AUCTION_CLASS_SUB" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NOT NULL ,
"CLASS_ID" NUMBER(38) NOT NULL ,
"CLASS_SUB_ID" NUMBER(38) NOT NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"CLASS_SUB_NAME" VARCHAR2(255 BYTE) NULL ,
"CLASS_SUB_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"CLASS_SUB_NAME_GBK" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_CLASS_SUB" IS '拍品单品';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CLASS_ID" IS '品种编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CLASS_SUB_ID" IS '单品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CLASS_SUB_NAME" IS '单品名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CLASS_SUB_NAME_EN" IS '单品名称英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_CLASS_SUB"."CLASS_SUB_NAME_GBK" IS '单品名称繁体';

-- ----------------------------
-- Table structure for AUCTION_COLLECTION
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_COLLECTION";
CREATE TABLE "ZHAO"."AUCTION_COLLECTION" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"NAME" VARCHAR2(2000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CHARACTER_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_NAME" VARCHAR2(255 CHAR) NULL ,
"DESCR" VARCHAR2(4000 CHAR) NULL ,
"AUCTION_CATEGORY_ID_ONE" NUMBER(38) NULL ,
"AUCTION_CATEGORY_NAME_ONE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CATEGORY_ID_TOW" NUMBER(38) NULL ,
"AUCTION_CATEGORY_NAME_TWO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CATEGORY_ID_THREE" NUMBER(38) NULL ,
"AUCTION_CATEGORY_NAME_THREE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CATEGORY_ID_FOUR" NUMBER(38) NULL ,
"AUCTION_CATEGORY_NAME_FOUR" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CATEGORY_ID_FIVE" NUMBER(38) NULL ,
"AUCTION_CATEGORY_NAME_FIVE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_SMALL_PIC_ONE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_SMALL_PIC_TWO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_SMALL_PIC_THREE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_BIG_PIC_ONE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_BIG_PIC_TWO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_BIG_PIC_THREE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_DATE" DATE NULL ,
"ESTIMATE_PRICE_EXTENT" VARCHAR2(255 CHAR) NULL ,
"END_PRICE" VARCHAR2(255 CHAR) NULL ,
"END_DATE" DATE NULL ,
"GUARANTEE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_SPECIAL_TOPIC_ID" NUMBER(38) NULL ,
"AUCTION_SPECIAL_TOPIC_NAME" VARCHAR2(255 CHAR) NULL ,
"COMPANY_NAME" VARCHAR2(255 CHAR) NULL ,
"COMPANY_HTTP_URL" VARCHAR2(255 CHAR) NULL ,
"NEW_PRICE" VARCHAR2(255 CHAR) NULL ,
"LAST_COLLECTION_DATE" DATE NULL ,
"COLLECTION_RESULT" VARCHAR2(255 CHAR) NULL ,
"IS_END" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"COLLECTION_TIME" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"IS_END_SEND" VARCHAR2(1 BYTE) DEFAULT 0  NULL ,
"TYPE" VARCHAR2(100 BYTE) NULL ,
"AUCTION_CATEGORY_NAME" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_COLLECTION" IS '拍品新浪收藏推送数据';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_ID" IS '拍品主键ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."STATUS" IS '拍品状态(0:未上传 8:已退拍 10:未预展 1:预展中 2:竞拍中 3: 已拍出 6:已流拍 11: 有理由撤拍 12：无理由撤拍)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_TYPE" IS '类型';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CHARACTER_ID" IS '拍品品级ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CHARACTER_NAME" IS '拍品品级名称(格式如:全品，上品等 + “（赵涌鉴定）”)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."DESCR" IS '中文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_ID_ONE" IS '拍品一级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_NAME_ONE" IS '拍品一级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_ID_TOW" IS '拍品二级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_NAME_TWO" IS '拍品二级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_ID_THREE" IS '拍品三级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_NAME_THREE" IS '拍品三级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_ID_FOUR" IS '拍品四级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_NAME_FOUR" IS '拍品四级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_ID_FIVE" IS '拍品五级分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_NAME_FIVE" IS '拍品五级分类名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_SMALL_PIC_ONE" IS '拍品小图URL一';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_SMALL_PIC_TWO" IS '拍品小图URL二';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_SMALL_PIC_THREE" IS '拍品小图URL三';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_BIG_PIC_ONE" IS '拍品大图URL一';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_BIG_PIC_TWO" IS '拍品大图URL二';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_BIG_PIC_THREE" IS '拍品大图URL三';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_DATE" IS '拍买时间(开拍时间)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."ESTIMATE_PRICE_EXTENT" IS '估价区间';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."END_PRICE" IS '成交价，带上价格单位，格式（10000元）';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."END_DATE" IS '成交日期';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."GUARANTEE" IS '默认为“赵涌保真”';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_SPECIAL_TOPIC_ID" IS '专场ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_SPECIAL_TOPIC_NAME" IS '专场名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."COMPANY_NAME" IS '公司(默认为“赵涌在线”)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."COMPANY_HTTP_URL" IS '网站地址（默认为“www.zhaoonline.com”）';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."NEW_PRICE" IS '拍品最新价格，带上价格单位，格式（10000元）';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."LAST_COLLECTION_DATE" IS '上次推送时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."COLLECTION_RESULT" IS '推送结果(0:失败，1:成功)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."IS_END" IS '是否结拍(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."COLLECTION_TIME" IS '推送次数';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."IS_END_SEND" IS '结拍是否被推送(0 否, 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."TYPE" IS '拍品类型';
COMMENT ON COLUMN "ZHAO"."AUCTION_COLLECTION"."AUCTION_CATEGORY_NAME" IS '拍品分类名称';

-- ----------------------------
-- Table structure for AUCTION_DELAY
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_DELAY";
CREATE TABLE "ZHAO"."AUCTION_DELAY" (
"ID" NUMBER(38) NOT NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"DELAY_HOURS" NUMBER NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(100 CHAR) NULL ,
"AUDITOR_ID" NUMBER(38) NULL ,
"AUDITOR_NAME" VARCHAR2(100 CHAR) NULL ,
"STATUS" VARCHAR2(10 CHAR) DEFAULT 0  NULL ,
"AUDIT_DATE" DATE NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_DELAY"."REMARK" IS '故障延期原因说明';
COMMENT ON COLUMN "ZHAO"."AUCTION_DELAY"."DELAY_HOURS" IS '拍品延长时间(12,24,36,48小时)';
COMMENT ON COLUMN "ZHAO"."AUCTION_DELAY"."ADMIN_ID" IS '提交人id';
COMMENT ON COLUMN "ZHAO"."AUCTION_DELAY"."AUDITOR_ID" IS '审核人id';
COMMENT ON COLUMN "ZHAO"."AUCTION_DELAY"."STATUS" IS '状态:0待审核,1已审核,2已作废';
COMMENT ON COLUMN "ZHAO"."AUCTION_DELAY"."AUDIT_DATE" IS '审核通过时间';

-- ----------------------------
-- Table structure for AUCTION_DELAY_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_DELAY_DETAILS";
CREATE TABLE "ZHAO"."AUCTION_DELAY_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"END_AT" DATE NULL ,
"STATUS" VARCHAR2(10 CHAR) NULL ,
"AUCTION_DELAY_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTION_EVENT_DIVER
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_EVENT_DIVER";
CREATE TABLE "ZHAO"."AUCTION_EVENT_DIVER" (
"ID" NUMBER(38) NOT NULL ,
"STATUS" VARCHAR2(10 BYTE) NULL ,
"COUNT" NUMBER(38) NULL ,
"DATA_MIN" DATE NULL ,
"DATA_MAX" DATE NULL ,
"COUNT_MAX" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_EVENT_DIVER" IS '拍品数据推送事件处理表';
COMMENT ON COLUMN "ZHAO"."AUCTION_EVENT_DIVER"."STATUS" IS '标示是否有数据需要处理(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_EVENT_DIVER"."COUNT" IS '需要处理的拍品总数';
COMMENT ON COLUMN "ZHAO"."AUCTION_EVENT_DIVER"."DATA_MIN" IS '开拍时间最小时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_EVENT_DIVER"."DATA_MAX" IS '开拍时间最大时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_EVENT_DIVER"."COUNT_MAX" IS '拍品数量最大值';

-- ----------------------------
-- Table structure for AUCTION_EXPAND
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_EXPAND";
CREATE TABLE "ZHAO"."AUCTION_EXPAND" (
"AUCTION_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"PUBLISH" VARCHAR2(4000 BYTE) NULL ,
"PUBLISH_CHT" VARCHAR2(4000 BYTE) NULL ,
"PUBLISH_ENG" VARCHAR2(4000 BYTE) NULL ,
"SIGNATURE" VARCHAR2(4000 BYTE) NULL ,
"SIGNATURE_CHT" VARCHAR2(4000 BYTE) NULL ,
"SIGNATURE_ENG" VARCHAR2(4000 BYTE) NULL ,
"FORM" VARCHAR2(4000 BYTE) NULL ,
"FORM_CHT" VARCHAR2(4000 BYTE) NULL ,
"FORM_ENG" VARCHAR2(4000 BYTE) NULL ,
"EXHIBIT" VARCHAR2(4000 BYTE) NULL ,
"EXHIBIT_CHT" VARCHAR2(4000 BYTE) NULL ,
"EXHIBIT_ENG" VARCHAR2(4000 BYTE) NULL ,
"PIECE_DIMENSION" VARCHAR2(4000 BYTE) NULL ,
"PIECE_DIMENSION_CHT" VARCHAR2(4000 BYTE) NULL ,
"PIECE_DIMENSION_ENG" VARCHAR2(4000 BYTE) NULL ,
"COMPOSE_TIME" VARCHAR2(400 BYTE) NULL ,
"AUCTIONREMARK" CLOB NULL ,
"AUCTIONREMARK_CHT" CLOB NULL ,
"AUCTIONREMARK_ENG" CLOB NULL ,
"MATERIAL" VARCHAR2(255 BYTE) NULL ,
"ARTISTS" VARCHAR2(255 BYTE) NULL ,
"LOT" NUMBER NULL ,
"IMAGE_NAME" VARCHAR2(255 BYTE) NULL ,
"DETAILEDIMAGENAME" VARCHAR2(4000 BYTE) NULL ,
"SPECIALCODE" VARCHAR2(40 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."AUCTION_CODE" IS '泓盛拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."PUBLISH" IS '出版';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."PUBLISH_CHT" IS '出版 繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."PUBLISH_ENG" IS '出版英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."SIGNATURE" IS '签名';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."SIGNATURE_CHT" IS '签名繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."SIGNATURE_ENG" IS '签名英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."FORM" IS '形式';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."FORM_CHT" IS '形式繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."FORM_ENG" IS '形式英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."EXHIBIT" IS '展览';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."EXHIBIT_CHT" IS '展览繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."EXHIBIT_ENG" IS '展览英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."PIECE_DIMENSION" IS '尺寸';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."PIECE_DIMENSION_CHT" IS '尺寸繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."PIECE_DIMENSION_ENG" IS '尺寸英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."COMPOSE_TIME" IS '创作年代';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."AUCTIONREMARK" IS '拍品说明';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."AUCTIONREMARK_CHT" IS '繁体拍品说明';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."AUCTIONREMARK_ENG" IS '英文拍品说明';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."MATERIAL" IS '材质';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."ARTISTS" IS '艺术家';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."LOT" IS 'LOT';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."IMAGE_NAME" IS '单图图片';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."DETAILEDIMAGENAME" IS '详细图片名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_EXPAND"."SPECIALCODE" IS '泓盛专场编号';

-- ----------------------------
-- Table structure for AUCTION_FEE_SETTINGS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_FEE_SETTINGS";
CREATE TABLE "ZHAO"."AUCTION_FEE_SETTINGS" (
"ID" NUMBER(38) NOT NULL ,
"LANG" VARCHAR2(255 CHAR) DEFAULT 'CN'  NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"AUCTION_STATUS" VARCHAR2(255 CHAR) NULL ,
"IS_RESALE" NUMBER(1) DEFAULT 0  NULL ,
"IS_ONLOAD_FEE" NUMBER(1) DEFAULT 0  NULL ,
"CHARGE_FEE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"INSURE_FEE_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"INSURE_FEE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"INSURE_FEE_PROPS" VARCHAR2(255 CHAR) NULL ,
"DAY_CUSTODY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"FREE_CUSTODY_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_FEE_SETTINGS" IS '拍品委托费用设置表';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."LANG" IS '语言(CN, EN)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."AUCTION_TYPE" IS '拍品类型(0:一口价 1:竞拍)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."AUCTION_STATUS" IS '拍品状态(拍出已支付:AUCTION_PAID, 拍出不支付:AUCTION_NOT_PAID, 退货:AUCTION_RETURNED, 流拍:AUCTION_NOT_SOLD, 退拍:AUCTION_OFF_LIST, 有理由撤拍:AUCTION_CANCELED, 无理由撤拍:AUCTION_NO_REASON_CANCELED)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."IS_RESALE" IS '是否重拍(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."IS_ONLOAD_FEE" IS '是否收取制作费(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."CHARGE_FEE_PERCENT" IS '服务费百分比%';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."INSURE_FEE_TYPE" IS '保险费类型(1:按百分比 2:按属性)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."INSURE_FEE_PERCENT" IS '保险费百分比%';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."INSURE_FEE_PROPS" IS '英文版保险费属性 格式例如(费用类型(1拍出已支付，2拍出不支付，3退货，4流拍，5退拍，6有理由撤拍，7无理由撤拍))';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."DAY_CUSTODY_FEE" IS '保管费单位(天/元)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."FREE_CUSTODY_DAYS" IS '免委托保管费天数';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."CATEGORY_ID" IS '分类ID(暂时不用)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEE_SETTINGS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_FEES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_FEES";
CREATE TABLE "ZHAO"."AUCTION_FEES" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"CHARGE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"INSURE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CUSTODY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ONLOAD_FEE" NUMBER(16,2) NULL ,
"CHARGE_FEE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHARGE_FEE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"CHARGE_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"INSURE_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"INSURE_FEE_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"INSURE_FEE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"INSURE_FEE_PROPS" VARCHAR2(255 CHAR) NULL ,
"CUSTODY_DAY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"FREE_CUSTODY_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ONLOAD_FEE_TYPE" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_FEES" IS '拍品委托费用表';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CHARGE_FEE" IS '委托服务费';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."INSURE_FEE" IS '委托保险费';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CUSTODY_FEE" IS '委托保管费';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."ONLOAD_FEE" IS '委托制作费';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CHARGE_FEE_TYPE" IS '服务费类型(0默认百分比, 1指定本合同拍品统一百分比, 2指定本合同拍品统一委托佣金)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CHARGE_FEE_PERCENT" IS '服务费百分比%';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CHARGE_PRICE" IS '服务费金额';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."INSURE_PRICE" IS '保险额';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."INSURE_FEE_TYPE" IS '保险费类型(1:按百分比 2:按属性)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."INSURE_FEE_PERCENT" IS '保险费百分比%';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."INSURE_FEE_PROPS" IS '英文版保险费属性 格式例如(days:20;insurance_percent:1;per_days:10;per_days_percent:0.5)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CUSTODY_DAY_FEE" IS '每天收取保管费';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."FREE_CUSTODY_DAYS" IS '免保管费天数';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_FEES"."ONLOAD_FEE_TYPE" IS '制作费类型：1：指定收费  0：默认收费';

-- ----------------------------
-- Table structure for AUCTION_FORUM_RELATED
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_FORUM_RELATED";
CREATE TABLE "ZHAO"."AUCTION_FORUM_RELATED" (
"ID" NUMBER(38) NOT NULL ,
"FORUM_ID" NUMBER(38) NOT NULL ,
"PROPERTY_SET_ID" NUMBER(38) NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"TYPE" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"COLLATE_TYPE" NUMBER(38) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_FORUM_RELATED" IS '拍品版块相关';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."FORUM_ID" IS '版块编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."PROPERTY_SET_ID" IS '属性集编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."CATEGORY_ID" IS '分类编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."TYPE" IS '版块相关类型（0：版块与属性集相关  1：版块与分类相关）';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_FORUM_RELATED"."COLLATE_TYPE" IS '整理模式(0：不启用标准整理      1：启用标准整理)';

-- ----------------------------
-- Table structure for AUCTION_FORUM_RELATED_HUIHUI
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_FORUM_RELATED_HUIHUI";
CREATE TABLE "ZHAO"."AUCTION_FORUM_RELATED_HUIHUI" (
"ID" NUMBER(38) NOT NULL ,
"FORUM_ID" NUMBER(38) NOT NULL ,
"PROPERTY_SET_ID" NUMBER(38) NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"TYPE" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"COLLATE_TYPE" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTION_HOSANE_TEMP
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_HOSANE_TEMP";
CREATE TABLE "ZHAO"."AUCTION_HOSANE_TEMP" (
"ID" NUMBER NULL ,
"AUCTIONNAME" VARCHAR2(4000 BYTE) NULL ,
"CONTRACTID" VARCHAR2(255 BYTE) NULL ,
"IS_BEAT" NUMBER NULL ,
"LOT" NUMBER NULL ,
"IMAGE_NAME" VARCHAR2(255 BYTE) NULL ,
"DETAILEDIMAGENAME" VARCHAR2(4000 BYTE) NULL ,
"SCREENING" VARCHAR2(1000 BYTE) NULL ,
"DIGITALLIBRARY" VARCHAR2(1000 BYTE) NULL ,
"RESERVE" NUMBER(16,2) NULL ,
"HAMMERPRICE" NUMBER(16,2) NULL ,
"CATALOGFEE" NUMBER(16,2) NULL ,
"INSURANCE" NUMBER(16,2) NULL ,
"COMMISIONPERFEE" NUMBER(16,2) NULL ,
"TAXES" NUMBER(16,2) NULL ,
"BOXFEE" NUMBER(16,2) NULL ,
"FREIGHT" NUMBER(16,2) NULL ,
"STORAGECHARGES" NUMBER(16,2) NULL ,
"OTHERFEE" NUMBER(16,2) NULL ,
"COMPANYAFFIXEDSHAL" NUMBER(16,2) NULL ,
"AUCTIONREMARK" CLOB NULL ,
"STATUS" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"PRODUCTIONCOST" NUMBER(16,2) NULL ,
"AUCTIONCODE" VARCHAR2(255 BYTE) NULL ,
"CATAGORYID" NUMBER NULL ,
"MATERIALID" NUMBER NULL ,
"ARTISTSID" NUMBER NULL ,
"BOUTIQUESTATE" NUMBER NULL ,
"PRINTIMAGE" VARCHAR2(255 BYTE) NULL ,
"SPECIALCODE" VARCHAR2(40 BYTE) NULL ,
"UPDATE_AT" DATE NULL ,
"EVALUATE_LOW" NUMBER(16,2) NULL ,
"EVALUATE_HIGH" NUMBER(16,2) NULL ,
"ORDER_NUM" NUMBER NULL ,
"CLOSE_COST" NUMBER(16,2) NULL ,
"MARKID" NUMBER(38) NULL ,
"BUYPERFEE" NUMBER(16,2) NULL ,
"SALE" NUMBER NULL ,
"CLOSE_TIME" DATE NULL ,
"AUCTION_STATUS" NUMBER NULL ,
"AUCTIONNAME_CHT" VARCHAR2(4000 BYTE) NULL ,
"AUCTIONNAME_ENG" VARCHAR2(4000 BYTE) NULL ,
"AUCTIONREMARK_CHT" CLOB NULL ,
"AUCTIONREMARK_ENG" CLOB NULL ,
"BUY_ACCOUNT_CODE" VARCHAR2(255 BYTE) NULL ,
"BUY_STATUS" VARCHAR2(50 BYTE) NULL ,
"MINUS_POINTS" NUMBER(16,2) NULL ,
"RE_HAMMER_PRICE" NUMBER(16,2) NULL ,
"RE_COLSE_COST" NUMBER(16,2) NULL ,
"HWRATIO" VARCHAR2(255 BYTE) NULL ,
"RECOMMEND_TAG" NUMBER NULL ,
"TRUSTPRICE1" NUMBER(16,2) NULL ,
"TRUSTUSER1" VARCHAR2(255 BYTE) NULL ,
"TRUSTPRICE2" NUMBER(16,2) NULL ,
"TRUSTUSER2" VARCHAR2(255 BYTE) NULL ,
"HITCOUNT" NUMBER NULL ,
"MYSELF_PIECE" NUMBER NULL ,
"BUY_PAY_DATE" DATE NULL ,
"BUY_INCOME_MONEY" NUMBER(16,2) NULL ,
"BUY_ACCRUED_MONEY" NUMBER(16,2) NULL ,
"SELL_ACCOUNT_CODE" VARCHAR2(255 BYTE) NULL ,
"SELL_PAY_STATE" NUMBER NULL ,
"SELL_PAY_DATE" DATE NULL ,
"SELL_INCOME_MONEY" NUMBER(16,2) NULL ,
"SELL_ACCRUED_MONEY" NUMBER(16,2) NULL ,
"REBATESTATUS" VARCHAR2(1 BYTE) NULL ,
"BUY_TOTAL" NUMBER(16,2) NULL ,
"SELL_TOTAL" NUMBER(16,2) NULL ,
"AUCTIONGOODS" VARCHAR2(500 BYTE) NULL ,
"MEMORANDUM" VARCHAR2(4000 BYTE) NULL ,
"BIG_IMAGE_HWRATIO" VARCHAR2(255 BYTE) NULL ,
"ISLOCK" VARCHAR2(1 BYTE) NULL ,
"CLOSE_MAN" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTION_KEY_WORDS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_KEY_WORDS";
CREATE TABLE "ZHAO"."AUCTION_KEY_WORDS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_PINYIN" VARCHAR2(255 CHAR) NULL ,
"CHARACTER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_KEY_WORDS" IS '拍品关键字表';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."NAME_PINYIN" IS '拼音名';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."CHARACTER_TYPE" IS '类型(0无 1:邮票类 2:钱币类 3:磁卡4:杂项 5:文献 6:其他）';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."IS_SHOW" IS '是否显示(0:否 1:显示通用菜单 3:显示集藏用品)';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_KEY_WORDS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_MAX_PRICES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_MAX_PRICES";
CREATE TABLE "ZHAO"."AUCTION_MAX_PRICES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"MAX_PRICE" NUMBER(16,2) DEFAULT 1.0  NULL ,
"PROXY_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AUCTION_TIME" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_MAX_PRICES" IS '用户最大出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."MAX_PRICE" IS '当前最高价';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."PROXY_PRICE" IS '当前代理价';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."AUCTION_TIME" IS '竞拍次数';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."NICKNAME" IS '设置代理价时的昵称';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_MAX_PRICES_BPLUS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_MAX_PRICES_BPLUS";
CREATE TABLE "ZHAO"."AUCTION_MAX_PRICES_BPLUS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"MAX_PRICE" NUMBER(16,2) DEFAULT 1.0  NULL ,
"PROXY_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AUCTION_TIME" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_MAX_PRICES_BPLUS" IS '用户最大出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."MAX_PRICE" IS '当前最高价';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."PROXY_PRICE" IS '当前代理价';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."AUCTION_TIME" IS '竞拍次数';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."NICKNAME" IS '设置代理价时的昵称';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_BPLUS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_MAX_PRICES_NEW
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_MAX_PRICES_NEW";
CREATE TABLE "ZHAO"."AUCTION_MAX_PRICES_NEW" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"MAX_PRICE" NUMBER(16,2) DEFAULT 1.0  NULL ,
"PROXY_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AUCTION_TIME" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_MAX_PRICES_NEW" IS '用户最大出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."MAX_PRICE" IS '当前最高价';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."PROXY_PRICE" IS '当前代理价';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."AUCTION_TIME" IS '竞拍次数';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."NICKNAME" IS '设置代理价时的昵称';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_MAX_PRICES_NEW"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PICTURES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PICTURES";
CREATE TABLE "ZHAO"."AUCTION_PICTURES" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"PATH" VARCHAR2(255 CHAR) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"PIC_ORDER" VARCHAR2(255 CHAR) NULL ,
"PIC_FILE_SIZE" NUMBER(16,2) DEFAULT 0  NULL ,
"OPERATOR_ID" NUMBER(38) NULL ,
"OPERATOR_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"PIC_FILE_SPEC" VARCHAR2(255 CHAR) NULL ,
"UPDATED_ID" NUMBER(38) NULL ,
"UPDATED_NAME" VARCHAR2(255 CHAR) NULL ,
"CLOUD_PIC_URL" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PICTURES" IS '拍品图片表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."PATH" IS '图片服务器路径';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."NAME" IS '图片名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."PIC_ORDER" IS '图片大小类型(A,B...)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."PIC_FILE_SIZE" IS '图片大小';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."OPERATOR_ID" IS '图片上传人ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."OPERATOR_NAME" IS '图片上传人名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."PIC_FILE_SPEC" IS '图片规格';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."UPDATED_ID" IS '图片修改人ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."UPDATED_NAME" IS '图片修改人名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES"."CLOUD_PIC_URL" IS '图片云地址';

-- ----------------------------
-- Table structure for AUCTION_PICTURES_COVERLOGS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PICTURES_COVERLOGS";
CREATE TABLE "ZHAO"."AUCTION_PICTURES_COVERLOGS" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_PIC" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"AUCTION_PIC_TYPE" NUMBER(1) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PICTURES_COVERLOGS" IS '图片覆盖日志记录';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_COVERLOGS"."AUCTION_ID" IS '关联拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_COVERLOGS"."AUCTION_PIC" IS '拍品图片名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_COVERLOGS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_COVERLOGS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_COVERLOGS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_COVERLOGS"."AUCTION_PIC_TYPE" IS '覆盖图片来源(0:拍品图片 1：商城图片)';

-- ----------------------------
-- Table structure for AUCTION_PICTURES_LOGS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PICTURES_LOGS";
CREATE TABLE "ZHAO"."AUCTION_PICTURES_LOGS" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_PIC" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_LOGS"."AUCTION_PIC" IS '拍品图片名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PICTURES_LOGS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for AUCTION_PRICE_MODIFIES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PRICE_MODIFIES";
CREATE TABLE "ZHAO"."AUCTION_PRICE_MODIFIES" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"PRICE_NEW" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PRICE_OLD" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PRICE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"MODIFY_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PRICE_MODIFIES" IS '拍品价格修改历史表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."PRICE_NEW" IS '当前价格';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."PRICE_OLD" IS '历史价格';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."PRICE" IS '输入的固定价格';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."PRICE_PERCENT" IS '价格百分比10%';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."MODIFY_TYPE" IS '修改类型';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICE_MODIFIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PRICES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PRICES";
CREATE TABLE "ZHAO"."AUCTION_PRICES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"BID" NUMBER(16,2) DEFAULT 0.0  NULL ,
"IS_PROXY" NUMBER(1) DEFAULT 0  NULL ,
"IS_MAX" NUMBER(1) DEFAULT 0  NULL ,
"IP" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(2000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PRICES" IS '用户出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."ID" IS '序列号';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."NICKNAME" IS '用户出价时使用的角色名';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."BID" IS '金额';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."IS_PROXY" IS '是否代理价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."IS_MAX" IS '是否最高价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."IP" IS 'IP';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."CREATED_AT" IS '制造厂';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PRICES_BPLUS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PRICES_BPLUS";
CREATE TABLE "ZHAO"."AUCTION_PRICES_BPLUS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"BID" NUMBER(16,2) DEFAULT 0.0  NULL ,
"IS_PROXY" NUMBER(1) DEFAULT 0  NULL ,
"IS_MAX" NUMBER(1) DEFAULT 0  NULL ,
"IP" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(2000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PRICES_BPLUS" IS '用户出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."ID" IS '序列号';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."NICKNAME" IS '用户出价时使用的角色名';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."BID" IS '金额';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."IS_PROXY" IS '是否代理价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."IS_MAX" IS '是否最高价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."IP" IS 'IP';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."CREATED_AT" IS '制造厂';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_BPLUS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PRICES_PARTITION
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PRICES_PARTITION";
CREATE TABLE "ZHAO"."AUCTION_PRICES_PARTITION" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"BID" NUMBER(16,2) DEFAULT 0.0  NULL ,
"IS_PROXY" NUMBER(1) DEFAULT 0  NULL ,
"IS_MAX" NUMBER(1) DEFAULT 0  NULL ,
"IP" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(2000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PRICES_PARTITION" IS '用户出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."NICKNAME" IS '用户出价时使用的角色名';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."BID" IS '金额';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."IS_PROXY" IS '是否代理价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."IS_MAX" IS '是否最高价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."IP" IS 'IP';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID 4:香港 5：英文)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PRICES_PARTITION_BPLUS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS";
CREATE TABLE "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"BID" NUMBER(16,2) DEFAULT 0.0  NULL ,
"IS_PROXY" NUMBER(1) DEFAULT 0  NULL ,
"IS_MAX" NUMBER(1) DEFAULT 0  NULL ,
"IP" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(2000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS" IS '用户出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."NICKNAME" IS '用户出价时使用的角色名';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."BID" IS '金额';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."IS_PROXY" IS '是否代理价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."IS_MAX" IS '是否最高价(0否 1是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."IP" IS 'IP';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID 4:香港 5：英文)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PROMOTION
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PROMOTION";
CREATE TABLE "ZHAO"."AUCTION_PROMOTION" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"START_AT" DATE NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PROMOTION" IS '拍品促销表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROMOTION"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROMOTION"."APP_ID" IS '0:上海和WAP,如果是0则在上海站和wap显示,其它同理';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROMOTION"."START_AT" IS '活动开始时间,app_id设置生效时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROMOTION"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for AUCTION_PROPERTY
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PROPERTY";
CREATE TABLE "ZHAO"."AUCTION_PROPERTY" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NOT NULL ,
"CLASS_ID" NUMBER(38) NULL ,
"PROPERTY_ID" NUMBER(38) NULL ,
"IS_KEY" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"PROPERTY_NAME" VARCHAR2(255 BYTE) NULL ,
"PROPERTY_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"PROPERTY_NAME_GBK" VARCHAR2(255 BYTE) NULL ,
"PROPERTY_SET_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PROPERTY" IS '拍品属性';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."CLASS_ID" IS '品种编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."PROPERTY_ID" IS '属性编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."IS_KEY" IS '关键属性（0：否 1：是）';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."PROPERTY_NAME" IS '属性名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."PROPERTY_NAME_EN" IS '属性名称英文';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."PROPERTY_NAME_GBK" IS '属性名称繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROPERTY"."PROPERTY_SET_ID" IS '属性集编号';

-- ----------------------------
-- Table structure for AUCTION_PROXY_PRICES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PROXY_PRICES";
CREATE TABLE "ZHAO"."AUCTION_PROXY_PRICES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"PROXY_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PROXY_PRICES" IS '用户代理出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."PROXY_PRICE" IS '当前代理价';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."NICKNAME" IS '设置代理价时的昵称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."APP_ID" IS '设置代理价时的app_id(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_PROXY_PRICES_BPLUS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_PROXY_PRICES_BPLUS";
CREATE TABLE "ZHAO"."AUCTION_PROXY_PRICES_BPLUS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"PROXY_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_PROXY_PRICES_BPLUS" IS '用户代理出价记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."USER_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."PROXY_PRICE" IS '当前代理价';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."NICKNAME" IS '设置代理价时的昵称';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."APP_ID" IS '设置代理价时的app_id(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_PROXY_PRICES_BPLUS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_SOURCES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_SOURCES";
CREATE TABLE "ZHAO"."AUCTION_SOURCES" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(50 BYTE) NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"DESCR" VARCHAR2(1000 CHAR) NULL ,
"DESCR_EN" VARCHAR2(1000 CHAR) NULL ,
"DESCR_GBK" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATE_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_SOURCES" IS '商户来源表';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."NAME" IS '商户中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."IS_SHOW" IS '是否在客户端显示（0：不显示，1：显示）';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."NAME_EN" IS '商户英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."NAME_GBK" IS '商户繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."DESCR" IS '商户中文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."DESCR_EN" IS '商户英文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."DESCR_GBK" IS '商户繁体描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."STATUS" IS '状态（0：不可以，1：可用）';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SOURCES"."UPDATE_AT" IS '更改时间';

-- ----------------------------
-- Table structure for AUCTION_SPECIAL_TOPICS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_SPECIAL_TOPICS";
CREATE TABLE "ZHAO"."AUCTION_SPECIAL_TOPICS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 1  NULL ,
"IS_PREVIEW" NUMBER(1) DEFAULT 0  NULL ,
"BIND_INDEX" NUMBER(1) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"DESCR" VARCHAR2(1000 CHAR) NULL ,
"DESCR_EN" VARCHAR2(1000 CHAR) NULL ,
"DESCR_GBK" VARCHAR2(1000 CHAR) NULL ,
"BUY_SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"SELL_SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"KEYWORD" VARCHAR2(255 BYTE) NULL ,
"KEYWORD_EN" VARCHAR2(255 BYTE) NULL ,
"KEYWORD_GBK" VARCHAR2(255 BYTE) NULL ,
"FOCUS_LINK" VARCHAR2(500 BYTE) NULL ,
"BG_LINK" VARCHAR2(500 BYTE) NULL ,
"BANNER_LINK" VARCHAR2(500 BYTE) NULL ,
"START_COLLECTION_AT" DATE NULL ,
"START_PREVIEW_AT" DATE NULL ,
"CATEGORY" NUMBER NULL ,
"RECOMMEND" VARCHAR2(4000 BYTE) NULL ,
"END_COLLECTION_AT" DATE NULL ,
"END_PREVIEW_AT" DATE NULL ,
"CSS" VARCHAR2(500 BYTE) NULL ,
"SUBJECT_SUMMARY" VARCHAR2(2000 CHAR) NULL ,
"SUBJECT_SUMMARY_GBK" VARCHAR2(2000 CHAR) NULL ,
"BG_CSS" VARCHAR2(500 BYTE) NULL ,
"BANNER_LINK_GBK" VARCHAR2(500 BYTE) NULL ,
"TAG" VARCHAR2(50 BYTE) DEFAULT 0  NULL ,
"IS_CLIENT_SHOW" CHAR(1 BYTE) DEFAULT 0  NULL ,
"CLIENT_SHOW_NAME" VARCHAR2(200 BYTE) NULL ,
"ORDER_NO" CHAR(1 BYTE) DEFAULT 1  NULL ,
"IS_FREE_MARKET" CHAR(1 BYTE) DEFAULT 0  NULL ,
"IS_SHAKE_LOTTERY" CHAR(1 BYTE) NULL ,
"DIRECTORY" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_SPECIAL_TOPICS" IS '客户端专场信息表';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."ID" IS 'id';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."NAME" IS '专场名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."START_AT" IS '开始时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."END_AT" IS '结束时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."IS_SHOW" IS '是否有效';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."IS_PREVIEW" IS '是否预展(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."AUCTION_TYPE" IS '竞拍类型(1竞拍 0一口价)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."DESCR" IS '中文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."DESCR_EN" IS '英文描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."DESCR_GBK" IS '繁体描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."BUY_SCORE_TIMES" IS '竞买方积分倍数';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."SELL_SCORE_TIMES" IS '委托方积分倍数';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."KEYWORD" IS '中文关键字';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."KEYWORD_EN" IS '英文关键字';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."KEYWORD_GBK" IS '繁体关键字';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."FOCUS_LINK" IS '焦点图片链接路径';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."BG_LINK" IS '背景图片链接路径';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."BANNER_LINK" IS '通栏图片链接路径';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."START_COLLECTION_AT" IS '征集开始时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."START_PREVIEW_AT" IS '预展开始时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."CATEGORY" IS '所属分类';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."RECOMMEND" IS '专场推荐拍品(用逗号分隔)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."END_COLLECTION_AT" IS '征集结束时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."END_PREVIEW_AT" IS '预展结束时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."CSS" IS '设置专场css样式';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."SUBJECT_SUMMARY" IS '专场总结描述简体';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."SUBJECT_SUMMARY_GBK" IS '专场总结描述繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."BG_CSS" IS '专场背景样式';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."BANNER_LINK_GBK" IS '通栏图片链接路径繁体';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."TAG" IS '书画标记';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."IS_CLIENT_SHOW" IS '是否在客户端显示(1是, 0否, 默认0)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."CLIENT_SHOW_NAME" IS '客户端专场名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."ORDER_NO" IS '排序字段1...9';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."IS_FREE_MARKET" IS '形式(1自淘, 0普通专场,2展售 默认0)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SPECIAL_TOPICS"."DIRECTORY" IS '目录';

-- ----------------------------
-- Table structure for AUCTION_STATUS_CHANGE_LOGS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS";
CREATE TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER NOT NULL ,
"OLD_STATUS" VARCHAR2(255 BYTE) NOT NULL ,
"NEW_STATUS" VARCHAR2(255 BYTE) NOT NULL ,
"UPDATED_AT" DATE NOT NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" IS '拍品状态/字段更新记录(用于扫描拍品更新并更新索引)';
COMMENT ON COLUMN "ZHAO"."AUCTION_STATUS_CHANGE_LOGS"."AUCTION_ID" IS '拍品id';
COMMENT ON COLUMN "ZHAO"."AUCTION_STATUS_CHANGE_LOGS"."OLD_STATUS" IS '旧状态';
COMMENT ON COLUMN "ZHAO"."AUCTION_STATUS_CHANGE_LOGS"."NEW_STATUS" IS '新状态(如果无变化,与旧状态一样)';
COMMENT ON COLUMN "ZHAO"."AUCTION_STATUS_CHANGE_LOGS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_STATUS_CHANGE_LOGS"."ADMIN_NAME" IS '操作人';

-- ----------------------------
-- Table structure for AUCTION_SUBSCRIPTION
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_SUBSCRIPTION";
CREATE TABLE "ZHAO"."AUCTION_SUBSCRIPTION" (
"ID" NUMBER(38) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"NAME" VARCHAR2(2000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) NULL ,
"MOMENT" DATE NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_NAME" VARCHAR2(255 BYTE) NULL ,
"IMAGE" VARCHAR2(255 BYTE) NULL ,
"PRICE" NUMBER(16,2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_SUBSCRIPTION" IS ' 拍品订阅';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."STATUS" IS '拍品状态(1:预展中 2:竞拍中 3: 已拍出 7:成交后退货)';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."MOMENT" IS '预展中:PREVIEW_AT; 竞拍中:START_AT; 成交:END_AT';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."AUCTION_CATEGORY_ID" IS '分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."AUCTION_CHARACTER_NAME" IS '品相名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."IMAGE" IS '拍品图片';
COMMENT ON COLUMN "ZHAO"."AUCTION_SUBSCRIPTION"."PRICE" IS '预展中:INITIAL_PRICE; 竞拍中:AUCTION_MAX_PRICES; 成交:END_PRICE';

-- ----------------------------
-- Table structure for AUCTION_TRANSLATES
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_TRANSLATES";
CREATE TABLE "ZHAO"."AUCTION_TRANSLATES" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_TRANSLATES" IS '拍品翻译表';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."ADMIN_ID" IS '翻译人员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."ADMIN_NAME" IS '翻译人员';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."STATUS" IS '状态(0:未翻译 1:自动翻译未确认 2:已翻译 3:翻译后修改)';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_TRANSLATES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTION_UPDATE_LOGS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_UPDATE_LOGS";
CREATE TABLE "ZHAO"."AUCTION_UPDATE_LOGS" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"CONTRACT_STATUS" VARCHAR2(255 BYTE) NULL ,
"AUCTION_CHARACTER_OLD_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_ID" NUMBER(38) NULL ,
"AUCTION_CATEGORY_OLD_ID" NUMBER(38) NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"DESCR_OLD" VARCHAR2(4000 BYTE) NULL ,
"DESCR" VARCHAR2(4000 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"NAME_OLD" VARCHAR2(4000 BYTE) NULL ,
"NAME_NEW" VARCHAR2(4000 BYTE) NULL ,
"DYNAMIC_ATTRIBUTE_OLD" VARCHAR2(4000 CHAR) NULL ,
"DYNAMIC_ATTRIBUTE_NEW" VARCHAR2(4000 CHAR) NULL ,
"AUCTION_SPECIAL_TOPIC_OLD_ID" NUMBER(38) NULL ,
"AUCTION_SPECIAL_TOPIC_ID" NUMBER(38) NULL ,
"AUCTION_OLD_TYPE" VARCHAR2(255 CHAR) NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) NULL ,
"REMARK_OLD" VARCHAR2(4000 BYTE) NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_UPDATE_LOGS" IS '拍品信息修改日志';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."CONTRACT_ID" IS '合同编号号';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."USER_NAME" IS '客户姓名';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."CONTRACT_STATUS" IS '合同状态(状态(0:合同登记完毕 1:业务整理合同交接 2:整理分配完毕 3:整理完毕 4:整理检查完毕 5:整理制图交接完毕 6:制图分配完毕 7:制图完毕 8:制图检查完毕 9:制审核交接 10:审核分配完毕 11:审核完毕 12:申请入库 13:上传完毕 14:结算完毕)';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_CHARACTER_OLD_ID" IS '旧拍品品相';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_CHARACTER_ID" IS '新拍品品相';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_CATEGORY_OLD_ID" IS '旧拍品分类';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_CATEGORY_ID" IS '新拍品分类';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."DESCR_OLD" IS '旧拍品描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."DESCR" IS '新拍品描述';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."UPDATED_MAN" IS '操作人';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."NAME_OLD" IS '旧拍品名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."NAME_NEW" IS '新拍品名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."DYNAMIC_ATTRIBUTE_OLD" IS '动态属性旧值';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."DYNAMIC_ATTRIBUTE_NEW" IS '动态属性新值';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_SPECIAL_TOPIC_OLD_ID" IS '旧的拍场';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_SPECIAL_TOPIC_ID" IS '新的拍场';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_OLD_TYPE" IS '旧的竞拍类型';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."AUCTION_TYPE" IS '新的竞拍类型';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."REMARK_OLD" IS '旧的费用备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPDATE_LOGS"."REMARK" IS '新的费用备注';

-- ----------------------------
-- Table structure for AUCTION_UPLOADS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_UPLOADS";
CREATE TABLE "ZHAO"."AUCTION_UPLOADS" (
"ID" NUMBER(38) NOT NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_UPLOADS" IS '拍品上挂记录表';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPLOADS"."START_AT" IS '开始结标时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPLOADS"."END_AT" IS '结束结标时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPLOADS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPLOADS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPLOADS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_UPLOADS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for AUCTION_WORDS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTION_WORDS";
CREATE TABLE "ZHAO"."AUCTION_WORDS" (
"ID" NUMBER(38) NOT NULL ,
"KEY" VARCHAR2(255 CHAR) NULL ,
"VALUE" VARCHAR2(255 CHAR) NULL ,
"PRIORITY" NUMBER(38) DEFAULT 0  NULL ,
"FREQUENCY" NUMBER(38) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTION_WORDS" IS '拍品翻译词库表';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."KEY" IS '翻译名(中文)';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."VALUE" IS '翻译名(英文)';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."PRIORITY" IS '优先级';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."FREQUENCY" IS '使用频率';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."ADMIN_ID" IS '操作人员ID';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."ADMIN_NAME" IS '操作人员名称';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTION_WORDS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for AUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."AUCTIONS";
CREATE TABLE "ZHAO"."AUCTIONS" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"NAME" VARCHAR2(2000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"AUDIT_STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_ID" NUMBER(38) NULL ,
"AUCTION_SPECIAL_TOPIC_ID" NUMBER(38) NULL ,
"INITIAL_PRICE" NUMBER(16,2) DEFAULT 1.0  NULL ,
"END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"BUY_CHARGE_FEE" NUMBER(6,2) DEFAULT 0.0  NULL ,
"HISTORY_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"IS_PREVIEW" NUMBER(1) DEFAULT 0  NULL ,
"PREVIEW_AT" DATE NULL ,
"UPLOAD_AT" DATE NULL ,
"CANCEL_AT" DATE NULL ,
"RETURN_AT" DATE NULL ,
"RETURN_REASON" VARCHAR2(255 CHAR) DEFAULT null  NULL ,
"RETURN_REMARKS" VARCHAR2(1000 CHAR) NULL ,
"IS_DELAY" NUMBER(1) DEFAULT 0  NULL ,
"RESALE_STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"RELATED_ID" NUMBER(38) NULL ,
"SETTLEMENT_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SETTLEMENT_AT" DATE NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"PIC_PATH" VARCHAR2(1000 CHAR) NULL ,
"LETTER" VARCHAR2(255 CHAR) NULL ,
"CODE" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(2000 CHAR) NULL ,
"NAME_GBK" VARCHAR2(2000 CHAR) NULL ,
"DESCR" VARCHAR2(4000 CHAR) NULL ,
"DESCR_EN" VARCHAR2(4000 CHAR) NULL ,
"DESCR_GBK" VARCHAR2(4000 CHAR) NULL ,
"BUY_SCORE_PARAM" NUMBER(6,2) DEFAULT 40.0  NULL ,
"SELL_SCORE_PARAM" NUMBER(6,2) DEFAULT 40.0  NULL ,
"BUY_SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"SELL_SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"RESALE_AUCTION" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"AUCTION_CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT (0)  NULL ,
"AUCTION_CHECK_REASON" VARCHAR2(1000 CHAR) NULL ,
"DESCR_CHARACTER" VARCHAR2(4000 CHAR) NULL ,
"DESCR_CHARACTER_GBK" VARCHAR2(4000 CHAR) NULL ,
"PREVIEW_OP_ID" NUMBER(38) NULL ,
"PREVIEW_OP" VARCHAR2(255 CHAR) NULL ,
"STORAGE_CHARGES" VARCHAR2(255 CHAR) NULL ,
"DYNAMIC_ATTRIBUTE" VARCHAR2(4000 CHAR) NULL ,
"CLOUD_PIC_URL" VARCHAR2(1000 CHAR) NULL ,
"AUCTION_SOURCE_ID" NUMBER(38) NULL ,
"IS_EXHIBITION_CONTRACT" NUMBER(1) NULL ,
"IS_EXHIBITION_SPECIAL_TOPIC" NUMBER(1) NULL ,
"ARTIST_ID" NUMBER(38) NULL ,
"EXIT_BAN" NUMBER(1) DEFAULT 0  NOT NULL ,
"STORAGE_ID" NUMBER DEFAULT 1  NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTIONS" IS '拍品表';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."STATUS" IS '拍品状态(0:未上传 8:已退拍 10:未预展 1:预展中 2:竞拍中 3: 已拍出 6:已流拍 11: 有理由撤拍 12：无理由撤拍)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_TYPE" IS '类型(1:竞拍 0:一口价)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUDIT_STATUS" IS '专家专业描述鉴定状态(1未鉴定 2鉴定中 3已采纳 4不采纳 5不需鉴定)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."START_AT" IS '起拍时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."END_AT" IS '结拍时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_CATEGORY_ID" IS '分类ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_CHARACTER_ID" IS '品级ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_SPECIAL_TOPIC_ID" IS '专场ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."INITIAL_PRICE" IS '起拍价';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."END_PRICE" IS '成交价';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."BUY_CHARGE_FEE" IS '竞买方手续费%';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."HISTORY_PRICE" IS '历史价格';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."IS_PREVIEW" IS '是否预展(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."PREVIEW_AT" IS '预展时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."UPLOAD_AT" IS '上传时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."CANCEL_AT" IS '撤拍时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."RETURN_AT" IS '退拍时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."RETURN_REASON" IS '退拍原因(0:未退拍 1:膺品 2:修补品 3:不适合上拍 4:品级不认可 5:名称不认可 6:其它)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."RETURN_REMARKS" IS '退拍备注';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."IS_DELAY" IS '是否延时(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."RESALE_STATUS" IS '重拍状态(1:非重拍 2:已重拍（已不用） 3:重拍拍品 4:不支付重拍拍品)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."RELATED_ID" IS '关联拍品ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."SETTLEMENT_STATUS" IS '结算状态(0:不可结算 2:待结算 3:结算中 1:已结算)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."SETTLEMENT_AT" IS '结算时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."LOGISTIC_DETAIL_ID" IS '物流发货单ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."PIC_PATH" IS '图片路径';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."LETTER" IS '纸钞英文字轨';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."CODE" IS '纸钞号码';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."DESCR" IS '中文描述';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."DESCR_EN" IS '英文描述';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."DESCR_GBK" IS '繁体描述';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."BUY_SCORE_PARAM" IS '竞买方积分参数';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."SELL_SCORE_PARAM" IS '委托方积分参数';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."BUY_SCORE_TIMES" IS '竞买方积分倍数';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."SELL_SCORE_TIMES" IS '委托方积分倍数';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."RESALE_AUCTION" IS '重拍状态 (0：未重拍 1：已重拍)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_CHECK_STATUS" IS '0:未检查 1：检查通过 2：检查不通过';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_CHECK_REASON" IS '检查不通过原因';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."DESCR_CHARACTER" IS '品级描述(中文)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."DESCR_CHARACTER_GBK" IS '品级描述(繁体)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."PREVIEW_OP_ID" IS '预展人ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."PREVIEW_OP" IS '预展人名称';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."STORAGE_CHARGES" IS '体积重量(0:小 1:中  2:大)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."DYNAMIC_ATTRIBUTE" IS '动态属性';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."CLOUD_PIC_URL" IS '图片云地址';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."AUCTION_SOURCE_ID" IS '拍品来源商户ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."IS_EXHIBITION_CONTRACT" IS '是否展售合同(1:是,0:否)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."IS_EXHIBITION_SPECIAL_TOPIC" IS '是否展售专场(1:是,0:否)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."ARTIST_ID" IS '艺术家ID';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."EXIT_BAN" IS '是否禁止出境 1:是,0:否';
COMMENT ON COLUMN "ZHAO"."AUCTIONS"."STORAGE_ID" IS '拍品所在仓库1:上海,2:北京,storages.id';

-- ----------------------------
-- Table structure for AUCTIONS_0723
-- ----------------------------
DROP TABLE "ZHAO"."AUCTIONS_0723";
CREATE TABLE "ZHAO"."AUCTIONS_0723" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"NAME" VARCHAR2(2000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) NULL ,
"AUDIT_STATUS" VARCHAR2(255 CHAR) NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_ID" NUMBER(38) NULL ,
"AUCTION_SPECIAL_TOPIC_ID" NUMBER(38) NULL ,
"INITIAL_PRICE" NUMBER(16,2) NULL ,
"END_PRICE" NUMBER(16,2) NULL ,
"BUY_CHARGE_FEE" NUMBER(6,2) NULL ,
"HISTORY_PRICE" NUMBER(16,2) NULL ,
"IS_PREVIEW" NUMBER(1) NULL ,
"PREVIEW_AT" DATE NULL ,
"UPLOAD_AT" DATE NULL ,
"CANCEL_AT" DATE NULL ,
"RETURN_AT" DATE NULL ,
"RETURN_REASON" VARCHAR2(255 CHAR) NULL ,
"RETURN_REMARKS" VARCHAR2(1000 CHAR) NULL ,
"IS_DELAY" NUMBER(1) NULL ,
"RESALE_STATUS" VARCHAR2(255 CHAR) NULL ,
"RELATED_ID" NUMBER(38) NULL ,
"SETTLEMENT_STATUS" VARCHAR2(255 CHAR) NULL ,
"SETTLEMENT_AT" DATE NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"PIC_PATH" VARCHAR2(1000 CHAR) NULL ,
"LETTER" VARCHAR2(255 CHAR) NULL ,
"CODE" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(2000 CHAR) NULL ,
"NAME_GBK" VARCHAR2(2000 CHAR) NULL ,
"DESCR" VARCHAR2(4000 CHAR) NULL ,
"DESCR_EN" VARCHAR2(4000 CHAR) NULL ,
"DESCR_GBK" VARCHAR2(4000 CHAR) NULL ,
"BUY_SCORE_PARAM" NUMBER(6,2) NULL ,
"SELL_SCORE_PARAM" NUMBER(6,2) NULL ,
"BUY_SCORE_TIMES" NUMBER(6,2) NULL ,
"SELL_SCORE_TIMES" NUMBER(6,2) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"RESALE_AUCTION" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CHECK_STATUS" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CHECK_REASON" VARCHAR2(1000 CHAR) NULL ,
"DESCR_CHARACTER" VARCHAR2(4000 CHAR) NULL ,
"DESCR_CHARACTER_GBK" VARCHAR2(4000 CHAR) NULL ,
"PREVIEW_OP_ID" NUMBER(38) NULL ,
"PREVIEW_OP" VARCHAR2(255 CHAR) NULL ,
"STORAGE_CHARGES" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTIONS_0725
-- ----------------------------
DROP TABLE "ZHAO"."AUCTIONS_0725";
CREATE TABLE "ZHAO"."AUCTIONS_0725" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"NAME" VARCHAR2(2000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) NULL ,
"AUDIT_STATUS" VARCHAR2(255 CHAR) NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL ,
"AUCTION_CHARACTER_ID" NUMBER(38) NULL ,
"AUCTION_SPECIAL_TOPIC_ID" NUMBER(38) NULL ,
"INITIAL_PRICE" NUMBER(16,2) NULL ,
"END_PRICE" NUMBER(16,2) NULL ,
"BUY_CHARGE_FEE" NUMBER(6,2) NULL ,
"HISTORY_PRICE" NUMBER(16,2) NULL ,
"IS_PREVIEW" NUMBER(1) NULL ,
"PREVIEW_AT" DATE NULL ,
"UPLOAD_AT" DATE NULL ,
"CANCEL_AT" DATE NULL ,
"RETURN_AT" DATE NULL ,
"RETURN_REASON" VARCHAR2(255 CHAR) NULL ,
"RETURN_REMARKS" VARCHAR2(1000 CHAR) NULL ,
"IS_DELAY" NUMBER(1) NULL ,
"RESALE_STATUS" VARCHAR2(255 CHAR) NULL ,
"RELATED_ID" NUMBER(38) NULL ,
"SETTLEMENT_STATUS" VARCHAR2(255 CHAR) NULL ,
"SETTLEMENT_AT" DATE NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"PIC_PATH" VARCHAR2(1000 CHAR) NULL ,
"LETTER" VARCHAR2(255 CHAR) NULL ,
"CODE" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(2000 CHAR) NULL ,
"NAME_GBK" VARCHAR2(2000 CHAR) NULL ,
"DESCR" VARCHAR2(4000 CHAR) NULL ,
"DESCR_EN" VARCHAR2(4000 CHAR) NULL ,
"DESCR_GBK" VARCHAR2(4000 CHAR) NULL ,
"BUY_SCORE_PARAM" NUMBER(6,2) NULL ,
"SELL_SCORE_PARAM" NUMBER(6,2) NULL ,
"BUY_SCORE_TIMES" NUMBER(6,2) NULL ,
"SELL_SCORE_TIMES" NUMBER(6,2) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"RESALE_AUCTION" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CHECK_STATUS" VARCHAR2(255 CHAR) NULL ,
"AUCTION_CHECK_REASON" VARCHAR2(1000 CHAR) NULL ,
"DESCR_CHARACTER" VARCHAR2(4000 CHAR) NULL ,
"DESCR_CHARACTER_GBK" VARCHAR2(4000 CHAR) NULL ,
"PREVIEW_OP_ID" NUMBER(38) NULL ,
"PREVIEW_OP" VARCHAR2(255 CHAR) NULL ,
"STORAGE_CHARGES" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for AUCTIONS_TEST
-- ----------------------------
DROP TABLE "ZHAO"."AUCTIONS_TEST";
CREATE TABLE "ZHAO"."AUCTIONS_TEST" (
"AUCTION_NO" NUMBER(38) NOT NULL ,
"AUCTION_NAME" VARCHAR2(2000 BYTE) NULL ,
"AUCTION_NAMEEN" VARCHAR2(2000 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"UPLOADAT" DATE NULL ,
"STATUS" VARCHAR2(255 BYTE) NULL ,
"STARTPRICE" NUMBER(16,2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."AUCTION_NAMEEN" IS '拍品英文名称';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."DESCRIPTION" IS '拍品描述';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."UPLOADAT" IS '上传时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."STATUS" IS '拍品状态(0:未上传 8:已退拍 10:未预展 1:预展中 2:竞拍中 3: 已拍出 6:已流拍 11: 有理由撤拍 12：无理由撤拍)
';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_TEST"."STARTPRICE" IS '起步价格';

-- ----------------------------
-- Table structure for AUCTIONS_VIRTUAL_STORAGE
-- ----------------------------
DROP TABLE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE";
CREATE TABLE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"BUSINESS_IS_RECEIVE" NUMBER(1) NULL ,
"BUSINESS_RECEIVE_AT" DATE NULL ,
"LOGISTICS_IS_RECEIVE" NUMBER(1) NULL ,
"LOGISTICS_RECEIVE_AT" DATE NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"BUSINESS_IS_REMIND" NUMBER(1) NULL ,
"STATUS" NUMBER(1) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE" IS '拍品虚拟仓库';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."BUSINESS_IS_RECEIVE" IS '业务部门是否已收到拍品(1:是 0:否)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."BUSINESS_RECEIVE_AT" IS '业务部门收到拍品时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."LOGISTICS_IS_RECEIVE" IS '物流部门是否已收到拍品(1:是 0:否)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."LOGISTICS_RECEIVE_AT" IS '物流部门收到拍品时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."ADMIN_ID" IS '操作人';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."BUSINESS_IS_REMIND" IS '业务部门是否已提醒(1:是 0:否)';
COMMENT ON COLUMN "ZHAO"."AUCTIONS_VIRTUAL_STORAGE"."STATUS" IS '状态是否有效（0：无效，1：有效）';

-- ----------------------------
-- Table structure for AUDITS
-- ----------------------------
DROP TABLE "ZHAO"."AUDITS";
CREATE TABLE "ZHAO"."AUDITS" (
"ID" NUMBER(38) NOT NULL ,
"AUDITABLE_ID" NUMBER(38) NULL ,
"AUDITABLE_TYPE" VARCHAR2(255 CHAR) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_TYPE" VARCHAR2(255 CHAR) NULL ,
"USERNAME" VARCHAR2(255 CHAR) NULL ,
"ACTION" VARCHAR2(255 CHAR) NULL ,
"CHANGES" CLOB NULL ,
"VERSION" NUMBER(38) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"COMMENT" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."AUDITS" IS '系统操作日志表';
COMMENT ON COLUMN "ZHAO"."AUDITS"."AUDITABLE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."AUDITS"."AUDITABLE_TYPE" IS '关联对象实体';
COMMENT ON COLUMN "ZHAO"."AUDITS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."AUDITS"."USER_TYPE" IS '用户类型';
COMMENT ON COLUMN "ZHAO"."AUDITS"."USERNAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."AUDITS"."ACTION" IS '动作';
COMMENT ON COLUMN "ZHAO"."AUDITS"."CHANGES" IS '修改内容';
COMMENT ON COLUMN "ZHAO"."AUDITS"."VERSION" IS '版本';
COMMENT ON COLUMN "ZHAO"."AUDITS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for BACKUP_LOGISTIC_TYPE
-- ----------------------------
DROP TABLE "ZHAO"."BACKUP_LOGISTIC_TYPE";
CREATE TABLE "ZHAO"."BACKUP_LOGISTIC_TYPE" (
"ID" NUMBER NULL ,
"TYPE_ID" NUMBER NULL ,
"REGION_ID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for BANKS
-- ----------------------------
DROP TABLE "ZHAO"."BANKS";
CREATE TABLE "ZHAO"."BANKS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_TW" VARCHAR2(255 CHAR) NULL ,
"PINYIN" VARCHAR2(255 CHAR) NULL ,
"ABBREVIATION" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."BANKS" IS '银行表';
COMMENT ON COLUMN "ZHAO"."BANKS"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."BANKS"."NAME_EN" IS '英文名称';
COMMENT ON COLUMN "ZHAO"."BANKS"."NAME_TW" IS '台湾名称';
COMMENT ON COLUMN "ZHAO"."BANKS"."PINYIN" IS '拼音名称';
COMMENT ON COLUMN "ZHAO"."BANKS"."ABBREVIATION" IS '缩写';
COMMENT ON COLUMN "ZHAO"."BANKS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."BANKS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for BOOKINGS
-- ----------------------------
DROP TABLE "ZHAO"."BOOKINGS";
CREATE TABLE "ZHAO"."BOOKINGS" (
"ID" NUMBER(38) NOT NULL ,
"SOURCE_ID" NUMBER(38) NULL ,
"SOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"CARD_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CARD_ID" VARCHAR2(255 CHAR) NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"BOOKINT_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."BOOKINGS" IS '预约表';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."SOURCE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."SOURCE_TYPE" IS '关联对象(logistics, lends, user_refund_requests, settlement_despatches)';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."CARD_TYPE" IS '证件类型';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."CARD_ID" IS '证件号码';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."START_AT" IS '预约开始时间';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."END_AT" IS '预约结束时间';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."BOOKINGS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for CATEGORY_ATTRIBUTE
-- ----------------------------
DROP TABLE "ZHAO"."CATEGORY_ATTRIBUTE";
CREATE TABLE "ZHAO"."CATEGORY_ATTRIBUTE" (
"ID" NUMBER(38) NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"ATTRIBUTE" VARCHAR2(255 BYTE) NULL ,
"ATTRIBUTE_NAME" VARCHAR2(255 BYTE) NULL ,
"ATTRIBUTE_UNIT" VARCHAR2(255 BYTE) NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_OP" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."ID" IS '标识';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."CATEGORY_ID" IS '预备版块';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."ATTRIBUTE" IS '属性字段';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."ATTRIBUTE_NAME" IS '属性字段名称';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."ATTRIBUTE_UNIT" IS '属性字段单位';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CATEGORY_ATTRIBUTE"."CREATED_OP" IS '创建人';

-- ----------------------------
-- Table structure for CHAINED_ROWS
-- ----------------------------
DROP TABLE "ZHAO"."CHAINED_ROWS";
CREATE TABLE "ZHAO"."CHAINED_ROWS" (
"OWNER_NAME" VARCHAR2(30 BYTE) NULL ,
"TABLE_NAME" VARCHAR2(30 BYTE) NULL ,
"CLUSTER_NAME" VARCHAR2(30 BYTE) NULL ,
"PARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"SUBPARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"HEAD_ROWID" VARCHAR2(30 BYTE) NULL ,
"ANALYZE_TIMESTAMP" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CITY
-- ----------------------------
DROP TABLE "ZHAO"."CITY";
CREATE TABLE "ZHAO"."CITY" (
"PROVINCE_NAME" VARCHAR2(50 BYTE) NULL ,
"CITY_NAME" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CLASS_AREA
-- ----------------------------
DROP TABLE "ZHAO"."CLASS_AREA";
CREATE TABLE "ZHAO"."CLASS_AREA" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLASS_AREA" IS '品种区域';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."NAME" IS '区域名称';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."CLASS_AREA"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for CLASS_SUB
-- ----------------------------
DROP TABLE "ZHAO"."CLASS_SUB";
CREATE TABLE "ZHAO"."CLASS_SUB" (
"ID" NUMBER(38) NOT NULL ,
"CLASS_ID" NUMBER(38) NOT NULL ,
"SORT_NO" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NOT NULL ,
"NAME_GBK" VARCHAR2(255 BYTE) NOT NULL ,
"NAME_EN" VARCHAR2(255 BYTE) NULL ,
"PIC_PATH" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CLASS_TIME
-- ----------------------------
DROP TABLE "ZHAO"."CLASS_TIME";
CREATE TABLE "ZHAO"."CLASS_TIME" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLASS_TIME" IS '品种年代';
COMMENT ON COLUMN "ZHAO"."CLASS_TIME"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."CLASS_TIME"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CLASS_TIME"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."CLASS_TIME"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."CLASS_TIME"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for CLASS_TYPE
-- ----------------------------
DROP TABLE "ZHAO"."CLASS_TYPE";
CREATE TABLE "ZHAO"."CLASS_TYPE" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLASS_TYPE" IS '品种类型';
COMMENT ON COLUMN "ZHAO"."CLASS_TYPE"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."CLASS_TYPE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CLASS_TYPE"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."CLASS_TYPE"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."CLASS_TYPE"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for CLASSES
-- ----------------------------
DROP TABLE "ZHAO"."CLASSES";
CREATE TABLE "ZHAO"."CLASSES" (
"ID" NUMBER(38) NOT NULL ,
"TYPE_ID" NUMBER(38) NULL ,
"CHI_NO" VARCHAR2(255 BYTE) NULL ,
"CHI_NO_GBK" VARCHAR2(255 BYTE) NULL ,
"CHI_NO_EN" VARCHAR2(255 BYTE) NULL ,
"NAME" VARCHAR2(1000 BYTE) NOT NULL ,
"NAME_GBK" VARCHAR2(1000 BYTE) NOT NULL ,
"NAME_EN" VARCHAR2(1000 BYTE) NULL ,
"MID_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"MIN_NAME_GBK" VARCHAR2(255 BYTE) NOT NULL ,
"MIN_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"SHORT_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"SHORT_NAME_GBK" VARCHAR2(255 BYTE) NOT NULL ,
"SHORT_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"POPULAR_NAME" VARCHAR2(255 BYTE) NULL ,
"POPULAR_NAME_GBK" VARCHAR2(255 BYTE) NULL ,
"POPULAR_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"TAGS" VARCHAR2(2000 BYTE) NULL ,
"CATEGORY_ID" NUMBER(38) NOT NULL ,
"AREA_ID" NUMBER(38) NULL ,
"TIME_ID" NUMBER(38) NULL ,
"PIECES" NUMBER(38) NULL ,
"CIRCULATIONS" NUMBER(38) NULL ,
"ISSUANCE_DATE" DATE NULL ,
"SORT_NO" NUMBER(38) NULL ,
"PIC_PATH" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"BROWESE_NO" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLASSES" IS '品种';
COMMENT ON COLUMN "ZHAO"."CLASSES"."ID" IS '标识';
COMMENT ON COLUMN "ZHAO"."CLASSES"."TYPE_ID" IS '类型编号';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CHI_NO" IS '志号';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CHI_NO_GBK" IS '志号-繁体';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CHI_NO_EN" IS '志号-英文';
COMMENT ON COLUMN "ZHAO"."CLASSES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."CLASSES"."NAME_GBK" IS '名称-繁体';
COMMENT ON COLUMN "ZHAO"."CLASSES"."NAME_EN" IS '繁体-英文';
COMMENT ON COLUMN "ZHAO"."CLASSES"."MID_NAME" IS '中名称';
COMMENT ON COLUMN "ZHAO"."CLASSES"."MIN_NAME_GBK" IS '中名称-繁体';
COMMENT ON COLUMN "ZHAO"."CLASSES"."MIN_NAME_EN" IS '中名称-英文';
COMMENT ON COLUMN "ZHAO"."CLASSES"."SHORT_NAME" IS '短名称';
COMMENT ON COLUMN "ZHAO"."CLASSES"."SHORT_NAME_GBK" IS '短名称-繁体';
COMMENT ON COLUMN "ZHAO"."CLASSES"."SHORT_NAME_EN" IS '短名称-英文';
COMMENT ON COLUMN "ZHAO"."CLASSES"."POPULAR_NAME" IS '俗称';
COMMENT ON COLUMN "ZHAO"."CLASSES"."POPULAR_NAME_GBK" IS '俗称-繁体';
COMMENT ON COLUMN "ZHAO"."CLASSES"."POPULAR_NAME_EN" IS '俗称-英文';
COMMENT ON COLUMN "ZHAO"."CLASSES"."TAGS" IS 'TAGS';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CATEGORY_ID" IS '分类编号';
COMMENT ON COLUMN "ZHAO"."CLASSES"."AREA_ID" IS '区域编号';
COMMENT ON COLUMN "ZHAO"."CLASSES"."TIME_ID" IS '年代编号';
COMMENT ON COLUMN "ZHAO"."CLASSES"."PIECES" IS '全套数量';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CIRCULATIONS" IS '发行量';
COMMENT ON COLUMN "ZHAO"."CLASSES"."ISSUANCE_DATE" IS '???型日期';
COMMENT ON COLUMN "ZHAO"."CLASSES"."SORT_NO" IS '排序';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."CLASSES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CLASSES"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."CLASSES"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."CLASSES"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for CLASSES_TEMP
-- ----------------------------
DROP TABLE "ZHAO"."CLASSES_TEMP";
CREATE TABLE "ZHAO"."CLASSES_TEMP" (
"ID" NUMBER NULL ,
"MID_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"SHORT_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"POPULAR_NAME" VARCHAR2(255 BYTE) NULL ,
"TAGS" VARCHAR2(2000 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."MID_NAME" IS '中名称';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."SHORT_NAME" IS '短名称';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."POPULAR_NAME" IS '俗称';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."TAGS" IS 'TAGS';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."CLASSES_TEMP"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for CLIENT_CATEGORY_PATH
-- ----------------------------
DROP TABLE "ZHAO"."CLIENT_CATEGORY_PATH";
CREATE TABLE "ZHAO"."CLIENT_CATEGORY_PATH" (
"CATEGORY_ID" NUMBER NOT NULL ,
"CATEGORY_PATH" VARCHAR2(50 BYTE) NOT NULL ,
"NAME_PINYIN" VARCHAR2(255 BYTE) NULL ,
"ROOT_CATEGORY_ID" NUMBER NULL ,
"CATEGORY_PATH_CN" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."CLIENT_CATEGORY_PATH"."CATEGORY_ID" IS '分类ID';
COMMENT ON COLUMN "ZHAO"."CLIENT_CATEGORY_PATH"."CATEGORY_PATH" IS '分类子类路径(绝不可为空)';
COMMENT ON COLUMN "ZHAO"."CLIENT_CATEGORY_PATH"."NAME_PINYIN" IS '分类拼音名称(绝不可为空)';
COMMENT ON COLUMN "ZHAO"."CLIENT_CATEGORY_PATH"."ROOT_CATEGORY_ID" IS '根类别id';

-- ----------------------------
-- Table structure for CLIENT_ERROR_MSG
-- ----------------------------
DROP TABLE "ZHAO"."CLIENT_ERROR_MSG";
CREATE TABLE "ZHAO"."CLIENT_ERROR_MSG" (
"ID" NUMBER NOT NULL ,
"ERROR_CODE" VARCHAR2(20 BYTE) NULL ,
"ERROR_INFO" VARCHAR2(500 BYTE) NULL ,
"APP_ID" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLIENT_ERROR_MSG" IS '客户端错误信息配置表';
COMMENT ON COLUMN "ZHAO"."CLIENT_ERROR_MSG"."ERROR_CODE" IS '错误代码';
COMMENT ON COLUMN "ZHAO"."CLIENT_ERROR_MSG"."ERROR_INFO" IS '错误描述';
COMMENT ON COLUMN "ZHAO"."CLIENT_ERROR_MSG"."APP_ID" IS '客户端标识,0:网站 2:客户端';

-- ----------------------------
-- Table structure for CLIENT_FOCUS_CONFIG
-- ----------------------------
DROP TABLE "ZHAO"."CLIENT_FOCUS_CONFIG";
CREATE TABLE "ZHAO"."CLIENT_FOCUS_CONFIG" (
"ID" NUMBER NOT NULL ,
"FOCUS_TYPE" VARCHAR2(20 BYTE) NULL ,
"FOCUS_KEY" VARCHAR2(200 BYTE) NULL ,
"FOCUS_VALUE" VARCHAR2(200 BYTE) NULL ,
"FOCUS_IMAGE" VARCHAR2(200 BYTE) NULL ,
"FOCUS_URL" VARCHAR2(200 BYTE) NULL ,
"ORDER_NO" NUMBER NULL ,
"IS_USEABLE" CHAR(1 BYTE) DEFAULT 1  NULL ,
"CREATED_AT" DATE DEFAULT sysdate  NULL ,
"UPDATED_AT" DATE NULL ,
"TITLE" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLIENT_FOCUS_CONFIG" IS '客户端首页大图信息表';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."ID" IS 'id';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."FOCUS_TYPE" IS '类型(专场,分类,拍品,频道,关键字)';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."FOCUS_KEY" IS '值的KEY';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."FOCUS_VALUE" IS '子类型或值(场次,分类,拍品编号,频道名称,关键字)';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."FOCUS_IMAGE" IS '图片地址';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."FOCUS_URL" IS '内容链接地址';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."ORDER_NO" IS '排序(1...9)';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."IS_USEABLE" IS '是否可用,1可用0无效,默认1';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."CREATED_AT" IS '创建日期,默认当前日期';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."UPDATED_AT" IS '更新日期';
COMMENT ON COLUMN "ZHAO"."CLIENT_FOCUS_CONFIG"."TITLE" IS '标题';

-- ----------------------------
-- Table structure for CLIENT_USER_CONFIGURATIONS
-- ----------------------------
DROP TABLE "ZHAO"."CLIENT_USER_CONFIGURATIONS";
CREATE TABLE "ZHAO"."CLIENT_USER_CONFIGURATIONS" (
"ID" NUMBER NOT NULL ,
"CONFIG_ID" NUMBER NULL ,
"USER_ID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLIENT_USER_CONFIGURATIONS" IS '用户自定义设置表';
COMMENT ON COLUMN "ZHAO"."CLIENT_USER_CONFIGURATIONS"."CONFIG_ID" IS '设置ID';
COMMENT ON COLUMN "ZHAO"."CLIENT_USER_CONFIGURATIONS"."USER_ID" IS '用户ID';

-- ----------------------------
-- Table structure for CLIENT_USER_DEVICETOKEN
-- ----------------------------
DROP TABLE "ZHAO"."CLIENT_USER_DEVICETOKEN";
CREATE TABLE "ZHAO"."CLIENT_USER_DEVICETOKEN" (
"ID" NUMBER NOT NULL ,
"USER_ID" NUMBER NULL ,
"DEVICETOKEN" VARCHAR2(100 BYTE) NULL ,
"CREATED_AT" DATE DEFAULT SYSDATE  NULL ,
"UPDATED_AT" DATE DEFAULT SYSDATE  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CLIENT_USER_DEVICETOKEN" IS '用户设备令牌(deviceToken,主要是iphone设备)';
COMMENT ON COLUMN "ZHAO"."CLIENT_USER_DEVICETOKEN"."USER_ID" IS '用户id';
COMMENT ON COLUMN "ZHAO"."CLIENT_USER_DEVICETOKEN"."DEVICETOKEN" IS '设备令牌,由客户端生成后返回服务服务端';

-- ----------------------------
-- Table structure for COMEBACK_STOCK_RESALE
-- ----------------------------
DROP TABLE "ZHAO"."COMEBACK_STOCK_RESALE";
CREATE TABLE "ZHAO"."COMEBACK_STOCK_RESALE" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_REFUNDS_IDS" VARCHAR2(255 CHAR) NULL ,
"AUCTION_AMOUNT" NUMBER(38) DEFAULT 0  NULL ,
"SUM_END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"SUM_ACTUAL_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" NUMBER(1) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CREATE_AT" DATE NULL ,
"UPDATE_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."COMEBACK_STOCK_RESALE" IS '公司存货重拍表';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."USER_ID" IS '委托人ID';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."USER_NAME" IS '委托人名称';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."USER_REFUNDS_IDS" IS '退货表ID(多条数据以逗号分隔)';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."AUCTION_AMOUNT" IS '拍品总数';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."SUM_END_PRICE" IS '拍品结标总价';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."SUM_ACTUAL_PRICE" IS '拍品成交总价';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."STATUS" IS '重拍状态';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."CREATE_AT" IS '重拍时间';
COMMENT ON COLUMN "ZHAO"."COMEBACK_STOCK_RESALE"."UPDATE_AT" IS '修改时间';

-- ----------------------------
-- Table structure for COMEBACK_TRUST_CHARGE
-- ----------------------------
DROP TABLE "ZHAO"."COMEBACK_TRUST_CHARGE";
CREATE TABLE "ZHAO"."COMEBACK_TRUST_CHARGE" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_REFUNDS_IDS" VARCHAR2(255 CHAR) NULL ,
"PAYMENT_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" NUMBER(1) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"END_PRICE" NUMBER(16,2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."COMEBACK_TRUST_CHARGE" IS '退货委托收款表';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."USER_ID" IS '委托人ID';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."USER_NAME" IS '委托人称';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."USER_REFUNDS_IDS" IS '退货表ID(多条数据以逗号分隔)';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."PAYMENT_PRICE" IS '应收款总额';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."STATUS" IS '收款单状态(0:未收到 1:已作废 2:确认收讫)';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."COMEBACK_TRUST_CHARGE"."END_PRICE" IS '结标价总额';

-- ----------------------------
-- Table structure for COMMON_REMARK_CATEGORIES
-- ----------------------------
DROP TABLE "ZHAO"."COMMON_REMARK_CATEGORIES";
CREATE TABLE "ZHAO"."COMMON_REMARK_CATEGORIES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"DESCRPTION" VARCHAR2(1000 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."COMMON_REMARK_CATEGORIES" IS '备注分类表';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."DESCRPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARK_CATEGORIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for COMMON_REMARKS
-- ----------------------------
DROP TABLE "ZHAO"."COMMON_REMARKS";
CREATE TABLE "ZHAO"."COMMON_REMARKS" (
"ID" NUMBER(38) NOT NULL ,
"SOURCE_ID" NUMBER(38) NULL ,
"SOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"CUSTOM_TYPE" VARCHAR2(255 CHAR) NULL ,
"CONTENT" VARCHAR2(4000 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."COMMON_REMARKS" IS '操作备注(日志)表';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."SOURCE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."SOURCE_TYPE" IS '关联对象';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."CUSTOM_TYPE" IS '关联对象自定义类型';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."CONTENT" IS '备注内容';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."STATUS" IS '状态';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."COMMON_REMARKS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for COMPANY_FINANCE_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."COMPANY_FINANCE_DETAILS";
CREATE TABLE "ZHAO"."COMPANY_FINANCE_DETAILS" (
"ID" NUMBER NOT NULL ,
"MONEY" NUMBER(10,2) NULL ,
"USER_NAME" VARCHAR2(100 BYTE) NULL ,
"USER_ID" NUMBER(10) NULL ,
"IS_INCOME" CHAR(1 BYTE) NULL ,
"BIND_NO" VARCHAR2(100 BYTE) NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"FINANCE" VARCHAR2(100 BYTE) NULL ,
"RELATED_ID" NUMBER NULL ,
"MONEY_TYPE" CHAR(1 BYTE) NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CONTRACT_ASSIGNS
-- ----------------------------
DROP TABLE "ZHAO"."CONTRACT_ASSIGNS";
CREATE TABLE "ZHAO"."CONTRACT_ASSIGNS" (
"ID" NUMBER(38) NOT NULL ,
"TITLE" VARCHAR2(255 CHAR) NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"FROM_ID" NUMBER(38) NULL ,
"FROM_NAME" VARCHAR2(255 CHAR) NULL ,
"ASSIGNED_TO_ID" NUMBER(38) NULL ,
"ASSIGNED_TO_NAME" VARCHAR2(255 CHAR) NULL ,
"SUBMIT_ID" NUMBER(38) NULL ,
"SUBMIT_NAME" VARCHAR2(255 CHAR) NULL ,
"ASSIGN_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CONTRACT_ASSIGNS" IS '合同分配表';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."TITLE" IS '分配内容描述';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."FROM_ID" IS '任务分配人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."FROM_NAME" IS '任务分配人员名称';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."ASSIGNED_TO_ID" IS '指派操作人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."ASSIGNED_TO_NAME" IS '指派操作人员名称';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."SUBMIT_ID" IS '提交人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."SUBMIT_NAME" IS '提交人员名称';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."ASSIGN_TYPE" IS '操作类型 1:业务整理交接 2:整理分配 3:整理制图交接 4:制图分配 5:制图审核交接 6:审核分配';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."STATUS" IS '状态(1有效，0撤销)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ASSIGNS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for CONTRACT_ATTACHMENTS
-- ----------------------------
DROP TABLE "ZHAO"."CONTRACT_ATTACHMENTS";
CREATE TABLE "ZHAO"."CONTRACT_ATTACHMENTS" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"FILE_NAME" VARCHAR2(255 CHAR) NULL ,
"FILE_PATH" VARCHAR2(255 CHAR) NULL ,
"FILE_SIZE" VARCHAR2(255 CHAR) NULL ,
"FILE_TYPE" VARCHAR2(255 CHAR) NULL ,
"UPLOAD_OP_ID" NUMBER(38) NULL ,
"UPLOAD_OP" VARCHAR2(255 CHAR) NULL ,
"UPLOAD_DATE" DATE NULL ,
"UPDATE_OP_ID" NUMBER(38) NULL ,
"UPDATE_OP" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CONTRACT_ATTACHMENTS" IS '合同附件表';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."FILE_NAME" IS '文件名称';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."FILE_PATH" IS '文件路径';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."FILE_SIZE" IS '文件大小';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."FILE_TYPE" IS '文件类型';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."UPLOAD_OP_ID" IS '上传人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."UPLOAD_OP" IS '上传人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."UPLOAD_DATE" IS '上传时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."UPDATE_OP_ID" IS '最近更新人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."UPDATE_OP" IS '最近更新人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_ATTACHMENTS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for CONTRACT_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."CONTRACT_DETAILS";
CREATE TABLE "ZHAO"."CONTRACT_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"COLLATE_OP_ID" NUMBER(38) NULL ,
"COLLATE_OP" VARCHAR2(255 CHAR) NULL ,
"COLLATE_DATE" DATE NULL ,
"COLLATE_CHECK_OP_ID" NUMBER(38) NULL ,
"COLLATE_CHECK_OP" VARCHAR2(255 CHAR) NULL ,
"COLLATE_CHECK_DATE" DATE NULL ,
"DRAW_OP_ID" NUMBER(38) NULL ,
"DRAW_OP" VARCHAR2(255 CHAR) NULL ,
"DRAW_DATE" DATE NULL ,
"DRAW_CHECK_OP_ID" NUMBER(38) NULL ,
"DRAW_CHECK_OP" VARCHAR2(255 CHAR) NULL ,
"DRAW_CHECK_DATE" DATE NULL ,
"AUDIT_OP_ID" NUMBER(38) NULL ,
"AUDIT_OP" VARCHAR2(255 CHAR) NULL ,
"AUDIT_DATE" DATE NULL ,
"AUDIT_CHECK_OP_ID" NUMBER(38) NULL ,
"AUDIT_CHECK_OP" VARCHAR2(255 CHAR) NULL ,
"AUDIT_CHECK_DATE" DATE NULL ,
"CONSIGN_CHECK_OP_ID" NUMBER(38) NULL ,
"CONSIGN_CHECK_OP" VARCHAR2(255 CHAR) NULL ,
"CONSIGN_CHECK_DATE" DATE NULL ,
"CONSIGN_CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IN_STORAGE_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IN_STORAGE_ID" NUMBER(38) NULL ,
"IN_STORAGE_AT" DATE NULL ,
"UPLOAD_OP_ID" NUMBER(38) NULL ,
"UPLOAD_OP" VARCHAR2(255 CHAR) NULL ,
"UPLOAD_DATE" DATE NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"IS_RECEIVE_LIST" NUMBER(1) DEFAULT 0  NULL ,
"TRANSLATE_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"TRANSLATOR_ID" NUMBER(38) NULL ,
"TRANSLATOR_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"IN_STORAGE_OP" VARCHAR2(255 CHAR) NULL ,
"CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_CHECK_RECEIVE" NUMBER(38) DEFAULT 0  NULL ,
"COOPERATE_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CONTRACT_DETAILS" IS '合同操作明细表';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."USER_ID" IS '客户ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COLLATE_OP_ID" IS '最近整理人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COLLATE_OP" IS '最近整理人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COLLATE_DATE" IS '最近整理时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COLLATE_CHECK_OP_ID" IS '最近整理检查人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COLLATE_CHECK_OP" IS '最近整理检查人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COLLATE_CHECK_DATE" IS '最近整理检查时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."DRAW_OP_ID" IS '最近制图人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."DRAW_OP" IS '最近制图人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."DRAW_DATE" IS '最近制图时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."DRAW_CHECK_OP_ID" IS '最近制图检查人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."DRAW_CHECK_OP" IS '最近制图检查人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."DRAW_CHECK_DATE" IS '最近制图检查时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."AUDIT_OP_ID" IS '最近审核人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."AUDIT_OP" IS '最近审核人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."AUDIT_DATE" IS '最近审核时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."AUDIT_CHECK_OP_ID" IS '最近审核检查人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."AUDIT_CHECK_OP" IS '最近审核检查人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."AUDIT_CHECK_DATE" IS '最近审核检查时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CONSIGN_CHECK_OP_ID" IS '最近委托确认人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CONSIGN_CHECK_OP" IS '最近委托确认人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CONSIGN_CHECK_DATE" IS '最近委托确认时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CONSIGN_CHECK_STATUS" IS '委托确认状态(0:未确认 1:通知委托方确认 2:已确认)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."IN_STORAGE_STATUS" IS '入库状态(0:未申请 1:已申请 2 已入库)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."IN_STORAGE_ID" IS '申请入库人ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."IN_STORAGE_AT" IS '申请入库时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."UPLOAD_OP_ID" IS '最近上传人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."UPLOAD_OP" IS '最近上传人员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."UPLOAD_DATE" IS '最近上传时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."IS_RECEIVE_LIST" IS '是否接收清单(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."TRANSLATE_STATUS" IS '翻译状态(0:未翻译 1:翻译中, 2:翻译)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."TRANSLATOR_ID" IS '翻译员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."TRANSLATOR_NAME" IS '翻译员';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."STATUS" IS '状态(0:合同登记完毕 1:业务整理合同交接 2:整理分配完毕 3:整理完毕 4:整理检查完毕 5:整理制图交接完毕 6:制图分配完毕 7:制图完毕 8:制图检查完毕 9:制审核交接 10:审核分配完毕 11:审核完毕 12:申请入库 13:上传完毕 14:结算完毕)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."IN_STORAGE_OP" IS '申请入库人名称';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."CHECK_STATUS" IS '0:未检查 1：检查通过 2：检查不通过 3:修改后提交';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."IS_CHECK_RECEIVE" IS '0:未查收 1：已查收  2:已交接';
COMMENT ON COLUMN "ZHAO"."CONTRACT_DETAILS"."COOPERATE_STATUS" IS '合作整理状态(0:登记完毕  1：整理完毕  2：制图完毕(提交)  3：业务检查完毕 4：收到拍品 5：拍品交接完毕  6：整理制图检查完毕  7：核对完毕(英文))';

-- ----------------------------
-- Table structure for CONTRACT_SETTINGS
-- ----------------------------
DROP TABLE "ZHAO"."CONTRACT_SETTINGS";
CREATE TABLE "ZHAO"."CONTRACT_SETTINGS" (
"ID" NUMBER(38) NOT NULL ,
"USER_LEVEL" NUMBER(38) DEFAULT 0  NULL ,
"LIMIT_CROSS_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"LIMIT_COLLATE_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"LIMIT_DRAW_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"LIMIT_AUDIT_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"LIMIT_STORAGE_CROSS_DAYS" NUMBER(38) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CONTRACT_SETTINGS" IS '合同时间设置表';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."USER_LEVEL" IS '委托方等级';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."LIMIT_CROSS_DAYS" IS '完成交接天数';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."LIMIT_COLLATE_DAYS" IS '完成整理天数';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."LIMIT_DRAW_DAYS" IS '完成制图天数';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."LIMIT_AUDIT_DAYS" IS '完成审核天数';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."LIMIT_STORAGE_CROSS_DAYS" IS '完成入库交接天数';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."ADMIN_NAME" IS '操作人';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SETTINGS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for CONTRACT_SMS
-- ----------------------------
DROP TABLE "ZHAO"."CONTRACT_SMS";
CREATE TABLE "ZHAO"."CONTRACT_SMS" (
"ID" NUMBER(38) NOT NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"MOBILE" NUMBER(38) NULL ,
"SMS_CONTENT" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"OPERATOR_ID" NUMBER(38) NULL ,
"OPERATOR_NAME" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CONTRACT_SMS" IS '合同短信';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."CONTRACT_ID" IS '合同号';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."USER_ID" IS '客户号';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."USER_NAME" IS '客户名';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."MOBILE" IS '手机号码';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."SMS_CONTENT" IS '短信内容';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."OPERATOR_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."CONTRACT_SMS"."OPERATOR_NAME" IS '操作人';

-- ----------------------------
-- Table structure for CONTRACTS
-- ----------------------------
DROP TABLE "ZHAO"."CONTRACTS";
CREATE TABLE "ZHAO"."CONTRACTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_LANG" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"USER_LEVEL" VARCHAR2(255 CHAR) NULL ,
"RETURN_SERVICE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"IS_FREE_CHARGE" NUMBER(1) DEFAULT 0  NULL ,
"CONTRACT_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SECRET" NUMBER(1) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CONTRACT_SIGNER_ID" NUMBER(38) NULL ,
"SIGNER_NAME" VARCHAR2(255 CHAR) NULL ,
"SIGN_DATE" DATE NULL ,
"IS_COLLATE_DRAW" NUMBER(1) DEFAULT 0  NULL ,
"FINISHED_DATE" DATE NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"SPECIAL_TOPIC_ID" NUMBER(38) NULL ,
"CHARGE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHARGE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CHARGE_RATE" NUMBER(10,5) DEFAULT 0.0  NULL ,
"EXPECT_COUNT" NUMBER(38) DEFAULT 0  NULL ,
"EXPECT_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"URGENT_REMARKS" VARCHAR2(1000 CHAR) NULL ,
"SETTLEMENT_REMARKS" VARCHAR2(1000 CHAR) NULL ,
"IS_DISCARD" NUMBER(1) DEFAULT 0  NULL ,
"DISCARD_REMARKS" VARCHAR2(1000 CHAR) NULL ,
"OPERATOR_ID" NUMBER(38) NULL ,
"OPERATOR_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"REGISTER_ID" NUMBER(38) NULL ,
"REGISTER_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"AGREEMENT_CHARGE_RATE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PARTNER_ID" NUMBER(38) DEFAULT 0  NULL ,
"IS_PARTNER" NUMBER(1) DEFAULT 0  NULL ,
"AUCTION_TYPE" VARCHAR2(255 CHAR) NULL ,
"CONSIGN_CHECK_URL" VARCHAR2(255 CHAR) NULL ,
"LIST_NO" VARCHAR2(255 CHAR) NULL ,
"COLLATE_MODE" NUMBER(1) NULL ,
"IS_EXHIBITION" NUMBER(1) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."CONTRACTS" IS '合同表';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."USER_LANG" IS '用户语言';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."USER_LEVEL" IS '委托签约时等级(15:五星会员 14:四星会员 13:三星会员 12:二星会员 11:一星会员 10:注册会员)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."RETURN_SERVICE_PERCENT" IS '结算返佣比例%';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."IS_FREE_CHARGE" IS '是否免汇费(0否 1是)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CONTRACT_TYPE" IS '合同类型(0:拍品合同 1:台湾合同 2商城合同)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."IS_SECRET" IS '是否保密(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."STATUS" IS '状态(0:已登记 1:执行中 2:执行完成)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CONTRACT_SIGNER_ID" IS '签订人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."SIGNER_NAME" IS '签订人员';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."SIGN_DATE" IS '签订时间';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."IS_COLLATE_DRAW" IS '是否合作整理制图(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."FINISHED_DATE" IS '要求完成时间';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CATEGORY_ID" IS '预设版块';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."SPECIAL_TOPIC_ID" IS '预设专场';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CHARGE_TYPE" IS '委托收费类型(0:按拍品分类默认百分比 1:指定本合同拍品统一百分比 2:指定本合同拍品统一委托佣金 3:一次性收取本合同委托佣金)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CHARGE_FEE" IS '委托收费金额';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CHARGE_RATE" IS '委托收费比例n%';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."EXPECT_COUNT" IS '预计数量';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."EXPECT_PRICE" IS '合同预估价';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."URGENT_REMARKS" IS '加急备注';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."SETTLEMENT_REMARKS" IS '结算备注';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."IS_DISCARD" IS '是否做废(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."DISCARD_REMARKS" IS '做废理由';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."OPERATOR_ID" IS '操作人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."OPERATOR_NAME" IS '操作人员名称';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."REGISTER_ID" IS '登记人员ID';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."REGISTER_NAME" IS '登记人员名称';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CREATED_AT" IS '创建时间(登记时间)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."AGREEMENT_CHARGE_RATE" IS '合作方协议服务费%';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."PARTNER_ID" IS '合作方ID(即user_id)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."IS_PARTNER" IS '是否合作分成(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."AUCTION_TYPE" IS '拍卖方式(1：竞拍 0：一口价)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."CONSIGN_CHECK_URL" IS '委托确认URL地址';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."LIST_NO" IS '合同清单号';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."COLLATE_MODE" IS '整理方式(0:传统整理 1:标准化整理)';
COMMENT ON COLUMN "ZHAO"."CONTRACTS"."IS_EXHIBITION" IS '展售合同(0:否 1:是)';

-- ----------------------------
-- Table structure for CUSTOMER
-- ----------------------------
DROP TABLE "ZHAO"."CUSTOMER";
CREATE TABLE "ZHAO"."CUSTOMER" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(225 BYTE) NULL ,
"AGE" NUMBER NULL ,
"SEX" VARCHAR2(2 BYTE) NULL ,
"ADDRESS" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DELIVER_FEE
-- ----------------------------
DROP TABLE "ZHAO"."DELIVER_FEE";
CREATE TABLE "ZHAO"."DELIVER_FEE" (
"ID" NUMBER(10) NOT NULL ,
"FOREIGN_DELIVER_ID" NUMBER(10) NULL ,
"DELIVER_REGION" NUMBER(10) NULL ,
"FEE" NUMBER(10,2) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DELIVER_REGIONS
-- ----------------------------
DROP TABLE "ZHAO"."DELIVER_REGIONS";
CREATE TABLE "ZHAO"."DELIVER_REGIONS" (
"ID" NUMBER(10) NOT NULL ,
"COUNTRY_ID" NUMBER(10) NULL ,
"FOREIGN_DELIVER_ID" NUMBER(10) NULL ,
"DELIVER_REGION" NUMBER(10) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DISCUSS_QUOTES
-- ----------------------------
DROP TABLE "ZHAO"."DISCUSS_QUOTES";
CREATE TABLE "ZHAO"."DISCUSS_QUOTES" (
"ID" NUMBER NOT NULL ,
"TYPE" NUMBER(2) NOT NULL ,
"BELONG_TYPE" NUMBER(2) NOT NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 0  NOT NULL ,
"CONTENT" CLOB NOT NULL ,
"ARTICLE_ID" NUMBER NOT NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."ID" IS '主键编号';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."TYPE" IS '评论类型，0：资讯评论，1：行情评论';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."BELONG_TYPE" IS '所属分类，0：邮票，1：钱币';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."STATUS" IS '状态，0：待审核，1：已审核，2：已删除';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."CONTENT" IS '内容';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."ARTICLE_ID" IS '资讯ID / 品种ID';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."DISCUSS_QUOTES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for DR_FS_FSENTRY
-- ----------------------------
DROP TABLE "ZHAO"."DR_FS_FSENTRY";
CREATE TABLE "ZHAO"."DR_FS_FSENTRY" (
"FSENTRY_PATH" VARCHAR2(2048 BYTE) NOT NULL ,
"FSENTRY_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"FSENTRY_DATA" BLOB NULL ,
"FSENTRY_LASTMOD" NUMBER(38) NOT NULL ,
"FSENTRY_LENGTH" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DR_FSENTRY
-- ----------------------------
DROP TABLE "ZHAO"."DR_FSENTRY";
CREATE TABLE "ZHAO"."DR_FSENTRY" (
"FSENTRY_PATH" VARCHAR2(2048 BYTE) NOT NULL ,
"FSENTRY_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"FSENTRY_DATA" BLOB NULL ,
"FSENTRY_LASTMOD" NUMBER(38) NOT NULL ,
"FSENTRY_LENGTH" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DR_PM_BINVAL
-- ----------------------------
DROP TABLE "ZHAO"."DR_PM_BINVAL";
CREATE TABLE "ZHAO"."DR_PM_BINVAL" (
"BINVAL_ID" VARCHAR2(64 BYTE) NOT NULL ,
"BINVAL_DATA" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DR_PM_BUNDLE
-- ----------------------------
DROP TABLE "ZHAO"."DR_PM_BUNDLE";
CREATE TABLE "ZHAO"."DR_PM_BUNDLE" (
"NODE_ID" RAW(16) NOT NULL ,
"BUNDLE_DATA" BLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DR_PM_NAMES
-- ----------------------------
DROP TABLE "ZHAO"."DR_PM_NAMES";
CREATE TABLE "ZHAO"."DR_PM_NAMES" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DR_PM_REFS
-- ----------------------------
DROP TABLE "ZHAO"."DR_PM_REFS";
CREATE TABLE "ZHAO"."DR_PM_REFS" (
"NODE_ID" RAW(16) NOT NULL ,
"REFS_DATA" BLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for EC_AUCTION_BOOK
-- ----------------------------
DROP TABLE "ZHAO"."EC_AUCTION_BOOK";
CREATE TABLE "ZHAO"."EC_AUCTION_BOOK" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"CONTACT" VARCHAR2(255 CHAR) NULL ,
"AUCTION_NO" NUMBER(38) NULL ,
"QUANTITY" NUMBER(10) NULL ,
"PRICE" NUMBER(16,2) NULL ,
"DEPOSIT" NUMBER(16,2) NULL ,
"STATUS" VARCHAR2(5 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"DEPOSIT_STATUS" VARCHAR2(5 CHAR) NULL ,
"REMARK" VARCHAR2(255 CHAR) NULL ,
"FINANCE_OP" VARCHAR2(255 CHAR) NULL ,
"FINANCE_DATE" DATE NULL ,
"SERVICE_OP" VARCHAR2(255 CHAR) NULL ,
"SERVICE_DATE" DATE NULL ,
"ORDER_ID" NUMBER(38) NULL ,
"SALE_NUMBER" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."EC_AUCTION_BOOK" IS '定金表';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."CONTACT" IS '联系方式';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."QUANTITY" IS '数量';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."PRICE" IS '单价';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."DEPOSIT" IS '保证金';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."STATUS" IS '状态（0：未处理 1：订单已接受 2：财务已拨款 3：补货已完成 4：补货已上架 5：补货已通知 6：已完成  7：订单已撤销 8：定金已扣除）';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."DEPOSIT_STATUS" IS '保证金状态（1:已冻结 2已归还客户 3已扣除）';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."FINANCE_OP" IS '财务操作人';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."FINANCE_DATE" IS '财务操作时间';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."SERVICE_OP" IS '投资理财专员';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."SERVICE_DATE" IS '投资理财专员操作时间';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."ORDER_ID" IS '对应订单id';
COMMENT ON COLUMN "ZHAO"."EC_AUCTION_BOOK"."SALE_NUMBER" IS '预订时当时的可售数量';

-- ----------------------------
-- Table structure for EDM
-- ----------------------------
DROP TABLE "ZHAO"."EDM";
CREATE TABLE "ZHAO"."EDM" (
"ID" NUMBER NOT NULL ,
"TITLE" VARCHAR2(100 CHAR) NOT NULL ,
"BANNER_PIC_LINK" VARCHAR2(255 CHAR) NOT NULL ,
"SPECIAL" VARCHAR2(50 CHAR) NOT NULL ,
"AUCTIONS" VARCHAR2(100 CHAR) NOT NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."EDM"."ID" IS '主键编号';
COMMENT ON COLUMN "ZHAO"."EDM"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."EDM"."BANNER_PIC_LINK" IS '通栏图片';
COMMENT ON COLUMN "ZHAO"."EDM"."SPECIAL" IS '关联专场';
COMMENT ON COLUMN "ZHAO"."EDM"."AUCTIONS" IS '推荐拍品编号逗号分开';
COMMENT ON COLUMN "ZHAO"."EDM"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."EDM"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for EMPLOYEES
-- ----------------------------
DROP TABLE "ZHAO"."EMPLOYEES";
CREATE TABLE "ZHAO"."EMPLOYEES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"LOGIN" VARCHAR2(255 CHAR) NULL ,
"PASSWORD" VARCHAR2(255 CHAR) NULL ,
"AUDIT_CATEGORY_IDS" VARCHAR2(4000 CHAR) NULL ,
"FILTER_CONTRACT_IDS" VARCHAR2(4000 CHAR) NULL ,
"POSITION" NUMBER(38) NULL ,
"REMARKS" CLOB NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 'enable'  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."NAME" IS '专家名称';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."LOGIN" IS '登录名';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."PASSWORD" IS '密码';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."AUDIT_CATEGORY_IDS" IS '鉴定分类';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."FILTER_CONTRACT_IDS" IS '排除合同';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."POSITION" IS '职位(1专家 2审核员 3业务员 4系统管理员)';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."STATUS" IS '状态(disable,enable)';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."EMPLOYEES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for EMPLOYES
-- ----------------------------
DROP TABLE "ZHAO"."EMPLOYES";
CREATE TABLE "ZHAO"."EMPLOYES" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"AGE" NUMBER NULL ,
"SEX" CHAR(1 BYTE) NULL ,
"TEL" VARCHAR2(20 BYTE) NULL ,
"EDU" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for EVENTS
-- ----------------------------
DROP TABLE "ZHAO"."EVENTS";
CREATE TABLE "ZHAO"."EVENTS" (
"EVENT_ID" NUMBER(19) NOT NULL ,
"EVENT_DATE" TIMESTAMP(6)  NULL ,
"TITLE" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for FEEDBACK
-- ----------------------------
DROP TABLE "ZHAO"."FEEDBACK";
CREATE TABLE "ZHAO"."FEEDBACK" (
"ID" NUMBER NOT NULL ,
"NICKNAME" VARCHAR2(100 BYTE) NULL ,
"TEL" VARCHAR2(100 BYTE) NULL ,
"CONTENT" VARCHAR2(4000 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"IP" VARCHAR2(255 BYTE) NULL ,
"USER_ID" NUMBER NULL ,
"PARENT_ID" NUMBER DEFAULT 0  NULL ,
"CLIENT_INFO" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for FEEDBACK_QUOTES
-- ----------------------------
DROP TABLE "ZHAO"."FEEDBACK_QUOTES";
CREATE TABLE "ZHAO"."FEEDBACK_QUOTES" (
"ID" NUMBER NOT NULL ,
"CONTACT" VARCHAR2(200 BYTE) NULL ,
"SUGGESTION" VARCHAR2(4000 BYTE) NULL ,
"TYPE" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for FINANCE_BANK_CURRENCIES
-- ----------------------------
DROP TABLE "ZHAO"."FINANCE_BANK_CURRENCIES";
CREATE TABLE "ZHAO"."FINANCE_BANK_CURRENCIES" (
"ID" NUMBER(38) NOT NULL ,
"COMPANY_BANK_ID" NUMBER(38) NULL ,
"CURRENCY_ID" NUMBER(38) NULL ,
"CURRENCY_SYMBOL" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."FINANCE_BANK_CURRENCIES" IS '公司银行帐户货币表';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANK_CURRENCIES"."COMPANY_BANK_ID" IS '公司银行帐户ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANK_CURRENCIES"."CURRENCY_ID" IS '货币ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANK_CURRENCIES"."CURRENCY_SYMBOL" IS '货币符号(HKD NTD USD EUR)';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANK_CURRENCIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANK_CURRENCIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for FINANCE_BANKS
-- ----------------------------
DROP TABLE "ZHAO"."FINANCE_BANKS";
CREATE TABLE "ZHAO"."FINANCE_BANKS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."FINANCE_BANKS" IS '银行表';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."NAME" IS '银行名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."STATUS" IS '状态(0:无效 1:正常)';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_BANKS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for FINANCE_COMPANY_BANKS
-- ----------------------------
DROP TABLE "ZHAO"."FINANCE_COMPANY_BANKS";
CREATE TABLE "ZHAO"."FINANCE_COMPANY_BANKS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"ACCOUNT" VARCHAR2(255 CHAR) NULL ,
"FINANCE_DEPOSIT_TYPE_ID" NUMBER(38) NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."FINANCE_COMPANY_BANKS" IS '公司银行帐户表';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."NAME" IS '银行名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."ACCOUNT" IS '银行帐号';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."FINANCE_DEPOSIT_TYPE_ID" IS '汇款方式ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."IS_SHOW" IS '是否显示(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_COMPANY_BANKS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for FINANCE_CURRENCIES
-- ----------------------------
DROP TABLE "ZHAO"."FINANCE_CURRENCIES";
CREATE TABLE "ZHAO"."FINANCE_CURRENCIES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"SYMBOL" VARCHAR2(255 CHAR) NULL ,
"UNIT" VARCHAR2(255 CHAR) NULL ,
"UNIT_EN" VARCHAR2(255 CHAR) NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."FINANCE_CURRENCIES" IS '货币表';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."NAME" IS '货币名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."NAME_EN" IS '货币名称(英文)';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."SYMBOL" IS '货币符号';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."UNIT" IS '货币单位';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."UNIT_EN" IS '货币单位(英文)';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_CURRENCIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for FINANCE_DEPOSIT_TYPES
-- ----------------------------
DROP TABLE "ZHAO"."FINANCE_DEPOSIT_TYPES";
CREATE TABLE "ZHAO"."FINANCE_DEPOSIT_TYPES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."FINANCE_DEPOSIT_TYPES" IS '用户汇款方式表';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."NAME" IS '汇款方式名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."NAME_EN" IS '英文名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."IS_SHOW" IS '是否显示(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_DEPOSIT_TYPES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for FINANCE_EXCHANGE_RATES
-- ----------------------------
DROP TABLE "ZHAO"."FINANCE_EXCHANGE_RATES";
CREATE TABLE "ZHAO"."FINANCE_EXCHANGE_RATES" (
"ID" NUMBER(38) NOT NULL ,
"FINANCE_CURRENCY_ID" NUMBER(38) DEFAULT 1  NULL ,
"SYMBOL" VARCHAR2(255 CHAR) DEFAULT 'USD'  NULL ,
"BUY_PRICE" NUMBER(10,5) DEFAULT 0.0  NULL ,
"SELL_PRICE" NUMBER(10,5) DEFAULT 0.0  NULL ,
"PUBLISHED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CURRENCY_NAME_EN" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."FINANCE_EXCHANGE_RATES" IS '货币汇率表';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."FINANCE_CURRENCY_ID" IS '货币ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."SYMBOL" IS '货币符号(HKD NTD USD EUR)';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."BUY_PRICE" IS '买入价';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."SELL_PRICE" IS '卖出价';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."PUBLISHED_AT" IS '公布时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."FINANCE_EXCHANGE_RATES"."CURRENCY_NAME_EN" IS '货币名称(英文)';

-- ----------------------------
-- Table structure for FOREIGN_DELIVER_TYPES
-- ----------------------------
DROP TABLE "ZHAO"."FOREIGN_DELIVER_TYPES";
CREATE TABLE "ZHAO"."FOREIGN_DELIVER_TYPES" (
"ID" NUMBER(10) NOT NULL ,
"NAME_EN" VARCHAR2(1000 BYTE) NULL ,
"NAME_SIMPLIFIED" VARCHAR2(1000 BYTE) NULL ,
"NAME_TRADITIONAL" VARCHAR2(1000 BYTE) NULL ,
"DESC_EN" VARCHAR2(1000 BYTE) NULL ,
"DESC_SIMPLIFIED" VARCHAR2(1000 BYTE) NULL ,
"DESC_TRADITIONAL" VARCHAR2(1000 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"STATUS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."FOREIGN_DELIVER_TYPES"."STATUS" IS '状态 0：不可用  1：可用';

-- ----------------------------
-- Table structure for FS_FSENTRY
-- ----------------------------
DROP TABLE "ZHAO"."FS_FSENTRY";
CREATE TABLE "ZHAO"."FS_FSENTRY" (
"FSENTRY_PATH" VARCHAR2(2048 BYTE) NOT NULL ,
"FSENTRY_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"FSENTRY_DATA" BLOB NULL ,
"FSENTRY_LASTMOD" NUMBER(38) NOT NULL ,
"FSENTRY_LENGTH" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for GUIDANCES
-- ----------------------------
DROP TABLE "ZHAO"."GUIDANCES";
CREATE TABLE "ZHAO"."GUIDANCES" (
"ID" NUMBER(10) NOT NULL ,
"USER_ID" NUMBER(10) NULL ,
"CONTENT" VARCHAR2(255 BYTE) NULL ,
"SUBJECT" VARCHAR2(30 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for HELP_CENTER
-- ----------------------------
DROP TABLE "ZHAO"."HELP_CENTER";
CREATE TABLE "ZHAO"."HELP_CENTER" (
"ID" NUMBER NOT NULL ,
"TITLE" VARCHAR2(1000 BYTE) NULL ,
"CONTENT" CLOB NULL ,
"TAGS" VARCHAR2(500 BYTE) NULL ,
"PARENT_ID" NUMBER NULL ,
"SORT_ORDER" NUMBER NULL ,
"SHOW_LEVEL" NUMBER NULL ,
"URL" VARCHAR2(2000 BYTE) NULL ,
"IS_SHOW" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"TITLE_GBK" VARCHAR2(1000 BYTE) NULL ,
"CONTENT_GBK" CLOB NULL ,
"TITLE_EN" VARCHAR2(1000 BYTE) NULL ,
"CONTENT_EN" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."TITLE" IS '帮助标题';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."CONTENT" IS '帮助内容';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."TAGS" IS '标签,用空格分隔';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."PARENT_ID" IS '父id';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."SHOW_LEVEL" IS '显示级别';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."URL" IS '帮助链接地址';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."IS_SHOW" IS '是否显示(1:显示 0:不显示)';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."CREATED_AT" IS '创建日期';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."UPDATED_AT" IS '更新日期';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."TITLE_GBK" IS '标题(繁体)';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."CONTENT_GBK" IS '内容(繁体)';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."TITLE_EN" IS '标题(英文)';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER"."CONTENT_EN" IS '内容(英文)';

-- ----------------------------
-- Table structure for HELP_CENTER_PAGE_CFG
-- ----------------------------
DROP TABLE "ZHAO"."HELP_CENTER_PAGE_CFG";
CREATE TABLE "ZHAO"."HELP_CENTER_PAGE_CFG" (
"ID" NUMBER(38) NOT NULL ,
"HELP_ITEM_ID" NUMBER(38) NULL ,
"PAGE_ID" NUMBER(38) NULL ,
"CLICK_COUNT" NUMBER(38) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HELP_CENTER_PAGE_CFG" IS '页面帮助项配置';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_CFG"."HELP_ITEM_ID" IS '帮助项id';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_CFG"."PAGE_ID" IS '页面标识id';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_CFG"."CLICK_COUNT" IS '页面标识id';

-- ----------------------------
-- Table structure for HELP_CENTER_PAGE_IDF
-- ----------------------------
DROP TABLE "ZHAO"."HELP_CENTER_PAGE_IDF";
CREATE TABLE "ZHAO"."HELP_CENTER_PAGE_IDF" (
"PAGE_ID" NUMBER(38) NOT NULL ,
"IDENTIFY" VARCHAR2(255 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(255 CHAR) NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HELP_CENTER_PAGE_IDF" IS '页面标识';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_IDF"."PAGE_ID" IS '页面标识id,主键';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_IDF"."IDENTIFY" IS '标识,page_id是根据此字段的hashcode设置';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_IDF"."DESCRIPTION" IS '描述';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_PAGE_IDF"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for HELP_CENTER_QUESTION_BIND
-- ----------------------------
DROP TABLE "ZHAO"."HELP_CENTER_QUESTION_BIND";
CREATE TABLE "ZHAO"."HELP_CENTER_QUESTION_BIND" (
"ID" NUMBER NOT NULL ,
"PARENT_ID" NUMBER NOT NULL ,
"HELP_ID" NUMBER NOT NULL ,
"TITLE" VARCHAR2(1000 BYTE) NULL ,
"TITLE_GBK" VARCHAR2(1000 BYTE) NULL ,
"TITLE_EN" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_QUESTION_BIND"."ID" IS 'id';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_QUESTION_BIND"."PARENT_ID" IS '问题父id';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_QUESTION_BIND"."HELP_ID" IS '问题子id';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_QUESTION_BIND"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_QUESTION_BIND"."TITLE_GBK" IS '标题(繁体)';
COMMENT ON COLUMN "ZHAO"."HELP_CENTER_QUESTION_BIND"."TITLE_EN" IS '标题(英文)';

-- ----------------------------
-- Table structure for HELP_KEYWORDS
-- ----------------------------
DROP TABLE "ZHAO"."HELP_KEYWORDS";
CREATE TABLE "ZHAO"."HELP_KEYWORDS" (
"ID" NUMBER(38) NOT NULL ,
"KEYWORD" VARCHAR2(255 CHAR) NULL ,
"COUNTS" NUMBER(38) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SEARCH_NUM" NUMBER(38) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HELP_KEYWORDS" IS '帮助中心关健字表';
COMMENT ON COLUMN "ZHAO"."HELP_KEYWORDS"."KEYWORD" IS '帮助中心关健字';
COMMENT ON COLUMN "ZHAO"."HELP_KEYWORDS"."COUNTS" IS '搜索帮助关健字数量统计';
COMMENT ON COLUMN "ZHAO"."HELP_KEYWORDS"."STATUS" IS '状态';
COMMENT ON COLUMN "ZHAO"."HELP_KEYWORDS"."SEARCH_NUM" IS '搜索关健字结果数量';
COMMENT ON COLUMN "ZHAO"."HELP_KEYWORDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."HELP_KEYWORDS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for HOSANE_ARTISTS
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_ARTISTS";
CREATE TABLE "ZHAO"."HOSANE_ARTISTS" (
"ARTISTID" NUMBER NULL ,
"ARTISTCODE" VARCHAR2(255 BYTE) NULL ,
"ARTISTNAME_CHS" VARCHAR2(255 BYTE) NULL ,
"ARTISTNAME_CHT" VARCHAR2(255 BYTE) NULL ,
"ARTISTNAME_ENG" VARCHAR2(255 BYTE) NULL ,
"ARTISTNAME_GER" VARCHAR2(255 BYTE) NULL ,
"ARTISTNAME_FRA" VARCHAR2(250 BYTE) NULL ,
"ARTISTNAME_JPN" VARCHAR2(250 BYTE) NULL ,
"ARTISTRESUME_CHS" CLOB NULL ,
"ARTISTRESUME_CHT" CLOB NULL ,
"ARTISTRESUME_ENG" CLOB NULL ,
"ARTISTRESUME_GER" CLOB NULL ,
"ARTISTRESUME_FRA" CLOB NULL ,
"ARTISTRESUME_JPN" CLOB NULL ,
"SHOWTAG" NUMBER DEFAULT 1  NULL ,
"ORDERCHAR" VARCHAR2(50 BYTE) NULL ,
"LASTMODIFY" DATE NULL ,
"ARTISTBORN" NUMBER NULL ,
"ARTISTDIE" NUMBER NULL ,
"ARTISTBORNOLD" VARCHAR2(50 BYTE) NULL ,
"ARTISTDIEOLD" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_ARTISTS" IS '艺术家表';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTCODE" IS '艺术家代码';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTNAME_CHS" IS '中文名';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTNAME_CHT" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTNAME_ENG" IS '英文名';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTNAME_GER" IS '德文名';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTNAME_FRA" IS '法文名';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTNAME_JPN" IS '日文名';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTRESUME_CHS" IS '简介(中文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTRESUME_CHT" IS '简介(繁体)';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTRESUME_ENG" IS '简介(英文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTRESUME_GER" IS '简介(德文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTRESUME_FRA" IS '简介(法文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTRESUME_JPN" IS '简介(日文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."SHOWTAG" IS '是否网站显示1:显示0：不显示';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ORDERCHAR" IS '字母顺序';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."LASTMODIFY" IS '最后修改时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTBORN" IS '生于';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTDIE" IS '死于';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTBORNOLD" IS 'hosane老表的生于';
COMMENT ON COLUMN "ZHAO"."HOSANE_ARTISTS"."ARTISTDIEOLD" IS 'hosane老表的死于';

-- ----------------------------
-- Table structure for HOSANE_AUCTION
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION";
CREATE TABLE "ZHAO"."HOSANE_AUCTION" (
"ID" NUMBER NULL ,
"AUCTIONNAME" VARCHAR2(4000 BYTE) NULL ,
"CONTRACTID" VARCHAR2(255 BYTE) NULL ,
"IS_BEAT" NUMBER DEFAULT 1  NULL ,
"LOT" NUMBER NULL ,
"IMAGE_NAME" VARCHAR2(255 BYTE) NULL ,
"DETAILEDIMAGENAME" VARCHAR2(4000 BYTE) NULL ,
"SCREENING" VARCHAR2(1000 BYTE) NULL ,
"DIGITALLIBRARY" VARCHAR2(1000 BYTE) NULL ,
"RESERVE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"HAMMERPRICE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"CATALOGFEE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"INSURANCE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"COMMISIONPERFEE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"TAXES" NUMBER(16,2) DEFAULT 0.00  NULL ,
"BOXFEE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"FREIGHT" NUMBER(16,2) DEFAULT 0.00  NULL ,
"STORAGECHARGES" NUMBER(16,2) DEFAULT 0.00  NULL ,
"OTHERFEE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"COMPANYAFFIXEDSHAL" NUMBER(16,2) DEFAULT 0.00  NULL ,
"AUCTIONREMARK" CLOB NULL ,
"STATUS" NUMBER DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"PRODUCTIONCOST" NUMBER(16,2) DEFAULT 0.00  NULL ,
"AUCTIONCODE" VARCHAR2(255 BYTE) NULL ,
"CATAGORYID" NUMBER NULL ,
"MATERIALID" NUMBER NULL ,
"ARTISTSID" NUMBER NULL ,
"BOUTIQUESTATE" NUMBER DEFAULT 0  NULL ,
"PRINTIMAGE" VARCHAR2(255 BYTE) NULL ,
"SPECIALCODE" VARCHAR2(40 BYTE) NULL ,
"UPDATE_AT" DATE NULL ,
"EVALUATE_LOW" NUMBER(16,2) DEFAULT 0.00  NULL ,
"EVALUATE_HIGH" NUMBER(16,2) DEFAULT 0.00  NULL ,
"ORDER_NUM" NUMBER NULL ,
"CLOSE_COST" NUMBER(16,2) DEFAULT 0.00  NULL ,
"MARKID" NUMBER(38) NULL ,
"BUYPERFEE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SALE" NUMBER DEFAULT 0  NULL ,
"CLOSE_TIME" DATE NULL ,
"AUCTION_STATUS" NUMBER DEFAULT 0  NULL ,
"AUCTIONNAME_CHT" NVARCHAR2(2000) NULL ,
"AUCTIONNAME_ENG" NVARCHAR2(2000) NULL ,
"AUCTIONREMARK_CHT" CLOB NULL ,
"AUCTIONREMARK_ENG" CLOB NULL ,
"BUY_ACCOUNT_CODE" VARCHAR2(255 BYTE) NULL ,
"BUY_STATUS" VARCHAR2(50 BYTE) DEFAULT 1  NULL ,
"MINUS_POINTS" NUMBER(16,2) DEFAULT 0.00  NULL ,
"RE_HAMMER_PRICE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"RE_COLSE_COST" NUMBER(16,2) DEFAULT 0.00  NULL ,
"HWRATIO" VARCHAR2(255 BYTE) NULL ,
"RECOMMEND_TAG" NUMBER NULL ,
"TRUSTPRICE1" NUMBER(16,2) DEFAULT 0.00  NULL ,
"TRUSTUSER1" VARCHAR2(255 BYTE) NULL ,
"TRUSTPRICE2" NUMBER(16,2) DEFAULT 0.00  NULL ,
"TRUSTUSER2" VARCHAR2(255 BYTE) NULL ,
"HITCOUNT" NUMBER NULL ,
"MYSELF_PIECE" NUMBER NULL ,
"BUY_PAY_DATE" DATE NULL ,
"BUY_INCOME_MONEY" NUMBER(16,2) DEFAULT 0.00  NULL ,
"BUY_ACCRUED_MONEY" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SELL_ACCOUNT_CODE" VARCHAR2(255 BYTE) NULL ,
"SELL_PAY_STATE" NUMBER NULL ,
"SELL_PAY_DATE" DATE NULL ,
"SELL_INCOME_MONEY" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SELL_ACCRUED_MONEY" NUMBER(16,2) DEFAULT 0.00  NULL ,
"REBATESTATUS" VARCHAR2(1 BYTE) NULL ,
"BUY_TOTAL" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SELL_TOTAL" NUMBER(16,2) DEFAULT 0.00  NULL ,
"AUCTIONGOODS" VARCHAR2(500 BYTE) NULL ,
"MEMORANDUM" VARCHAR2(4000 BYTE) NULL ,
"BIG_IMAGE_HWRATIO" VARCHAR2(255 BYTE) NULL ,
"ISLOCK" VARCHAR2(1 BYTE) DEFAULT 0  NULL ,
"CLOSE_MAN" VARCHAR2(255 BYTE) NULL ,
"STARTING_PRICE" NUMBER(16,2) DEFAULT 0.00  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_AUCTION" IS '拍品表';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONNAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CONTRACTID" IS '合同编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."IS_BEAT" IS '是否上拍(0:否1：是)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."LOT" IS 'LOT  ';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."IMAGE_NAME" IS '单图名称';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."DETAILEDIMAGENAME" IS '详细图片名称';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SCREENING" IS '场次';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."DIGITALLIBRARY" IS '库位';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."RESERVE" IS '底价';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."HAMMERPRICE" IS '落槌价';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CATALOGFEE" IS '图录费';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."INSURANCE" IS '保险费%';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."COMMISIONPERFEE" IS '委托佣金%';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."TAXES" IS '税金%';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BOXFEE" IS '包装/框费';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."FREIGHT" IS '运费';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."STORAGECHARGES" IS '仓储费';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."OTHERFEE" IS '其他费用';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."COMPANYAFFIXEDSHAL" IS '公司贴款';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONREMARK" IS '拍品说明';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."STATUS" IS '拍品状态(0:未上拍/1:已上拍/2:不上拍/3:已撤拍/4:成交/5:流拍/6:会后成交,7,会后流拍)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."PRODUCTIONCOST" IS '制作费';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONCODE" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CATAGORYID" IS '分类Code';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."MATERIALID" IS '材质ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."ARTISTSID" IS '艺术家id';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BOUTIQUESTATE" IS '是否精品(0 否，1 是)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."PRINTIMAGE" IS '印刷图片';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SPECIALCODE" IS '专场编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."UPDATE_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."EVALUATE_LOW" IS '估价低';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."EVALUATE_HIGH" IS '估价高';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."ORDER_NUM" IS '显示顺序';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CLOSE_COST" IS '成交价';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."MARKID" IS '牌号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUYPERFEE" IS '买方佣金%';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SALE" IS '打折%';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CLOSE_TIME" IS '成交时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTION_STATUS" IS '显示状态(1.现场,2会后)  ';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONNAME_CHT" IS '繁体拍品名称';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONNAME_ENG" IS '英文拍品名称';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONREMARK_CHT" IS '繁体拍品说明';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONREMARK_ENG" IS '英文拍品说明';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUY_ACCOUNT_CODE" IS '买方账单';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUY_STATUS" IS '买方收款状态(1.未收款,2.部分收款,3已收款)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."MINUS_POINTS" IS '减点';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."RE_HAMMER_PRICE" IS '会后落锤价';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."RE_COLSE_COST" IS '会后成交价';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."HWRATIO" IS '列表小图 高宽比（老表字段）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."RECOMMEND_TAG" IS '左面推荐（老表字段）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."TRUSTPRICE1" IS '委托价格1（老表字段）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."TRUSTUSER1" IS '（老表字段）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."TRUSTPRICE2" IS '委托价格2（老表字段）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."TRUSTUSER2" IS '（老表字段）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."HITCOUNT" IS '网站点击率（HOSANE_AUCTION_his）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."MYSELF_PIECE" IS '自己买自己';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUY_PAY_DATE" IS '买方支付日期';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUY_INCOME_MONEY" IS '买方付款金额';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUY_ACCRUED_MONEY" IS '买方未付金额';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SELL_ACCOUNT_CODE" IS '委托账单编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SELL_PAY_STATE" IS '委托方付款情况(1.未付款,2.部分付款,3已付款)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SELL_PAY_DATE" IS '委托方结算时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SELL_INCOME_MONEY" IS '委托方付款金额';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SELL_ACCRUED_MONEY" IS '委托方未付金额';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."REBATESTATUS" IS '返点状态( 1标示该拍品已近返点)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BUY_TOTAL" IS '买方小计';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."SELL_TOTAL" IS '委托小计';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."AUCTIONGOODS" IS '拍品品相';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."MEMORANDUM" IS '备忘录/备注';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."BIG_IMAGE_HWRATIO" IS '大图宽高比';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."ISLOCK" IS '财务是否锁定(0.未锁定,1锁定)锁定之后书记员不能修改拍品信息';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."CLOSE_MAN" IS '成交输入人';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION"."STARTING_PRICE" IS '起拍价';

-- ----------------------------
-- Table structure for HOSANE_AUCTION_CATAGORY
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION_CATAGORY";
CREATE TABLE "ZHAO"."HOSANE_AUCTION_CATAGORY" (
"ID" NUMBER NULL ,
"CHINESENAME" VARCHAR2(255 BYTE) NULL ,
"TRADITIONALNAME" VARCHAR2(255 BYTE) NULL ,
"ENGLISHNAME" VARCHAR2(255 BYTE) NULL ,
"GERMANNAME" VARCHAR2(255 BYTE) NULL ,
"FRENCHNAME" VARCHAR2(255 BYTE) NULL ,
"JAPANESENAME" VARCHAR2(255 BYTE) NULL ,
"IS_SHOW" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"CATAGORYCODE" NUMBER NULL ,
"PARENT_ID" NUMBER NULL ,
"DEPTID" NUMBER NULL ,
"MENUTAG" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(3000 BYTE) NULL ,
"CATAGORY_CODE" VARCHAR2(255 BYTE) NULL ,
"SPECIALCODE" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_AUCTION_CATAGORY" IS '拍品分类表';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."CHINESENAME" IS '分类名称（中文）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."TRADITIONALNAME" IS '分类名称（繁体）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."ENGLISHNAME" IS '分类名称（英文）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."GERMANNAME" IS '分类名称（德文）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."FRENCHNAME" IS '分类名称（法文）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."JAPANESENAME" IS '分类名称（日文）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."IS_SHOW" IS '是否显示0:不显示 1：显示';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."CATAGORYCODE" IS '分类ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."PARENT_ID" IS '父类ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."DEPTID" IS '部门ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."MENUTAG" IS '外网是否显示(以下泓盛老表字段)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."DESCRIPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."CATAGORY_CODE" IS '拍品分类id';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_CATAGORY"."SPECIALCODE" IS '拍场编号';

-- ----------------------------
-- Table structure for HOSANE_AUCTION_EXPAND
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION_EXPAND";
CREATE TABLE "ZHAO"."HOSANE_AUCTION_EXPAND" (
"AUCTION_CODE" VARCHAR2(500 BYTE) NOT NULL ,
"PUBLISH" VARCHAR2(4000 BYTE) NULL ,
"PUBLISH_CHT" VARCHAR2(4000 BYTE) NULL ,
"PUBLISH_ENG" VARCHAR2(4000 BYTE) NULL ,
"SIGNATURE" VARCHAR2(4000 BYTE) NULL ,
"SIGNATURE_CHT" VARCHAR2(4000 BYTE) NULL ,
"SIGNATURE_ENG" VARCHAR2(4000 BYTE) NULL ,
"FORM" VARCHAR2(4000 BYTE) NULL ,
"FORM_CHT" VARCHAR2(4000 BYTE) NULL ,
"FORM_ENG" VARCHAR2(4000 BYTE) NULL ,
"EXHIBIT" VARCHAR2(4000 BYTE) NULL ,
"EXHIBIT_CHT" VARCHAR2(4000 BYTE) NULL ,
"EXHIBIT_ENG" VARCHAR2(4000 BYTE) NULL ,
"PIECE_DIMENSION" VARCHAR2(4000 BYTE) NULL ,
"PIECE_DIMENSION_CHT" VARCHAR2(4000 BYTE) NULL ,
"PIECE_DIMENSION_ENG" VARCHAR2(4000 BYTE) NULL ,
"COMPOSE_TIME" VARCHAR2(400 BYTE) NULL ,
"AWARDS" VARCHAR2(4000 BYTE) NULL ,
"AWARDS_CHT" VARCHAR2(4000 BYTE) NULL ,
"AWARDS_ENG" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."AUCTION_CODE" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."PUBLISH" IS '出版';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."PUBLISH_CHT" IS '出版 繁体';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."PUBLISH_ENG" IS '出版英文';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."SIGNATURE" IS '签名';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."SIGNATURE_CHT" IS '签名繁体';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."SIGNATURE_ENG" IS '签名英文';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."FORM" IS '形式';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."FORM_CHT" IS '形式繁体';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."FORM_ENG" IS '形式英文';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."EXHIBIT" IS '展览';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."EXHIBIT_CHT" IS '展览繁体';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."EXHIBIT_ENG" IS '展览英文';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."PIECE_DIMENSION" IS '尺寸';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."PIECE_DIMENSION_CHT" IS '尺寸繁体';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."PIECE_DIMENSION_ENG" IS '尺寸英文';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."COMPOSE_TIME" IS '创作年代';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_EXPAND"."AWARDS" IS '获奖记录';

-- ----------------------------
-- Table structure for HOSANE_AUCTION_MATERIAL
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION_MATERIAL";
CREATE TABLE "ZHAO"."HOSANE_AUCTION_MATERIAL" (
"ID" NUMBER NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(50 BYTE) NULL ,
"IS_SHOW" NUMBER NULL ,
"NAME_CHT" VARCHAR2(255 BYTE) NULL ,
"NAME_ENG" VARCHAR2(255 BYTE) NULL ,
"NAME_GER" VARCHAR2(255 BYTE) NULL ,
"NAME_FRA" VARCHAR2(255 BYTE) NULL ,
"NAME_JPN" VARCHAR2(255 BYTE) NULL ,
"CODE" VARCHAR2(255 BYTE) NULL ,
"NAME_PY" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for HOSANE_AUCTION_REGISTER
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION_REGISTER";
CREATE TABLE "ZHAO"."HOSANE_AUCTION_REGISTER" (
"ID" NUMBER NULL ,
"ZHAOID" NUMBER NULL ,
"HOSANEID" NUMBER NULL ,
"SEASONCODE" VARCHAR2(200 BYTE) NULL ,
"SPECIALCODE" VARCHAR2(200 BYTE) NULL ,
"STATUS" CHAR(1 BYTE) NULL ,
"CREATETIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_AUCTION_REGISTER" IS '赵涌在线客户关注hosane拍场';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."ZHAOID" IS '赵涌在线id';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."HOSANEID" IS 'hosaneid';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."SEASONCODE" IS '拍季编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."SPECIALCODE" IS '拍场编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."STATUS" IS '是否有效状态 0否 1是';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_REGISTER"."CREATETIME" IS '创建时间';

-- ----------------------------
-- Table structure for HOSANE_AUCTION_SPECAIL
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION_SPECAIL";
CREATE TABLE "ZHAO"."HOSANE_AUCTION_SPECAIL" (
"ID" NUMBER NULL ,
"SPECIALNAME" VARCHAR2(255 BYTE) NULL ,
"SEASONID" VARCHAR2(255 BYTE) NULL ,
"IMAGE" VARCHAR2(255 BYTE) NULL ,
"AUCTIONTIME" DATE NULL ,
"STATUS" NUMBER DEFAULT 1001  NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL ,
"IS_SHOW" NUMBER DEFAULT 0  NULL ,
"INTERNETMENU" NUMBER DEFAULT 0  NULL ,
"ADMINID" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"SPECIALCODE" VARCHAR2(255 BYTE) NULL ,
"ADDRESS" VARCHAR2(255 BYTE) NULL ,
"PREVIEW" VARCHAR2(4000 BYTE) NULL ,
"NAME_GBK" VARCHAR2(255 BYTE) NULL ,
"ADDRESS_GBK" VARCHAR2(4000 BYTE) NULL ,
"PREVIEW_GBK" VARCHAR2(4000 BYTE) NULL ,
"REMARK_GBK" VARCHAR2(4000 BYTE) NULL ,
"DEPTCODE" NUMBER NULL ,
"NAME_ENG" VARCHAR2(255 BYTE) NULL ,
"REMARK_ENG" VARCHAR2(4000 BYTE) NULL ,
"ADDRESS_ENG" VARCHAR2(4000 BYTE) NULL ,
"PREVIEW_ENG" VARCHAR2(4000 BYTE) NULL ,
"NAME_GER" VARCHAR2(255 BYTE) NULL ,
"REMARK_GER" VARCHAR2(4000 BYTE) NULL ,
"ADDRESS_GER" VARCHAR2(4000 BYTE) NULL ,
"PREVIEW_GER" VARCHAR2(4000 BYTE) NULL ,
"NAME_JAP" VARCHAR2(255 BYTE) NULL ,
"REMARK_JAP" VARCHAR2(4000 BYTE) NULL ,
"ADDRESS_JAP" VARCHAR2(4000 BYTE) NULL ,
"PREVIEW_JAP" VARCHAR2(4000 BYTE) NULL ,
"NAME_FRE" VARCHAR2(255 BYTE) NULL ,
"REMARK_FRE" VARCHAR2(4000 BYTE) NULL ,
"ADDRESS_FRE" VARCHAR2(4000 BYTE) NULL ,
"PREVIEW_FRE" VARCHAR2(4000 BYTE) NULL ,
"SUM_PERCENT" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SUM_PIECE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SUM_MONEY" NUMBER(16,2) DEFAULT 0.00  NULL ,
"DOWNFILE" VARCHAR2(255 BYTE) NULL ,
"AUCTIONRESULT" VARCHAR2(4000 BYTE) NULL ,
"REMARK1" VARCHAR2(4000 BYTE) NULL ,
"REMARK2" VARCHAR2(4000 BYTE) NULL ,
"SORTNO" NUMBER NULL ,
"DAYSOF25" DATE NULL ,
"DAYSOF7" DATE NULL ,
"ENDTIME" DATE NULL ,
"BAIL" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_AUCTION_SPECAIL" IS '拍场表';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SPECIALNAME" IS '拍场名称(中文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SEASONID" IS '拍季ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."IMAGE" IS '图片';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."AUCTIONTIME" IS '拍卖时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."STATUS" IS '拍卖状态 1001待拍卖  1002 拍卖中  1003已结拍';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."REMARK" IS '备注(中文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."IS_SHOW" IS '是否显示0:是 1：否';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."INTERNETMENU" IS '实时竞投  0,不预展,1,预展 + 网络直播,2,预展 + 在线竞投';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADMINID" IS '添加人ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."CREATED_AT" IS '添加时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SPECIALCODE" IS '拍场编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADDRESS" IS '地址(中文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."PREVIEW" IS '预展情况(中文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."NAME_GBK" IS '拍场名称(繁体)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADDRESS_GBK" IS '地址(繁体)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."PREVIEW_GBK" IS '预展情况(繁体)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."REMARK_GBK" IS '备注(中文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."DEPTCODE" IS '部门编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."NAME_ENG" IS '拍场名称(英文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."REMARK_ENG" IS '备注(英文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADDRESS_ENG" IS '地址(英文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."PREVIEW_ENG" IS '预展情况(英文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."NAME_GER" IS '拍场名称(德文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."REMARK_GER" IS '备注(德文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADDRESS_GER" IS '地址(德文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."PREVIEW_GER" IS '预展情况(德文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."NAME_JAP" IS '拍场名称(日文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."REMARK_JAP" IS '备注(日文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADDRESS_JAP" IS '地址(日文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."PREVIEW_JAP" IS '预展情况(日文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."NAME_FRE" IS '拍场名称(法文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."REMARK_FRE" IS '备注(法文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ADDRESS_FRE" IS '地址(法文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."PREVIEW_FRE" IS '预展情况(法文)';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SUM_PERCENT" IS '拍品成交率';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SUM_PIECE" IS '成交量';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SUM_MONEY" IS '成交总额';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."DOWNFILE" IS '（下面都是老表的数据  ）';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."SORTNO" IS '排序编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."DAYSOF25" IS '25天单倍';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."DAYSOF7" IS '7天双倍';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."ENDTIME" IS '买方结拍时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_AUCTION_SPECAIL"."BAIL" IS '进拍场需保证金(针对赵涌在线)';

-- ----------------------------
-- Table structure for HOSANE_AUCTION_TEMP
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_AUCTION_TEMP";
CREATE TABLE "ZHAO"."HOSANE_AUCTION_TEMP" (
"ID" NUMBER NULL ,
"AUCTIONNAME" VARCHAR2(4000 BYTE) NULL ,
"CONTRACTID" VARCHAR2(255 BYTE) NULL ,
"IS_BEAT" NUMBER NULL ,
"LOT" NUMBER NULL ,
"IMAGE_NAME" VARCHAR2(255 BYTE) NULL ,
"DETAILEDIMAGENAME" VARCHAR2(4000 BYTE) NULL ,
"SCREENING" VARCHAR2(1000 BYTE) NULL ,
"DIGITALLIBRARY" VARCHAR2(1000 BYTE) NULL ,
"RESERVE" NUMBER(16,2) NULL ,
"HAMMERPRICE" NUMBER(16,2) NULL ,
"CATALOGFEE" NUMBER(16,2) NULL ,
"INSURANCE" NUMBER(16,2) NULL ,
"COMMISIONPERFEE" NUMBER(16,2) NULL ,
"TAXES" NUMBER(16,2) NULL ,
"BOXFEE" NUMBER(16,2) NULL ,
"FREIGHT" NUMBER(16,2) NULL ,
"STORAGECHARGES" NUMBER(16,2) NULL ,
"OTHERFEE" NUMBER(16,2) NULL ,
"COMPANYAFFIXEDSHAL" NUMBER(16,2) NULL ,
"AUCTIONREMARK" CLOB NULL ,
"STATUS" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"PRODUCTIONCOST" NUMBER(16,2) NULL ,
"AUCTIONCODE" VARCHAR2(255 BYTE) NULL ,
"CATAGORYID" NUMBER NULL ,
"MATERIALID" NUMBER NULL ,
"ARTISTSID" NUMBER NULL ,
"BOUTIQUESTATE" NUMBER NULL ,
"PRINTIMAGE" VARCHAR2(255 BYTE) NULL ,
"SPECIALCODE" VARCHAR2(40 BYTE) NULL ,
"UPDATE_AT" DATE NULL ,
"EVALUATE_LOW" NUMBER(16,2) NULL ,
"EVALUATE_HIGH" NUMBER(16,2) NULL ,
"ORDER_NUM" NUMBER NULL ,
"CLOSE_COST" NUMBER(16,2) NULL ,
"MARKID" NUMBER(38) NULL ,
"BUYPERFEE" NUMBER(16,2) NULL ,
"SALE" NUMBER NULL ,
"CLOSE_TIME" DATE NULL ,
"AUCTION_STATUS" NUMBER NULL ,
"AUCTIONNAME_CHT" NVARCHAR2(2000) NULL ,
"AUCTIONNAME_ENG" NVARCHAR2(2000) NULL ,
"AUCTIONREMARK_CHT" CLOB NULL ,
"AUCTIONREMARK_ENG" CLOB NULL ,
"BUY_ACCOUNT_CODE" VARCHAR2(255 BYTE) NULL ,
"BUY_STATUS" VARCHAR2(50 BYTE) NULL ,
"MINUS_POINTS" NUMBER(16,2) NULL ,
"RE_HAMMER_PRICE" NUMBER(16,2) NULL ,
"RE_COLSE_COST" NUMBER(16,2) NULL ,
"HWRATIO" VARCHAR2(255 BYTE) NULL ,
"RECOMMEND_TAG" NUMBER NULL ,
"TRUSTPRICE1" NUMBER(16,2) NULL ,
"TRUSTUSER1" VARCHAR2(255 BYTE) NULL ,
"TRUSTPRICE2" NUMBER(16,2) NULL ,
"TRUSTUSER2" VARCHAR2(255 BYTE) NULL ,
"HITCOUNT" NUMBER NULL ,
"MYSELF_PIECE" NUMBER NULL ,
"BUY_PAY_DATE" DATE NULL ,
"BUY_INCOME_MONEY" NUMBER(16,2) NULL ,
"BUY_ACCRUED_MONEY" NUMBER(16,2) NULL ,
"SELL_ACCOUNT_CODE" VARCHAR2(255 BYTE) NULL ,
"SELL_PAY_STATE" NUMBER NULL ,
"SELL_PAY_DATE" DATE NULL ,
"SELL_INCOME_MONEY" NUMBER(16,2) NULL ,
"SELL_ACCRUED_MONEY" NUMBER(16,2) NULL ,
"REBATESTATUS" VARCHAR2(1 BYTE) NULL ,
"BUY_TOTAL" NUMBER(16,2) NULL ,
"SELL_TOTAL" NUMBER(16,2) NULL ,
"AUCTIONGOODS" VARCHAR2(500 BYTE) NULL ,
"MEMORANDUM" VARCHAR2(4000 BYTE) NULL ,
"BIG_IMAGE_HWRATIO" VARCHAR2(255 BYTE) NULL ,
"ISLOCK" VARCHAR2(1 BYTE) NULL ,
"CLOSE_MAN" VARCHAR2(255 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for HOSANE_CITY_AUCTION
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_CITY_AUCTION";
CREATE TABLE "ZHAO"."HOSANE_CITY_AUCTION" (
"AUCTION_ID" NUMBER(38) NULL ,
"ORDER_NUM" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_CITY_AUCTION" IS '城市博览会关联表';
COMMENT ON COLUMN "ZHAO"."HOSANE_CITY_AUCTION"."AUCTION_ID" IS '赵涌在线拍品ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_CITY_AUCTION"."ORDER_NUM" IS '排序顺序';

-- ----------------------------
-- Table structure for HOSANE_CONTRACTSEASON
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_CONTRACTSEASON";
CREATE TABLE "ZHAO"."HOSANE_CONTRACTSEASON" (
"ID" NUMBER NULL ,
"SEASONNAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATE_AT" DATE NULL ,
"UPDATE_MAN" VARCHAR2(255 BYTE) NULL ,
"SEASONNAME_CHT" VARCHAR2(255 BYTE) NULL ,
"SEASONNAME_GER" VARCHAR2(255 BYTE) NULL ,
"SEASONNAME_ENG" VARCHAR2(255 BYTE) NULL ,
"SEASONNAME_JPN" VARCHAR2(255 BYTE) NULL ,
"SEASONNAME_FRA" VARCHAR2(255 BYTE) NULL ,
"SEASONCODE" VARCHAR2(255 BYTE) NULL ,
"IS_SHOW" NUMBER DEFAULT 0  NULL ,
"YEARS" NUMBER NULL ,
"MONTHS" NUMBER NULL ,
"COMMISSION_RECAPTURE" NUMBER DEFAULT 15  NULL ,
"COMMISIONPER" NUMBER DEFAULT 10.00  NULL ,
"MINUS_POINTS" NUMBER DEFAULT 0.00  NULL ,
"ISPOINTS" NUMBER DEFAULT 0  NULL ,
"ISCURRENT" NUMBER NULL ,
"SUM_PERCENT" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SUM_PIECE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SUM_MONEY" NUMBER(16,2) DEFAULT 0.00  NULL ,
"SELLENDTIME" DATE NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"SHOW_REMARK" CLOB NULL ,
"IS_SITE" CHAR(1 BYTE) DEFAULT 1  NULL ,
"SEASON_STATUS" CHAR(1 BYTE) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."ID" IS '拍季ID';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONNAME" IS '拍季名称';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."UPDATE_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."UPDATE_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONNAME_CHT" IS '拍季名稱(繁体)';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONNAME_GER" IS '拍季名稱(德语)';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONNAME_ENG" IS '拍季名稱(英语)';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONNAME_JPN" IS '拍季名稱(日语)';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONNAME_FRA" IS '拍季名稱(法语)';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASONCODE" IS '拍季编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."IS_SHOW" IS '是否显示 0是 1否';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."YEARS" IS '拍季年份';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."MONTHS" IS '拍季月份';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."COMMISSION_RECAPTURE" IS '默认佣金比例';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."COMMISIONPER" IS '佣金打折';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."MINUS_POINTS" IS '佣金减点';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."ISPOINTS" IS '0:打折  1 ：减点';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."ISCURRENT" IS '当前拍季 0：否  1：是';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SUM_PERCENT" IS '拍品成交率';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SUM_PIECE" IS '成交量';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SUM_MONEY" IS '成交总额';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SELLENDTIME" IS '委托方结拍时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."REMARK" IS '合同打印界面拍场信息';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SHOW_REMARK" IS '首页显示拍场信息';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."IS_SITE" IS '网站是否显示 0否 1是';
COMMENT ON COLUMN "ZHAO"."HOSANE_CONTRACTSEASON"."SEASON_STATUS" IS '拍品类型(0司法拍季:，1普通拍季)';

-- ----------------------------
-- Table structure for HOSANE_DEFAULT_AUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_DEFAULT_AUCTIONS";
CREATE TABLE "ZHAO"."HOSANE_DEFAULT_AUCTIONS" (
"LOT" NUMBER NULL ,
"LIST_ORDER" NUMBER NULL ,
"SPECIAL_CODE" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for HOSANE_FREEZE_BAIL
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_FREEZE_BAIL";
CREATE TABLE "ZHAO"."HOSANE_FREEZE_BAIL" (
"ID" NUMBER NOT NULL ,
"USERID" NUMBER NULL ,
"BAIL" NUMBER(16,2) NULL ,
"STATUS" CHAR(1 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"CREATOR" VARCHAR2(100 BYTE) NULL ,
"UPDATETIME" DATE NULL ,
"UPDATOR" VARCHAR2(100 BYTE) NULL ,
"SEASONCODE" VARCHAR2(255 BYTE) NULL ,
"HOSANE_USERID" NUMBER NULL ,
"COMPLETE_BAIL" NUMBER(16,2) NULL ,
"THRAW_FREEZE_OP" VARCHAR2(225 BYTE) NULL ,
"DEPOSIT_HOSANE_OP" VARCHAR2(225 BYTE) NULL ,
"DEPOSIT_DATE" DATE NULL ,
"THRAW_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_FREEZE_BAIL" IS '参与hosane竞拍预冻结金额(保证金)';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."USERID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."BAIL" IS '冻结金额(保证金)';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."STATUS" IS '状态  ( 0：已解冻  1：已冻结 )    此状态为标识是否缴保证金可参拍泓盛艺术品拍卖用';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."CREATETIME" IS '生成日期';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."CREATOR" IS '创建者';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."UPDATETIME" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."UPDATOR" IS '更新人';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."SEASONCODE" IS '拍季编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."HOSANE_USERID" IS '泓盛客户编号';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."COMPLETE_BAIL" IS '已转账金额';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."THRAW_FREEZE_OP" IS '解冻操作人';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."DEPOSIT_HOSANE_OP" IS '转账操作人';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."DEPOSIT_DATE" IS '泓盛转账时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_FREEZE_BAIL"."THRAW_DATE" IS '解冻时间';

-- ----------------------------
-- Table structure for HOSANE_USER_AUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."HOSANE_USER_AUCTIONS";
CREATE TABLE "ZHAO"."HOSANE_USER_AUCTIONS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"CREATED_AT" DATE NULL ,
"STATUS" NUMBER(2) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."HOSANE_USER_AUCTIONS" IS '用户关注拍品表';
COMMENT ON COLUMN "ZHAO"."HOSANE_USER_AUCTIONS"."USER_ID" IS '用户id';
COMMENT ON COLUMN "ZHAO"."HOSANE_USER_AUCTIONS"."AUCTION_ID" IS '拍品id';
COMMENT ON COLUMN "ZHAO"."HOSANE_USER_AUCTIONS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."HOSANE_USER_AUCTIONS"."STATUS" IS '状态';

-- ----------------------------
-- Table structure for INDEX_ANNOUNCEMENTS
-- ----------------------------
DROP TABLE "ZHAO"."INDEX_ANNOUNCEMENTS";
CREATE TABLE "ZHAO"."INDEX_ANNOUNCEMENTS" (
"ID" NUMBER NOT NULL ,
"TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"TITLE" VARCHAR2(1000 BYTE) NOT NULL ,
"CONTENT" CLOB NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER DEFAULT 0  NULL ,
"INDEX_SITE" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"TITLE_GBK" VARCHAR2(1000 BYTE) NULL ,
"CONTENT_GBK" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."TYPE" IS '类型
1:市场活动2:公司新闻';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."CONTENT" IS '公告内容';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."STATUS" IS '0:默认可用
1:不可用';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."INDEX_SITE" IS '0:上海站 1:英文站 2:香港站 10:全站通用';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."CREATED_AT" IS '创建日期';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."UPDATED_AT" IS '更新日期';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."TITLE_GBK" IS '标题繁体';
COMMENT ON COLUMN "ZHAO"."INDEX_ANNOUNCEMENTS"."CONTENT_GBK" IS '公告内容繁体';

-- ----------------------------
-- Table structure for INDEX_AUCTION
-- ----------------------------
DROP TABLE "ZHAO"."INDEX_AUCTION";
CREATE TABLE "ZHAO"."INDEX_AUCTION" (
"INDEX_TIME" DATE NULL ,
"AUCTION_INDEX" NUMBER(38,2) NULL ,
"CATEGORIES" NUMBER NULL ,
"FORUM_ID" VARCHAR2(20 BYTE) NULL ,
"BID_AMOUNT" NUMBER NULL ,
"CN_AMOUNT" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."INDEX_AUCTION" IS '版块指数';
COMMENT ON COLUMN "ZHAO"."INDEX_AUCTION"."INDEX_TIME" IS '时间';
COMMENT ON COLUMN "ZHAO"."INDEX_AUCTION"."AUCTION_INDEX" IS '指数';
COMMENT ON COLUMN "ZHAO"."INDEX_AUCTION"."CATEGORIES" IS '类型';
COMMENT ON COLUMN "ZHAO"."INDEX_AUCTION"."FORUM_ID" IS '板块id';
COMMENT ON COLUMN "ZHAO"."INDEX_AUCTION"."BID_AMOUNT" IS '(元)';
COMMENT ON COLUMN "ZHAO"."INDEX_AUCTION"."CN_AMOUNT" IS '(套)';

-- ----------------------------
-- Table structure for INDEX_FORUM
-- ----------------------------
DROP TABLE "ZHAO"."INDEX_FORUM";
CREATE TABLE "ZHAO"."INDEX_FORUM" (
"FORUM_ID" NUMBER NOT NULL ,
"CLASSES_ID" NUMBER NULL ,
"CHI_NO" VARCHAR2(255 BYTE) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NOT NULL ,
"WEIGHT_ZHUGANG" NUMBER NULL ,
"WEIGHT_LUGONG" NUMBER NULL ,
"WEIGHT_YEWU" NUMBER NULL ,
"WEIGHT_WU" NUMBER NULL ,
"IS_SAMPLE" NUMBER DEFAULT 0  NULL ,
"IS_INDEX_SAMPLE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."INDEX_FORUM" IS '版块权值';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."FORUM_ID" IS '板块id 1\纪特 2\文革 3\JT 4\小型张 5\小本票';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."CLASSES_ID" IS '志号id';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."CHI_NO" IS '志号';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."WEIGHT_ZHUGANG" IS '权值';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."IS_SAMPLE" IS '板块样本 0 不是样本 1是样本';
COMMENT ON COLUMN "ZHAO"."INDEX_FORUM"."IS_INDEX_SAMPLE" IS '指数样本 0 不是样本 1是样本';

-- ----------------------------
-- Table structure for IP
-- ----------------------------
DROP TABLE "ZHAO"."IP";
CREATE TABLE "ZHAO"."IP" (
"IP_START" VARCHAR2(200 BYTE) NULL ,
"IP_END" VARCHAR2(200 BYTE) NULL ,
"AREA1" VARCHAR2(200 BYTE) NULL ,
"IP_START_NUM" NUMBER(38) NULL ,
"IP_END_NUM" NUMBER(38) NULL ,
"COUNTRY" VARCHAR2(200 BYTE) NULL ,
"PROVINCE" VARCHAR2(200 BYTE) NULL ,
"CITY" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."IP"."IP_START_NUM" IS 'ip1*256*256*256+ip2*256*256+ip3*256+ip4';

-- ----------------------------
-- Table structure for JINIANBI
-- ----------------------------
DROP TABLE "ZHAO"."JINIANBI";
CREATE TABLE "ZHAO"."JINIANBI" (
"ID" NUMBER(38) NOT NULL ,
"SET_ID" NUMBER(38) NULL ,
"SET_NAME" VARCHAR2(255 CHAR) NULL ,
"PUBLISH_DATE" DATE NULL ,
"BELONG_YEAR" NUMBER(38) NOT NULL ,
"LONG_NAME" VARCHAR2(255 CHAR) NULL ,
"CHINESE_NAME" VARCHAR2(255 CHAR) NULL ,
"SHORT_NAME" VARCHAR2(50 CHAR) NULL ,
"KEYWORD_NAME" VARCHAR2(50 CHAR) NULL ,
"HEIGHT" VARCHAR2(50 CHAR) NULL ,
"STANDARD" VARCHAR2(50 CHAR) NULL ,
"QUALITY" VARCHAR2(50 CHAR) NULL ,
"COLOR" VARCHAR2(50 CHAR) NULL ,
"SHAPE" VARCHAR2(50 CHAR) NULL ,
"MATERIAL" VARCHAR2(50 CHAR) NULL ,
"FACE_VALUE" NUMBER(38) NULL ,
"ITEM_SIZE" VARCHAR2(50 CHAR) NULL ,
"PERCENTAGE" NUMBER(16,2) DEFAULT 99.9  NULL ,
"PLANNED_SALE_VOLUME" NUMBER(38) DEFAULT 0  NULL ,
"ACTUAL_SALE_VOLUME" NUMBER(38) DEFAULT 0  NULL ,
"CREATED_AT" VARCHAR2(50 CHAR) NULL ,
"EVALUATION" NUMBER(38) DEFAULT 0  NULL ,
"FORMAT1" VARCHAR2(50 CHAR) NULL ,
"FORMAT2" VARCHAR2(50 CHAR) NULL ,
"FORMAT3" VARCHAR2(50 CHAR) NULL ,
"FORMAT4" VARCHAR2(50 CHAR) NULL ,
"FORMAT5" VARCHAR2(50 CHAR) NULL ,
"ZHAOYANSHENG" NUMBER(38) NOT NULL ,
"REMARK" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."JINIANBI"."ID" IS '序列号';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."SET_ID" IS '套号';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."SET_NAME" IS '套名';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."PUBLISH_DATE" IS '发行时间';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."BELONG_YEAR" IS '年号';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."LONG_NAME" IS '长名称';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."CHINESE_NAME" IS '中名称';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."SHORT_NAME" IS '短名称';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."KEYWORD_NAME" IS '关键字名称';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."HEIGHT" IS '重量';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."STANDARD" IS '标准';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."QUALITY" IS '质量';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."COLOR" IS '颜色';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."SHAPE" IS '形状';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."MATERIAL" IS '材质';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."FACE_VALUE" IS '面值';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."ITEM_SIZE" IS '规格';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."PERCENTAGE" IS '成色';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."PLANNED_SALE_VOLUME" IS '计划量';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."ACTUAL_SALE_VOLUME" IS '实铸量';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."CREATED_AT" IS '制造厂';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."EVALUATION" IS '估价';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."FORMAT1" IS '版别1';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."FORMAT2" IS '版别2';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."FORMAT3" IS '版别3';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."FORMAT4" IS '版别4';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."FORMAT5" IS '版别5';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."ZHAOYANSHENG" IS '赵燕生编号';
COMMENT ON COLUMN "ZHAO"."JINIANBI"."REMARK" IS '备注';

-- ----------------------------
-- Table structure for JINIANBI_SETINFO
-- ----------------------------
DROP TABLE "ZHAO"."JINIANBI_SETINFO";
CREATE TABLE "ZHAO"."JINIANBI_SETINFO" (
"ID" NUMBER(38) NOT NULL ,
"SET_NAME" VARCHAR2(255 CHAR) NULL ,
"SET_SIZE" NUMBER NOT NULL ,
"SET_SERIAL_NO" NUMBER(38) NOT NULL ,
"PULISH_TIME" DATE DEFAULT null  NULL ,
"BELONG_YEAR" NUMBER(38) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."JINIANBI_SETINFO"."ID" IS '套号';
COMMENT ON COLUMN "ZHAO"."JINIANBI_SETINFO"."SET_NAME" IS '套名';
COMMENT ON COLUMN "ZHAO"."JINIANBI_SETINFO"."SET_SIZE" IS '规格';
COMMENT ON COLUMN "ZHAO"."JINIANBI_SETINFO"."SET_SERIAL_NO" IS '年序';
COMMENT ON COLUMN "ZHAO"."JINIANBI_SETINFO"."PULISH_TIME" IS '发行时间';
COMMENT ON COLUMN "ZHAO"."JINIANBI_SETINFO"."BELONG_YEAR" IS '年号';

-- ----------------------------
-- Table structure for JINYINBI_SUMMARY
-- ----------------------------
DROP TABLE "ZHAO"."JINYINBI_SUMMARY";
CREATE TABLE "ZHAO"."JINYINBI_SUMMARY" (
"RAW_NAME" VARCHAR2(2000 BYTE) NULL ,
"ID" VARCHAR2(20 BYTE) NULL ,
"MATCHING_NAME" VARCHAR2(2000 BYTE) NULL ,
"MATCH_TIMES" NUMBER NULL ,
"UPDATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for JINYINBI_SUMMARY_ALL
-- ----------------------------
DROP TABLE "ZHAO"."JINYINBI_SUMMARY_ALL";
CREATE TABLE "ZHAO"."JINYINBI_SUMMARY_ALL" (
"RAW_NAME" VARCHAR2(2000 BYTE) NULL ,
"ID" VARCHAR2(20 BYTE) NULL ,
"MATCHING_NAME" VARCHAR2(2000 BYTE) NULL ,
"MATCH_TIMES" NUMBER NULL ,
"UPDATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for JINYINBI_SUMMARY_BAK
-- ----------------------------
DROP TABLE "ZHAO"."JINYINBI_SUMMARY_BAK";
CREATE TABLE "ZHAO"."JINYINBI_SUMMARY_BAK" (
"RAW_NAME" VARCHAR2(2000 BYTE) NULL ,
"ID" VARCHAR2(20 BYTE) NULL ,
"MATCHING_NAME" VARCHAR2(2000 BYTE) NULL ,
"MATCH_TIMES" NUMBER NULL ,
"UPDATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for JINYINBI_SUMMARY2
-- ----------------------------
DROP TABLE "ZHAO"."JINYINBI_SUMMARY2";
CREATE TABLE "ZHAO"."JINYINBI_SUMMARY2" (
"RAW_NAME" VARCHAR2(2000 BYTE) NULL ,
"ID" VARCHAR2(20 BYTE) NULL ,
"MATCHING_NAME" VARCHAR2(2000 BYTE) NULL ,
"MATCH_TIMES" NUMBER NULL ,
"UPDATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for JINYINBI_SUMMARY3
-- ----------------------------
DROP TABLE "ZHAO"."JINYINBI_SUMMARY3";
CREATE TABLE "ZHAO"."JINYINBI_SUMMARY3" (
"RAW_NAME" VARCHAR2(2000 BYTE) NULL ,
"ID" VARCHAR2(20 BYTE) NULL ,
"MATCHING_NAME" VARCHAR2(2000 BYTE) NULL ,
"MATCH_TIMES" NUMBER NULL ,
"UPDATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for JTA
-- ----------------------------
DROP TABLE "ZHAO"."JTA";
CREATE TABLE "ZHAO"."JTA" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KEYWORDS
-- ----------------------------
DROP TABLE "ZHAO"."KEYWORDS";
CREATE TABLE "ZHAO"."KEYWORDS" (
"ID" NUMBER(10) NOT NULL ,
"KEYWORD" VARCHAR2(255 BYTE) NULL ,
"SPELL" VARCHAR2(255 BYTE) DEFAULT ''  NULL ,
"COUNTS" NUMBER(10) DEFAULT '0'  NULL ,
"STATE" NUMBER(3) DEFAULT '0'  NULL ,
"CREATED_AT" DATE DEFAULT SYSDATE  NULL ,
"UPDATED_AT" DATE DEFAULT SYSDATE  NULL ,
"STATUS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."KEYWORDS"."STATUS" IS '状态';

-- ----------------------------
-- Table structure for KUAIDI
-- ----------------------------
DROP TABLE "ZHAO"."KUAIDI";
CREATE TABLE "ZHAO"."KUAIDI" (
"ID" NUMBER NOT NULL ,
"COMPANYNAME" VARCHAR2(50 BYTE) NULL ,
"TIME" VARCHAR2(50 BYTE) NULL ,
"CONTEXT" VARCHAR2(100 BYTE) NULL ,
"COMPANYCODE" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."KUAIDI"."COMPANYNAME" IS '公司名称';
COMMENT ON COLUMN "ZHAO"."KUAIDI"."TIME" IS '时间';
COMMENT ON COLUMN "ZHAO"."KUAIDI"."CONTEXT" IS '内容';
COMMENT ON COLUMN "ZHAO"."KUAIDI"."COMPANYCODE" IS '公司代号';

-- ----------------------------
-- Table structure for LEND_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."LEND_DETAILS";
CREATE TABLE "ZHAO"."LEND_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"LEND_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"CHARACTER_ID" NUMBER(38) NULL ,
"AUCTION_DESCR" VARCHAR2(4000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."LEND_DETAILS" IS '临借明细表';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."LEND_ID" IS '借阅ID';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."CATEGORY_ID" IS '拍品分类ID';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."CHARACTER_ID" IS '拍品品级ID';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."AUCTION_DESCR" IS '拍品描述';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LEND_DETAILS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for LENDS
-- ----------------------------
DROP TABLE "ZHAO"."LENDS";
CREATE TABLE "ZHAO"."LENDS" (
"ID" NUMBER(38) NOT NULL ,
"LEND_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"DEPARTMENT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AUCTIONS_COUNT" NUMBER(38) DEFAULT 0  NULL ,
"BOOKING_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"DEPARTMENT" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 CHAR) NULL ,
"LEND_APP" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STORAGE_ID" NUMBER DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."LENDS" IS '临借表';
COMMENT ON COLUMN "ZHAO"."LENDS"."LEND_TYPE" IS '借阅类型(1客户查看 2内部 3客户支付)';
COMMENT ON COLUMN "ZHAO"."LENDS"."DEPARTMENT_ID" IS '处理人部门ID';
COMMENT ON COLUMN "ZHAO"."LENDS"."USER_ID" IS '客户ID';
COMMENT ON COLUMN "ZHAO"."LENDS"."USER_NAME" IS '借阅人(客户名或代领人)';
COMMENT ON COLUMN "ZHAO"."LENDS"."AUCTIONS_COUNT" IS '借阅拍品数量';
COMMENT ON COLUMN "ZHAO"."LENDS"."BOOKING_AT" IS '预约时间';
COMMENT ON COLUMN "ZHAO"."LENDS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."LENDS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."LENDS"."STATUS" IS '状态:1申请中 2已拒绝 3已受理 4已申请取消 5已取消 6已借出 7已确认借出 8已归还 9已确认归还';
COMMENT ON COLUMN "ZHAO"."LENDS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LENDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LENDS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."LENDS"."DEPARTMENT" IS '处理人部门ID';
COMMENT ON COLUMN "ZHAO"."LENDS"."CREATED_MAN" IS '申请人';
COMMENT ON COLUMN "ZHAO"."LENDS"."LEND_APP" IS '临借应用（0：前台申请  1：后台申请）';
COMMENT ON COLUMN "ZHAO"."LENDS"."STORAGE_ID" IS '拍品所在仓库1:上海,2:北京,storages.id';

-- ----------------------------
-- Table structure for LOGGED_EXCEPTIONS
-- ----------------------------
DROP TABLE "ZHAO"."LOGGED_EXCEPTIONS";
CREATE TABLE "ZHAO"."LOGGED_EXCEPTIONS" (
"ID" NUMBER(38) NOT NULL ,
"EXCEPTION_CLASS" VARCHAR2(255 CHAR) NULL ,
"CONTROLLER_NAME" VARCHAR2(255 CHAR) NULL ,
"ACTION_NAME" VARCHAR2(255 CHAR) NULL ,
"MESSAGE" CLOB NULL ,
"BACKTRACE" CLOB NULL ,
"ENVIRONMENT" CLOB NULL ,
"REQUEST" CLOB NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."LOGGED_EXCEPTIONS" IS '系统异常日志';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."EXCEPTION_CLASS" IS '异常类';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."CONTROLLER_NAME" IS '控制器';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."ACTION_NAME" IS '动作';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."MESSAGE" IS '错误信息';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."BACKTRACE" IS '错误跟踪信息';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."ENVIRONMENT" IS '系统环境';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."REQUEST" IS '请求参数';
COMMENT ON COLUMN "ZHAO"."LOGGED_EXCEPTIONS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for LOGISTIC_COMPANIES
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTIC_COMPANIES";
CREATE TABLE "ZHAO"."LOGISTIC_COMPANIES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"COMPLAINTS_TEL" VARCHAR2(255 CHAR) NULL ,
"LINKMAN" VARCHAR2(255 CHAR) NULL ,
"WEBSITE" VARCHAR2(255 CHAR) NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."ADDRESS" IS '地址';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."COMPLAINTS_TEL" IS '投诉电话';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."LINKMAN" IS '联系人';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."WEBSITE" IS '网站';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_COMPANIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for LOGISTIC_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTIC_DETAILS";
CREATE TABLE "ZHAO"."LOGISTIC_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"LOGISTIC_ID" NUMBER(38) NULL ,
"OLD_LOGISTIC_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"DELIVERY_TYPE" NUMBER(38) DEFAULT 1  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"KEEP_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"KEEP_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"IS_FREE" NUMBER(1) DEFAULT 0  NULL ,
"CONSIGN_DATE" DATE NULL ,
"USER_ADDRESS_ID" NUMBER(38) NULL ,
"KEEP_ORDERS" NUMBER(1) DEFAULT 0  NULL ,
"LOGISTIC_TYPE_ID" NUMBER(38) NULL ,
"COUNTRY_ID" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."LOGISTIC_DETAILS" IS '物流明细表';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."LOGISTIC_ID" IS '物流单ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."OLD_LOGISTIC_ID" IS '合并前物流单ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."DELIVERY_TYPE" IS '发货类型(1交易,2退货,3退委,4商城)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."STATUS" IS '状态';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."KEEP_PRICE" IS '保价金额';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."KEEP_FEE" IS '保价费';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."IS_FREE" IS '是否收取邮资(0否 1是)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."CONSIGN_DATE" IS '合并发货日期';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."USER_ADDRESS_ID" IS '用户地址ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."KEEP_ORDERS" IS '是否延迟发货(0否 1是)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."LOGISTIC_TYPE_ID" IS '物流发货方式ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_DETAILS"."COUNTRY_ID" IS '国家id';

-- ----------------------------
-- Table structure for LOGISTIC_LADING_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTIC_LADING_DETAILS";
CREATE TABLE "ZHAO"."LOGISTIC_LADING_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"LOGISTIC_LADING_ID" NUMBER(38) NULL ,
"OWNER_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_NAME" VARCHAR2(255 CHAR) NULL ,
"AUCTION_STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"LOGISTIC_STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"OLD_LOGISTIC_LADING_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."LOGISTIC_LADING_DETAILS" IS '物流提货单明细表';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."LOGISTIC_LADING_ID" IS '物流提货单ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."OWNER_TYPE" IS '拍品所属(1:竞买方 2:委托方)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."AUCTION_STATUS" IS '拍品状态';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."LOGISTIC_STATUS" IS '拍品物流状态';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_LADING_DETAILS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for LOGISTIC_LADINGS
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTIC_LADINGS";
CREATE TABLE "ZHAO"."LOGISTIC_LADINGS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AUCTIONS_COUNT" NUMBER(38) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"OUT_AT" DATE NULL ,
"CONFIRM_OUT_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOGISTIC_TYPE_FEES
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTIC_TYPE_FEES";
CREATE TABLE "ZHAO"."LOGISTIC_TYPE_FEES" (
"ID" NUMBER(38) NOT NULL ,
"LOGISTIC_TYPE_ID" NUMBER(38) NULL ,
"MIN_KEEP_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"MAX_KEEP_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"KEEP_PRICE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"MIN_KEEP_FEE" NUMBER(6,2) NULL ,
"OTHERS_FEE" NUMBER(6,2) NULL ,
"STORAGE_ID" NUMBER DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."LOGISTIC_TYPE_FEES" IS '发货方式运费表';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."LOGISTIC_TYPE_ID" IS '发货方式ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."MIN_KEEP_PRICE" IS '最低保额';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."MAX_KEEP_PRICE" IS '最高保额';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."KEEP_PRICE_PERCENT" IS '保价费率%';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."STATUS" IS '状态(0:停用 1:启用)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."MIN_KEEP_FEE" IS '最低保价费';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."OTHERS_FEE" IS '其他费用';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPE_FEES"."STORAGE_ID" IS '所在仓库1:上海,2:北京,storages.id';

-- ----------------------------
-- Table structure for LOGISTIC_TYPES
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTIC_TYPES";
CREATE TABLE "ZHAO"."LOGISTIC_TYPES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"LOGISTIC_COMPANY_ID" NUMBER(38) NULL ,
"REGION_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"IS_BACK_KEEP" NUMBER(1) DEFAULT 0  NULL ,
"MIN_KEEP_PRICE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"MAX_KEEP_PRICE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"KEEP_PRICE_PERCENT" NUMBER(6,2) DEFAULT 0  NULL ,
"IS_FRONT_KEEP" NUMBER DEFAULT 0  NULL ,
"OTHERS_FEE" NUMBER(6,2) DEFAULT 0.00  NULL ,
"NAME_GBK" VARCHAR2(255 BYTE) NULL ,
"NAME_EN" VARCHAR2(255 BYTE) NULL ,
"MIN_KEEP_FEE" NUMBER(6,2) DEFAULT 0.00  NULL ,
"KUAIDI_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."NAME" IS '名称(中文)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."LOGISTIC_COMPANY_ID" IS '物流公司ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."REGION_ID" IS '发货地区(1:国内 2:港澳台 3:海外)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."STATUS" IS '状态(0:停用 1:启用)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."IS_BACK_KEEP" IS '后台是否保价(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."MIN_KEEP_PRICE" IS '最低保额';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."MAX_KEEP_PRICE" IS '最高保额';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."KEEP_PRICE_PERCENT" IS '收取保额*n%的保价费';
COMMENT ON COLUMN "ZHAO"."LOGISTIC_TYPES"."KUAIDI_ID" IS '快递公司ID(与物流公司ID有冲突？)';

-- ----------------------------
-- Table structure for LOGISTICS
-- ----------------------------
DROP TABLE "ZHAO"."LOGISTICS";
CREATE TABLE "ZHAO"."LOGISTICS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_ADDRESS_ID" NUMBER(38) NULL ,
"LOGISTIC_TYPE_ID" NUMBER(38) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"POSTAGE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PACK_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"KEEP_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"EXTRA_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TRANSMIT_ID" VARCHAR2(255 CHAR) NULL ,
"TRUE_OUT_DATE" DATE NULL ,
"IS_SEND_SMS" NUMBER(1) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"KEEP_PRICE" NUMBER DEFAULT 0.0  NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"IS_KEEP" NUMBER DEFAULT 0  NULL ,
"IS_MERGED" NUMBER NULL ,
"REGION_ID" NUMBER NULL ,
"EXPIRE_RECEIVE_AT" DATE NULL ,
"RECEIVED_AT" DATE NULL ,
"ITEMS_COUNT" NUMBER DEFAULT 0  NULL ,
"IS_FREE" NUMBER DEFAULT 0  NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"MOBILE_TEL" VARCHAR2(255 CHAR) NULL ,
"ITEMS_AMOUNT" NUMBER DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."USER_ADDRESS_ID" IS '收货人地址ID';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."LOGISTIC_TYPE_ID" IS '物流发货方式ID';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."STATUS" IS '状态(0:待发货 1:已完成 3:已发货)';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."POSTAGE" IS '邮资费';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."PACK_FEE" IS '包装费';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."KEEP_FEE" IS '保价费';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."EXTRA_FEE" IS '其它费用';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."TOTAL_FEE" IS '总费用';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."TRANSMIT_ID" IS '承运单号';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."TRUE_OUT_DATE" IS '实际发货时间';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."IS_SEND_SMS" IS '是否已短信通知(0否 1是)';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."ADMIN_ID" IS '发货操作人ID';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."ADMIN_NAME" IS '发货操作人名称';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."KEEP_PRICE" IS '保价金额';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."USER_NAME" IS '收货人名称';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."IS_KEEP" IS '是否暂缓发货(0,1)';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."IS_MERGED" IS '是否被合并(0,1)';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."REGION_ID" IS '发货地区ID(1:国内 2:港澳台 3:海外)';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."EXPIRE_RECEIVE_AT" IS '收货期限';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."RECEIVED_AT" IS '确认收货时间';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."ITEMS_COUNT" IS '发货数量';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."IS_FREE" IS '是否免邮资(0,1)';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."ADDRESS" IS '地址';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."MOBILE_TEL" IS '手机';
COMMENT ON COLUMN "ZHAO"."LOGISTICS"."ITEMS_AMOUNT" IS '发货总价值,商城积分物品需按比例折算成钱';

-- ----------------------------
-- Table structure for MESSAGE_MARKET_USERDETAILS
-- ----------------------------
DROP TABLE "ZHAO"."MESSAGE_MARKET_USERDETAILS";
CREATE TABLE "ZHAO"."MESSAGE_MARKET_USERDETAILS" (
"ID" NUMBER NULL ,
"SUBJECT_ID" NUMBER NULL ,
"TO_USERID" NUMBER NULL ,
"MSG_STATUS" VARCHAR2(225 BYTE) NULL ,
"MSG_TYPE" VARCHAR2(225 BYTE) NULL ,
"IS_RECEIVE_DEL" VARCHAR2(225 BYTE) NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"OP" VARCHAR2(225 BYTE) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."TO_USERID" IS '收件人';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."MSG_STATUS" IS '消息状态(0:未读   1：已读)';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."MSG_TYPE" IS '类型(0:收件箱
 1:保存草稿)';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."IS_RECEIVE_DEL" IS '接受方是否删除(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."OP" IS '处理人';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKET_USERDETAILS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for MESSAGE_MARKETS
-- ----------------------------
DROP TABLE "ZHAO"."MESSAGE_MARKETS";
CREATE TABLE "ZHAO"."MESSAGE_MARKETS" (
"ID" NUMBER NULL ,
"SUBJECT" VARCHAR2(225 BYTE) NULL ,
"CONTENT" CLOB NULL ,
"CREATED" DATE DEFAULT sysdate  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKETS"."SUBJECT" IS '主题';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKETS"."CONTENT" IS '内容';
COMMENT ON COLUMN "ZHAO"."MESSAGE_MARKETS"."CREATED" IS '创建时间';

-- ----------------------------
-- Table structure for MESSAGES
-- ----------------------------
DROP TABLE "ZHAO"."MESSAGES";
CREATE TABLE "ZHAO"."MESSAGES" (
"ID" NUMBER(38) NOT NULL ,
"SUBJECT" VARCHAR2(255 CHAR) NULL ,
"CONTENT" CLOB NULL ,
"PARENT_ID" NUMBER(38) DEFAULT 0  NULL ,
"MSG_FROM" VARCHAR2(255 CHAR) NULL ,
"FROM_ID" NUMBER(38) NULL ,
"TO_ID" NUMBER(38) NULL ,
"MSG_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"MSG_TYPE" VARCHAR2(255 CHAR) NULL ,
"IS_SEND_DEL" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_RECEIVE_DEL" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"TO_DEPT" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"TRANSACT_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"TRANSACT_DATE" DATE NULL ,
"LIMIT_TIME" DATE NULL ,
"REMARK" VARCHAR2(4000 CHAR) NULL ,
"OP" VARCHAR2(255 CHAR) NULL ,
"MSG_CATEGORY_ID" NUMBER(38) NULL ,
"INTENT" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."MESSAGES" IS '站内信表';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."SUBJECT" IS '标题';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."CONTENT" IS '内容';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."PARENT_ID" IS '父节点ID';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."MSG_FROM" IS '发件人姓名';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."FROM_ID" IS '发件人ID';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."TO_ID" IS '收件人ID';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."MSG_STATUS" IS '消息状态(0:未读 1:已读)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."MSG_TYPE" IS '类型(0:收件箱
 1:保存草稿)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."IS_SEND_DEL" IS '发送方是否删除(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."IS_RECEIVE_DEL" IS '接受方是否删除(0:否 1:是) ';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."TO_DEPT" IS '处理部门(1:客服 2:业务 3:市场)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."TRANSACT_STATUS" IS '处理状态(0:未处理 1:处理中 2:已完成)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."TRANSACT_DATE" IS '处理时间';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."LIMIT_TIME" IS '处理时限';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."OP" IS '处理人';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."MSG_CATEGORY_ID" IS '分类ID';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."INTENT" IS '分类(0默认 3拍品委托)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."APP_ID" IS '应用ID(0:PC 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."MESSAGES"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for MSG_CATEGORIES
-- ----------------------------
DROP TABLE "ZHAO"."MSG_CATEGORIES";
CREATE TABLE "ZHAO"."MSG_CATEGORIES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"CATEGORY_TYPE" VARCHAR2(255 CHAR) NULL ,
"DEPARTMENT_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."MSG_CATEGORIES" IS '站内信分类表';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."CATEGORY_TYPE" IS '类型(1:普通模板  2:系统调用)';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."DEPARTMENT_ID" IS '部门ID(1:客服 2:业务 3:市场 4:技术)';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."STATUS" IS '状态(0:无效 1:正常)';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."MSG_CATEGORIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for MSG_TEMPLATES
-- ----------------------------
DROP TABLE "ZHAO"."MSG_TEMPLATES";
CREATE TABLE "ZHAO"."MSG_TEMPLATES" (
"ID" NUMBER(38) NOT NULL ,
"PARENT_ID" NUMBER(38) DEFAULT 0  NULL ,
"SUBJECT" VARCHAR2(255 CHAR) NULL ,
"CONTENT_HEAD" VARCHAR2(255 CHAR) NULL ,
"CONTENT" VARCHAR2(4000 BYTE) NULL ,
"CONTENT_FOOT" VARCHAR2(255 CHAR) NULL ,
"CATEGORY" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"TEMPLATE_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"DEPARTMENT_ID" NUMBER(38) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."MSG_TEMPLATES" IS '站内信模板表';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."PARENT_ID" IS '父类ID(0为一级模板)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."SUBJECT" IS '标题';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."CONTENT_HEAD" IS '内容头部(一级模板使用)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."CONTENT" IS '内容(二级模板使用)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."CONTENT_FOOT" IS '内容尾部(一级模板使用)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."CATEGORY" IS '类别(1:站内信 2:手机短信 3:邮件)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."TEMPLATE_TYPE" IS '类型(1:普通模板  2:系统调用)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."DEPARTMENT_ID" IS '部门ID(1:客服 2:业务 3:市场 4:技术)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."STATUS" IS '状态(0:无效 1:正常)';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."MSG_TEMPLATES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for OAUTH_ACCESS_TOKEN
-- ----------------------------
DROP TABLE "ZHAO"."OAUTH_ACCESS_TOKEN";
CREATE TABLE "ZHAO"."OAUTH_ACCESS_TOKEN" (
"TOKEN_ID" VARCHAR2(256 BYTE) NULL ,
"TOKEN" BLOB NULL ,
"AUTHENTICATION_ID" VARCHAR2(256 BYTE) NULL ,
"USER_NAME" VARCHAR2(256 BYTE) NULL ,
"CLIENT_ID" VARCHAR2(256 BYTE) NULL ,
"AUTHENTICATION" BLOB NULL ,
"REFRESH_TOKEN" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OAUTH_REFRESH_TOKEN
-- ----------------------------
DROP TABLE "ZHAO"."OAUTH_REFRESH_TOKEN";
CREATE TABLE "ZHAO"."OAUTH_REFRESH_TOKEN" (
"TOKEN_ID" VARCHAR2(256 BYTE) NULL ,
"TOKEN" BLOB NULL ,
"AUTHENTICATION" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PAINT_CONFIG
-- ----------------------------
DROP TABLE "ZHAO"."PAINT_CONFIG";
CREATE TABLE "ZHAO"."PAINT_CONFIG" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NOT NULL ,
"AUCTION_NAME" VARCHAR2(2000 BYTE) NULL ,
"AUCTION_NAME_TW" VARCHAR2(2000 BYTE) NULL ,
"START_AT" DATE NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 1  NULL ,
"ORDER_NO" NUMBER(38) NULL ,
"PICTURE" VARCHAR2(255 BYTE) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CONFIG_TYPE" CHAR(1 BYTE) NULL ,
"END_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PAINT_CONFIG" IS '书画配置信息';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."AUCTION_NO" IS '编号';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."AUCTION_NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."AUCTION_NAME_TW" IS '繁体名称';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."START_AT" IS '开始显示时间';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."STATUS" IS '状态(0:不可用1可用)';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."ORDER_NO" IS '排序';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."PICTURE" IS '图片';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."ADMIN_ID" IS '操作人id';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."ADMIN_NAME" IS '操作人';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."CONFIG_TYPE" IS '配置类型(0:拍品1专场)';
COMMENT ON COLUMN "ZHAO"."PAINT_CONFIG"."END_AT" IS '结束显示时间';

-- ----------------------------
-- Table structure for PARTNER_PAYMENT_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."PARTNER_PAYMENT_DETAILS";
CREATE TABLE "ZHAO"."PARTNER_PAYMENT_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"PARTNER_PAYMENT_ID" NUMBER(38) NULL ,
"SETTLEMENT_ID" NUMBER(38) NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"CONTRACT_CHARGE" NUMBER(6,2) DEFAULT 0  NULL ,
"AGREEMENT_CHARGE" NUMBER(6,2) DEFAULT 0  NULL ,
"SETTLEMENT_CHARGE_FEE" NUMBER(16,2) DEFAULT 0  NULL ,
"AGREEMENT_CHARGE_FEE" NUMBER(16,2) DEFAULT 0  NULL ,
"SETTLEMENT_END_PRICE" NUMBER(16,2) DEFAULT 0  NULL ,
"SETTLEMENTED_AT" DATE NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PARTNER_PAYMENT_DETAILS" IS '合作方返点支付单明细表';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."PARTNER_PAYMENT_ID" IS '合作分成支付单ID';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."SETTLEMENT_ID" IS '结算单ID';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."USER_ID" IS '结算单委托方ID';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."USER_NAME" IS '结算单委托方姓名';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."CONTRACT_CHARGE" IS '合同服务费%';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."AGREEMENT_CHARGE" IS '合同服务费%';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."SETTLEMENT_CHARGE_FEE" IS '委托服务费';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."AGREEMENT_CHARGE_FEE" IS '可返协议服务费';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."SETTLEMENT_END_PRICE" IS '结算总结标价';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."SETTLEMENTED_AT" IS '结算完成时间';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENT_DETAILS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for PARTNER_PAYMENTS
-- ----------------------------
DROP TABLE "ZHAO"."PARTNER_PAYMENTS";
CREATE TABLE "ZHAO"."PARTNER_PAYMENTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AGREEMENT_CHARGE" NUMBER(6,2) DEFAULT 0  NULL ,
"SETTLEMENT_CHARGE_FEE" NUMBER(16,2) DEFAULT 0  NULL ,
"AGREEMENT_CHARGE_FEE" NUMBER(16,2) DEFAULT 0  NULL ,
"APPROVED_AT" DATE NULL ,
"PAY_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"PAY_AT" DATE NULL ,
"USER_BANK_ID" NUMBER(38) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PARTNER_PAYMENTS" IS '合作方返点支付单表';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."USER_ID" IS '合作方编号';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."USER_NAME" IS '合作方姓名';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."AGREEMENT_CHARGE" IS '协议服务费%';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."SETTLEMENT_CHARGE_FEE" IS '结算总服务费';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."AGREEMENT_CHARGE_FEE" IS '可返协议总服务费';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."APPROVED_AT" IS '审核通过时间';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."PAY_TYPE" IS '支付方式(1:转余额 2:银行转帐)';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."PAY_AT" IS '支付时间';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."USER_BANK_ID" IS '用户支付银行ID';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."STATUS" IS '状态(1:申请中 2:已通过 3:已支付)';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PARTNER_PAYMENTS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for PARTNERS
-- ----------------------------
DROP TABLE "ZHAO"."PARTNERS";
CREATE TABLE "ZHAO"."PARTNERS" (
"USER_ID" NUMBER(38) NOT NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AGREEMENT_CHARGE" NUMBER(6,2) DEFAULT 0  NULL ,
"PENDING_CHARGE" NUMBER(6,2) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PARTNERS" IS '合作方表';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."USER_ID" IS '合作方编号';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."USER_NAME" IS '合作方姓名';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."AGREEMENT_CHARGE" IS '协议服务费%';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."PENDING_CHARGE" IS '待确认协议服务费%';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."STATUS" IS '状态(0:未确认 1:已确认)';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."ADMIN_ID" IS '添加人ID';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."ADMIN_NAME" IS '添加人名称';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PARTNERS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for PAYMENT_FEE
-- ----------------------------
DROP TABLE "ZHAO"."PAYMENT_FEE";
CREATE TABLE "ZHAO"."PAYMENT_FEE" (
"ID" NUMBER NOT NULL ,
"TYPE" VARCHAR2(100 BYTE) NULL ,
"ACCOUNT_FROM" NUMBER NULL ,
"ACCOUNT_TO" NUMBER NULL ,
"FEE_PERCENT" NUMBER NULL ,
"CREATED_AT" TIMESTAMP(0)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PLSQL_PROFILER_DATA
-- ----------------------------
DROP TABLE "ZHAO"."PLSQL_PROFILER_DATA";
CREATE TABLE "ZHAO"."PLSQL_PROFILER_DATA" (
"RUNID" NUMBER NOT NULL ,
"UNIT_NUMBER" NUMBER NOT NULL ,
"LINE#" NUMBER NOT NULL ,
"TOTAL_OCCUR" NUMBER NULL ,
"TOTAL_TIME" NUMBER NULL ,
"MIN_TIME" NUMBER NULL ,
"MAX_TIME" NUMBER NULL ,
"SPARE1" NUMBER NULL ,
"SPARE2" NUMBER NULL ,
"SPARE3" NUMBER NULL ,
"SPARE4" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PLSQL_PROFILER_DATA" IS 'Accumulated data from all profiler runs';

-- ----------------------------
-- Table structure for PLSQL_PROFILER_RUNS
-- ----------------------------
DROP TABLE "ZHAO"."PLSQL_PROFILER_RUNS";
CREATE TABLE "ZHAO"."PLSQL_PROFILER_RUNS" (
"RUNID" NUMBER NOT NULL ,
"RELATED_RUN" NUMBER NULL ,
"RUN_OWNER" VARCHAR2(32 BYTE) NULL ,
"RUN_DATE" DATE NULL ,
"RUN_COMMENT" VARCHAR2(2047 BYTE) NULL ,
"RUN_TOTAL_TIME" NUMBER NULL ,
"RUN_SYSTEM_INFO" VARCHAR2(2047 BYTE) NULL ,
"RUN_COMMENT1" VARCHAR2(2047 BYTE) NULL ,
"SPARE1" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PLSQL_PROFILER_RUNS" IS 'Run-specific information for the PL/SQL profiler';

-- ----------------------------
-- Table structure for PLSQL_PROFILER_UNITS
-- ----------------------------
DROP TABLE "ZHAO"."PLSQL_PROFILER_UNITS";
CREATE TABLE "ZHAO"."PLSQL_PROFILER_UNITS" (
"RUNID" NUMBER NOT NULL ,
"UNIT_NUMBER" NUMBER NOT NULL ,
"UNIT_TYPE" VARCHAR2(32 BYTE) NULL ,
"UNIT_OWNER" VARCHAR2(32 BYTE) NULL ,
"UNIT_NAME" VARCHAR2(32 BYTE) NULL ,
"UNIT_TIMESTAMP" DATE NULL ,
"TOTAL_TIME" NUMBER DEFAULT 0  NOT NULL ,
"SPARE1" NUMBER NULL ,
"SPARE2" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PLSQL_PROFILER_UNITS" IS 'Information about each library unit in a run';

-- ----------------------------
-- Table structure for PRIZE_CATEGORY
-- ----------------------------
DROP TABLE "ZHAO"."PRIZE_CATEGORY";
CREATE TABLE "ZHAO"."PRIZE_CATEGORY" (
"ID" NUMBER(38) NOT NULL ,
"PRIZE_ID" NUMBER(38) NOT NULL ,
"PRIZE_NAME" VARCHAR2(255 BYTE) NULL ,
"IMAGE_NAME" VARCHAR2(255 BYTE) NULL ,
"IMAGE_SMALL" VARCHAR2(255 BYTE) NULL ,
"PRZIE_PROBABILITY" NUMBER(16,4) NULL ,
"PRIZE_TYPE" NUMBER(38) NULL ,
"IS_SCORE" NUMBER(38) NULL ,
"PRIZE_DAY" DATE NULL ,
"PRIZE_ORDER" NUMBER(38) NULL ,
"LUCK_NUMBER" NUMBER(38) NULL ,
"PRIZE_NUMBER" NUMBER(38) NULL ,
"STATUS" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"REMARK" VARCHAR2(400 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRIZE_ID" IS '外键ID';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRIZE_NAME" IS '奖品名称';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."IMAGE_NAME" IS '图片名称';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."IMAGE_SMALL" IS '小图名称';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRZIE_PROBABILITY" IS '中奖概率';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRIZE_TYPE" IS '奖品类型(0:非大奖1: 大奖)';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."IS_SCORE" IS '是否为积分(0:否1:是)';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRIZE_DAY" IS '奖品保留日期';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRIZE_ORDER" IS '奖品顺序';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."LUCK_NUMBER" IS '抽奖次数';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."PRIZE_NUMBER" IS '奖品个数';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."STATUS" IS '奖项状态(0:取消1:使用)';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."ADMIN_ID" IS '创建人ID';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."ADMIN_NAME" IS '创建人名称';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."PRIZE_CATEGORY"."REMARK" IS '备注信息';

-- ----------------------------
-- Table structure for PRIZE_CONFIG
-- ----------------------------
DROP TABLE "ZHAO"."PRIZE_CONFIG";
CREATE TABLE "ZHAO"."PRIZE_CONFIG" (
"ID" NUMBER(38) NOT NULL ,
"SUBJECT" VARCHAR2(255 BYTE) NULL ,
"EXCHANGE_SCORE" NUMBER(38) NULL ,
"DRAW_LOTTERY_NUM" NUMBER(38) DEFAULT 0  NULL ,
"DAY_NUM" NUMBER(38) DEFAULT 0  NULL ,
"TOTAL_NUM" NUMBER(38) DEFAULT 0  NULL ,
"DAY_DATE" DATE NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"STATUS" NUMBER DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"REMARK" VARCHAR2(400 BYTE) NULL ,
"SPECIAL_TOPIC_ID" VARCHAR2(20 BYTE) NULL ,
"LOTTERY_PAGE_NAME" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."SUBJECT" IS '主题';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."EXCHANGE_SCORE" IS '兑换积分数';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."DRAW_LOTTERY_NUM" IS '抽奖总数';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."DAY_NUM" IS '每天抽奖人数';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."TOTAL_NUM" IS '总抽奖人数';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."DAY_DATE" IS '每天抽奖日期';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."START_AT" IS '开始日期';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."END_AT" IS '结束日期';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."STATUS" IS '抽奖状态(0:未启用1:启用)';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."ADMIN_ID" IS '创建人ID';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."ADMIN_NAME" IS '创建人名称';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."REMARK" IS '备注信息';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."SPECIAL_TOPIC_ID" IS '专场编号';
COMMENT ON COLUMN "ZHAO"."PRIZE_CONFIG"."LOTTERY_PAGE_NAME" IS '抽奖页面fileName';

-- ----------------------------
-- Table structure for PROPERTY
-- ----------------------------
DROP TABLE "ZHAO"."PROPERTY";
CREATE TABLE "ZHAO"."PROPERTY" (
"ID" NUMBER(38) NOT NULL ,
"PROPERTY_GROUP_ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NOT NULL ,
"NAME_GBK" VARCHAR2(255 BYTE) NOT NULL ,
"NAME_EN" VARCHAR2(255 BYTE) NULL ,
"IS_KEY" NUMBER(38) NULL ,
"TYPE" NUMBER(38) NULL ,
"STATUS" NUMBER(38) NULL ,
"SORT_NO" NUMBER(38) NULL ,
"HAVE_ICON" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PROPERTY" IS '属性';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."PROPERTY_GROUP_ID" IS '属性组编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."NAME" IS '属性名称';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."NAME_GBK" IS '属性名称-繁体';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."NAME_EN" IS '属性名称-英文';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."IS_KEY" IS '关键属性 （0：否 1：是）';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."TYPE" IS '属性类型（0：描述型  1：品相型）';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."STATUS" IS '状态（0：禁用 1：可用）';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."SORT_NO" IS '排序';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."HAVE_ICON" IS '图标（0：无  1：有）';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."PROPERTY"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for PROPERTY_EXCLUDE
-- ----------------------------
DROP TABLE "ZHAO"."PROPERTY_EXCLUDE";
CREATE TABLE "ZHAO"."PROPERTY_EXCLUDE" (
"ID" NUMBER(38) NOT NULL ,
"PROPERTY_ID" NUMBER(38) NULL ,
"CHARACTER_ID" NUMBER(38) NULL ,
"EXCLUDE_PROPERTY_ID" NUMBER(38) NOT NULL ,
"TYPE" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PROPERTY_EXCLUDE" IS '属性排斥关系';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."PROPERTY_ID" IS '属性编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."CHARACTER_ID" IS '品级编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."EXCLUDE_PROPERTY_ID" IS '禁用属性编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."TYPE" IS '排斥类型（0:属性间禁用关系  1：品级间禁用关系）';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."PROPERTY_EXCLUDE"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for PROPERTY_GROUP
-- ----------------------------
DROP TABLE "ZHAO"."PROPERTY_GROUP";
CREATE TABLE "ZHAO"."PROPERTY_GROUP" (
"ID" NUMBER(38) NOT NULL ,
"PROPERTY_SET_ID" NUMBER(38) NOT NULL ,
"GROUP_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"GROUP_NAME_GBK" VARCHAR2(255 BYTE) NOT NULL ,
"GROUP_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"COLLATE_STATUS" NUMBER(38) NULL ,
"STATUS" NUMBER(38) NULL ,
"SORT_NO" NUMBER(38) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROPERTY_SET
-- ----------------------------
DROP TABLE "ZHAO"."PROPERTY_SET";
CREATE TABLE "ZHAO"."PROPERTY_SET" (
"ID" NUMBER(38) NOT NULL ,
"SET_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"SET_NAME_EN" VARCHAR2(255 BYTE) NULL ,
"SET_NAME_GBK" VARCHAR2(255 BYTE) NULL ,
"CREATED_MAN" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."PROPERTY_SET" IS '属性集';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."ID" IS '编号';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."SET_NAME" IS '属性集名称';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."SET_NAME_EN" IS '属性集名称-英文';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."SET_NAME_GBK" IS '属性集名称-繁体';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."CREATED_MAN" IS '创建人';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."PROPERTY_SET"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for QRTZ_BLOB_TRIGGERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS";
CREATE TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS" (
"TRIGGER_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"BLOB_DATA" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS" IS '用于 Quartz 用户用 JDBC 创建自己定制的 Trigger 类型';
COMMENT ON COLUMN "ZHAO"."QRTZ_BLOB_TRIGGERS"."TRIGGER_NAME" IS 'qrtz_triggers表中trigger_name的外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_BLOB_TRIGGERS"."TRIGGER_GROUP" IS 'qrtz_triggers表中trigger_group的外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_BLOB_TRIGGERS"."BLOB_DATA" IS '保存的trigger对象';

-- ----------------------------
-- Table structure for QRTZ_CALENDARS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_CALENDARS";
CREATE TABLE "ZHAO"."QRTZ_CALENDARS" (
"CALENDAR_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"CALENDAR" BLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_CALENDARS" IS '保存需要job不需要执行的日历（主要用于排除job节假日等日期）';
COMMENT ON COLUMN "ZHAO"."QRTZ_CALENDARS"."CALENDAR_NAME" IS '日历名称';
COMMENT ON COLUMN "ZHAO"."QRTZ_CALENDARS"."CALENDAR" IS '日历对象';

-- ----------------------------
-- Table structure for QRTZ_CRON_TRIGGERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_CRON_TRIGGERS";
CREATE TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" (
"TRIGGER_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"CRON_EXPRESSION" VARCHAR2(120 BYTE) NOT NULL ,
"TIME_ZONE_ID" VARCHAR2(80 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" IS '用于存储cron表达式表 ';
COMMENT ON COLUMN "ZHAO"."QRTZ_CRON_TRIGGERS"."TRIGGER_NAME" IS 'qrtz_triggers表trigger_name的外键 ';
COMMENT ON COLUMN "ZHAO"."QRTZ_CRON_TRIGGERS"."TRIGGER_GROUP" IS 'qrtz_triggers表中trigger_group的外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_CRON_TRIGGERS"."CRON_EXPRESSION" IS 'corn表达式';
COMMENT ON COLUMN "ZHAO"."QRTZ_CRON_TRIGGERS"."TIME_ZONE_ID" IS '时间时区';

-- ----------------------------
-- Table structure for QRTZ_FIRED_TRIGGERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS";
CREATE TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" (
"ENTRY_ID" VARCHAR2(95 BYTE) NOT NULL ,
"TRIGGER_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"IS_VOLATILE" VARCHAR2(1 BYTE) NOT NULL ,
"INSTANCE_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"FIRED_TIME" NUMBER(13) NOT NULL ,
"PRIORITY" NUMBER(13) NOT NULL ,
"STATE" VARCHAR2(16 BYTE) NOT NULL ,
"JOB_NAME" VARCHAR2(200 BYTE) NULL ,
"JOB_GROUP" VARCHAR2(200 BYTE) NULL ,
"IS_STATEFUL" VARCHAR2(1 BYTE) NULL ,
"REQUESTS_RECOVERY" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" IS '存放正在运行的Trigger';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."ENTRY_ID" IS 'id';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."TRIGGER_NAME" IS 'qrtz_triggers表trigger_name的外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."TRIGGER_GROUP" IS 'qrtz_triggers表中trigger_group的外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."IS_VOLATILE" IS '设置当程序关闭是是否删除此job记录(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."INSTANCE_NAME" IS '集群名称(如果配置文件中设为AUTO 则为当前计算机名+时间)';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."FIRED_TIME" IS '执行时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."PRIORITY" IS '优先级';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."STATE" IS '执行状态()';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."JOB_NAME" IS 'qrtz_job_details表job_name的外键
';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."JOB_GROUP" IS 'qrtz_job_details表job_group的外键
';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."IS_STATEFUL" IS '标示该job是否为有状态的执行(0:否 1:有) ,有状态时为只有上次job执行完毕后才开始下次job';
COMMENT ON COLUMN "ZHAO"."QRTZ_FIRED_TRIGGERS"."REQUESTS_RECOVERY" IS '在执行过程中程序意外崩溃,在重启是否重新执行(0:否 1:是)';

-- ----------------------------
-- Table structure for QRTZ_JOB_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_JOB_DETAILS";
CREATE TABLE "ZHAO"."QRTZ_JOB_DETAILS" (
"JOB_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"JOB_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(1500 BYTE) NULL ,
"JOB_CLASS_NAME" VARCHAR2(250 BYTE) NOT NULL ,
"IS_DURABLE" VARCHAR2(1 BYTE) NOT NULL ,
"IS_VOLATILE" VARCHAR2(1 BYTE) NOT NULL ,
"IS_STATEFUL" VARCHAR2(1 BYTE) NOT NULL ,
"REQUESTS_RECOVERY" VARCHAR2(1 BYTE) NOT NULL ,
"JOB_DATA" BLOB NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE DEFAULT sysdate  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_ID" NUMBER(38) NULL ,
"CREATED_NAME" VARCHAR2(255 CHAR) NULL ,
"UPDATED_AT" DATE NULL ,
"REMIND_PERIOD" VARCHAR2(255 CHAR) NULL ,
"JOB_TYPE" NUMBER(1) NULL ,
"ID" NUMBER(38) NOT NULL ,
"JOB_REMIND_NAME" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_JOB_DETAILS" IS '用于保存job详细信息';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."JOB_NAME" IS 'job名称';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."JOB_GROUP" IS 'job对应的组(job名称和组是联合主键,必须唯一)';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."DESCRIPTION" IS '此处用于保存job内容';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."JOB_CLASS_NAME" IS 'Job接口实现类包名,实现execute方法用于每次job执行其它业务逻辑';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."IS_DURABLE" IS '是否持久化(0:整个job执行完毕后会从数据库中删除 1:永久持久化)';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."IS_VOLATILE" IS '设置当程序关闭是是否删除此job记录(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."IS_STATEFUL" IS '标示该job是否为有状态的执行(0:否 1:有) ,有状态时为只有上次job执行完毕后才开始下次job';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."REQUESTS_RECOVERY" IS '在执行过程中程序意外崩溃,在重启是否重新执行(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."JOB_DATA" IS '存放job持久化对象';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."CREATED_ID" IS '创建人ID';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."CREATED_NAME" IS '创建人名称';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."REMIND_PERIOD" IS '提醒周期';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."JOB_TYPE" IS '任务类型(0:系统设置JOB  1:remind自定义设置)';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."ID" IS '提醒任务ID';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_DETAILS"."JOB_REMIND_NAME" IS '提醒任务名称';

-- ----------------------------
-- Table structure for QRTZ_JOB_LISTENERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_JOB_LISTENERS";
CREATE TABLE "ZHAO"."QRTZ_JOB_LISTENERS" (
"JOB_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"JOB_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"JOB_LISTENER" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_JOB_LISTENERS" IS 'job监听器';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_LISTENERS"."JOB_NAME" IS 'qrtz_job_details表中job_name外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_LISTENERS"."JOB_GROUP" IS 'qrtz_job_details表中job_group外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_JOB_LISTENERS"."JOB_LISTENER" IS '监听器实现类的包名';

-- ----------------------------
-- Table structure for QRTZ_LOCKS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_LOCKS";
CREATE TABLE "ZHAO"."QRTZ_LOCKS" (
"LOCK_NAME" VARCHAR2(40 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_LOCKS" IS '存储程序的非观锁的信息(假如使用了悲观锁)';
COMMENT ON COLUMN "ZHAO"."QRTZ_LOCKS"."LOCK_NAME" IS '乐观锁和悲观锁';

-- ----------------------------
-- Table structure for QRTZ_PAUSED_TRIGGER_GRPS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_PAUSED_TRIGGER_GRPS";
CREATE TABLE "ZHAO"."QRTZ_PAUSED_TRIGGER_GRPS" (
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_PAUSED_TRIGGER_GRPS" IS '存储已暂停的 Trigger 组的信息';
COMMENT ON COLUMN "ZHAO"."QRTZ_PAUSED_TRIGGER_GRPS"."TRIGGER_GROUP" IS 'trigger组名';

-- ----------------------------
-- Table structure for QRTZ_SCHEDULER_STATE
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_SCHEDULER_STATE";
CREATE TABLE "ZHAO"."QRTZ_SCHEDULER_STATE" (
"INSTANCE_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"LAST_CHECKIN_TIME" NUMBER(13) NOT NULL ,
"CHECKIN_INTERVAL" NUMBER(13) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_SCHEDULER_STATE" IS 'quartz集群表';
COMMENT ON COLUMN "ZHAO"."QRTZ_SCHEDULER_STATE"."INSTANCE_NAME" IS '集群名称(如果配置文件中设为AUTO 则为当前计算机名+时间)';
COMMENT ON COLUMN "ZHAO"."QRTZ_SCHEDULER_STATE"."LAST_CHECKIN_TIME" IS '上次检查时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_SCHEDULER_STATE"."CHECKIN_INTERVAL" IS '检查间隔时间';

-- ----------------------------
-- Table structure for QRTZ_SIMPLE_TRIGGERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS";
CREATE TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" (
"TRIGGER_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"REPEAT_COUNT" NUMBER(7) NOT NULL ,
"REPEAT_INTERVAL" NUMBER(12) NOT NULL ,
"TIMES_TRIGGERED" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" IS '保存简单的触发器(simple)';
COMMENT ON COLUMN "ZHAO"."QRTZ_SIMPLE_TRIGGERS"."TRIGGER_NAME" IS 'qrtz_triggers表中tirgger_name外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_SIMPLE_TRIGGERS"."TRIGGER_GROUP" IS 'qrtz_triggers表中tirgger_group外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_SIMPLE_TRIGGERS"."REPEAT_COUNT" IS 'trigger执行次数';
COMMENT ON COLUMN "ZHAO"."QRTZ_SIMPLE_TRIGGERS"."REPEAT_INTERVAL" IS 'trigger执行间隔时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_SIMPLE_TRIGGERS"."TIMES_TRIGGERED" IS '已执行的job次数';

-- ----------------------------
-- Table structure for QRTZ_TRIGGER_LISTENERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS";
CREATE TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" (
"TRIGGER_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_LISTENER" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" IS 'trigger监听器';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGER_LISTENERS"."TRIGGER_NAME" IS 'qrtz_triggers表tirgger_name外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGER_LISTENERS"."TRIGGER_GROUP" IS 'qrtz_triggers表tirgger_group外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGER_LISTENERS"."TRIGGER_LISTENER" IS '实现类监听器包名';

-- ----------------------------
-- Table structure for QRTZ_TRIGGERS
-- ----------------------------
DROP TABLE "ZHAO"."QRTZ_TRIGGERS";
CREATE TABLE "ZHAO"."QRTZ_TRIGGERS" (
"TRIGGER_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"TRIGGER_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"JOB_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"JOB_GROUP" VARCHAR2(200 BYTE) NOT NULL ,
"IS_VOLATILE" VARCHAR2(1 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(250 BYTE) NULL ,
"NEXT_FIRE_TIME" NUMBER(13) NULL ,
"PREV_FIRE_TIME" NUMBER(13) NULL ,
"PRIORITY" NUMBER(13) NULL ,
"TRIGGER_STATE" VARCHAR2(16 BYTE) NOT NULL ,
"TRIGGER_TYPE" VARCHAR2(8 BYTE) NOT NULL ,
"START_TIME" NUMBER(13) NOT NULL ,
"END_TIME" NUMBER(13) NULL ,
"CALENDAR_NAME" VARCHAR2(200 BYTE) NULL ,
"MISFIRE_INSTR" NUMBER(2) NULL ,
"JOB_DATA" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QRTZ_TRIGGERS" IS '保存Trigger(触发器)信息';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."TRIGGER_NAME" IS 'Trigger名称';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."TRIGGER_GROUP" IS 'Trigger组';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."JOB_NAME" IS 'qrtz_job_details表job_name的外键
';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."JOB_GROUP" IS 'qrtz_job_details表job_group的外键
';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."IS_VOLATILE" IS '设置当程序关闭是是否删除此Trigger记录(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."DESCRIPTION" IS 'Trigger说明';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."NEXT_FIRE_TIME" IS '下次执行时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."PREV_FIRE_TIME" IS '上次执行时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."PRIORITY" IS '优先级';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."TRIGGER_STATE" IS '当前trigger状态(PAUSED:暂停中 WAITING:等待中 BLOCKED:阻塞 ERROR:错误 ACQUIRED:运行中)';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."TRIGGER_TYPE" IS 'trigger类型(CRON:cron表达式 SIMPLE:简单定时任务 CALENDARS:日历)';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."START_TIME" IS 'Trigger开始时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."END_TIME" IS 'Trigger结束时间';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."CALENDAR_NAME" IS 'qrtz_calendars表中calendar_name的外键';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."MISFIRE_INSTR" IS 'trigger过时触发指令';
COMMENT ON COLUMN "ZHAO"."QRTZ_TRIGGERS"."JOB_DATA" IS '存放job持久化对象';

-- ----------------------------
-- Table structure for QUOTATIONS_AUCTION
-- ----------------------------
DROP TABLE "ZHAO"."QUOTATIONS_AUCTION";
CREATE TABLE "ZHAO"."QUOTATIONS_AUCTION" (
"QUOTATION_TIME" DATE NULL ,
"CHI_NO" VARCHAR2(225 BYTE) NULL ,
"AVG_BID" NUMBER(38) NULL ,
"AMOUNT" NUMBER(38) NULL ,
"MAX_BID" NUMBER(38) NULL ,
"MIN_BID" NUMBER(38) NULL ,
"CLASSES_ID" NUMBER(38) NULL ,
"CHARACTERS" VARCHAR2(225 BYTE) NULL ,
"KEYPROPERTY" NUMBER(38) NULL ,
"CATEGORIES" VARCHAR2(225 BYTE) NULL ,
"IS_SAMPLE" NUMBER(38) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."QUOTATIONS_AUCTION" IS '拍品行情';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."QUOTATION_TIME" IS '时间';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."CHI_NO" IS '志号';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."AVG_BID" IS '均价';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."AMOUNT" IS '成交数（套）';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."MAX_BID" IS '最大价格';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."MIN_BID" IS '最小价格';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."CLASSES_ID" IS '志号id';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."CHARACTERS" IS '品相';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."KEYPROPERTY" IS '关键属性';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."CATEGORIES" IS '类型';
COMMENT ON COLUMN "ZHAO"."QUOTATIONS_AUCTION"."IS_SAMPLE" IS '是否样本 0否 1是';

-- ----------------------------
-- Table structure for RALASAFE_BACKUP
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_BACKUP";
CREATE TABLE "ZHAO"."RALASAFE_BACKUP" (
"ID" NUMBER NOT NULL ,
"CREATETIME" TIMESTAMP(6)  NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL ,
"CONTENT" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_BUSINESSDATA
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_BUSINESSDATA";
CREATE TABLE "ZHAO"."RALASAFE_BUSINESSDATA" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL ,
"INSTALLDATE" DATE NULL ,
"FILENAME" VARCHAR2(40 BYTE) NULL ,
"PID" NUMBER NULL ,
"ISLEAF" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_DECISION_ENTITLEMENT
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_DECISION_ENTITLEMENT";
CREATE TABLE "ZHAO"."RALASAFE_DECISION_ENTITLEMENT" (
"ID" NUMBER NOT NULL ,
"PRIVILEGEID" NUMBER NULL ,
"USERCATEGORYID" NUMBER NULL ,
"BUSINESSDATAID" NUMBER NULL ,
"EFFECT" VARCHAR2(100 BYTE) NULL ,
"DENYREASON" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_PRIVILEGE
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_PRIVILEGE";
CREATE TABLE "ZHAO"."RALASAFE_PRIVILEGE" (
"ID" NUMBER NOT NULL ,
"PID" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"ISLEAF" NUMBER NULL ,
"DISPLAY" NUMBER NULL ,
"DECISIONPOLICYCOMBALG" NUMBER NULL ,
"QUERYPOLICYCOMBALG" NUMBER NULL ,
"TYPE" NUMBER NULL ,
"CONSTANTNAME" VARCHAR2(40 BYTE) NULL ,
"URL" VARCHAR2(100 BYTE) NULL ,
"TARGET" VARCHAR2(20 BYTE) NULL ,
"ORDERNUM" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_QUERY
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_QUERY";
CREATE TABLE "ZHAO"."RALASAFE_QUERY" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL ,
"INSTALLDATE" DATE NULL ,
"FILENAME" VARCHAR2(40 BYTE) NULL ,
"PID" NUMBER NULL ,
"ISLEAF" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_QUERY_ENTITLEMENT
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_QUERY_ENTITLEMENT";
CREATE TABLE "ZHAO"."RALASAFE_QUERY_ENTITLEMENT" (
"ID" NUMBER NOT NULL ,
"PRIVILEGEID" NUMBER NULL ,
"USERCATEGORYID" NUMBER NULL ,
"QUERYID" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_RALASAFE_USERROLE
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_RALASAFE_USERROLE";
CREATE TABLE "ZHAO"."RALASAFE_RALASAFE_USERROLE" (
"USERID" NUMBER NOT NULL ,
"ROLEID" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_ROLE
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_ROLE";
CREATE TABLE "ZHAO"."RALASAFE_ROLE" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_ROLEPRIVILEGE
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE";
CREATE TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE" (
"ROLEID" NUMBER NOT NULL ,
"PRIVILEGEID" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_SEQUENCE
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_SEQUENCE";
CREATE TABLE "ZHAO"."RALASAFE_SEQUENCE" (
"CURRENTVALUE" NUMBER NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for RALASAFE_USERCATEGORY
-- ----------------------------
DROP TABLE "ZHAO"."RALASAFE_USERCATEGORY";
CREATE TABLE "ZHAO"."RALASAFE_USERCATEGORY" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL ,
"INSTALLDATE" DATE NULL ,
"FILENAME" VARCHAR2(40 BYTE) NULL ,
"PID" NUMBER NULL ,
"ISLEAF" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for REMIND
-- ----------------------------
DROP TABLE "ZHAO"."REMIND";
CREATE TABLE "ZHAO"."REMIND" (
"ID" NUMBER(38) NOT NULL ,
"REMIND_NAME" VARCHAR2(255 CHAR) NOT NULL ,
"USER_ID" NUMBER(38) NOT NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"CONTENT" VARCHAR2(1500 CHAR) NULL ,
"SERVICE_OP_ID" NUMBER(38) NULL ,
"SERVICE_OP_NAME" VARCHAR2(255 CHAR) NULL ,
"REMIND_TYPE" NUMBER(38) DEFAULT 0  NULL ,
"REMIND_AT" DATE NULL ,
"STATUS" NUMBER(1) DEFAULT 0  NULL ,
"PROCESS_RESULT" VARCHAR2(1500 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"PROCESS_OP_ID" NUMBER(38) NULL ,
"PROCESS_OP" VARCHAR2(255 CHAR) NULL ,
"PROCESS_AT" DATE NULL ,
"REMIND_PERIOD" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."REMIND" IS '提醒信息表';
COMMENT ON COLUMN "ZHAO"."REMIND"."REMIND_NAME" IS '提醒名称';
COMMENT ON COLUMN "ZHAO"."REMIND"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."REMIND"."USER_NAME" IS '客户名称';
COMMENT ON COLUMN "ZHAO"."REMIND"."CONTENT" IS '提醒内容';
COMMENT ON COLUMN "ZHAO"."REMIND"."SERVICE_OP_ID" IS '服务专员id';
COMMENT ON COLUMN "ZHAO"."REMIND"."SERVICE_OP_NAME" IS '客服专员姓名';
COMMENT ON COLUMN "ZHAO"."REMIND"."REMIND_TYPE" IS '提醒类型(0:自定义提醒 1:系统提醒)';
COMMENT ON COLUMN "ZHAO"."REMIND"."REMIND_AT" IS '提醒时间';
COMMENT ON COLUMN "ZHAO"."REMIND"."STATUS" IS '处理状态(0:未处理 1:已处理)';
COMMENT ON COLUMN "ZHAO"."REMIND"."PROCESS_RESULT" IS '处理结果';
COMMENT ON COLUMN "ZHAO"."REMIND"."ADMIN_ID" IS '添加人ID';
COMMENT ON COLUMN "ZHAO"."REMIND"."ADMIN_NAME" IS '添加人名称';
COMMENT ON COLUMN "ZHAO"."REMIND"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."REMIND"."PROCESS_OP_ID" IS '处理人ID';
COMMENT ON COLUMN "ZHAO"."REMIND"."PROCESS_OP" IS '处理人名称';
COMMENT ON COLUMN "ZHAO"."REMIND"."PROCESS_AT" IS '处理时间';
COMMENT ON COLUMN "ZHAO"."REMIND"."REMIND_PERIOD" IS '提醒周期';

-- ----------------------------
-- Table structure for REMIND_SYSTEM_SETTING
-- ----------------------------
DROP TABLE "ZHAO"."REMIND_SYSTEM_SETTING";
CREATE TABLE "ZHAO"."REMIND_SYSTEM_SETTING" (
"ID" NUMBER(38) NOT NULL ,
"REMIND_NAME" VARCHAR2(255 CHAR) NOT NULL ,
"DESCRIPTION" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"UPDATED_AT" DATE NULL ,
"IS_REMIND" NUMBER(1) NULL ,
"REMIND_DAY" VARCHAR2(255 CHAR) NULL ,
"REMIND_MONEY" NUMBER(16,2) NULL ,
"IS_NEED_PARAMETER" NUMBER(1) DEFAULT 0  NULL ,
"PREV_EXECUTE_AT" DATE NULL ,
"SQL_SENTENCE" CLOB NULL ,
"REMIND_PERIOD" VARCHAR2(255 CHAR) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."REMIND_SYSTEM_SETTING" IS '定时任务系统设置';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."REMIND_NAME" IS '提醒名称';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."DESCRIPTION" IS '提醒描述';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."ADMIN_NAME" IS '操作人';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."IS_REMIND" IS '是否提醒(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."REMIND_DAY" IS '提醒天数';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."REMIND_MONEY" IS '提醒金额';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."IS_NEED_PARAMETER" IS '是否有参数(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."PREV_EXECUTE_AT" IS '上次执行时间(主要用户查询时间段时使用)';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."SQL_SENTENCE" IS '执行提醒任务的sql查询语句';
COMMENT ON COLUMN "ZHAO"."REMIND_SYSTEM_SETTING"."REMIND_PERIOD" IS '提醒周期(0:定期执行  1:每天执行一次 )';

-- ----------------------------
-- Table structure for REMIND_USER_SETTING
-- ----------------------------
DROP TABLE "ZHAO"."REMIND_USER_SETTING";
CREATE TABLE "ZHAO"."REMIND_USER_SETTING" (
"ID" NUMBER(38) NOT NULL ,
"SYSTEM_REMIND_SET_ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NOT NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"SERVICE_OP_ID" NUMBER(38) NOT NULL ,
"SERVICE_OP_NAME" VARCHAR2(255 CHAR) NOT NULL ,
"IS_REMIND" NUMBER(1) DEFAULT 0  NULL ,
"REMIND_DAY" VARCHAR2(255 CHAR) NULL ,
"REMIND_MONEY" NUMBER(16,2) NULL ,
"CREATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."REMIND_USER_SETTING" IS '客户提醒设置';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."SYSTEM_REMIND_SET_ID" IS '系统提醒设置ID';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."USER_ID" IS '客户ID';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."USER_NAME" IS '客户名称';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."SERVICE_OP_ID" IS '服务专员id';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."SERVICE_OP_NAME" IS '客服专员姓名';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."IS_REMIND" IS '是否提醒(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."REMIND_DAY" IS '提醒天数';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."REMIND_MONEY" IS '提醒金额';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."ADMIN_NAME" IS '操作人';
COMMENT ON COLUMN "ZHAO"."REMIND_USER_SETTING"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for RIGHTS
-- ----------------------------
DROP TABLE "ZHAO"."RIGHTS";
CREATE TABLE "ZHAO"."RIGHTS" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(200 BYTE) NULL ,
"CONTROLLER" VARCHAR2(200 BYTE) NULL ,
"ACTION" VARCHAR2(200 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(200 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SCHEMA_MIGRATIONS
-- ----------------------------
DROP TABLE "ZHAO"."SCHEMA_MIGRATIONS";
CREATE TABLE "ZHAO"."SCHEMA_MIGRATIONS" (
"VERSION" VARCHAR2(255 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SCORE_CONSUME_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."SCORE_CONSUME_DETAILS";
CREATE TABLE "ZHAO"."SCORE_CONSUME_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"SCORE_CONSUME_ID" NUMBER(38) NULL ,
"SCORE_ID" NUMBER(38) NULL ,
"SCORES" NUMBER(10) DEFAULT 0  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORE_CONSUME_DETAILS" IS '积分消费明细表';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUME_DETAILS"."SCORE_CONSUME_ID" IS '积分消费ID';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUME_DETAILS"."SCORE_ID" IS '积分ID';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUME_DETAILS"."SCORES" IS '积分消费数';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUME_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUME_DETAILS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for SCORE_CONSUMES
-- ----------------------------
DROP TABLE "ZHAO"."SCORE_CONSUMES";
CREATE TABLE "ZHAO"."SCORE_CONSUMES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"SCORE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CONSUME_TYPE" VARCHAR2(255 CHAR) NULL ,
"CONSUME_SCORES" NUMBER(10) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"SOURCE_ID" NUMBER(38) NULL ,
"SOURCE_TYPE" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORE_CONSUMES" IS '用户积分消费总表';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."USER_NAME" IS '用户姓名';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."SCORE_TYPE" IS '积分类型(0:竞买 1:委托)';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."CONSUME_TYPE" IS '消费类型(1:退货扣除委托积分 2:商城消费 3:退货扣除竞买积分 4:委托转竞买 5:委托提现 6积分清零 7市场活动抽奖消费)';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."CONSUME_SCORES" IS '消费积分数';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."SOURCE_ID" IS '积分消费对象ID';
COMMENT ON COLUMN "ZHAO"."SCORE_CONSUMES"."SOURCE_TYPE" IS '积分消费对象';

-- ----------------------------
-- Table structure for SCORE_GIFT_DEDUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."SCORE_GIFT_DEDUCTIONS";
CREATE TABLE "ZHAO"."SCORE_GIFT_DEDUCTIONS" (
"ID" NUMBER(38) NOT NULL ,
"PEOPLE_NUMBER" NUMBER(38) DEFAULT 0  NULL ,
"USER_IDS" VARCHAR2(255 CHAR) NULL ,
"SCORES" NUMBER(38) DEFAULT 0  NULL ,
"TOTAL_SCORES" NUMBER(38) DEFAULT 0  NULL ,
"OPERATION_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"EFFECTED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORE_GIFT_DEDUCTIONS" IS '用户积分赠送扣除历史';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."PEOPLE_NUMBER" IS '人数';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."USER_IDS" IS '本次操作关联所有用户ID';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."SCORES" IS '积分数';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."TOTAL_SCORES" IS '积分总数';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."OPERATION_TYPE" IS '操作类型(0:赠送 1:扣除)';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."EFFECTED_AT" IS '生效时间';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SCORE_GIFT_DEDUCTIONS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for SCORE_INCOME_EXPENSES
-- ----------------------------
DROP TABLE "ZHAO"."SCORE_INCOME_EXPENSES";
CREATE TABLE "ZHAO"."SCORE_INCOME_EXPENSES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"SOURCE_ID" NUMBER(38) NULL ,
"SOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"SCORES" NUMBER(38) DEFAULT 0  NULL ,
"SCORE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"DIRECTION" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"OPERATION_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORE_PARAM" NUMBER(16,2) DEFAULT 0.0  NULL ,
"SCORE_TIMES" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORE_INCOME_EXPENSES" IS '用户积分流水';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."USER_ID" IS '客户ID';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."USER_NAME" IS '客户姓名';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."SOURCE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."SOURCE_TYPE" IS '关联对象(Score, ScoreConsume)';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."SCORES" IS '积分数';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."SCORE_TYPE" IS '积分种类(0:竞买 1:委托)';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."DIRECTION" IS '积分类型(0:竞买 1:委托)';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."OPERATION_TYPE" IS '操作类型(1:预存积分生效 2:赠送积分(立即生效的) 3:委托转竞买(产生) 4:委托积分生成 5:商城消费 6:退后后扣除竞买积分 7:委托转竞买(消费) 8:委托积分兑现 9:退货后扣除委托积分 10积分清零)';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."SCORE_PARAM" IS '积分参数';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."SCORE_TIMES" IS '积分倍数';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SCORE_INCOME_EXPENSES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for SCORE_SETTINGS
-- ----------------------------
DROP TABLE "ZHAO"."SCORE_SETTINGS";
CREATE TABLE "ZHAO"."SCORE_SETTINGS" (
"ID" NUMBER(38) NOT NULL ,
"USER_LEVEL_ID" NUMBER(38) NULL ,
"SCORE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORE_TIMES" NUMBER(6,2) DEFAULT 1.0  NULL ,
"RESOURCE_ID" NUMBER(38) NULL ,
"RESOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"SCORE_IMAGES_RATIO_FOR_BUYER" NUMBER(6,2) NULL ,
"SCORE_IMAGES_RATIO_FOR_SELLER" NUMBER(6,2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORE_SETTINGS" IS '积分设置表';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."USER_LEVEL_ID" IS '用户等级ID';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."SCORE_TYPE" IS '积分类型(0:竞买 1:委托)';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."SCORE_TIMES" IS '积分倍数';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."RESOURCE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."RESOURCE_TYPE" IS '关联对象实体(ScoreTimeSetting, AuctionSpecialTopic,ScoreImageRatio)';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."CREATED_AT" IS '创建时间(预存日期)';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."SCORE_IMAGES_RATIO_FOR_BUYER" IS '竞买方   积分 与 形象值的比例';
COMMENT ON COLUMN "ZHAO"."SCORE_SETTINGS"."SCORE_IMAGES_RATIO_FOR_SELLER" IS '委托方   积分 与 形象值的比例';

-- ----------------------------
-- Table structure for SCORE_TIME_SETTINGS
-- ----------------------------
DROP TABLE "ZHAO"."SCORE_TIME_SETTINGS";
CREATE TABLE "ZHAO"."SCORE_TIME_SETTINGS" (
"ID" NUMBER(38) NOT NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORE_TIME_SETTINGS" IS '积分时间设置表';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."START_AT" IS '开始时间';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."END_AT" IS '结束时间';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SCORE_TIME_SETTINGS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for SCORES
-- ----------------------------
DROP TABLE "ZHAO"."SCORES";
CREATE TABLE "ZHAO"."SCORES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"SCORE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORE_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORE_SOURCE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORES" NUMBER(10) DEFAULT 0  NULL ,
"USEABLE_SCORES" NUMBER(10) DEFAULT 0  NULL ,
"SOURCE_ID" NUMBER(38) NULL ,
"SOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"EFFECTED_AT" DATE NULL ,
"EXPIRED_AT" DATE NULL ,
"CONSUME_REMARK" VARCHAR2(1000 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"SCORE_TIMES" NUMBER(6,2) DEFAULT 0  NULL ,
"SCORE_PARAM" NUMBER(6,2) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SCORES" IS '用户积分表';
COMMENT ON COLUMN "ZHAO"."SCORES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."SCORES"."USER_NAME" IS '用户姓名';
COMMENT ON COLUMN "ZHAO"."SCORES"."SCORE_TYPE" IS '积分类型(0:竞买积分,1:委托积分,2:赠送积分,3:活动积分,4:委托转入)';
COMMENT ON COLUMN "ZHAO"."SCORES"."SCORE_STATUS" IS '积分状态(0:预存积分,1:可用积分,2:无效积分,3:拍品退货,4:超期支付,5:超期不支付,6委托转竞买,7委托提现,8积分消费,9过期积分 10已用积分)';
COMMENT ON COLUMN "ZHAO"."SCORES"."SCORE_SOURCE" IS '积分产生来源 (0:交易产生 1：后台赠送 2：委托转入 3：结算产生 4:前台赠送积分)';
COMMENT ON COLUMN "ZHAO"."SCORES"."SCORES" IS '积分总数';
COMMENT ON COLUMN "ZHAO"."SCORES"."USEABLE_SCORES" IS '可用积分数';
COMMENT ON COLUMN "ZHAO"."SCORES"."SOURCE_ID" IS '关联对象ID(交易单ID, 后台赠送操作ID, 结算单ID, 委托积分ID)';
COMMENT ON COLUMN "ZHAO"."SCORES"."SOURCE_TYPE" IS '关联对(UserOrder, Settlement, Score, ScoreGiftDeduction)';
COMMENT ON COLUMN "ZHAO"."SCORES"."EFFECTED_AT" IS '生效日期';
COMMENT ON COLUMN "ZHAO"."SCORES"."EXPIRED_AT" IS '过期日期';
COMMENT ON COLUMN "ZHAO"."SCORES"."CONSUME_REMARK" IS '消费单备注';
COMMENT ON COLUMN "ZHAO"."SCORES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."SCORES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."SCORES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SCORES"."CREATED_AT" IS '创建时间(预存日期)';
COMMENT ON COLUMN "ZHAO"."SCORES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SCORES"."SCORE_TIMES" IS '积分倍数';
COMMENT ON COLUMN "ZHAO"."SCORES"."SCORE_PARAM" IS '积分参数';

-- ----------------------------
-- Table structure for SETTLEMENT_DESPATCHES
-- ----------------------------
DROP TABLE "ZHAO"."SETTLEMENT_DESPATCHES";
CREATE TABLE "ZHAO"."SETTLEMENT_DESPATCHES" (
"ID" NUMBER(38) NOT NULL ,
"SETTLEMENT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USERNAME" VARCHAR2(255 CHAR) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CHARGES" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CHECKOUT_TYPE" VARCHAR2(255 CHAR) NULL ,
"F_CHECK_DATE" DATE NULL ,
"F_CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"FINANCE" VARCHAR2(255 CHAR) NULL ,
"USER_BANK_ID" NUMBER(38) NULL ,
"BANK_ACCOUNT" VARCHAR2(255 CHAR) NULL ,
"BANK_NAME" VARCHAR2(255 CHAR) NULL ,
"BRANCH_NAME" VARCHAR2(255 CHAR) NULL ,
"RETURN_CODE" VARCHAR2(255 CHAR) NULL ,
"CURRENCY" VARCHAR2(255 CHAR) DEFAULT 'RMB'  NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"IS_FREE_CHARGE" NUMBER(1) DEFAULT 0  NULL ,
"NEED_FULFIL" NUMBER(1) DEFAULT 0  NULL ,
"IS_EC_SETTLEMENT" NUMBER(1) DEFAULT 0  NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DESPATCH_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"BANK_USER_NAME" VARCHAR2(255 BYTE) NULL ,
"BANK_INFO" VARCHAR2(1000 CHAR) NULL ,
"CERT_PATH" VARCHAR2(1000 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SETTLEMENT_DESPATCHES" IS '结算分配表';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."SETTLEMENT_ID" IS '结算单ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."USERNAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."AMOUNT" IS '分配金额';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."CHARGES" IS '转帐手续费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."CHECKOUT_TYPE" IS '转出类型(0现金支出 1邮政汇款 2转余额 3银行转账 4现金支出台湾 5IPS转账 6转帐(公) 7汇丰 8Paypal 9 盛付通 10 财付通)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."F_CHECK_DATE" IS '财务检查日期';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."F_CHECK_STATUS" IS '财务检查状态(0未转入 1已完成 2不通过)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."FINANCE" IS '财务操作人';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."USER_BANK_ID" IS '用户银行ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."BANK_ACCOUNT" IS '银行帐号';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."BANK_NAME" IS '银行名称';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."BRANCH_NAME" IS '银行支行';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."RETURN_CODE" IS '银行返回号码';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."CURRENCY" IS '货币类(USD,RMB)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."ADDRESS" IS '用户地址';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."POSTCODE" IS '用户邮编';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."IS_FREE_CHARGE" IS '是否免汇费(0否 1是)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."NEED_FULFIL" IS '汇费补填(0不需要 1未完成 2已完成)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."IS_EC_SETTLEMENT" IS '是否商城结算 0:否; 1:是';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."DESCRIPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."DESPATCH_STATUS" IS '转账状态(0未转 1完成)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."ADMIN_ID" IS '操作人';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."ADMIN_NAME" IS '操作人';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DESPATCHES"."BANK_INFO" IS '银行信息';

-- ----------------------------
-- Table structure for SETTLEMENT_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."SETTLEMENT_DETAILS";
CREATE TABLE "ZHAO"."SETTLEMENT_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"SETTLEMENT_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"AC_INITAL" NUMBER(16,2) DEFAULT 0.0  NULL ,
"END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_CHARGE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_CUSTODY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_ONLOAD" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_INSURE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AGREEMENT_CHARGE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"RETURN_SERVICE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"SCORES" NUMBER(38) DEFAULT 0  NULL ,
"SCORE_PARAM" NUMBER(38) DEFAULT 0  NULL ,
"SCORE_TIMES" NUMBER(38) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"AUCTION_STATUS" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SETTLEMENT_DETAILS" IS '结算明细表';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."SETTLEMENT_ID" IS '结算单ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AC_INITAL" IS '起拍价';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."END_PRICE" IS '结标价';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AC_CHARGE" IS '服务费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AC_CUSTODY" IS '保管费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AC_ONLOAD" IS '制作费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AC_INSURE" IS '保险费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."TOTAL_AMOUNT" IS '结算金额';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AGREEMENT_CHARGE_FEE" IS '可返协议服务费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."RETURN_SERVICE_FEE" IS '返还服务费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENT_DETAILS"."AUCTION_STATUS" IS '拍品结算状态';

-- ----------------------------
-- Table structure for SETTLEMENTS
-- ----------------------------
DROP TABLE "ZHAO"."SETTLEMENTS";
CREATE TABLE "ZHAO"."SETTLEMENTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"NUM" NUMBER(38) DEFAULT 0  NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AUCTION_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"SERVICE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CHARGE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CUSTODY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ONLOAD_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"INSURE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ORTHER_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AGREEMENT_CHARGE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"RETURN_SERVICE_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"IS_RETURN_SERVICE" NUMBER(1) DEFAULT 0  NULL ,
"RETURN_SERVICE_DATE" DATE NULL ,
"IS_FREE_CHARGE" NUMBER(1) DEFAULT 0  NULL ,
"SETTLEMENT_SCORES" NUMBER(38) DEFAULT 0  NULL ,
"BACK_FLAG" NUMBER(1) DEFAULT 0  NULL ,
"SUBMIT_DATE" DATE NULL ,
"TRANSFER_DATE" DATE NULL ,
"OP" VARCHAR2(255 CHAR) NULL ,
"F_CHECK" VARCHAR2(255 CHAR) NULL ,
"F_CHECK_DATE" DATE NULL ,
"CHECK_MAN" VARCHAR2(255 CHAR) NULL ,
"CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHECK_DATE" VARCHAR2(255 CHAR) NULL ,
"CANCEL_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CANCEL_AT" DATE NULL ,
"CANCEL_REASON" VARCHAR2(255 CHAR) NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"DESPATCH_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"BU_CHECK_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SETTLEMENTS" IS '结算表';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."NUM" IS '拍品数量';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."AMOUNT" IS '结算总金额';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."AUCTION_FEE" IS '拍品总金额';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."SERVICE_FEE" IS '服务费总金额';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CHARGE_FEE" IS '服务费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CUSTODY_FEE" IS '保管费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."ONLOAD_FEE" IS '制作费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."INSURE_FEE" IS '保险费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."ORTHER_FEE" IS '其他费用';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."AGREEMENT_CHARGE_FEE" IS '可返协议服务费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."RETURN_SERVICE_AMOUNT" IS '返还服务费';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."IS_RETURN_SERVICE" IS '是否返还服务费(0不需要 1未生效 2已生效)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."RETURN_SERVICE_DATE" IS '返还服务费日期';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."IS_FREE_CHARGE" IS '是否免汇费(0否 1是)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."SETTLEMENT_SCORES" IS '获得委托积分';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."BACK_FLAG" IS '打回状态(0未打回 1已打回 2超期)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."SUBMIT_DATE" IS '提交日期';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."TRANSFER_DATE" IS '转账日期';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."OP" IS '操作人';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."F_CHECK" IS '财务操作人员';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."F_CHECK_DATE" IS '财务检查日期';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CHECK_MAN" IS '业务检查人员';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CHECK_STATUS" IS '业务检查状态(0否 1是)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CHECK_DATE" IS '业务检查日期（现不用，已用BU_CHECK_DATE）';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CANCEL_TYPE" IS '无效结算单类型(0:有效结算单 1:申请退货 2:交易单冻结)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CANCEL_AT" IS '无效时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CANCEL_REASON" IS '无效原因';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."STATUS" IS '状态(0待转账 1转账中 2已完成 3不通过)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."DESPATCH_STATUS" IS '分配状态(0:未完成 1:已完成)';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SETTLEMENTS"."BU_CHECK_DATE" IS '业务检查日期';

-- ----------------------------
-- Table structure for SMS
-- ----------------------------
DROP TABLE "ZHAO"."SMS";
CREATE TABLE "ZHAO"."SMS" (
"ID" NUMBER(38) NOT NULL ,
"CONTENT" VARCHAR2(255 CHAR) NULL ,
"GATEWAY" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"MESSAGE_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"SEND_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"DEPARTMENT_ID" NUMBER(38) NULL ,
"SENT_AT" DATE NULL ,
"OP" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"OPERATOR" VARCHAR2(10 BYTE) DEFAULT 'unknown'  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SMS" IS '手机短信表';
COMMENT ON COLUMN "ZHAO"."SMS"."CONTENT" IS '内容';
COMMENT ON COLUMN "ZHAO"."SMS"."GATEWAY" IS '短信网关(1:个人 2:群发)';
COMMENT ON COLUMN "ZHAO"."SMS"."MESSAGE_TYPE" IS '短信类型(1常规 2提示支付 3群发所有 4群发交易用户 5结算返佣)';
COMMENT ON COLUMN "ZHAO"."SMS"."SEND_TYPE" IS '发送类型(1:人工 2:系统)';
COMMENT ON COLUMN "ZHAO"."SMS"."DEPARTMENT_ID" IS '部门ID';
COMMENT ON COLUMN "ZHAO"."SMS"."SENT_AT" IS '发送时间';
COMMENT ON COLUMN "ZHAO"."SMS"."OP" IS '发送人';
COMMENT ON COLUMN "ZHAO"."SMS"."STATUS" IS '状态(1未发送 2发送成功 3发送失败 4重新发送)';
COMMENT ON COLUMN "ZHAO"."SMS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."SMS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SMS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."SMS"."OPERATOR" IS '运营商:mobile中国移动,ctc大汉三通';

-- ----------------------------
-- Table structure for SMS_SERVICE
-- ----------------------------
DROP TABLE "ZHAO"."SMS_SERVICE";
CREATE TABLE "ZHAO"."SMS_SERVICE" (
"ID" VARCHAR2(32 BYTE) NOT NULL ,
"PN" VARCHAR2(1000 BYTE) NULL ,
"CONTENT" VARCHAR2(1000 BYTE) NULL ,
"STATUS" CHAR(1 BYTE) NULL ,
"DETAIL" VARCHAR2(4000 BYTE) NULL ,
"CREATED" DATE NULL ,
"FINISHED" DATE NULL ,
"OPERATOR" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SMS_SERVICE" IS '短信接口发送记录';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."ID" IS 'smsId，32位字符串';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."PN" IS '收信号码';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."CONTENT" IS '短信内容';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."STATUS" IS '任务状态(0:失败; 1:成功)';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."DETAIL" IS '具体每个手机号发送状态，格式:{"手机号":0/1}';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."CREATED" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."SMS_SERVICE"."FINISHED" IS '发送时间';

-- ----------------------------
-- Table structure for STAMP_DATA
-- ----------------------------
DROP TABLE "ZHAO"."STAMP_DATA";
CREATE TABLE "ZHAO"."STAMP_DATA" (
"AUCTION_NO" NUMBER(38) DEFAULT 0  NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"STAMP_DESC" VARCHAR2(255 BYTE) NULL ,
"BID" NUMBER(38) DEFAULT 0  NULL ,
"CHARACTERS" VARCHAR2(255 BYTE) NULL ,
"END_AT" DATE NULL ,
"CHI_NO" VARCHAR2(255 BYTE) NULL ,
"FORMAL" VARCHAR2(255 BYTE) NULL ,
"ZCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"PROPERTIES" VARCHAR2(255 BYTE) NULL ,
"PROPERTYIDS" VARCHAR2(255 BYTE) NULL ,
"PCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"UNIT" VARCHAR2(255 BYTE) NULL ,
"UCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"KEYPROPERTY" NUMBER(38) DEFAULT 0  NULL ,
"QUANPIN" NUMBER(38) DEFAULT 0  NULL ,
"SHANGPIN" NUMBER(38) DEFAULT 0  NULL ,
"ZHONGSHANGPIN" NUMBER(38) DEFAULT 0  NULL ,
"ZHONGCHAPIN" NUMBER(38) DEFAULT 0  NULL ,
"XIUBUPIN" NUMBER(38) DEFAULT 0  NULL ,
"CHIKONG" NUMBER(38) DEFAULT 0  NULL ,
"YOUCUO" NUMBER(38) DEFAULT 0  NULL ,
"BIANTI" NUMBER(38) DEFAULT 0  NULL ,
"SHUIYIN" NUMBER(38) DEFAULT 0  NULL ,
"BEIJIAO" NUMBER(38) DEFAULT 0  NULL ,
"PRE_MONTH" VARCHAR2(255 BYTE) DEFAULT 0  NULL ,
"PRE_6MONTH" VARCHAR2(255 BYTE) DEFAULT 0  NULL ,
"IS_SAMPLE" NUMBER(38) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."STAMP_DESC" IS '拍品描述';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."BID" IS '拍品价格';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."CHARACTERS" IS '品相';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."END_AT" IS '结标时间';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."CHI_NO" IS '志号';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."FORMAL" IS '正式名称';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."ZCOUNT" IS '拍品中单品数量';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."PROPERTIES" IS '属性描述';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."PROPERTYIDS" IS '属性id';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."PCOUNT" IS '属性个数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."UNIT" IS '拍品单位';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."UCOUNT" IS '拍品单位数 比如 1套或2枚等';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."KEYPROPERTY" IS '关键属性';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."QUANPIN" IS '全品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."SHANGPIN" IS '上品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."ZHONGSHANGPIN" IS '中上品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."ZHONGCHAPIN" IS '中差品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."XIUBUPIN" IS '修补品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."CHIKONG" IS '齿孔';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."YOUCUO" IS '邮戳';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."BIANTI" IS '变体';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."SHUIYIN" IS '水印';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."BEIJIAO" IS '背胶';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."PRE_MONTH" IS '前12个月成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."PRE_6MONTH" IS '前6个月成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA"."IS_SAMPLE" IS '0 不是样本数据 1 样本数据';

-- ----------------------------
-- Table structure for STAMP_DATA_EVERYDAY
-- ----------------------------
DROP TABLE "ZHAO"."STAMP_DATA_EVERYDAY";
CREATE TABLE "ZHAO"."STAMP_DATA_EVERYDAY" (
"AUCTION_NO" NUMBER(38) DEFAULT 0  NULL ,
"NAME" VARCHAR2(2000 BYTE) NULL ,
"STAMP_DESC" VARCHAR2(2000 BYTE) NULL ,
"BID" NUMBER(38,2) DEFAULT 0  NULL ,
"CHARACTERS" VARCHAR2(255 BYTE) NULL ,
"END_AT" DATE NULL ,
"CHI_NO" VARCHAR2(255 BYTE) NULL ,
"FORMAL" VARCHAR2(255 BYTE) NULL ,
"ZCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"PROPERTIES" VARCHAR2(255 BYTE) NULL ,
"PROPERTYIDS" VARCHAR2(255 BYTE) NULL ,
"PCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"UNIT" VARCHAR2(255 BYTE) NULL ,
"UCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"KEYPROPERTY" NUMBER(38) DEFAULT 0  NULL ,
"QUANPIN" NUMBER(38) DEFAULT 0  NULL ,
"SHANGPIN" NUMBER(38) DEFAULT 0  NULL ,
"ZHONGSHANGPIN" NUMBER(38) DEFAULT 0  NULL ,
"ZHONGCHAPIN" NUMBER(38) DEFAULT 0  NULL ,
"XIUBUPIN" NUMBER(38) DEFAULT 0  NULL ,
"CHIKONG" NUMBER(38) DEFAULT 0  NULL ,
"YOUCUO" NUMBER(38) DEFAULT 0  NULL ,
"BIANTI" NUMBER(38) DEFAULT 0  NULL ,
"SHUIYIN" NUMBER(38) DEFAULT 0  NULL ,
"BEIJIAO" NUMBER(38) DEFAULT 0  NULL ,
"PRE_MONTH" VARCHAR2(255 BYTE) DEFAULT 0  NULL ,
"PRE_6MONTH" VARCHAR2(255 BYTE) DEFAULT 0  NULL ,
"IS_SAMPLE" NUMBER(38) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."STAMP_DESC" IS '拍品描述';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."BID" IS '拍品价格';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."CHARACTERS" IS '品相';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."END_AT" IS '结标时间';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."CHI_NO" IS '志号';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."FORMAL" IS '正式名称';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."ZCOUNT" IS '拍品中单品数量';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."PROPERTIES" IS '属性描述';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."PROPERTYIDS" IS '属性id';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."PCOUNT" IS '属性个数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."UNIT" IS '拍品单位';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."UCOUNT" IS '拍品单位数 比如 1套或2枚等';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."KEYPROPERTY" IS '关键属性';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."QUANPIN" IS '全品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."SHANGPIN" IS '上品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."ZHONGSHANGPIN" IS '中上品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."ZHONGCHAPIN" IS '中差品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."XIUBUPIN" IS '修补品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."CHIKONG" IS '齿孔';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."YOUCUO" IS '邮戳';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."BIANTI" IS '变体';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."SHUIYIN" IS '水印';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."BEIJIAO" IS '背胶';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."PRE_MONTH" IS '前12个月成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."PRE_6MONTH" IS '前6个月成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_EVERYDAY"."IS_SAMPLE" IS '0 不是样本数据 1 样本数据';

-- ----------------------------
-- Table structure for STAMP_DATA_ORIGINAL
-- ----------------------------
DROP TABLE "ZHAO"."STAMP_DATA_ORIGINAL";
CREATE TABLE "ZHAO"."STAMP_DATA_ORIGINAL" (
"AUCTION_NO" NUMBER(38) DEFAULT 0  NULL ,
"NAME" VARCHAR2(2000 BYTE) NULL ,
"STAMP_DESC" VARCHAR2(4000 BYTE) NULL ,
"BID" NUMBER(38,2) DEFAULT 0  NULL ,
"CHARACTERS" VARCHAR2(2000 BYTE) NULL ,
"END_AT" DATE NULL ,
"CHI_NO" VARCHAR2(255 BYTE) NULL ,
"FORMAL" VARCHAR2(2000 BYTE) NULL ,
"ZCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"PROPERTIES" VARCHAR2(255 BYTE) NULL ,
"PROPERTYIDS" VARCHAR2(255 BYTE) NULL ,
"PCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"UNIT" VARCHAR2(255 BYTE) NULL ,
"UCOUNT" NUMBER(38) DEFAULT 0  NULL ,
"KEYPROPERTY" NUMBER(38) DEFAULT 0  NULL ,
"QUANPIN" NUMBER(38) DEFAULT 0  NULL ,
"SHANGPIN" NUMBER(38) DEFAULT 0  NULL ,
"ZHONGSHANGPIN" NUMBER(38) DEFAULT 0  NULL ,
"ZHONGCHAPIN" NUMBER(38) DEFAULT 0  NULL ,
"XIUBUPIN" NUMBER(38) DEFAULT 0  NULL ,
"CHIKONG" NUMBER(38) DEFAULT 0  NULL ,
"YOUCUO" NUMBER(38) DEFAULT 0  NULL ,
"BIANTI" NUMBER(38) DEFAULT 0  NULL ,
"SHUIYIN" NUMBER(38) DEFAULT 0  NULL ,
"BEIJIAO" NUMBER(38) DEFAULT 0  NULL ,
"OUTLIER" NUMBER(8) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."STAMP_DESC" IS '拍品描述';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."BID" IS '拍品价格';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."CHARACTERS" IS '品相';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."END_AT" IS '结标时间';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."CHI_NO" IS '志号';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."FORMAL" IS '正式名称';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."ZCOUNT" IS '拍品中单品数量';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."PROPERTIES" IS '属性描述';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."PROPERTYIDS" IS '属性id';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."PCOUNT" IS '属性个数';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."UNIT" IS '拍品单位';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."UCOUNT" IS '拍品单位数 比如 1套或2枚等';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."KEYPROPERTY" IS '关键属性';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."QUANPIN" IS '全品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."SHANGPIN" IS '上品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."ZHONGSHANGPIN" IS '中上品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."ZHONGCHAPIN" IS '中差品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."XIUBUPIN" IS '修补品';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."CHIKONG" IS '齿孔';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."YOUCUO" IS '邮戳';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."BIANTI" IS '变体';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."SHUIYIN" IS '水印';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."BEIJIAO" IS '背胶';
COMMENT ON COLUMN "ZHAO"."STAMP_DATA_ORIGINAL"."OUTLIER" IS '异常标识';

-- ----------------------------
-- Table structure for STAMP_INDEX
-- ----------------------------
DROP TABLE "ZHAO"."STAMP_INDEX";
CREATE TABLE "ZHAO"."STAMP_INDEX" (
"INDEX_TIME" DATE NULL ,
"INDEX_VALUE" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"FORUM" NUMBER(8) DEFAULT 0  NOT NULL ,
"AMOUNT" NUMBER(20) DEFAULT 0  NOT NULL ,
"INDEX_SUM" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"REAL_VALUE" NUMBER(36,2) DEFAULT 0  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."STAMP_INDEX"."INDEX_TIME" IS '时间';
COMMENT ON COLUMN "ZHAO"."STAMP_INDEX"."INDEX_VALUE" IS '指数值';
COMMENT ON COLUMN "ZHAO"."STAMP_INDEX"."FORUM" IS '板块ID,0为全部';
COMMENT ON COLUMN "ZHAO"."STAMP_INDEX"."AMOUNT" IS '成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_INDEX"."INDEX_SUM" IS '成交总金额';
COMMENT ON COLUMN "ZHAO"."STAMP_INDEX"."REAL_VALUE" IS '真实值,未经过基期换算';

-- ----------------------------
-- Table structure for STAMP_PROPERTY_MAP
-- ----------------------------
DROP TABLE "ZHAO"."STAMP_PROPERTY_MAP";
CREATE TABLE "ZHAO"."STAMP_PROPERTY_MAP" (
"GROUP_ID" NUMBER(38) NULL ,
"PROPERTY_GROUP" VARCHAR2(255 BYTE) NULL ,
"PROPERTY_SORT" NUMBER(38) NULL ,
"PROPERTY_NAME" VARCHAR2(255 BYTE) NULL ,
"PROPERTY_PINYIN" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for STAMP_QUOTATION
-- ----------------------------
DROP TABLE "ZHAO"."STAMP_QUOTATION";
CREATE TABLE "ZHAO"."STAMP_QUOTATION" (
"CLASS_NO" VARCHAR2(255 BYTE) DEFAULT NULL  NULL ,
"CHARACTER" VARCHAR2(255 BYTE) DEFAULT NULL  NULL ,
"KEY_PROPERTY" NUMBER(38) DEFAULT 0  NOT NULL ,
"CLASS_ID" NUMBER(38) DEFAULT 0  NOT NULL ,
"FORMAL" VARCHAR2(255 BYTE) DEFAULT NULL  NULL ,
"FORUM" NUMBER(38) DEFAULT 0  NULL ,
"IS_INDEX_SAMPLE" NUMBER(2) DEFAULT 0  NULL ,
"IS_FORUM_SAMPLE" NUMBER(2) DEFAULT 0  NULL ,
"STARTED_AT" DATE NULL ,
"LATEST" DATE NULL ,
"AMOUNT_CUR" NUMBER(38) DEFAULT 0  NOT NULL ,
"AMOUNT_LATEST" NUMBER(38) DEFAULT 0  NOT NULL ,
"AMOUNT_PRE" NUMBER(38) DEFAULT 0  NOT NULL ,
"PRICE_AVG_CUR" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_AVG_PRE" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_MIN_CUR" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_MIN_PRE" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_MAX_CUR" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_MAX_PRE" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"QUOTATION_DAILY" CLOB NULL ,
"QUOTATION_WEEKLY" CLOB NULL ,
"QUOTATION_MONTHLY" CLOB NULL ,
"UPDATED_AT" DATE NULL ,
"PRICE_AVG_LATEST" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"AMOUNT" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_AVG" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_HIGH" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"PRICE_LOW" NUMBER(36,2) DEFAULT 0  NOT NULL ,
"DEFAULT_QUOTATION" NUMBER(8) DEFAULT 0  NOT NULL ,
"THUMBNAIL" VARCHAR2(255 BYTE) NULL ,
"BROWESE_NO" NUMBER DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."CLASS_NO" IS '志号名称';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."CHARACTER" IS '品相';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."KEY_PROPERTY" IS '关键属性';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."CLASS_ID" IS '志号ID';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."FORMAL" IS '志号正式名称';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."FORUM" IS '板块ID';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."IS_INDEX_SAMPLE" IS '是否为指数样本';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."IS_FORUM_SAMPLE" IS '是否为板块样本';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."STARTED_AT" IS '第一次成交时间';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."LATEST" IS '最近成交时间';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."AMOUNT_CUR" IS '当前成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."AMOUNT_LATEST" IS '最近成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."AMOUNT_PRE" IS '当前前一日成交套数';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_AVG_CUR" IS '当前平均价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_AVG_PRE" IS '当前前一日平均价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_MIN_CUR" IS '当前最低价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_MIN_PRE" IS '当前前一日最低价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_MAX_CUR" IS '当前最高价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_MAX_PRE" IS '当前前一日最高价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."QUOTATION_DAILY" IS '日线数据(JSON)
p：均价;
a：成交量;
h：最高成交价;
l：最低成交价;
s：开盘价;
e：收盘价;
';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."QUOTATION_WEEKLY" IS '周线数据(JSON)';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."QUOTATION_MONTHLY" IS '月线数据(JSON)';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."UPDATED_AT" IS '最近更新日期';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_AVG_LATEST" IS '最近成交均价';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."AMOUNT" IS '总套数';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_AVG" IS '平均价格';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_HIGH" IS '历史最高价';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."PRICE_LOW" IS '历史最低价';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."DEFAULT_QUOTATION" IS '默认';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."THUMBNAIL" IS '缩略图';
COMMENT ON COLUMN "ZHAO"."STAMP_QUOTATION"."BROWESE_NO" IS '浏览次数';

-- ----------------------------
-- Table structure for STORAGE_CHARGES
-- ----------------------------
DROP TABLE "ZHAO"."STORAGE_CHARGES";
CREATE TABLE "ZHAO"."STORAGE_CHARGES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"CHARGES" NUMBER(16,2) NULL ,
"DEDUCTED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."STORAGE_CHARGES" IS '已缴仓储费汇总';

-- ----------------------------
-- Table structure for STORAGE_COMPLETED_CHARGES
-- ----------------------------
DROP TABLE "ZHAO"."STORAGE_COMPLETED_CHARGES";
CREATE TABLE "ZHAO"."STORAGE_COMPLETED_CHARGES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ORDER_ID" NUMBER(38) NULL ,
"CHARGE_RATE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"DAYS" NUMBER(38) DEFAULT 0  NULL ,
"CHARGES" NUMBER(16,2) DEFAULT 0.00  NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"DEDUCTED_AT" DATE NULL ,
"STORAGE_CHARGES_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."STORAGE_COMPLETED_CHARGES" IS '已缴仓储费明细';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."ID" IS '标识';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."USER_ORDER_ID" IS '交易单号';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."CHARGE_RATE" IS '仓储费率（元/天）';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."DAYS" IS '天数';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."CHARGES" IS '仓储费';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."START_AT" IS '开始时间';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."END_AT" IS '结束时间';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."DEDUCTED_AT" IS '扣费时间';
COMMENT ON COLUMN "ZHAO"."STORAGE_COMPLETED_CHARGES"."STORAGE_CHARGES_ID" IS '已缴仓储费汇总ID';

-- ----------------------------
-- Table structure for STORAGE_WAIT_CHARGES
-- ----------------------------
DROP TABLE "ZHAO"."STORAGE_WAIT_CHARGES";
CREATE TABLE "ZHAO"."STORAGE_WAIT_CHARGES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ORDER_ID" NUMBER(38) NULL ,
"CHARGE_RATE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"COMPLETED_CHARGES" NUMBER(16,2) DEFAULT 0.00  NULL ,
"WAIT_CHARGES" NUMBER(16,2) DEFAULT 0.00  NULL ,
"DAYS" NUMBER(38) DEFAULT 0  NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"USER_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."STORAGE_WAIT_CHARGES" IS '待缴仓储费';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."ID" IS '标识ID';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."USER_ORDER_ID" IS '交易单号';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."CHARGE_RATE" IS '当前仓储费率（元/天）';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."COMPLETED_CHARGES" IS '已缴仓储费';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."WAIT_CHARGES" IS '待缴仓储费';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."DAYS" IS '天数';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."START_AT" IS '待缴仓储费开始时间';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."END_AT" IS '待缴仓储费结束时间';
COMMENT ON COLUMN "ZHAO"."STORAGE_WAIT_CHARGES"."USER_ID" IS '客户编号';

-- ----------------------------
-- Table structure for STORAGES
-- ----------------------------
DROP TABLE "ZHAO"."STORAGES";
CREATE TABLE "ZHAO"."STORAGES" (
"ID" NUMBER NOT NULL ,
"CODE" VARCHAR2(64 BYTE) NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NOT NULL ,
"CREATEDAT" DATE DEFAULT sysdate  NULL ,
"CREATEDBY" NUMBER NULL ,
"UPDATEDAT" DATE NULL ,
"UPDATEDBY" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."STORAGES" IS '仓储地区表';
COMMENT ON COLUMN "ZHAO"."STORAGES"."ID" IS '标识';
COMMENT ON COLUMN "ZHAO"."STORAGES"."CODE" IS '仓库编码：1000上海,10000北京';
COMMENT ON COLUMN "ZHAO"."STORAGES"."NAME" IS '仓库中文名，1000上海,10000北京';
COMMENT ON COLUMN "ZHAO"."STORAGES"."CREATEDAT" IS 'createdAt 创建时间';
COMMENT ON COLUMN "ZHAO"."STORAGES"."CREATEDBY" IS 'createdBy  创建人';
COMMENT ON COLUMN "ZHAO"."STORAGES"."UPDATEDAT" IS 'updatedAt 更新时间';
COMMENT ON COLUMN "ZHAO"."STORAGES"."UPDATEDBY" IS 'updatedBy 更新人';

-- ----------------------------
-- Table structure for STUDENT_INF
-- ----------------------------
DROP TABLE "ZHAO"."STUDENT_INF";
CREATE TABLE "ZHAO"."STUDENT_INF" (
"STUDENT_ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(255 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SYS_EXPORT_SCHEMA_01
-- ----------------------------
DROP TABLE "ZHAO"."SYS_EXPORT_SCHEMA_01";
CREATE TABLE "ZHAO"."SYS_EXPORT_SCHEMA_01" (
"PROCESS_ORDER" NUMBER NULL ,
"DUPLICATE" NUMBER NULL ,
"DUMP_FILEID" NUMBER NULL ,
"DUMP_POSITION" NUMBER NULL ,
"DUMP_LENGTH" NUMBER NULL ,
"DUMP_ORIG_LENGTH" NUMBER NULL ,
"DUMP_ALLOCATION" NUMBER NULL ,
"COMPLETED_ROWS" NUMBER NULL ,
"ERROR_COUNT" NUMBER NULL ,
"ELAPSED_TIME" NUMBER NULL ,
"OBJECT_TYPE_PATH" VARCHAR2(200 BYTE) NULL ,
"OBJECT_PATH_SEQNO" NUMBER NULL ,
"OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"IN_PROGRESS" CHAR(1 BYTE) NULL ,
"OBJECT_NAME" VARCHAR2(500 BYTE) NULL ,
"OBJECT_LONG_NAME" VARCHAR2(4000 BYTE) NULL ,
"OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ORIGINAL_OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ORIGINAL_OBJECT_NAME" VARCHAR2(4000 BYTE) NULL ,
"PARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"SUBPARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"DATAOBJ_NUM" NUMBER NULL ,
"FLAGS" NUMBER NULL ,
"PROPERTY" NUMBER NULL ,
"TRIGFLAG" NUMBER NULL ,
"CREATION_LEVEL" NUMBER NULL ,
"COMPLETION_TIME" DATE NULL ,
"OBJECT_TABLESPACE" VARCHAR2(30 BYTE) NULL ,
"SIZE_ESTIMATE" NUMBER NULL ,
"OBJECT_ROW" NUMBER NULL ,
"PROCESSING_STATE" CHAR(1 BYTE) NULL ,
"PROCESSING_STATUS" CHAR(1 BYTE) NULL ,
"BASE_PROCESS_ORDER" NUMBER NULL ,
"BASE_OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"BASE_OBJECT_NAME" VARCHAR2(30 BYTE) NULL ,
"BASE_OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ANCESTOR_PROCESS_ORDER" NUMBER NULL ,
"DOMAIN_PROCESS_ORDER" NUMBER NULL ,
"PARALLELIZATION" NUMBER NULL ,
"UNLOAD_METHOD" NUMBER NULL ,
"LOAD_METHOD" NUMBER NULL ,
"GRANULES" NUMBER NULL ,
"SCN" NUMBER NULL ,
"GRANTOR" VARCHAR2(30 BYTE) NULL ,
"XML_CLOB" CLOB NULL ,
"PARENT_PROCESS_ORDER" NUMBER NULL ,
"NAME" VARCHAR2(30 BYTE) NULL ,
"VALUE_T" VARCHAR2(4000 BYTE) NULL ,
"VALUE_N" NUMBER NULL ,
"IS_DEFAULT" NUMBER NULL ,
"FILE_TYPE" NUMBER NULL ,
"USER_DIRECTORY" VARCHAR2(4000 BYTE) NULL ,
"USER_FILE_NAME" VARCHAR2(4000 BYTE) NULL ,
"FILE_NAME" VARCHAR2(4000 BYTE) NULL ,
"EXTEND_SIZE" NUMBER NULL ,
"FILE_MAX_SIZE" NUMBER NULL ,
"PROCESS_NAME" VARCHAR2(30 BYTE) NULL ,
"LAST_UPDATE" DATE NULL ,
"WORK_ITEM" VARCHAR2(30 BYTE) NULL ,
"OBJECT_NUMBER" NUMBER NULL ,
"COMPLETED_BYTES" NUMBER NULL ,
"TOTAL_BYTES" NUMBER NULL ,
"METADATA_IO" NUMBER NULL ,
"DATA_IO" NUMBER NULL ,
"CUMULATIVE_TIME" NUMBER NULL ,
"PACKET_NUMBER" NUMBER NULL ,
"INSTANCE_ID" NUMBER NULL ,
"OLD_VALUE" VARCHAR2(4000 BYTE) NULL ,
"SEED" NUMBER NULL ,
"LAST_FILE" NUMBER NULL ,
"USER_NAME" VARCHAR2(30 BYTE) NULL ,
"OPERATION" VARCHAR2(30 BYTE) NULL ,
"JOB_MODE" VARCHAR2(30 BYTE) NULL ,
"QUEUE_TABNUM" NUMBER NULL ,
"CONTROL_QUEUE" VARCHAR2(30 BYTE) NULL ,
"STATUS_QUEUE" VARCHAR2(30 BYTE) NULL ,
"REMOTE_LINK" VARCHAR2(4000 BYTE) NULL ,
"VERSION" NUMBER NULL ,
"JOB_VERSION" VARCHAR2(30 BYTE) NULL ,
"DB_VERSION" VARCHAR2(30 BYTE) NULL ,
"TIMEZONE" VARCHAR2(64 BYTE) NULL ,
"STATE" VARCHAR2(30 BYTE) NULL ,
"PHASE" NUMBER NULL ,
"GUID" RAW(16) NULL ,
"START_TIME" DATE NULL ,
"BLOCK_SIZE" NUMBER NULL ,
"METADATA_BUFFER_SIZE" NUMBER NULL ,
"DATA_BUFFER_SIZE" NUMBER NULL ,
"DEGREE" NUMBER NULL ,
"PLATFORM" VARCHAR2(101 BYTE) NULL ,
"ABORT_STEP" NUMBER NULL ,
"INSTANCE" VARCHAR2(60 BYTE) NULL ,
"CLUSTER_OK" NUMBER NULL ,
"SERVICE_NAME" VARCHAR2(100 BYTE) NULL ,
"OBJECT_INT_OID" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SYS_EXPORT_SCHEMA_01" IS 'Data Pump Master Table EXPORT                         SCHEMA                        ';

-- ----------------------------
-- Table structure for SYS_EXPORT_SCHEMA_02
-- ----------------------------
DROP TABLE "ZHAO"."SYS_EXPORT_SCHEMA_02";
CREATE TABLE "ZHAO"."SYS_EXPORT_SCHEMA_02" (
"PROCESS_ORDER" NUMBER NULL ,
"DUPLICATE" NUMBER NULL ,
"DUMP_FILEID" NUMBER NULL ,
"DUMP_POSITION" NUMBER NULL ,
"DUMP_LENGTH" NUMBER NULL ,
"DUMP_ORIG_LENGTH" NUMBER NULL ,
"DUMP_ALLOCATION" NUMBER NULL ,
"COMPLETED_ROWS" NUMBER NULL ,
"ERROR_COUNT" NUMBER NULL ,
"ELAPSED_TIME" NUMBER NULL ,
"OBJECT_TYPE_PATH" VARCHAR2(200 BYTE) NULL ,
"OBJECT_PATH_SEQNO" NUMBER NULL ,
"OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"IN_PROGRESS" CHAR(1 BYTE) NULL ,
"OBJECT_NAME" VARCHAR2(500 BYTE) NULL ,
"OBJECT_LONG_NAME" VARCHAR2(4000 BYTE) NULL ,
"OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ORIGINAL_OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ORIGINAL_OBJECT_NAME" VARCHAR2(4000 BYTE) NULL ,
"PARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"SUBPARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"DATAOBJ_NUM" NUMBER NULL ,
"FLAGS" NUMBER NULL ,
"PROPERTY" NUMBER NULL ,
"TRIGFLAG" NUMBER NULL ,
"CREATION_LEVEL" NUMBER NULL ,
"COMPLETION_TIME" DATE NULL ,
"OBJECT_TABLESPACE" VARCHAR2(30 BYTE) NULL ,
"SIZE_ESTIMATE" NUMBER NULL ,
"OBJECT_ROW" NUMBER NULL ,
"PROCESSING_STATE" CHAR(1 BYTE) NULL ,
"PROCESSING_STATUS" CHAR(1 BYTE) NULL ,
"BASE_PROCESS_ORDER" NUMBER NULL ,
"BASE_OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"BASE_OBJECT_NAME" VARCHAR2(30 BYTE) NULL ,
"BASE_OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ANCESTOR_PROCESS_ORDER" NUMBER NULL ,
"DOMAIN_PROCESS_ORDER" NUMBER NULL ,
"PARALLELIZATION" NUMBER NULL ,
"UNLOAD_METHOD" NUMBER NULL ,
"LOAD_METHOD" NUMBER NULL ,
"GRANULES" NUMBER NULL ,
"SCN" NUMBER NULL ,
"GRANTOR" VARCHAR2(30 BYTE) NULL ,
"XML_CLOB" CLOB NULL ,
"PARENT_PROCESS_ORDER" NUMBER NULL ,
"NAME" VARCHAR2(30 BYTE) NULL ,
"VALUE_T" VARCHAR2(4000 BYTE) NULL ,
"VALUE_N" NUMBER NULL ,
"IS_DEFAULT" NUMBER NULL ,
"FILE_TYPE" NUMBER NULL ,
"USER_DIRECTORY" VARCHAR2(4000 BYTE) NULL ,
"USER_FILE_NAME" VARCHAR2(4000 BYTE) NULL ,
"FILE_NAME" VARCHAR2(4000 BYTE) NULL ,
"EXTEND_SIZE" NUMBER NULL ,
"FILE_MAX_SIZE" NUMBER NULL ,
"PROCESS_NAME" VARCHAR2(30 BYTE) NULL ,
"LAST_UPDATE" DATE NULL ,
"WORK_ITEM" VARCHAR2(30 BYTE) NULL ,
"OBJECT_NUMBER" NUMBER NULL ,
"COMPLETED_BYTES" NUMBER NULL ,
"TOTAL_BYTES" NUMBER NULL ,
"METADATA_IO" NUMBER NULL ,
"DATA_IO" NUMBER NULL ,
"CUMULATIVE_TIME" NUMBER NULL ,
"PACKET_NUMBER" NUMBER NULL ,
"INSTANCE_ID" NUMBER NULL ,
"OLD_VALUE" VARCHAR2(4000 BYTE) NULL ,
"SEED" NUMBER NULL ,
"LAST_FILE" NUMBER NULL ,
"USER_NAME" VARCHAR2(30 BYTE) NULL ,
"OPERATION" VARCHAR2(30 BYTE) NULL ,
"JOB_MODE" VARCHAR2(30 BYTE) NULL ,
"QUEUE_TABNUM" NUMBER NULL ,
"CONTROL_QUEUE" VARCHAR2(30 BYTE) NULL ,
"STATUS_QUEUE" VARCHAR2(30 BYTE) NULL ,
"REMOTE_LINK" VARCHAR2(4000 BYTE) NULL ,
"VERSION" NUMBER NULL ,
"JOB_VERSION" VARCHAR2(30 BYTE) NULL ,
"DB_VERSION" VARCHAR2(30 BYTE) NULL ,
"TIMEZONE" VARCHAR2(64 BYTE) NULL ,
"STATE" VARCHAR2(30 BYTE) NULL ,
"PHASE" NUMBER NULL ,
"GUID" RAW(16) NULL ,
"START_TIME" DATE NULL ,
"BLOCK_SIZE" NUMBER NULL ,
"METADATA_BUFFER_SIZE" NUMBER NULL ,
"DATA_BUFFER_SIZE" NUMBER NULL ,
"DEGREE" NUMBER NULL ,
"PLATFORM" VARCHAR2(101 BYTE) NULL ,
"ABORT_STEP" NUMBER NULL ,
"INSTANCE" VARCHAR2(60 BYTE) NULL ,
"CLUSTER_OK" NUMBER NULL ,
"SERVICE_NAME" VARCHAR2(100 BYTE) NULL ,
"OBJECT_INT_OID" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SYS_EXPORT_SCHEMA_02" IS 'Data Pump Master Table EXPORT                         SCHEMA                        ';

-- ----------------------------
-- Table structure for SYS_EXPORT_SCHEMA_03
-- ----------------------------
DROP TABLE "ZHAO"."SYS_EXPORT_SCHEMA_03";
CREATE TABLE "ZHAO"."SYS_EXPORT_SCHEMA_03" (
"PROCESS_ORDER" NUMBER NULL ,
"DUPLICATE" NUMBER NULL ,
"DUMP_FILEID" NUMBER NULL ,
"DUMP_POSITION" NUMBER NULL ,
"DUMP_LENGTH" NUMBER NULL ,
"DUMP_ORIG_LENGTH" NUMBER NULL ,
"DUMP_ALLOCATION" NUMBER NULL ,
"COMPLETED_ROWS" NUMBER NULL ,
"ERROR_COUNT" NUMBER NULL ,
"ELAPSED_TIME" NUMBER NULL ,
"OBJECT_TYPE_PATH" VARCHAR2(200 BYTE) NULL ,
"OBJECT_PATH_SEQNO" NUMBER NULL ,
"OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"IN_PROGRESS" CHAR(1 BYTE) NULL ,
"OBJECT_NAME" VARCHAR2(500 BYTE) NULL ,
"OBJECT_LONG_NAME" VARCHAR2(4000 BYTE) NULL ,
"OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ORIGINAL_OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ORIGINAL_OBJECT_NAME" VARCHAR2(4000 BYTE) NULL ,
"PARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"SUBPARTITION_NAME" VARCHAR2(30 BYTE) NULL ,
"DATAOBJ_NUM" NUMBER NULL ,
"FLAGS" NUMBER NULL ,
"PROPERTY" NUMBER NULL ,
"TRIGFLAG" NUMBER NULL ,
"CREATION_LEVEL" NUMBER NULL ,
"COMPLETION_TIME" DATE NULL ,
"OBJECT_TABLESPACE" VARCHAR2(30 BYTE) NULL ,
"SIZE_ESTIMATE" NUMBER NULL ,
"OBJECT_ROW" NUMBER NULL ,
"PROCESSING_STATE" CHAR(1 BYTE) NULL ,
"PROCESSING_STATUS" CHAR(1 BYTE) NULL ,
"BASE_PROCESS_ORDER" NUMBER NULL ,
"BASE_OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"BASE_OBJECT_NAME" VARCHAR2(30 BYTE) NULL ,
"BASE_OBJECT_SCHEMA" VARCHAR2(30 BYTE) NULL ,
"ANCESTOR_PROCESS_ORDER" NUMBER NULL ,
"DOMAIN_PROCESS_ORDER" NUMBER NULL ,
"PARALLELIZATION" NUMBER NULL ,
"UNLOAD_METHOD" NUMBER NULL ,
"LOAD_METHOD" NUMBER NULL ,
"GRANULES" NUMBER NULL ,
"SCN" NUMBER NULL ,
"GRANTOR" VARCHAR2(30 BYTE) NULL ,
"XML_CLOB" CLOB NULL ,
"PARENT_PROCESS_ORDER" NUMBER NULL ,
"NAME" VARCHAR2(30 BYTE) NULL ,
"VALUE_T" VARCHAR2(4000 BYTE) NULL ,
"VALUE_N" NUMBER NULL ,
"IS_DEFAULT" NUMBER NULL ,
"FILE_TYPE" NUMBER NULL ,
"USER_DIRECTORY" VARCHAR2(4000 BYTE) NULL ,
"USER_FILE_NAME" VARCHAR2(4000 BYTE) NULL ,
"FILE_NAME" VARCHAR2(4000 BYTE) NULL ,
"EXTEND_SIZE" NUMBER NULL ,
"FILE_MAX_SIZE" NUMBER NULL ,
"PROCESS_NAME" VARCHAR2(30 BYTE) NULL ,
"LAST_UPDATE" DATE NULL ,
"WORK_ITEM" VARCHAR2(30 BYTE) NULL ,
"OBJECT_NUMBER" NUMBER NULL ,
"COMPLETED_BYTES" NUMBER NULL ,
"TOTAL_BYTES" NUMBER NULL ,
"METADATA_IO" NUMBER NULL ,
"DATA_IO" NUMBER NULL ,
"CUMULATIVE_TIME" NUMBER NULL ,
"PACKET_NUMBER" NUMBER NULL ,
"INSTANCE_ID" NUMBER NULL ,
"OLD_VALUE" VARCHAR2(4000 BYTE) NULL ,
"SEED" NUMBER NULL ,
"LAST_FILE" NUMBER NULL ,
"USER_NAME" VARCHAR2(30 BYTE) NULL ,
"OPERATION" VARCHAR2(30 BYTE) NULL ,
"JOB_MODE" VARCHAR2(30 BYTE) NULL ,
"QUEUE_TABNUM" NUMBER NULL ,
"CONTROL_QUEUE" VARCHAR2(30 BYTE) NULL ,
"STATUS_QUEUE" VARCHAR2(30 BYTE) NULL ,
"REMOTE_LINK" VARCHAR2(4000 BYTE) NULL ,
"VERSION" NUMBER NULL ,
"JOB_VERSION" VARCHAR2(30 BYTE) NULL ,
"DB_VERSION" VARCHAR2(30 BYTE) NULL ,
"TIMEZONE" VARCHAR2(64 BYTE) NULL ,
"STATE" VARCHAR2(30 BYTE) NULL ,
"PHASE" NUMBER NULL ,
"GUID" RAW(16) NULL ,
"START_TIME" DATE NULL ,
"BLOCK_SIZE" NUMBER NULL ,
"METADATA_BUFFER_SIZE" NUMBER NULL ,
"DATA_BUFFER_SIZE" NUMBER NULL ,
"DEGREE" NUMBER NULL ,
"PLATFORM" VARCHAR2(101 BYTE) NULL ,
"ABORT_STEP" NUMBER NULL ,
"INSTANCE" VARCHAR2(60 BYTE) NULL ,
"CLUSTER_OK" NUMBER NULL ,
"SERVICE_NAME" VARCHAR2(100 BYTE) NULL ,
"OBJECT_INT_OID" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."SYS_EXPORT_SCHEMA_03" IS 'Data Pump Master Table EXPORT                         SCHEMA                        ';

-- ----------------------------
-- Table structure for SYSTEM_MODULES
-- ----------------------------
DROP TABLE "ZHAO"."SYSTEM_MODULES";
CREATE TABLE "ZHAO"."SYSTEM_MODULES" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"DESCRIPTION" CLOB NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_AUCTION
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_AUCTION";
CREATE TABLE "ZHAO"."TEMP_AUCTION" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"PIC_ORDER" VARCHAR2(255 BYTE) NOT NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."TEMP_AUCTION" IS '图片处理临时表';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION"."PIC_ORDER" IS '图片对应的字母';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION"."AUCTION_CATEGORY_ID" IS '分类id';

-- ----------------------------
-- Table structure for TEMP_AUCTION_KEY_WORDS
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_AUCTION_KEY_WORDS";
CREATE TABLE "ZHAO"."TEMP_AUCTION_KEY_WORDS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_PINYIN" VARCHAR2(255 CHAR) NULL ,
"CHARACTER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_GBK" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"IS_VALID" NUMBER(1) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."TEMP_AUCTION_KEY_WORDS" IS '关键字临时表';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."NAME" IS '中文名';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."NAME_PINYIN" IS '拼音名';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."CHARACTER_TYPE" IS '类型(0无 1:邮票类 2:钱币类 3:磁卡4:杂项 5:文献 6:其他）';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."IS_SHOW" IS '是否显示(0:否 1:显示通用菜单 3:显示集藏用品)';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."NAME_EN" IS '英文名';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."NAME_GBK" IS '繁体名';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTION_KEY_WORDS"."IS_VALID" IS '是否有效(0:否 1:有效)';

-- ----------------------------
-- Table structure for TEMP_AUCTION_SCORE
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_AUCTION_SCORE";
CREATE TABLE "ZHAO"."TEMP_AUCTION_SCORE" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"SCORES" NUMBER(10) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_AUCTIONS_STATE_NUMS
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_AUCTIONS_STATE_NUMS";
CREATE TABLE "ZHAO"."TEMP_AUCTIONS_STATE_NUMS" (
"ID" NUMBER NOT NULL ,
"CONTRACT_ID" NUMBER(38) DEFAULT 0  NULL ,
"CUSTOMER_ID" NUMBER(38) DEFAULT 0  NULL ,
"CUSTOMER_NAME" VARCHAR2(50 BYTE) NULL ,
"CONTRACT_USER_LEVEL" VARCHAR2(50 BYTE) DEFAULT 0  NULL ,
"CONTRACT_CHARGE_TYPE" VARCHAR2(255 BYTE) DEFAULT 0  NULL ,
"CONTRACT_SETTLEMENT_REMARKS" VARCHAR2(4000 BYTE) NULL ,
"AUCTIONS_TOTAL" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_0" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_1" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_2" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_3" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_4" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_5" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_6" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_7" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_8" NUMBER(12) DEFAULT 0  NULL ,
"TRADE_STATUS_0" NUMBER(12) DEFAULT 0  NULL ,
"TRADE_STATUS_1" NUMBER(12) NULL ,
"TRADE_STATUS_2" NUMBER(12) DEFAULT 0  NULL ,
"TRADE_STATUS_3" NUMBER(12) DEFAULT 0  NULL ,
"REFUND_STATUS_0" NUMBER(12) DEFAULT 0  NULL ,
"REFUND_STATUS_1" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_9" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_10" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_11" NUMBER(12) DEFAULT 0  NULL ,
"AUCTIONS_STATUS_12" NUMBER(12) DEFAULT 0  NULL ,
"TRADE_STATUS_4" NUMBER(12) DEFAULT 0  NULL ,
"TRADE_STATUS_5" NUMBER(12) DEFAULT 0  NULL ,
"USER_LANG" VARCHAR2(255 BYTE) NULL ,
"AUCTION_SETTLEMENT_STATUS_1" NUMBER(12) DEFAULT 0  NULL ,
"AUCTION_SETTLEMENT_STATUS_3" NUMBER(12) DEFAULT 0  NULL ,
"TRADE_STATUS_PRICE" NUMBER(16,2) DEFAULT 0.00  NULL ,
"AUCTION_SETTLEMENT_STATUS_0" NUMBER(12) DEFAULT 0  NULL ,
"AUCTION_SETTLEMENT_STATUS_2" NUMBER(12) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."CONTRACT_ID" IS '合同号';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."CUSTOMER_ID" IS '委托方编号';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."CUSTOMER_NAME" IS '委托方姓名';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."CONTRACT_USER_LEVEL" IS '委托方等级';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."CONTRACT_CHARGE_TYPE" IS '合同委托收费方式';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."CONTRACT_SETTLEMENT_REMARKS" IS '合同结算备注';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_TOTAL" IS '拍品总数';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_0" IS '未上传';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_1" IS '预展中';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_2" IS '竞拍中';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_3" IS '已拍出';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_4" IS '已撤拍（新数据不用）';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_5" IS '已冻结（新数据不用）';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_6" IS '已流拍';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_7" IS '已退货';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_8" IS '已退拍';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_0" IS '未支付';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_1" IS '已支付';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_2" IS '不支付 （新数据不用）';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_3" IS '已冻结（新数据不用）';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."REFUND_STATUS_0" IS '申请退货';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."REFUND_STATUS_1" IS '退货失败';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_9" IS '已删除（新数据不用）';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_10" IS '未预展';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_11" IS '有理由撤拍';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTIONS_STATUS_12" IS '无理由撤拍';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_4" IS '有理由不支付';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_5" IS '无理由不支付';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."USER_LANG" IS '委托方语言';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTION_SETTLEMENT_STATUS_1" IS '已结算';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTION_SETTLEMENT_STATUS_3" IS '结算中';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."TRADE_STATUS_PRICE" IS '已支付结标价总额';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTION_SETTLEMENT_STATUS_0" IS '不可结算';
COMMENT ON COLUMN "ZHAO"."TEMP_AUCTIONS_STATE_NUMS"."AUCTION_SETTLEMENT_STATUS_2" IS '待结算';

-- ----------------------------
-- Table structure for TEMP_CONTRACT_TOTAL
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_CONTRACT_TOTAL";
CREATE TABLE "ZHAO"."TEMP_CONTRACT_TOTAL" (
"PK_ID" NUMBER NOT NULL ,
"ID" NUMBER NULL ,
"OP" VARCHAR2(50 CHAR) NULL ,
"CONTRACTCOUNT" NUMBER DEFAULT 0  NULL ,
"AUCTIONCOUNT" NUMBER DEFAULT 0  NULL ,
"CHECKCONTRACTCOUNT" NUMBER DEFAULT 0  NULL ,
"CHECKAUCTIONCOUNT" NUMBER DEFAULT 0  NULL ,
"REMARKSCOUNT" NUMBER DEFAULT 0  NULL ,
"BEFOREFINISHEDDATE" DATE NULL ,
"AFTERFINISHEDDATE" DATE NULL ,
"OPTYPE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."ID" IS '操作人id';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."OP" IS '操作人';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."CONTRACTCOUNT" IS '合同数';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."AUCTIONCOUNT" IS '拍品数';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."CHECKCONTRACTCOUNT" IS '待检查合同数';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."CHECKAUCTIONCOUNT" IS '待检查拍品数';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."REMARKSCOUNT" IS '超期合同数';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."BEFOREFINISHEDDATE" IS '最早完成时间';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."AFTERFINISHEDDATE" IS '最晚完成时间';
COMMENT ON COLUMN "ZHAO"."TEMP_CONTRACT_TOTAL"."OPTYPE" IS '操作人类型(2,整理 4,制图  6,审核)';

-- ----------------------------
-- Table structure for TEMP_FINANCIAL_STATEMENTS_ONES
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_ONES";
CREATE TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_ONES" (
"F_ID" NUMBER NOT NULL ,
"START_DATE" DATE NULL ,
"END_DATE" DATE NULL ,
"FIRST_A1" NUMBER NULL ,
"FIRST_A6" NUMBER NULL ,
"FIRST_A11" NUMBER NULL ,
"FIRST_A16" NUMBER NULL ,
"FIRST_A21" NUMBER NULL ,
"FIRST_A26" NUMBER NULL ,
"FIRST_A31" NUMBER NULL ,
"TOTAL_A2" NUMBER NULL ,
"TOTAL_A7" NUMBER NULL ,
"TOTAL_A12" NUMBER NULL ,
"TOTAL_A17" NUMBER NULL ,
"TOTAL_A22" NUMBER NULL ,
"TOTAL_A27" NUMBER NULL ,
"TOTAL_A32" NUMBER NULL ,
"ADDITION_A3" NUMBER NULL ,
"ADDITION_A8" NUMBER NULL ,
"ADDITION_A13" NUMBER NULL ,
"ADDITION_A18" NUMBER NULL ,
"ADDITION_A23" NUMBER NULL ,
"ADDITION_A28" NUMBER NULL ,
"ADDITION_A33" NUMBER NULL ,
"REDUCE_A4" NUMBER NULL ,
"REDUCE_A9" NUMBER NULL ,
"REDUCE_A14" NUMBER NULL ,
"REDUCE_A19" NUMBER NULL ,
"REDUCE_A24" NUMBER NULL ,
"REDUCE_A29" NUMBER NULL ,
"REDUCE_A34" NUMBER NULL ,
"END_A5" NUMBER NULL ,
"END_A10" NUMBER NULL ,
"END_A15" NUMBER NULL ,
"END_A20" NUMBER NULL ,
"END_A25" NUMBER NULL ,
"END_A30" NUMBER NULL ,
"END_A35" NUMBER NULL ,
"TOTAL_B1" NUMBER NULL ,
"TOTAL_B4" NUMBER NULL ,
"TOTLA_B7" NUMBER NULL ,
"AUCTION_B2" NUMBER NULL ,
"AUCTION_B5" NUMBER NULL ,
"AUCTION_B8" NUMBER NULL ,
"ECGOODS_B3" NUMBER NULL ,
"ECGOODS_B6" NUMBER NULL ,
"ECGOODS_B9" NUMBER NULL ,
"WITHHOLD_C1" NUMBER NULL ,
"WITHHOLD_C3" NUMBER NULL ,
"WITHHOLD_C2" NUMBER NULL ,
"WITHHOLD_C4" NUMBER NULL ,
"SCORT_D1" NUMBER NULL ,
"SCORT_D2" NUMBER NULL ,
"SCORT_D3" NUMBER NULL ,
"SCORT_D4" NUMBER NULL ,
"MONEY_E1" NUMBER NULL ,
"MONEY_E2" NUMBER NULL ,
"MONEY_E3" NUMBER NULL ,
"MONEY_E4" NUMBER NULL ,
"MARGIN_F1" NUMBER NULL ,
"MARGIN_F2" NUMBER NULL ,
"MARGIN_F3" NUMBER NULL ,
"MARGIN_F4" NUMBER NULL ,
"MARGIN_F5" NUMBER NULL ,
"MARGIN_F6" NUMBER NULL ,
"MARGIN_F7" NUMBER NULL ,
"MARGIN_F8" NUMBER NULL ,
"MARGIN_F9" NUMBER NULL ,
"MARGIN_F10" NUMBER NULL ,
"MARGIN_F11" NUMBER NULL ,
"MARGIN_F12" NUMBER NULL ,
"MARGIN_F13" NUMBER NULL ,
"MARGIN_F14" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_FINANCIAL_STATEMENTS_TWOS
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_TWOS";
CREATE TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_TWOS" (
"F_ID" NUMBER NOT NULL ,
"START_DATE" DATE NULL ,
"END_DATE" DATE NULL ,
"TOTAL_G1_1" NUMBER NULL ,
"TOTAL_G2_1" NUMBER NULL ,
"TOTAL_G3_1" NUMBER NULL ,
"TOTAL_G4_1" NUMBER NULL ,
"TOTAL_G5_1" NUMBER NULL ,
"TOTAL_G6_1" NUMBER NULL ,
"TOTAL_G7_1" NUMBER NULL ,
"TOTAL_G8_1" NUMBER NULL ,
"TOTAL_G9_1" NUMBER NULL ,
"TOTAL_H1_1" NUMBER NULL ,
"TOTAL_H2_1" NUMBER NULL ,
"TOTAL_H3_1" NUMBER NULL ,
"TOTAL_H4_1" NUMBER NULL ,
"TOTAL_H5_1" NUMBER NULL ,
"TOTAL_H6_1" NUMBER NULL ,
"TOTAL_H7_1" NUMBER NULL ,
"TOTAL_H8_1" NUMBER NULL ,
"TOTAL_H9_1" NUMBER NULL ,
"TOTAL_HA_1" NUMBER NULL ,
"TOTAL_HB_1" NUMBER NULL ,
"TOTAL_HC_1" NUMBER NULL ,
"TOTAL_HD_1" NUMBER NULL ,
"TOTAL_HE_1" NUMBER NULL ,
"TOTAL_HF_1" NUMBER NULL ,
"AUCTION_G1_2" NUMBER NULL ,
"AUCTION_G2_2" NUMBER NULL ,
"AUCTION_G3_2" NUMBER NULL ,
"AUCTION_G4_2" NUMBER NULL ,
"AUCTION_G5_2" NUMBER NULL ,
"AUCTION_G6_2" NUMBER NULL ,
"AUCTION_G7_2" NUMBER NULL ,
"AUCTION_G8_2" NUMBER NULL ,
"AUCTION_G9_2" NUMBER NULL ,
"AUCTION_H1_2" NUMBER NULL ,
"AUCTION_H2_2" NUMBER NULL ,
"AUCTION_H3_2" NUMBER NULL ,
"AUCTION_H4_2" NUMBER NULL ,
"AUCTION_H5_2" NUMBER NULL ,
"AUCTION_H6_2" NUMBER NULL ,
"AUCTION_H7_2" NUMBER NULL ,
"AUCTION_H8_2" NUMBER NULL ,
"AUCTION_H9_2" NUMBER NULL ,
"AUCTION_HA_2" NUMBER NULL ,
"AUCTION_HB_2" NUMBER NULL ,
"AUCTION_HC_2" NUMBER NULL ,
"AUCTION_HD_2" NUMBER NULL ,
"AUCTION_HE_2" NUMBER NULL ,
"AUCTION_HF_2" NUMBER NULL ,
"ECGOODS_G1_3" NUMBER NULL ,
"ECGOODS_G2_3" NUMBER NULL ,
"ECGOODS_G3_3" NUMBER NULL ,
"ECGOODS_G4_3" NUMBER NULL ,
"ECGOODS_G5_3" NUMBER NULL ,
"ECGOODS_G6_3" NUMBER NULL ,
"ECGOODS_G7_3" NUMBER NULL ,
"ECGOODS_G8_3" NUMBER NULL ,
"ECGOODS_G9_3" NUMBER NULL ,
"ECGOODS_H1_3" NUMBER NULL ,
"ECGOODS_H2_3" NUMBER NULL ,
"ECGOODS_H3_3" NUMBER NULL ,
"ECGOODS_H4_3" NUMBER NULL ,
"ECGOODS_H5_3" NUMBER NULL ,
"ECGOODS_H6_3" NUMBER NULL ,
"ECGOODS_H7_3" NUMBER NULL ,
"ECGOODS_H8_3" NUMBER NULL ,
"ECGOODS_H9_3" NUMBER NULL ,
"ECGOODS_HA_3" NUMBER NULL ,
"ECGOODS_HB_3" NUMBER NULL ,
"ECGOODS_HC_3" NUMBER NULL ,
"ECGOODS_HD_3" NUMBER NULL ,
"ECGOODS_HE_3" NUMBER NULL ,
"ECGOODS_HF_3" NUMBER NULL ,
"SCORT_H1_4" NUMBER NULL ,
"SCORT_H3_4" NUMBER NULL ,
"SCORT_H5_4" NUMBER NULL ,
"SCORT_HC_4" NUMBER DEFAULT 0  NULL ,
"SCORT_HD_4" NUMBER DEFAULT 0  NULL ,
"SCORT_HE_4" NUMBER DEFAULT 0  NULL ,
"SCORT_HF_4" NUMBER DEFAULT 0 --本期结算未支出结算款-积分商品  NULL ,
"TOTAL_HG_1" NUMBER NULL ,
"AUCTION_HG_2" NUMBER NULL ,
"ECGOODS_HG_3" NUMBER NULL ,
"TOTAL_G10_1" NUMBER NULL ,
"ECGOODS_G11_3" NUMBER NULL ,
"ECGOODS_G10_3" NUMBER NULL ,
"AUCTION_G11_2" NUMBER NULL ,
"AUCTION_G10_2" NUMBER NULL ,
"TOTAL_G11_1" NUMBER NULL ,
"TOTAL_G12_1" NUMBER NULL ,
"TOTAL_G13_1" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_PERIOD_COST
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_PERIOD_COST";
CREATE TABLE "ZHAO"."TEMP_PERIOD_COST" (
"ID" NUMBER NOT NULL ,
"PER_DATE" DATE NULL ,
"PER_START_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_END_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_BUY_SERVICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_POST_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_KEE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_MARGIN_BUCKER" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SELL_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_ONLOAD_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_INSURE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_CUSTODY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_OTHER_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SELL_RETURN" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_PARTNER_RET" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SELL_CASH" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SHOP_CASH" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_IPS_PAY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_ACCOUNT_PAY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_CANCEL_PAY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_IPS_SHOP" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_ACCOUNT_SHOP" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_CANCEL_SHOP" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_REFUND_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SETTLE_BANK_TRANSFER" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SETTLE_CASH_PAY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_PARTNER_BANK_TRANSFER" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_CUSTOM_REMIT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_BALANCE_REFUND" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_BALANCE_PAY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_SETTLE_TRANSFER_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PERIOD_TYPE" NUMBER(38) NULL ,
"BUY_CUSTODY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"BUY_INSURE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ACC_TRANSFER_MARGIN" NUMBER(16,2) DEFAULT 0.0  NULL ,
"MARGIN_TRANSFER_ACC" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_MARGINS_ADD" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_MARGINS_REDUCE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_ACTUAL_SETTLE_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"BEFORE_SETTLE_REFUND" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_ACTUAL_SETTLE_BANK" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_ACTUAL_SETTLE_CASH" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_BOOK_REDUCE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PER_STORAGE_CHARGE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CREATED_AT" DATE NULL ,
"PER_CERTIFICATE_CHARGE" NUMBER(16,2) NULL ,
"BACK_CERTIFICATE_CHARGE" NUMBER(16,2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."TEMP_PERIOD_COST" IS '期度统计表';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_DATE" IS '期度';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_START_ACCOUNT" IS '期初余额';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_END_ACCOUNT" IS '期末余额';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_BUY_SERVICE" IS '本期竞买方服务费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_POST_FEE" IS '本期邮资';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_KEE_FEE" IS '本期保价费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_MARGIN_BUCKER" IS '本期保证金罚扣';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_SELL_FEE" IS '本期委托方服务费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_ONLOAD_FEE" IS '本期制作费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_INSURE_FEE" IS '本期保险费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_CUSTODY_FEE" IS '本期保管费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_OTHER_FEE" IS '本期其他费用';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_SELL_RETURN" IS '本期委托返点';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_PARTNER_RET" IS '本期合作方返点';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_SELL_CASH" IS '委托积分提现';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_END_PRICE" IS '本期结标价';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_SHOP_CASH" IS '本期商城现金购物';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_IPS_PAY" IS '本期IPS支付交易单';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_ACCOUNT_PAY" IS '本期余额支付交易单';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_CANCEL_PAY" IS '本期取消交易单';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_IPS_SHOP" IS '本期IPS支付商城';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_ACCOUNT_SHOP" IS '本期余额支付商城';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_CANCEL_SHOP" IS '本期取消商城订单';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_REFUND_ACCOUNT" IS '本期退货转余额';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_SETTLE_BANK_TRANSFER" IS '本期结算银行转账';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_SETTLE_CASH_PAY" IS '本期结算现金支付';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_PARTNER_BANK_TRANSFER" IS '本期合作方返点银行转账';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_CUSTOM_REMIT" IS '本期客户存入';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_BALANCE_REFUND" IS '本期余额退款';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_BALANCE_PAY" IS '本期支付';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."BUY_CUSTODY_FEE" IS '竞买方保管费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."BUY_INSURE_FEE" IS '竞买方保险费';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."ACC_TRANSFER_MARGIN" IS '余额转保证金';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."MARGIN_TRANSFER_ACC" IS '保证金转余额';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_MARGINS_ADD" IS '本期保证金增加';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_MARGINS_REDUCE" IS '本期保证金减少';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_ACTUAL_SETTLE_ACCOUNT" IS '实际结算转余额';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."BEFORE_SETTLE_REFUND" IS '本期结算前退货落槌价(总和)';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_ACTUAL_SETTLE_BANK" IS '实际结算银行转账';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_ACTUAL_SETTLE_CASH" IS '实际结算现金支付';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_BOOK_REDUCE" IS '商城预订资金罚扣';
COMMENT ON COLUMN "ZHAO"."TEMP_PERIOD_COST"."PER_STORAGE_CHARGE" IS '仓储费';

-- ----------------------------
-- Table structure for TEMP_SCORE_SUCCESS
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_SCORE_SUCCESS";
CREATE TABLE "ZHAO"."TEMP_SCORE_SUCCESS" (
"ID" NUMBER NOT NULL ,
"USER_ID" NUMBER NULL ,
"USER_NAME" VARCHAR2(50 BYTE) NULL ,
"SCORES" NUMBER NULL ,
"EFFECTED_AT" DATE NULL ,
"REMARKS" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_SETTLEMENT_AUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_SETTLEMENT_AUCTIONS";
CREATE TABLE "ZHAO"."TEMP_SETTLEMENT_AUCTIONS" (
"AUCTION_ID" NUMBER(38) NOT NULL ,
"STATE" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_SETTLEMENT_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_SETTLEMENT_DETAILS";
CREATE TABLE "ZHAO"."TEMP_SETTLEMENT_DETAILS" (
"AUCTION_ID" NUMBER(38) NOT NULL ,
"AUCTION_NAME" VARCHAR2(1000 CHAR) NULL ,
"AC_INITAL" NUMBER(16,2) DEFAULT 0.0  NULL ,
"END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_CHARGE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_CUSTODY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_ONLOAD" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_INSURE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"RETURN_SERVICE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"CHARGE_FEE_TYPE" VARCHAR2(255 BYTE) NULL ,
"AUCTION_STATUS" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_SYM_AUCTION
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_SYM_AUCTION";
CREATE TABLE "ZHAO"."TEMP_SYM_AUCTION" (
"ID" NUMBER(38) NOT NULL ,
"AUCTION_NO" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"PIC_ORDER" VARCHAR2(255 BYTE) NOT NULL ,
"AUCTION_CATEGORY_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."TEMP_SYM_AUCTION" IS '合作整理图片处理临时表';
COMMENT ON COLUMN "ZHAO"."TEMP_SYM_AUCTION"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."TEMP_SYM_AUCTION"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."TEMP_SYM_AUCTION"."PIC_ORDER" IS '图片对应的字母';
COMMENT ON COLUMN "ZHAO"."TEMP_SYM_AUCTION"."AUCTION_CATEGORY_ID" IS '分类id';

-- ----------------------------
-- Table structure for TEMP_TEST
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_TEST";
CREATE TABLE "ZHAO"."TEMP_TEST" (
"NAME" VARCHAR2(20 BYTE) NULL ,
"SEX" VARCHAR2(10 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_USERORDERS_DELAY
-- ----------------------------
DROP TABLE "ZHAO"."TEMP_USERORDERS_DELAY";
CREATE TABLE "ZHAO"."TEMP_USERORDERS_DELAY" (
"ORDER_ID" NUMBER NOT NULL ,
"AUCTION_NO" NUMBER NULL ,
"AUCTION_NAME" VARCHAR2(500 BYTE) NULL ,
"USER_ID" NUMBER NULL ,
"USER_NAME" VARCHAR2(200 BYTE) NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) NULL ,
"CREATED_AT" DATE NULL ,
"FIRST_LIMIT_PAY" DATE NULL ,
"DELAY_LIMIT_PAY" DATE NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"REMARKS" VARCHAR2(400 BYTE) NULL ,
"ID" NUMBER NULL ,
"DELAY_DAYS" NUMBER NULL ,
"DELAY_HOURS" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEST
-- ----------------------------
DROP TABLE "ZHAO"."TEST";
CREATE TABLE "ZHAO"."TEST" (
"CHI_NO" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TMP_USER_INFO
-- ----------------------------
DROP TABLE "ZHAO"."TMP_USER_INFO";
CREATE TABLE "ZHAO"."TMP_USER_INFO" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(50 BYTE) NULL ,
"POSTCODE" NUMBER NULL ,
"ADDRESS" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."TMP_USER_INFO" IS 'mytest';
COMMENT ON COLUMN "ZHAO"."TMP_USER_INFO"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."TMP_USER_INFO"."NAME" IS '姓名';
COMMENT ON COLUMN "ZHAO"."TMP_USER_INFO"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."TMP_USER_INFO"."ADDRESS" IS '地址';

-- ----------------------------
-- Table structure for USER_ACCOUNTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_ACCOUNTS";
CREATE TABLE "ZHAO"."USER_ACCOUNTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"SOURCE_ID" NUMBER(38) NULL ,
"SOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"MONEY" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ACCOUNT_OLD" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ACCOUNT_NEW" NUMBER(16,2) DEFAULT 0.0  NULL ,
"DIRECTION" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"FINANCE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"FINANCE_DATE" DATE NULL ,
"FINANCE_ID" NUMBER(38) NULL ,
"FINANCE_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ACCOUNTS" IS '用户账户流水表';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."SOURCE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."SOURCE_TYPE" IS '关联对象';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."MONEY" IS '金额';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."ACCOUNT_OLD" IS '操作前客户帐户余额';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."ACCOUNT_NEW" IS '操作后客户帐户余额';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."DIRECTION" IS '资金流向(0收入 1支出)';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."FINANCE_TYPE" IS '资金流向类型(0:汇款存入 1:现金存入 2:保证金转余额 3:退款转出 4:余额转保证金 5:坏账扣除 6:物流邮资补收 7:收取物流保价费  8:合作分成返佣 9盛付通支付 10:IPS支付存入  11:交易单支付  12:结算前退货存款 13:结算转余额 14:结算后退货存款 15:Paypal支付存入 16:收取保管费(英文版) 17:收取保险费(英文版)  18:委托方结算返佣 19:商城订单合并支付 20:委托积分转现金  21:商城退货金额 22:退款转入 23:汇款取消 24:余额+IPS支付时余额部分(一定时间内有效,超过时间退回给用户,一般是在第三支付结果返回超时情况下发生) 25:余额+SDO支付时余额部分 26: 预定资金扣除)   27:仓储费
28:得仕通支付 32:财付通存入 33:财付通+余额支付余额部分 34:收藏证书 35:结算前收藏证书退款 36：结算后收藏证书退款  42:支付宝存入 43:支付宝+余额支付余额部分' 53:微信支付+余额支付余额部分;
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."FINANCE_DATE" IS '财务操作时间';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."FINANCE_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."FINANCE_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ACCOUNTS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_ACTIVITY_INFO
-- ----------------------------
DROP TABLE "ZHAO"."USER_ACTIVITY_INFO";
CREATE TABLE "ZHAO"."USER_ACTIVITY_INFO" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"RECEIVE_NAME" VARCHAR2(255 CHAR) NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"ACTIVITY_NO" VARCHAR2(255 CHAR) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ACTIVITY_INFO" IS '用户(发货)地址表';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."RECEIVE_NAME" IS '收货人名称';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."ADDRESS" IS '街道地址';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."STATUS" IS '状态(0:审核中 1:已发送 2:作废)';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."ADMIN_ID" IS '修改人ID';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."ADMIN_NAME" IS '修改人名称';
COMMENT ON COLUMN "ZHAO"."USER_ACTIVITY_INFO"."ACTIVITY_NO" IS '活动编号';

-- ----------------------------
-- Table structure for USER_ADDRESS_VERIFIES
-- ----------------------------
DROP TABLE "ZHAO"."USER_ADDRESS_VERIFIES";
CREATE TABLE "ZHAO"."USER_ADDRESS_VERIFIES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_ADDRESS_ID" NUMBER(38) NULL ,
"OLD_ADDRESS_INFO" VARCHAR2(255 CHAR) NULL ,
"NEW_ADDRESS_INFO" VARCHAR2(255 CHAR) NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"VERIFY_ID" NUMBER(38) NULL ,
"VERIFY_NAME" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ADDRESS_VERIFIES" IS '用户发货地址审核表';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."USER_ADDRESS_ID" IS '地址ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."OLD_ADDRESS_INFO" IS '旧地址信息(json格式)';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."NEW_ADDRESS_INFO" IS '新地址信息(json格式)';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."STATUS" IS '状态(0:待审核 1:已通过 2:已拒绝)';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."VERIFY_ID" IS '审核人ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESS_VERIFIES"."VERIFY_NAME" IS '审核人名称';

-- ----------------------------
-- Table structure for USER_ADDRESSES
-- ----------------------------
DROP TABLE "ZHAO"."USER_ADDRESSES";
CREATE TABLE "ZHAO"."USER_ADDRESSES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"RECEIVE_NAME" VARCHAR2(255 CHAR) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"COUNTRY_ID" NUMBER(38) NULL ,
"PROVINCE_ID" NUMBER(38) NULL ,
"CITY_ID" NUMBER(38) NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"MOBILE_TEL" VARCHAR2(255 CHAR) NULL ,
"FIRST_NAME" VARCHAR2(255 CHAR) NULL ,
"LAST_NAME" VARCHAR2(255 CHAR) NULL ,
"ISDEFAULT" NUMBER(1) DEFAULT 0  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CERT_PATH" VARCHAR2(1000 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_OP_ID" NUMBER(38) NULL ,
"CREATED_OP" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ADDRESSES" IS '用户(发货)地址表';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."RECEIVE_NAME" IS '收货人名称';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."NICKNAME" IS '地址简称';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."COUNTRY_ID" IS '国家ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."PROVINCE_ID" IS '省份ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."CITY_ID" IS '城市ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."ADDRESS" IS '街道地址';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."MOBILE_TEL" IS '手机';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."FIRST_NAME" IS '用户名';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."LAST_NAME" IS '用户姓';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."ISDEFAULT" IS '是否默认发货地址(0否1是)';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."STATUS" IS '状态(0:审核中 1:通过)';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."ADMIN_ID" IS '修改人ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."ADMIN_NAME" IS '修改人名称';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."CREATED_OP_ID" IS '添加ID';
COMMENT ON COLUMN "ZHAO"."USER_ADDRESSES"."CREATED_OP" IS '添加人';

-- ----------------------------
-- Table structure for USER_AUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."USER_AUCTIONS";
CREATE TABLE "ZHAO"."USER_AUCTIONS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"GOODS_ID" NUMBER(38) NULL ,
"TAG" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_AUCTIONS" IS '用户关注拍品表';
COMMENT ON COLUMN "ZHAO"."USER_AUCTIONS"."USER_ID" IS '用户id';
COMMENT ON COLUMN "ZHAO"."USER_AUCTIONS"."AUCTION_ID" IS '拍品id';
COMMENT ON COLUMN "ZHAO"."USER_AUCTIONS"."GOODS_ID" IS '商品ID';
COMMENT ON COLUMN "ZHAO"."USER_AUCTIONS"."TAG" IS '标签';
COMMENT ON COLUMN "ZHAO"."USER_AUCTIONS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for USER_BANK_VERIFIES
-- ----------------------------
DROP TABLE "ZHAO"."USER_BANK_VERIFIES";
CREATE TABLE "ZHAO"."USER_BANK_VERIFIES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_BANK_ID" NUMBER(38) NULL ,
"OLD_BANK_INFO" VARCHAR2(1000 CHAR) NULL ,
"NEW_BANK_INFO" VARCHAR2(1000 CHAR) NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"VERIFY_ID" NUMBER(38) NULL ,
"VERIFY_NAME" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_BANK_VERIFIES" IS '用户银行审核表';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."USER_BANK_ID" IS '银行帐户ID';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."OLD_BANK_INFO" IS '旧银行帐户信息(json格式)';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."NEW_BANK_INFO" IS '新银行帐户信息(json格式)';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."STATUS" IS '状态(0:待审核 1:已通过 2:已拒绝)';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."VERIFY_ID" IS '审核人ID';
COMMENT ON COLUMN "ZHAO"."USER_BANK_VERIFIES"."VERIFY_NAME" IS '审核人名称';

-- ----------------------------
-- Table structure for USER_BANKS
-- ----------------------------
DROP TABLE "ZHAO"."USER_BANKS";
CREATE TABLE "ZHAO"."USER_BANKS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"COUNTRY_ID" NUMBER(38) NULL ,
"PROVINCE_ID" NUMBER(38) NULL ,
"CITY_ID" NUMBER(38) NULL ,
"BANK_TYPE_ID" NUMBER(38) DEFAULT 1  NULL ,
"BANK_NO" VARCHAR2(255 CHAR) NULL ,
"BANK_NAME" VARCHAR2(255 CHAR) NULL ,
"BRANCH_NAME" VARCHAR2(255 CHAR) NULL ,
"IBAN_BANK_NO" VARCHAR2(255 CHAR) NULL ,
"SWIFT_CODE" VARCHAR2(255 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"IS_DEFAULT" NUMBER(1) DEFAULT 0  NULL ,
"CERT_PATH" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_OP_ID" NUMBER(38) NULL ,
"CREATED_OP" VARCHAR2(255 CHAR) NULL ,
"ID_CARD" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_BANKS" IS '用户银行表';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."COUNTRY_ID" IS '国家ID';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."PROVINCE_ID" IS '省份ID';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."CITY_ID" IS '城市ID';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."BANK_TYPE_ID" IS '银行类型(1:国内银行卡 2:国外银行卡 3:邮政地址 4:Paypal)';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."BANK_NO" IS '银行帐号';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."BANK_NAME" IS '银行名称';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."BRANCH_NAME" IS '银行支行名称';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."IBAN_BANK_NO" IS '国际银行帐户号';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."SWIFT_CODE" IS '国际银行识别码';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."POSTCODE" IS '邮政编码';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."ADDRESS" IS '银行地址';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."IS_DEFAULT" IS '是否默认地址(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."CERT_PATH" IS '证件图片路径';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."STATUS" IS '状态(0:审核中 1:通过 2:拒绝 3：删除)';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."ADMIN_ID" IS '修改人ID';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."ADMIN_NAME" IS '修改人名称';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."CREATED_OP_ID" IS '添加ID';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."CREATED_OP" IS '添加人';
COMMENT ON COLUMN "ZHAO"."USER_BANKS"."ID_CARD" IS '身份证号码';

-- ----------------------------
-- Table structure for USER_CITIES
-- ----------------------------
DROP TABLE "ZHAO"."USER_CITIES";
CREATE TABLE "ZHAO"."USER_CITIES" (
"ID" NUMBER(38) NOT NULL ,
"PROVINCE_ID" NUMBER(38) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_TW" VARCHAR2(255 CHAR) NULL ,
"PINYIN" VARCHAR2(255 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_CITIES" IS '城市表';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."PROVINCE_ID" IS '省份ID';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."NAME_EN" IS '英文名称';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."NAME_TW" IS '台湾名称';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."PINYIN" IS '拼音名称';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."DESCRIPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_CITIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_CLASS
-- ----------------------------
DROP TABLE "ZHAO"."USER_CLASS";
CREATE TABLE "ZHAO"."USER_CLASS" (
"USER_ID" NUMBER(38) NOT NULL ,
"CLASS_ID" NUMBER(38) NOT NULL ,
"ENABLED" CHAR(1 BYTE) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_CLASS" IS '用户关注品种';
COMMENT ON COLUMN "ZHAO"."USER_CLASS"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_CLASS"."CLASS_ID" IS '品种编号';
COMMENT ON COLUMN "ZHAO"."USER_CLASS"."ENABLED" IS '是否有效';

-- ----------------------------
-- Table structure for USER_COLLECTION_CERTIFICATE
-- ----------------------------
DROP TABLE "ZHAO"."USER_COLLECTION_CERTIFICATE";
CREATE TABLE "ZHAO"."USER_COLLECTION_CERTIFICATE" (
"ID" NUMBER NOT NULL ,
"ORDER_ID" NUMBER NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_COLLECTION_CERTIFICATE" IS '用户收藏证书记录表(书画)';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTION_CERTIFICATE"."ID" IS '表id';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTION_CERTIFICATE"."ORDER_ID" IS '交易单id';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTION_CERTIFICATE"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for USER_COLLECTION_SHIPS
-- ----------------------------
DROP TABLE "ZHAO"."USER_COLLECTION_SHIPS";
CREATE TABLE "ZHAO"."USER_COLLECTION_SHIPS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_COLLECTION_ID" NUMBER(38) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_COLLECTION_SHIPS" IS '用户收藏关联表';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTION_SHIPS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTION_SHIPS"."USER_COLLECTION_ID" IS '用户收藏ID';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTION_SHIPS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for USER_COLLECTIONS
-- ----------------------------
DROP TABLE "ZHAO"."USER_COLLECTIONS";
CREATE TABLE "ZHAO"."USER_COLLECTIONS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 1  NULL ,
"SORT_ORDER" NUMBER(38) DEFAULT 0  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"PARENT_ID" NUMBER(38) DEFAULT 0  NULL ,
"COLL_LEVEL" NUMBER(38) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_COLLECTIONS" IS '用户收藏表';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."IS_SHOW" IS '是否显示(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_COLLECTIONS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_COUNTRIES
-- ----------------------------
DROP TABLE "ZHAO"."USER_COUNTRIES";
CREATE TABLE "ZHAO"."USER_COUNTRIES" (
"ID" NUMBER(38) NOT NULL ,
"REGION_ID" NUMBER(38) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_TW" VARCHAR2(255 CHAR) NULL ,
"PINYIN" VARCHAR2(255 CHAR) NULL ,
"LANG" VARCHAR2(255 CHAR) NULL ,
"LIST_ORDER" NUMBER(38) NULL ,
"IS_SHOW" NUMBER(1) DEFAULT 0  NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_COUNTRIES" IS '国家表';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."REGION_ID" IS '地区ID';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."NAME_EN" IS '英文名称';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."NAME_TW" IS '台湾名称';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."PINYIN" IS '拼音名称';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."LANG" IS '语言';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."LIST_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."IS_SHOW" IS '在客户端显示(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."DESCRIPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_COUNTRIES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."USER_DETAILS";
CREATE TABLE "ZHAO"."USER_DETAILS" (
"USER_ID" NUMBER(38) NOT NULL ,
"COUNTRY_ID" NUMBER(38) NULL ,
"PROVINCE_ID" NUMBER(38) NULL ,
"CITY_ID" NUMBER(38) NULL ,
"REGION_ID" NUMBER(38) NULL ,
"CERT_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CERT_NO" VARCHAR2(255 CHAR) NULL ,
"CERT_PATH" VARCHAR2(255 CHAR) NULL ,
"CERT_PERSONAL_PHOTOS" VARCHAR2(255 CHAR) NULL ,
"WORK" VARCHAR2(255 CHAR) NULL ,
"EDUCATION" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"MOBILE_TEL" VARCHAR2(255 CHAR) NULL ,
"FAX" VARCHAR2(255 CHAR) NULL ,
"BRITHDAY" DATE NULL ,
"MSN" VARCHAR2(255 CHAR) NULL ,
"QQ" VARCHAR2(255 CHAR) NULL ,
"ICQ" VARCHAR2(255 CHAR) NULL ,
"OTHER_CONTACT" VARCHAR2(255 CHAR) NULL ,
"USER_FAVOR" VARCHAR2(1000 CHAR) NULL ,
"REGISTER_IP" VARCHAR2(255 CHAR) NULL ,
"OPERATE_NAME" VARCHAR2(255 CHAR) NULL ,
"ID_AUTH_REQUEST_TIME" DATE NULL ,
"ID_AUTH_STATUS" CHAR(1 BYTE) DEFAULT 0  NULL ,
"ID_AUTH_PASS_TIME" DATE NULL ,
"PHONE_AUTH_REQUEST_TIME" DATE NULL ,
"PHONE_AUTH_STATUS" CHAR(1 BYTE) DEFAULT 0  NULL ,
"PHONE_AUTH_PASS_TIME" DATE NULL ,
"APP_ID" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"EMAIL" VARCHAR2(255 BYTE) NULL ,
"SUB_PHONE_NO" VARCHAR2(10 BYTE) NULL ,
"CRET_PERSONAL_PHOTOS" VARCHAR2(500 BYTE) NULL ,
"COUNTRY_TEL_CODE" VARCHAR2(255 CHAR) NULL ,
"REGION_TEL_CODE" VARCHAR2(255 CHAR) NULL ,
"WIZARD_STEP" VARCHAR2(10 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_DETAILS" IS '用户明细表';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."COUNTRY_ID" IS '国家ID';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."PROVINCE_ID" IS '省份ID';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."CITY_ID" IS '城市ID';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."REGION_ID" IS '区域ID';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."CERT_TYPE" IS '认证类型(1:身份证 2:军官证 3:学生证 4:其他 5:护照 6:Passport 7:ID card 8:Others)';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."CERT_NO" IS '认证号码';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."CERT_PATH" IS '认证图片位置';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."CERT_PERSONAL_PHOTOS" IS '认证个人生活照,多张以逗号分隔';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."WORK" IS '职业';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."EDUCATION" IS '学历(1:本科 2:高中 3:初中及以下 4:大专 5:中专 6:硕士 7:博士)';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."ADDRESS" IS '地址';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."MOBILE_TEL" IS '手机';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."FAX" IS '传真';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."BRITHDAY" IS '生日';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."MSN" IS 'MSN';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."QQ" IS 'QQ';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."ICQ" IS 'ICQ';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."OTHER_CONTACT" IS '其他联系方式';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."USER_FAVOR" IS '用户爱好';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."REGISTER_IP" IS '注册IP';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."OPERATE_NAME" IS '操作人';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."ID_AUTH_REQUEST_TIME" IS '身份认证提出时间';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."ID_AUTH_STATUS" IS '身份认证状态(0:未申请 1:申请 2:通过 3:不通过)';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."ID_AUTH_PASS_TIME" IS '身份认证通过时间';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."PHONE_AUTH_REQUEST_TIME" IS '电话认证提出时间';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."PHONE_AUTH_STATUS" IS '电话认证状态(0:未申请 1:申请 2:通过 3:不通过)';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."PHONE_AUTH_PASS_TIME" IS '电话认证通过时间';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_DETAILS"."WIZARD_STEP" IS '描述老用户修改信息步骤   (0为老用户标志并且开始步骤 9为步骤结束)';

-- ----------------------------
-- Table structure for USER_DEVICE
-- ----------------------------
DROP TABLE "ZHAO"."USER_DEVICE";
CREATE TABLE "ZHAO"."USER_DEVICE" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"DEVICE_ID" VARCHAR2(2000 BYTE) NULL ,
"DEVICE_TYPE" NUMBER(38) NULL ,
"TOKEN" VARCHAR2(2000 BYTE) NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CERT" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_DEVICE" IS '用户设备';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."DEVICE_ID" IS '设备编号';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."DEVICE_TYPE" IS '设备类型(0:iphone; 1:ipad; 2:android phone; 3:android pad; -1:未知设备;)';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."TOKEN" IS '设备令牌';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."STATUS" IS '是否有效(0:否，1:是)';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_DEVICE"."CERT" IS '推送使用的证书';

-- ----------------------------
-- Table structure for USER_EMAILS
-- ----------------------------
DROP TABLE "ZHAO"."USER_EMAILS";
CREATE TABLE "ZHAO"."USER_EMAILS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"EMAIL" VARCHAR2(255 CHAR) NULL ,
"IS_AUTH" NUMBER(1) DEFAULT 0  NULL ,
"REMARKS" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_EMAILS" IS '用户电子邮件表';
COMMENT ON COLUMN "ZHAO"."USER_EMAILS"."USER_ID" IS '用户id';
COMMENT ON COLUMN "ZHAO"."USER_EMAILS"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "ZHAO"."USER_EMAILS"."IS_AUTH" IS '0:未认证 1:已认证 2:取消已认证';
COMMENT ON COLUMN "ZHAO"."USER_EMAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_EMAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_EMAILS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_FEEDBACK
-- ----------------------------
DROP TABLE "ZHAO"."USER_FEEDBACK";
CREATE TABLE "ZHAO"."USER_FEEDBACK" (
"ID" NUMBER NOT NULL ,
"USER_ID" NUMBER NULL ,
"CONTACT" VARCHAR2(400 BYTE) NULL ,
"CONTENT" CLOB NOT NULL ,
"TYPE" NUMBER(2) NOT NULL ,
"REPLY" CLOB NULL ,
"REPLY_AT" DATE NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"STATUS" NUMBER(1) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_FEEDBACK" IS '用户反馈';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."ID" IS '主键编号';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."CONTACT" IS '联系方式';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."CONTENT" IS '反馈内容';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."TYPE" IS '0：行情指数; 1:手机2.0';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."REPLY" IS '回复';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."REPLY_AT" IS '回复时间';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."CREATED_AT" IS '反馈时间';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."UPDATED_AT" IS '最近浏览时间';
COMMENT ON COLUMN "ZHAO"."USER_FEEDBACK"."STATUS" IS '0:无效; 1:有效';

-- ----------------------------
-- Table structure for USER_FINDERROR
-- ----------------------------
DROP TABLE "ZHAO"."USER_FINDERROR";
CREATE TABLE "ZHAO"."USER_FINDERROR" (
"ID" NUMBER NOT NULL ,
"WHOFIND" VARCHAR2(100 BYTE) NULL ,
"TEL" VARCHAR2(4000 BYTE) NULL ,
"CONTENT" VARCHAR2(4000 BYTE) NULL ,
"SUBMITDATE" DATE NULL ,
"SUBMITIP" VARCHAR2(4000 BYTE) NULL ,
"ADDRESS" VARCHAR2(4000 BYTE) NULL ,
"EMAIL" VARCHAR2(4000 BYTE) NULL ,
"POSTCODE" VARCHAR2(4000 BYTE) NULL ,
"COMEURL" VARCHAR2(2000 BYTE) NULL ,
"STATE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for USER_IPS_PAYMENTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_IPS_PAYMENTS";
CREATE TABLE "ZHAO"."USER_IPS_PAYMENTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"ORDER_IDS" VARCHAR2(1000 CHAR) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"F_CHECK" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"USER_PAYMENT_ID" NUMBER(38) NULL ,
"LOGISTIC_TYPE_ID" NUMBER(38) NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"IPS_BILL_NO" VARCHAR2(255 CHAR) NULL ,
"SDO_BILL_NO" VARCHAR2(255 CHAR) NULL ,
"DEPOSIT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"MC_GROSS" NUMBER(16,2) DEFAULT 0.0  NULL ,
"MC_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CURRENCY" VARCHAR2(255 CHAR) DEFAULT 'USD'  NULL ,
"PAYMENT_DATE" DATE NULL ,
"PAYMENT_STATUS" VARCHAR2(255 CHAR) NULL ,
"PENDING_REASON" VARCHAR2(255 CHAR) NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"COUNTRY_ID" NUMBER(38) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"MOBILE_TEL" VARCHAR2(255 CHAR) NULL ,
"DELIVER_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"KEEP_ORDERS" NUMBER(1) NULL ,
"FIRST_NAME" VARCHAR2(255 CHAR) NULL ,
"LAST_NAME" VARCHAR2(255 CHAR) NULL ,
"CUSTODY_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TXN_ID" VARCHAR2(255 CHAR) NULL ,
"PAYER_ID" VARCHAR2(255 CHAR) NULL ,
"CHARGED_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"RECEIVE_NAME" VARCHAR2(255 CHAR) NULL ,
"INSURANCE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ORDER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"DST_BILL_NO" VARCHAR2(255 BYTE) NULL ,
"BILL_NO" VARCHAR2(255 BYTE) NULL ,
"BILL_TYPE" VARCHAR2(255 BYTE) NULL ,
"PAY_CHARGED_FEE" NUMBER(24,10) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_IPS_PAYMENTS" IS '订单在线支付单表';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."ORDER_IDS" IS '订单IDS';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."AMOUNT" IS '支付金额';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."STATUS" IS '状态';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."F_CHECK" IS '财务确认状态';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."USER_PAYMENT_ID" IS '合并支付id';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."LOGISTIC_TYPE_ID" IS '物流类型';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."LOGISTIC_DETAIL_ID" IS '申请发货id';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."IPS_BILL_NO" IS 'IPS支付单号';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."SDO_BILL_NO" IS '盛付通支付单号';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."DEPOSIT" IS '保证金';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."MC_GROSS" IS 'Paypal收取手续费';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."MC_FEE" IS 'Paypal收取总额';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."CURRENCY" IS '支付货币类型(USD, RMB)';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."PAYMENT_DATE" IS '支付日期';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."PAYMENT_STATUS" IS 'Paypal支付状态(Completed)';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."PENDING_REASON" IS 'Paypal待定原因';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."ADDRESS" IS 'Paypal支付发货地址';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."COUNTRY_ID" IS '国家ID';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."TEL" IS '联系电话';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."MOBILE_TEL" IS '手机号码';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."DELIVER_FEE" IS '物流费';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."KEEP_ORDERS" IS '是否暂缓发货';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."FIRST_NAME" IS '发货人名';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."LAST_NAME" IS '发货人姓';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."CUSTODY_FEE" IS '保管费';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."TXN_ID" IS 'Paypal交易单号';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."PAYER_ID" IS 'Paypal支付人id';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."CHARGED_FEE" IS '手续费';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."RECEIVE_NAME" IS '收货人';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."INSURANCE_FEE" IS '保险费';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."ORDER_TYPE" IS '订单类型: 0拍卖 1商城';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."DST_BILL_NO" IS '得仕通支付单号';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."BILL_NO" IS '支付单号';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."BILL_TYPE" IS '支付来源类型(以后新加的支付方式用这两个字段来区分 eg:TENPAY)';
COMMENT ON COLUMN "ZHAO"."USER_IPS_PAYMENTS"."PAY_CHARGED_FEE" IS '网银手续费(如：财付通)';

-- ----------------------------
-- Table structure for USER_KEYWORDS
-- ----------------------------
DROP TABLE "ZHAO"."USER_KEYWORDS";
CREATE TABLE "ZHAO"."USER_KEYWORDS" (
"ID" NUMBER NOT NULL ,
"KEYWORD" VARCHAR2(255 BYTE) NULL ,
"USER_ID" NUMBER NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"TYPE" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"COUNTS" VARCHAR2(20 BYTE) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_KEYWORDS" IS '用户个性化关键字表';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."KEYWORD" IS '用户关键字';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."STATUS" IS '状态';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."TYPE" IS '关键字类型:
0：普通关键字
1： 热门关键字';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."CREATED_AT" IS '创建日期';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."UPDATED_AT" IS '更新日期';
COMMENT ON COLUMN "ZHAO"."USER_KEYWORDS"."COUNTS" IS '统计关键字';

-- ----------------------------
-- Table structure for USER_LEVEL_COUNT
-- ----------------------------
DROP TABLE "ZHAO"."USER_LEVEL_COUNT";
CREATE TABLE "ZHAO"."USER_LEVEL_COUNT" (
"COUNT" NUMBER(38) NULL ,
"USER_LEVEL" VARCHAR2(10 BYTE) NOT NULL ,
"CREATE_DATE" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for USER_LEVEL_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."USER_LEVEL_DETAILS";
CREATE TABLE "ZHAO"."USER_LEVEL_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORES" NUMBER(38) DEFAULT 1  NULL ,
"DIRECTION" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"OPERATE_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"RESOURCE_ID" NUMBER(38) NULL ,
"RESOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT '1'  NOT NULL ,
"EFFECTED_AT" DATE NULL ,
"EXPIRED_AT" DATE NULL ,
"USABLE_SCORES" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LEVEL_DETAILS" IS '用户形象值流水表';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."USER_NAME" IS '用户姓名';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."USER_TYPE" IS '用户类型(0:竞买 1:委托)';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."SCORES" IS '形象值';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."DIRECTION" IS '流水类型(0:产生 1:消费)';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."OPERATE_TYPE" IS '操作类型(1:积分生效(产生形象值) 2:订单超期有理由不支付(产生形象值) 3:用户升级 4:用户降级 5:用户保级 6:订单超期支付)7:形象值归零';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."RESOURCE_ID" IS '关联对象ID(积分ID, 订单ID, 用户等级更变ID)';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."RESOURCE_TYPE" IS '关联对象(Score, UserOrder,UserLevelHist)';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."STATUS" IS '形象值过期状态：1未过期，2已过期';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."EFFECTED_AT" IS '形象值生效时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."EXPIRED_AT" IS '形象值过期时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_DETAILS"."USABLE_SCORES" IS '可用形象值';

-- ----------------------------
-- Table structure for USER_LEVEL_HISTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_LEVEL_HISTS";
CREATE TABLE "ZHAO"."USER_LEVEL_HISTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHANGE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CONSUME_SCORES" NUMBER(38) DEFAULT 0  NULL ,
"USER_CHANGE_LEVEL" NUMBER(38) DEFAULT 0  NULL ,
"USER_CHANGED_LEVEL" NUMBER(38) DEFAULT 0  NULL ,
"START_DATE" DATE NULL ,
"EXPIRE_DATE" DATE NULL ,
"CHANGE_REASON" VARCHAR2(1000 CHAR) NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"OP" VARCHAR2(255 CHAR) NULL ,
"OP_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LEVEL_HISTS" IS '用户等级更新历史表';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."USER_TYPE" IS '用户类型(0:竞买方 1:委托方)';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."CHANGE_TYPE" IS '0:升级 1:降级 2:订单超期支付降级 3:订单超期有理由不支付升级 4:保级';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."CONSUME_SCORES" IS '消耗形象值';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."USER_CHANGE_LEVEL" IS '用户更变前等级';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."USER_CHANGED_LEVEL" IS '用户更变后等级';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."START_DATE" IS '有效开始时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."EXPIRE_DATE" IS '过期时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."CHANGE_REASON" IS '更变原因(请使用remark字段)';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."OP" IS '操作人';
COMMENT ON COLUMN "ZHAO"."USER_LEVEL_HISTS"."OP_DATE" IS '操作日期';

-- ----------------------------
-- Table structure for USER_LEVELS
-- ----------------------------
DROP TABLE "ZHAO"."USER_LEVELS";
CREATE TABLE "ZHAO"."USER_LEVELS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"RANK" NUMBER(38) DEFAULT 0  NULL ,
"RANK_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SCORE_PARAM" NUMBER(6,2) DEFAULT 0.0  NULL ,
"RANK_SCORE" NUMBER(38) DEFAULT 0  NULL ,
"PROMOTION" NUMBER(38) DEFAULT 0  NULL ,
"AVOID_RELEGATION" NUMBER(38) DEFAULT 0  NULL ,
"EFFECTIVE_MONTHS" NUMBER(38) DEFAULT 12  NULL ,
"RETURN_CHARGE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"IS_FREE_CHARGE" NUMBER(1) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LEVELS" IS '用户等级表';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."NAME" IS '等级名称';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."RANK" IS '等级级别';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."RANK_TYPE" IS '等级类型(0:竞买方 1: 委托方)';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."SCORE_PARAM" IS '积分参数';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."RANK_SCORE" IS '等级形象值';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."PROMOTION" IS '晋级形象值';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."AVOID_RELEGATION" IS '保级形象值';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."EFFECTIVE_MONTHS" IS '有效期(月份)(0为无限制,用于注册会员和一级用户)';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."RETURN_CHARGE_PERCENT" IS '返佣比例%';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."IS_FREE_CHARGE" IS '是否减免汇费(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."ADMIN_ID" IS '操作人员ID';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."ADMIN_NAME" IS '操作人员名称';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_LEVELS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_LISTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_LISTS";
CREATE TABLE "ZHAO"."USER_LISTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"LIST_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LISTS" IS '用户名单表';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."LIST_TYPE" IS '名单类型(0(whitelist):白名单, 1(backlist):买家黑名单, 2(backlist):卖家黑名单, 3(backlist):买卖均黑名单)';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_LISTS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_LOANS
-- ----------------------------
DROP TABLE "ZHAO"."USER_LOANS";
CREATE TABLE "ZHAO"."USER_LOANS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"INTEREST_RATE" NUMBER(6,2) DEFAULT 0.0  NULL ,
"INTEREST" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"MONTHS" NUMBER(38) DEFAULT 0  NULL ,
"CONTRACT_IDS" VARCHAR2(1000 CHAR) NULL ,
"REPAYMENT_AT" DATE NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"LOAN_NO" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LOANS" IS '客户预支款表';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."AMOUNT" IS '预支金额';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."INTEREST_RATE" IS '利息率%(每月)';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."INTEREST" IS '利息';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."TOTAL_AMOUNT" IS '还款总额(预支金额+利息)';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."START_AT" IS '开始时间';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."END_AT" IS '结束时间';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."MONTHS" IS '预支期限(月)';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."CONTRACT_IDS" IS '关联合同ID,逗号分隔';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."REPAYMENT_AT" IS '还款时间';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."STATUS" IS '状态(0未还款 1已还款)';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_LOANS"."LOAN_NO" IS '预支协议号';

-- ----------------------------
-- Table structure for USER_LOST_AUCTIONS
-- ----------------------------
DROP TABLE "ZHAO"."USER_LOST_AUCTIONS";
CREATE TABLE "ZHAO"."USER_LOST_AUCTIONS" (
"USER_ID" NUMBER(38) NOT NULL ,
"AUCTION_ID" NUMBER(38) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LOST_AUCTIONS" IS '用户失标拍品表';

-- ----------------------------
-- Table structure for USER_LOTTERY
-- ----------------------------
DROP TABLE "ZHAO"."USER_LOTTERY";
CREATE TABLE "ZHAO"."USER_LOTTERY" (
"ID" NUMBER NOT NULL ,
"U_NUM" NUMBER NOT NULL ,
"USER_ID" NUMBER NOT NULL ,
"SPECIAL_CODE" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_LOTTERY" IS '客户拍场已抽次数';
COMMENT ON COLUMN "ZHAO"."USER_LOTTERY"."U_NUM" IS '已抽次数';
COMMENT ON COLUMN "ZHAO"."USER_LOTTERY"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_LOTTERY"."SPECIAL_CODE" IS '拍场编号';

-- ----------------------------
-- Table structure for USER_MARGINS
-- ----------------------------
DROP TABLE "ZHAO"."USER_MARGINS";
CREATE TABLE "ZHAO"."USER_MARGINS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ACCOUNT_OLD" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ACCOUNT_NEW" NUMBER(16,2) DEFAULT 0.0  NULL ,
"DIRECTION" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"MARGIN_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"RESOURCE_ID" NUMBER(38) NULL ,
"RESOURCE_TYPE" VARCHAR2(255 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_MARGINS" IS '用户保证金表';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."AMOUNT" IS '保证金';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."ACCOUNT_OLD" IS '操作前客户帐户总保证金(bails)';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."ACCOUNT_NEW" IS '操作后客户帐户总保证金(bails)';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."DIRECTION" IS '资金流向(0:收入1:支出)';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."MARGIN_TYPE" IS '资金流向类型(0:保证金转出 1:余额转入 2:现金转出 3:现金存入 4:违约扣除)';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."RESOURCE_ID" IS '关联对象ID';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."RESOURCE_TYPE" IS '关联对象实体';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_MARGINS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_NOTIFACATION
-- ----------------------------
DROP TABLE "ZHAO"."USER_NOTIFACATION";
CREATE TABLE "ZHAO"."USER_NOTIFACATION" (
"USER_ID" NUMBER NULL ,
"SUBSCRIPTION_NOTIFICATION" NUMBER NULL ,
"BIDDING_NOTIFICATION" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_NOTIFACATION" IS '用户通知表';
COMMENT ON COLUMN "ZHAO"."USER_NOTIFACATION"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_NOTIFACATION"."SUBSCRIPTION_NOTIFICATION" IS '订阅提醒(0 关 1开)';
COMMENT ON COLUMN "ZHAO"."USER_NOTIFACATION"."BIDDING_NOTIFICATION" IS '结标提醒(0 关 1开)';

-- ----------------------------
-- Table structure for USER_ORDER_CANCEL
-- ----------------------------
DROP TABLE "ZHAO"."USER_ORDER_CANCEL";
CREATE TABLE "ZHAO"."USER_ORDER_CANCEL" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"EMAIL" VARCHAR2(255 CHAR) NULL ,
"PAY_DATE" DATE NULL ,
"LIMIT_PAY_DATE" DATE NULL ,
"NEVER_PAY_DATE" DATE NULL ,
"NONPAY_REASON" VARCHAR2(2000 CHAR) NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"SERVICE_CHARGE" NUMBER(6,2) DEFAULT 0.0  NULL ,
"ACTUAL_CHARGE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"END_DATE" DATE NULL ,
"IS_DELAY" NUMBER(1) DEFAULT 0  NULL ,
"IS_AUTO_DELAY" NUMBER(1) DEFAULT 0  NULL ,
"IS_FREEZE" NUMBER(1) DEFAULT 0  NULL ,
"FREEZE_DATE" DATE NULL ,
"USER_PAYMENT_ID" NUMBER(38) NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"USER_REFUND_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"HAS_COLLECTION_CERTIFICATE" CHAR(1 BYTE) NULL ,
"AUCTION_DELAY_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ORDER_CANCEL" IS '故障延期取消订单表';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."PAY_DATE" IS '支付时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."LIMIT_PAY_DATE" IS '最迟支付时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."NEVER_PAY_DATE" IS '不支付时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."NONPAY_REASON" IS 'nonpay_reason';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."TOTAL_AMOUNT" IS '总金额';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."END_PRICE" IS '结标价';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."SERVICE_CHARGE" IS '成交服务费比例%';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."ACTUAL_CHARGE" IS '成交服务费';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."END_DATE" IS '结标时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."IS_DELAY" IS '是否延期(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."IS_AUTO_DELAY" IS '是否自动延期(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."IS_FREEZE" IS '是否冻结(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."FREEZE_DATE" IS '冻结时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."USER_PAYMENT_ID" IS '订单支付信息ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."LOGISTIC_DETAIL_ID" IS '物流发货单ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."USER_REFUND_ID" IS '当前有效退货单ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."STATUS" IS '状态(0未支付 1已支付 2不支付 3已冻结 4有理由不支付 5无理由不支付)';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."HAS_COLLECTION_CERTIFICATE" IS '是否要收藏证书(0:不要1:要)';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_CANCEL"."AUCTION_DELAY_ID" IS '故障拍品延期单ID(AUCTION_DELAY)';

-- ----------------------------
-- Table structure for USER_ORDER_DELAYS
-- ----------------------------
DROP TABLE "ZHAO"."USER_ORDER_DELAYS";
CREATE TABLE "ZHAO"."USER_ORDER_DELAYS" (
"ID" NUMBER(38) NOT NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"DELAY_DAYS" NUMBER(6,2) DEFAULT 0  NULL ,
"DELAY_HOURS" NUMBER(6,2) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"STATUS" NUMBER(1) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ORDER_DELAYS" IS '订单延期设置表';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."START_AT" IS '开始时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."END_AT" IS '结束时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."DELAY_DAYS" IS '延期天数';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."DELAY_HOURS" IS '延期小时';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."STATUS" IS '状态(0失效 1有效)';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDER_DELAYS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_ORDERS
-- ----------------------------
DROP TABLE "ZHAO"."USER_ORDERS";
CREATE TABLE "ZHAO"."USER_ORDERS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"EMAIL" VARCHAR2(255 CHAR) NULL ,
"PAY_DATE" DATE NULL ,
"LIMIT_PAY_DATE" DATE NULL ,
"NEVER_PAY_DATE" DATE NULL ,
"NONPAY_REASON" VARCHAR2(2000 CHAR) NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"END_PRICE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"SERVICE_CHARGE" NUMBER(6,2) DEFAULT 0.0  NULL ,
"ACTUAL_CHARGE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"END_DATE" DATE NULL ,
"IS_DELAY" NUMBER(1) DEFAULT 0  NULL ,
"IS_AUTO_DELAY" NUMBER(1) DEFAULT 0  NULL ,
"IS_FREEZE" NUMBER(1) DEFAULT 0  NULL ,
"FREEZE_DATE" DATE NULL ,
"USER_PAYMENT_ID" NUMBER(38) NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"USER_REFUND_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"HAS_COLLECTION_CERTIFICATE" CHAR(1 BYTE) DEFAULT 0  NULL ,
"IS_NOTIFICATION" CHAR(1 BYTE) DEFAULT 0  NULL ,
"NOTIFICATION_ADMIN" NUMBER(38) NULL ,
"NOTIFICATION_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_ORDERS" IS '订单表';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."TEL" IS '电话';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."PAY_DATE" IS '支付时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."LIMIT_PAY_DATE" IS '最迟支付时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."NEVER_PAY_DATE" IS '不支付时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."NONPAY_REASON" IS 'nonpay_reason';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."TOTAL_AMOUNT" IS '总金额';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."END_PRICE" IS '结标价';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."SERVICE_CHARGE" IS '成交服务费比例%';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."ACTUAL_CHARGE" IS '成交服务费';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."CONTRACT_ID" IS '合同ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."END_DATE" IS '结标时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."IS_DELAY" IS '是否延期(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."IS_AUTO_DELAY" IS '是否自动延期(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."IS_FREEZE" IS '是否冻结(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."FREEZE_DATE" IS '冻结时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."USER_PAYMENT_ID" IS '订单支付信息ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."LOGISTIC_DETAIL_ID" IS '物流发货单ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."USER_REFUND_ID" IS '当前有效退货单ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."STATUS" IS '状态(0未支付 1已支付 2不支付 3已冻结 4有理由不支付 5无理由不支付)';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."HAS_COLLECTION_CERTIFICATE" IS '是否要收藏证书(0:不要1:要)';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."IS_NOTIFICATION" IS '是否已联系 0:否 1:是';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."NOTIFICATION_ADMIN" IS '最后通知人';
COMMENT ON COLUMN "ZHAO"."USER_ORDERS"."NOTIFICATION_AT" IS '最后通知时间';

-- ----------------------------
-- Table structure for USER_ORDERS_BAK
-- ----------------------------
DROP TABLE "ZHAO"."USER_ORDERS_BAK";
CREATE TABLE "ZHAO"."USER_ORDERS_BAK" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"TEL" VARCHAR2(255 CHAR) NULL ,
"EMAIL" VARCHAR2(255 CHAR) NULL ,
"PAY_DATE" DATE NULL ,
"LIMIT_PAY_DATE" DATE NULL ,
"NEVER_PAY_DATE" DATE NULL ,
"NONPAY_REASON" VARCHAR2(2000 CHAR) NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) NULL ,
"END_PRICE" NUMBER(16,2) NULL ,
"SERVICE_CHARGE" NUMBER(6,2) NULL ,
"ACTUAL_CHARGE" NUMBER(16,2) NULL ,
"CONTRACT_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"END_DATE" DATE NULL ,
"IS_DELAY" NUMBER(1) NULL ,
"IS_AUTO_DELAY" NUMBER(1) NULL ,
"IS_FREEZE" NUMBER(1) NULL ,
"FREEZE_DATE" DATE NULL ,
"USER_PAYMENT_ID" NUMBER(38) NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"USER_REFUND_ID" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(4000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"HAS_COLLECTION_CERTIFICATE" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for USER_PAY_NOTIFIER
-- ----------------------------
DROP TABLE "ZHAO"."USER_PAY_NOTIFIER";
CREATE TABLE "ZHAO"."USER_PAY_NOTIFIER" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NOT NULL ,
"SETTLEMENT_TOTAL" NUMBER(16,2) NULL ,
"SETTLEMENT_TYPE" VARCHAR2(255 BYTE) NULL ,
"PAY_ACCOUNT" VARCHAR2(1000 BYTE) NULL ,
"RELEVANCY_STATEMENT" VARCHAR2(1000 BYTE) NULL ,
"NOTIFIER_MAN" NUMBER(38) NULL ,
"NOTIFIER_TYPE" VARCHAR2(255 BYTE) NULL ,
"PAY_AT" DATE NULL ,
"NOTIFIER_AT" DATE NULL ,
"NOTIFIER_CONTENT" VARCHAR2(255 BYTE) NULL ,
"NOTIFIER_RESULT" VARCHAR2(20 BYTE) NULL ,
"NOTIFIER_WAY" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PAY_NOTIFIER" IS '用户结算通知';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."ID" IS '结算通知编号';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."SETTLEMENT_TOTAL" IS '结算总额
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."SETTLEMENT_TYPE" IS '结算方式
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."PAY_ACCOUNT" IS '支付关联账号
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."RELEVANCY_STATEMENT" IS '关联结算单
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."NOTIFIER_MAN" IS '通知人
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."NOTIFIER_TYPE" IS '通知类型
(0.不需通知.1.系统通知.2.人工通知.)';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."PAY_AT" IS '支付时间
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."NOTIFIER_AT" IS '通知时间
';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."NOTIFIER_CONTENT" IS '通知内容';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."NOTIFIER_RESULT" IS '通知结果(1.已通知，2.未通知，3.通知失败)';
COMMENT ON COLUMN "ZHAO"."USER_PAY_NOTIFIER"."NOTIFIER_WAY" IS '通知方式(1.短信.2.站内信.3.邮件)';

-- ----------------------------
-- Table structure for USER_PAYMENTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_PAYMENTS";
CREATE TABLE "ZHAO"."USER_PAYMENTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USERNAME" VARCHAR2(255 CHAR) NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"AC_AMOUNT" NUMBER(38) DEFAULT 0  NULL ,
"S_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TRANSMIT_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"INSURANCE_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CONSUME_SCORES" NUMBER(16,2) DEFAULT 0.0  NULL ,
"PAY_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"PAY_DATE" DATE NULL ,
"PAY_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"FINANCE" VARCHAR2(255 CHAR) NULL ,
"F_DATE" DATE NULL ,
"F_CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REMARK" VARCHAR2(4000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PAYMENTS" IS '订单交易支付表';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."USERNAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."TOTAL_AMOUNT" IS '支付总金额';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."AC_AMOUNT" IS '拍品数量';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."TRANSMIT_FEE" IS '运费';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."INSURANCE_FEE" IS '保险费';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."CONSUME_SCORES" IS '消费积分';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."PAY_TYPE" IS '支付类型(1:余额 2:ips 3:paypal 4:SDO盛付通支付
 5:支付方式IPS+余额 6:支付方式SDO+余额)7:DST得仕通(dayspay)
 8.支付方式DST+余额 10:财付通支付 11:财付通+余额 16:支付宝支付 17:支付宝+余额';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."PAY_DATE" IS '支付时间';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."PAY_STATUS" IS '支付状态(0失败,1成功)';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."FINANCE" IS '财务确认人';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."F_DATE" IS '财务确认时间';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."F_CHECK_STATUS" IS '财务确认状态(0未确认,1已确认)';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_PAYMENTS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_PHONES
-- ----------------------------
DROP TABLE "ZHAO"."USER_PHONES";
CREATE TABLE "ZHAO"."USER_PHONES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"COUNTRY_PHONE_CODE" VARCHAR2(255 CHAR) NULL ,
"REGION_PHONE_CODE" VARCHAR2(255 CHAR) NULL ,
"PHONE_NO" VARCHAR2(255 CHAR) NULL ,
"IS_AUTH" NUMBER(1) DEFAULT 0  NULL ,
"VALIDATION_CODE" VARCHAR2(255 CHAR) NULL ,
"SUB_PHONE_NO" VARCHAR2(255 CHAR) NULL ,
"SEND_COUNT" NUMBER(38) DEFAULT 0  NULL ,
"ERROR_COUNT" NUMBER(38) DEFAULT 0  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PHONES" IS '用户电话信息表';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."USER_ID" IS '用户id';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."COUNTRY_PHONE_CODE" IS '国家电话代码 如:中国 86';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."REGION_PHONE_CODE" IS '区号';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."PHONE_NO" IS '电话号码';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."IS_AUTH" IS '0:未认证 1:已认证 2:取消已认证';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."VALIDATION_CODE" IS '验证码';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."SEND_COUNT" IS '发送次数';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."ERROR_COUNT" IS '验证输入错误次数';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_PHONES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_PICTURE_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."USER_PICTURE_DETAILS";
CREATE TABLE "ZHAO"."USER_PICTURE_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"USER_PICTURE_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NAME" VARCHAR2(255 CHAR) NULL ,
"PIC_URL" VARCHAR2(255 CHAR) NULL ,
"PIC_PATH" VARCHAR2(255 CHAR) NULL ,
"PIC_NAME" VARCHAR2(255 CHAR) NULL ,
"PIC_FILE_SIZE" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PICTURE_DETAILS" IS '用户征集图片明细表';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."USER_PICTURE_ID" IS '用户征集图片表ID';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."PIC_URL" IS '图片服务器地址';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."PIC_PATH" IS '图片相对路径名称';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."PIC_NAME" IS '图片名称';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."PIC_FILE_SIZE" IS '图片大小';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_PICTURE_DETAILS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for USER_PICTURES
-- ----------------------------
DROP TABLE "ZHAO"."USER_PICTURES";
CREATE TABLE "ZHAO"."USER_PICTURES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"PICTURES_COUNT" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"RECEIVE_DATE" DATE NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PICTURES" IS '用户征集图片表';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."PICTURES_COUNT" IS '征集图片数量';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."ADMIN_ID" IS '征集人员ID';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."ADMIN_NAME" IS '征集人员名称';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."RECEIVE_DATE" IS '送拍日期';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_PICTURES"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for USER_PROVINCES
-- ----------------------------
DROP TABLE "ZHAO"."USER_PROVINCES";
CREATE TABLE "ZHAO"."USER_PROVINCES" (
"ID" NUMBER(38) NOT NULL ,
"COUNTRY_ID" NUMBER(38) NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"NAME_TW" VARCHAR2(255 CHAR) NULL ,
"PINYIN" VARCHAR2(255 CHAR) NULL ,
"AREA" VARCHAR2(255 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PROVINCES" IS '省份表';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."COUNTRY_ID" IS '国家ID';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."NAME_EN" IS '英文名称';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."NAME_TW" IS '台湾名称';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."PINYIN" IS '拼音名称';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."AREA" IS '地区';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."DESCRIPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_PROVINCES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_PUSH
-- ----------------------------
DROP TABLE "ZHAO"."USER_PUSH";
CREATE TABLE "ZHAO"."USER_PUSH" (
"ID" NUMBER(38) NOT NULL ,
"TYPE" VARCHAR2(200 BYTE) NOT NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 1  NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PUSH" IS '给用户推送消息记录';
COMMENT ON COLUMN "ZHAO"."USER_PUSH"."TYPE" IS '业务类型';
COMMENT ON COLUMN "ZHAO"."USER_PUSH"."STATUS" IS '0:失败; 1:成功';
COMMENT ON COLUMN "ZHAO"."USER_PUSH"."START_AT" IS '任务开始时间';
COMMENT ON COLUMN "ZHAO"."USER_PUSH"."END_AT" IS '任务结束时间';

-- ----------------------------
-- Table structure for USER_PUSH_DETAIL
-- ----------------------------
DROP TABLE "ZHAO"."USER_PUSH_DETAIL";
CREATE TABLE "ZHAO"."USER_PUSH_DETAIL" (
"ID" NUMBER(38) NOT NULL ,
"PUSH_ID" NUMBER(38) NULL ,
"DEVICE_ID" NUMBER(38) NULL ,
"CONTENT" VARCHAR2(2000 BYTE) NULL ,
"STATUS" CHAR(1 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"USER_ID" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_PUSH_DETAIL" IS '给用户推送消息记录详情';
COMMENT ON COLUMN "ZHAO"."USER_PUSH_DETAIL"."PUSH_ID" IS '任务ID';
COMMENT ON COLUMN "ZHAO"."USER_PUSH_DETAIL"."DEVICE_ID" IS '表User_Device ID';
COMMENT ON COLUMN "ZHAO"."USER_PUSH_DETAIL"."CONTENT" IS '消息内容';
COMMENT ON COLUMN "ZHAO"."USER_PUSH_DETAIL"."STATUS" IS '0:失败; 1;成功;';
COMMENT ON COLUMN "ZHAO"."USER_PUSH_DETAIL"."USER_ID" IS '用户ID';

-- ----------------------------
-- Table structure for USER_QUOTA_USAGES
-- ----------------------------
DROP TABLE "ZHAO"."USER_QUOTA_USAGES";
CREATE TABLE "ZHAO"."USER_QUOTA_USAGES" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USE_QUOTA" NUMBER(38) DEFAULT 0  NULL ,
"USE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"FLAG" NUMBER(1) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_QUOTA_USAGES" IS '用户额度占用表';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."USE_QUOTA" IS '占用额度';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."USE_TYPE" IS '占用类型(0:最高价占用 1:代理价占用)';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."STATUS" IS '状态(0:未占用 1:占用)';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_QUOTA_USAGES"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_QUOTAS
-- ----------------------------
DROP TABLE "ZHAO"."USER_QUOTAS";
CREATE TABLE "ZHAO"."USER_QUOTAS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"AMOUNT" NUMBER(38) DEFAULT 0  NULL ,
"DIRECTION" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"QUOTA_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"OPERATE_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"QUOTA_OLD" NUMBER(38) NULL ,
"QUOTA_NEW" NUMBER(38) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_QUOTAS" IS '用户额度表';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."AMOUNT" IS '额度';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."DIRECTION" IS '收支类型(0收入 1支出)';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."QUOTA_TYPE" IS '额度类型(0:赠送 1:保证金存入 2:扣除 3:保证金转出 4:竞拍占用 5:竞拍释放)';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."OPERATE_TYPE" IS '操作类型(0:人工操作 1:程序自动添加)';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."QUOTA_OLD" IS '操作前额度';
COMMENT ON COLUMN "ZHAO"."USER_QUOTAS"."QUOTA_NEW" IS '操作后额度';

-- ----------------------------
-- Table structure for USER_REFUND_REQUESTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_REFUND_REQUESTS";
CREATE TABLE "ZHAO"."USER_REFUND_REQUESTS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CHARGES" NUMBER(16,2) DEFAULT 0.0  NULL ,
"REFUND_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CURRENCY" VARCHAR2(255 CHAR) DEFAULT 'RMB'  NULL ,
"USER_BANK_ID" NUMBER(38) NULL ,
"BANK_NAME" VARCHAR2(255 CHAR) NULL ,
"BRANCH_NAME" VARCHAR2(255 CHAR) NULL ,
"BANK_ACCOUNT" VARCHAR2(255 CHAR) NULL ,
"ID_CARD" VARCHAR2(255 CHAR) NULL ,
"ID_CARD_NAME" VARCHAR2(255 CHAR) NULL ,
"BANK_RETURN_CODE" VARCHAR2(255 CHAR) NULL ,
"ADDRESS" VARCHAR2(1000 CHAR) NULL ,
"POSTCODE" VARCHAR2(255 CHAR) NULL ,
"CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHECK_AT" DATE NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"OPERATE_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"BANK_INFO" VARCHAR2(1000 CHAR) NULL ,
"ACCESSORY" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_REFUND_REQUESTS" IS '用户退款表';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."AMOUNT" IS '退款金额';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."CHARGES" IS '收取手续费';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."REFUND_TYPE" IS '退款类型(00:邮政转款 1:银行转出 2:上门自取 3:PayPal 4:上门自取(台币) 5:台湾合作金库)';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."CURRENCY" IS '货币(RMB, USD)';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."USER_BANK_ID" IS '用户银行ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."BANK_NAME" IS '银行名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."BRANCH_NAME" IS '银行支行名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."BANK_ACCOUNT" IS '银行帐号';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."ID_CARD" IS '持卡人身份证号';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."ID_CARD_NAME" IS '持卡人姓名';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."BANK_RETURN_CODE" IS '银行返回码';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."ADDRESS" IS '邮政退款地址';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."POSTCODE" IS '邮政编号';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."CHECK_STATUS" IS '财务复核(0:正常 1:需要复核 2:已复核)';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."CHECK_AT" IS '检查时间';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."STATUS" IS '状态(0:申请 1:通过 2:拒绝 3:未转财务)';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."OPERATE_AT" IS '操作时间';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_REFUND_REQUESTS"."BANK_INFO" IS '银行信息';

-- ----------------------------
-- Table structure for USER_REFUNDS
-- ----------------------------
DROP TABLE "ZHAO"."USER_REFUNDS";
CREATE TABLE "ZHAO"."USER_REFUNDS" (
"ID" NUMBER(38) NOT NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STOCK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SETTLEMENT_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"USER_ORDER_ID" NUMBER(38) NULL ,
"AUCTION_ID" NUMBER(38) NULL ,
"AUCTION_NO" VARCHAR2(255 CHAR) NULL ,
"AUCTION_NAME" VARCHAR2(2000 CHAR) NULL ,
"COMEBACK_SETTLEMENT_ID" NUMBER(38) NULL ,
"BACK_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TRUE_BACK_FEE" NUMBER(16,2) DEFAULT 0.0  NULL ,
"LOGISTIC_DETAIL_ID" NUMBER(38) NULL ,
"APPLICATION_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"APPLICATION_ORDER_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REFUND_REASON_TYPE" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"REFUND_REASON" VARCHAR2(1000 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"APPLY_OP_ID" NUMBER(38) NULL ,
"APPLY_OP" VARCHAR2(255 CHAR) NULL ,
"COMPLETE_OP_ID" NUMBER(38) NULL ,
"COMPLETE_OP" VARCHAR2(255 CHAR) NULL ,
"COMPLETE_AT" DATE NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CONSINGER_NAME" VARCHAR2(255 CHAR) NULL ,
"CONSIGNER_ID" NUMBER(38) NULL ,
"STORAGE_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"STOCK_STATUS_TMP" VARCHAR2(255 CHAR) NULL ,
"IS_REFUND_CERTIFICATE" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_REFUNDS" IS '用户退货表';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."AMOUNT" IS '退货金额(=订单成交价)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."STATUS" IS '状态(0:申请退货  1:审核组审核  2:运营总监审核  3:业务总监审核  4: 总经办审核 5:确认是否复议  6:复议是否同意退货  7:确认退款  8:退货失败  9:退货成功)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."STOCK_STATUS" IS '公司存货状态：0公司暂存 1委托收款中 2已委托收款 3送外单位重拍 4重拍中 5已拍出
 6退委托方(结算前退货 暂不用)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."SETTLEMENT_STATUS" IS '退货结算状态(0:结算前 1:结算后)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."USER_ORDER_ID" IS '订单编号';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."AUCTION_ID" IS '拍品ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."AUCTION_NO" IS '拍品编号';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."AUCTION_NAME" IS '拍品名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."COMEBACK_SETTLEMENT_ID" IS '退货结算ID(新系统已经不使用)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."BACK_FEE" IS '申请退货金额';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."TRUE_BACK_FEE" IS '最终退货金额';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."LOGISTIC_DETAIL_ID" IS '物流发货单ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."APPLICATION_TYPE" IS '申请退货类型(0:客户申请 1:公司申请)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."APPLICATION_ORDER_STATUS" IS '客户申请退货状态(0:待处理 1:已受理  2:已拒绝)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."REFUND_REASON_TYPE" IS '退货原因类型(0:整理,1:制图,2:审核,3:物流,4:其它)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."REFUND_REASON" IS '客户申请退货拒绝原因';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."REMARKS" IS '备注(申请退货原因)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."APPLY_OP_ID" IS '申请人ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."APPLY_OP" IS '申请人';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."COMPLETE_OP_ID" IS '完成操作人ID';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."COMPLETE_OP" IS '完成操作人(客服/财务)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."COMPLETE_AT" IS '完成操作时间(成功/失败)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."CREATED_AT" IS '创建时间(申请时间)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."CONSINGER_NAME" IS '委托方名称';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."CONSIGNER_ID" IS '委托方ID(=user_id)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."STORAGE_STATUS" IS '库存状态(0:未退货入库 1:已退货入库)';
COMMENT ON COLUMN "ZHAO"."USER_REFUNDS"."IS_REFUND_CERTIFICATE" IS '是否退收藏证书(1:是0:否)';

-- ----------------------------
-- Table structure for USER_REGIONS
-- ----------------------------
DROP TABLE "ZHAO"."USER_REGIONS";
CREATE TABLE "ZHAO"."USER_REGIONS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"NAME_EN" VARCHAR2(255 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_REGIONS" IS '地区表';
COMMENT ON COLUMN "ZHAO"."USER_REGIONS"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."USER_REGIONS"."NAME_EN" IS '英文名称';
COMMENT ON COLUMN "ZHAO"."USER_REGIONS"."DESCRIPTION" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_REGIONS"."CREATED_AT" IS '创建时间';

-- ----------------------------
-- Table structure for USER_REMIND
-- ----------------------------
DROP TABLE "ZHAO"."USER_REMIND";
CREATE TABLE "ZHAO"."USER_REMIND" (
"USER_ID" NUMBER NULL ,
"SUBSCRIPTION_NOTIFICATION" NUMBER NULL ,
"BIDDING_NOTIFICATION" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_REMIND" IS '用户通知表';
COMMENT ON COLUMN "ZHAO"."USER_REMIND"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_REMIND"."SUBSCRIPTION_NOTIFICATION" IS '订阅提醒(0 关 1开)';
COMMENT ON COLUMN "ZHAO"."USER_REMIND"."BIDDING_NOTIFICATION" IS '结标提醒(0 关 1开)';

-- ----------------------------
-- Table structure for USER_REMIT_DESPATCHES
-- ----------------------------
DROP TABLE "ZHAO"."USER_REMIT_DESPATCHES";
CREATE TABLE "ZHAO"."USER_REMIT_DESPATCHES" (
"ID" NUMBER(38) NOT NULL ,
"USER_REMIT_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"DEPOSIT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CURRENCY" VARCHAR2(1000 CHAR) DEFAULT 'RMB'  NULL ,
"IN_DEPOSIT" NUMBER(16,2) DEFAULT 0.00  NULL ,
"IN_AMOUNT" NUMBER(16,2) DEFAULT 0.00  NULL ,
"CURRENCY_RATE" NUMBER(10,5) DEFAULT 0.00  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_REMIT_DESPATCHES" IS '用户汇款分配表';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."USER_REMIT_ID" IS '汇款ID';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."AMOUNT" IS '金额';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."DEPOSIT" IS '保证金';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."CURRENCY" IS '货币(RMB, USD)';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."IN_DEPOSIT" IS '换算前分配保证金';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."IN_AMOUNT" IS '换算前分配金额';
COMMENT ON COLUMN "ZHAO"."USER_REMIT_DESPATCHES"."CURRENCY_RATE" IS '当前汇率(买入价)';

-- ----------------------------
-- Table structure for USER_REMITS
-- ----------------------------
DROP TABLE "ZHAO"."USER_REMITS";
CREATE TABLE "ZHAO"."USER_REMITS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 CHAR) NULL ,
"FINANCE_DEPOSIT_TYPE_ID" NUMBER(38) NULL ,
"FINANCE_COMPANY_BANK_ID" NUMBER(38) NULL ,
"TOTAL_AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_DEPOSIT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"CURRENCY" VARCHAR2(255 CHAR) DEFAULT 'RMB'  NULL ,
"PURPOSE" VARCHAR2(1000 CHAR) NULL ,
"DEPOSIT_DATE" DATE NULL ,
"BANK_RETURN_CODE" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"CHECK_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"IS_DELETED" NUMBER(1) DEFAULT 0  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CURRENCY_RATE" NUMBER(16,5) NULL ,
"SERVICE_OP_NAME" VARCHAR2(225 BYTE) NULL ,
"SERVICE_CHECK_DATE" DATE NULL ,
"FINANCE_OP_NAME" VARCHAR2(225 BYTE) NULL ,
"FINANCE_CHECK_DATE" DATE NULL ,
"ADDITION_INFO" VARCHAR2(1000 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_REMITS" IS '用户汇款表';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."USER_NAME" IS '用户名称';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."FINANCE_DEPOSIT_TYPE_ID" IS '汇款方式ID';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."FINANCE_COMPANY_BANK_ID" IS '公司银行ID';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."TOTAL_AMOUNT" IS '汇款总金额';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."TOTAL_DEPOSIT" IS '保证金总金额';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."CURRENCY" IS '货币(RMB, USD)';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."PURPOSE" IS '汇款用途';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."DEPOSIT_DATE" IS '汇款时间';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."BANK_RETURN_CODE" IS '银行返回码';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."STATUS" IS '状态(0:未查核 1:查核中 2:查核通过(确认收讫) 3:查核不通过 4已作废)';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."CHECK_STATUS" IS '财务复核(0未处理 1财务已通过 2财务不通过)';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."IS_DELETED" IS '是否删除(0:否 1:是),可以用状态已作废(status=4)替代';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."CURRENCY_RATE" IS '当前汇率(买入价)';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."SERVICE_OP_NAME" IS '客服操作人';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."SERVICE_CHECK_DATE" IS '客服操作时间';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."FINANCE_OP_NAME" IS '财务操作人';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."FINANCE_CHECK_DATE" IS '财务操作日期';
COMMENT ON COLUMN "ZHAO"."USER_REMITS"."ADDITION_INFO" IS '银行或邮政补充信息';

-- ----------------------------
-- Table structure for USER_RESET_PASSWORDS
-- ----------------------------
DROP TABLE "ZHAO"."USER_RESET_PASSWORDS";
CREATE TABLE "ZHAO"."USER_RESET_PASSWORDS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"NEW_PASSWORD" VARCHAR2(255 CHAR) NULL ,
"OLD_PASSWORD" VARCHAR2(255 CHAR) NULL ,
"PASSWORD_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_RESET_PASSWORDS" IS '用户密码重置表';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."NEW_PASSWORD" IS '新密码';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."OLD_PASSWORD" IS '旧密码';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."PASSWORD_TYPE" IS '密码类型(1:登录 2:支付)';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."STATUS" IS '状态(1:未使用 2:已使用 3:已过期)';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."ADMIN_ID" IS '操作人ID';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."ADMIN_NAME" IS '操作人名称';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_RESET_PASSWORDS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_SIGN
-- ----------------------------
DROP TABLE "ZHAO"."USER_SIGN";
CREATE TABLE "ZHAO"."USER_SIGN" (
"ID" NUMBER NULL ,
"USER_ID" NUMBER NULL ,
"SIGN_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_SIGN" IS '周年庆用户签到活动';
COMMENT ON COLUMN "ZHAO"."USER_SIGN"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_SIGN"."SIGN_DATE" IS '签到日期';

-- ----------------------------
-- Table structure for USER_SUBSCRIBE
-- ----------------------------
DROP TABLE "ZHAO"."USER_SUBSCRIBE";
CREATE TABLE "ZHAO"."USER_SUBSCRIBE" (
"USER_ID" NUMBER NOT NULL ,
"CATAGORY_ID" NUMBER NOT NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."USER_SUBSCRIBE"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_SUBSCRIBE"."CATAGORY_ID" IS '分类编号';
COMMENT ON COLUMN "ZHAO"."USER_SUBSCRIBE"."CREATED_AT" IS '创建日期';

-- ----------------------------
-- Table structure for USER_SUBSCRIPTION
-- ----------------------------
DROP TABLE "ZHAO"."USER_SUBSCRIPTION";
CREATE TABLE "ZHAO"."USER_SUBSCRIPTION" (
"USER_ID" NUMBER NOT NULL ,
"CATAGORY_ID" NUMBER NOT NULL ,
"CREATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_SUBSCRIPTION" IS '用户订阅设置表';

-- ----------------------------
-- Table structure for USER_SUBSCRIPTION_RECEIVE
-- ----------------------------
DROP TABLE "ZHAO"."USER_SUBSCRIPTION_RECEIVE";
CREATE TABLE "ZHAO"."USER_SUBSCRIPTION_RECEIVE" (
"USER_ID" NUMBER(38) NOT NULL ,
"UNREAD" NUMBER(38) DEFAULT 0  NULL ,
"LAST_READ" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_SUBSCRIPTION_RECEIVE" IS '用户查看订阅拍品记录';
COMMENT ON COLUMN "ZHAO"."USER_SUBSCRIPTION_RECEIVE"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "ZHAO"."USER_SUBSCRIPTION_RECEIVE"."UNREAD" IS '未查看拍品数量';
COMMENT ON COLUMN "ZHAO"."USER_SUBSCRIPTION_RECEIVE"."LAST_READ" IS '最后阅读时间';

-- ----------------------------
-- Table structure for USER_TRANSFERS
-- ----------------------------
DROP TABLE "ZHAO"."USER_TRANSFERS";
CREATE TABLE "ZHAO"."USER_TRANSFERS" (
"ID" NUMBER(38) NOT NULL ,
"FROM_ID" NUMBER(38) NULL ,
"TO_ID" NUMBER(38) NULL ,
"AMOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"DIRECTION" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"TRANSFER_TYPE" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_TRANSFERS" IS '用户转帐表';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."FROM_ID" IS '转款用户ID(user_id)';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."TO_ID" IS '转入用户ID(user_id)';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."AMOUNT" IS '转款金额';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."DIRECTION" IS '资金流向(0:收入1:支出)';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."TRANSFER_TYPE" IS '转款类型(1:余额转保证金 2:保证金转余额 3:余额转其它帐户余额 4:保证金转其它帐户保证金)';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."STATUS" IS '状态(0无效 1有效)';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_TRANSFERS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USER_VIRTUAL_ACCOUNTS
-- ----------------------------
DROP TABLE "ZHAO"."USER_VIRTUAL_ACCOUNTS";
CREATE TABLE "ZHAO"."USER_VIRTUAL_ACCOUNTS" (
"ID" NUMBER(38) NOT NULL ,
"NAME" VARCHAR2(255 CHAR) NULL ,
"USER_ID" NUMBER(38) NULL ,
"IS_DEFAULT" NUMBER(1) DEFAULT 1  NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 CHAR) NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 1  NULL ,
"REMARKS" VARCHAR2(1000 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USER_VIRTUAL_ACCOUNTS" IS '用户昵称表';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."NAME" IS '昵称';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."IS_DEFAULT" IS '默认昵称(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."ADMIN_ID" IS '操作员ID';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."ADMIN_NAME" IS '操作员名称';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."STATUS" IS '状态(0:无效 1:有效)';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USER_VIRTUAL_ACCOUNTS"."UPDATED_AT" IS '更新时间';

-- ----------------------------
-- Table structure for USERS
-- ----------------------------
DROP TABLE "ZHAO"."USERS";
CREATE TABLE "ZHAO"."USERS" (
"ID" NUMBER(38) NOT NULL ,
"TRUE_NAME" VARCHAR2(255 CHAR) NULL ,
"NICKNAME" VARCHAR2(255 CHAR) NULL ,
"PASSWORD" VARCHAR2(255 CHAR) NULL ,
"PAY_PASS" VARCHAR2(255 CHAR) NULL ,
"SEX" CHAR(1 BYTE) DEFAULT 0  NULL ,
"EMAIL" VARCHAR2(255 CHAR) NULL ,
"MOBILE_PHONE" VARCHAR2(255 CHAR) NULL ,
"ISAUTH" CHAR(1 BYTE) DEFAULT 0  NULL ,
"ISLOGIN" CHAR(1 BYTE) DEFAULT 0  NULL ,
"STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"ISLOCK" CHAR(1 BYTE) DEFAULT 0  NULL ,
"LOCK_REASON" VARCHAR2(1000 CHAR) NULL ,
"LOCK_OPERATOR" VARCHAR2(255 CHAR) NULL ,
"TYPE" CHAR(1 BYTE) DEFAULT 0  NULL ,
"USER_LANG" CHAR(1 BYTE) DEFAULT 0  NULL ,
"ISCONSIGN" CHAR(1 BYTE) DEFAULT 0  NULL ,
"ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"FREEZE_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_ACCOUNT" NUMBER(16,2) DEFAULT 0.0  NULL ,
"BAILS" NUMBER(16,2) DEFAULT 0.0  NULL ,
"TOTAL_QUOTA" NUMBER(38) DEFAULT 0  NULL ,
"QUOTA" NUMBER(38) DEFAULT 0  NULL ,
"BUY_LEVEL" NUMBER(38) DEFAULT 0  NULL ,
"SELL_LEVEL" NUMBER(38) DEFAULT 10  NULL ,
"BUY_SCORE_AMOUNT" NUMBER(38) DEFAULT 0  NULL ,
"SELL_SCORE_AMOUNT" NUMBER(38) DEFAULT 0  NULL ,
"BUY_SCORE_USEABLE" NUMBER(38) DEFAULT 0  NULL ,
"SELL_SCORE_USEABLE" NUMBER(38) DEFAULT 0  NULL ,
"BUY_LEVEL_STARTED_AT" DATE NULL ,
"BUY_LEVEL_EXPIRED_AT" DATE NULL ,
"SELL_LEVEL_STARTED_AT" DATE NULL ,
"SELL_LEVEL_EXPIRED_AT" DATE NULL ,
"LOGIN_TIMES" NUMBER(38) DEFAULT 0  NULL ,
"LOGIN_DATE" DATE NULL ,
"LOGINIP" VARCHAR2(255 CHAR) NULL ,
"REGISTER_DATE" DATE NULL ,
"REGIP" VARCHAR2(255 CHAR) NULL ,
"ISAGREEMENT" CHAR(10 BYTE) DEFAULT 0  NULL ,
"AGREE_DATE" DATE NULL ,
"USER_NOTES" VARCHAR2(1000 CHAR) NULL ,
"APP_ID" CHAR(1 BYTE) DEFAULT 0  NULL ,
"IS_RANDOM_PWD" NUMBER(1) DEFAULT 0  NULL ,
"CONTRACT_CONFIRM_TYPE" VARCHAR2(255 CHAR) NULL ,
"CHARGE_FEE_PERCENT" NUMBER(6,2) DEFAULT 0.0  NULL ,
"IS_IPHONE_LOGIN" NUMBER(1) DEFAULT 0  NULL ,
"IS_ANDROID_LOGIN" NUMBER(1) DEFAULT 0  NULL ,
"IPHONE_LOGIN_DATE" DATE NULL ,
"ANDROID_LOGIN_DATE" DATE NULL ,
"IPHONE_VERSION" VARCHAR2(255 CHAR) NULL ,
"ANDROID_VERSION" VARCHAR2(255 CHAR) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"CREDITS" NUMBER NULL ,
"LOGIN_SESSION_ID" VARCHAR2(255 BYTE) NULL ,
"BUY_LOGISTIC_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"SELL_LOGISTIC_STATUS" VARCHAR2(255 CHAR) DEFAULT 0  NULL ,
"HOSANEID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."USERS" IS '用户表';
COMMENT ON COLUMN "ZHAO"."USERS"."TRUE_NAME" IS '真实名称';
COMMENT ON COLUMN "ZHAO"."USERS"."NICKNAME" IS '默认角色昵称,修改默认角色时对应更新该字段';
COMMENT ON COLUMN "ZHAO"."USERS"."PASSWORD" IS '密码';
COMMENT ON COLUMN "ZHAO"."USERS"."PAY_PASS" IS '支付密码';
COMMENT ON COLUMN "ZHAO"."USERS"."SEX" IS '性别(0:女 1:男)';
COMMENT ON COLUMN "ZHAO"."USERS"."EMAIL" IS '认证后的邮箱';
COMMENT ON COLUMN "ZHAO"."USERS"."MOBILE_PHONE" IS '认证后的手机号';
COMMENT ON COLUMN "ZHAO"."USERS"."ISAUTH" IS '是否认证(0:未认证 1:证件认证 2:email认证 3:不通过)';
COMMENT ON COLUMN "ZHAO"."USERS"."ISLOGIN" IS '是否已经登录(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USERS"."STATUS" IS '帐号类型(0正常 1不支付冻结 2冻结资金 3冻结竞拍权限 4冻结资金和竞拍权限)';
COMMENT ON COLUMN "ZHAO"."USERS"."ISLOCK" IS '是否冻结(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USERS"."LOCK_REASON" IS '冻结原因';
COMMENT ON COLUMN "ZHAO"."USERS"."LOCK_OPERATOR" IS '冻结操作人';
COMMENT ON COLUMN "ZHAO"."USERS"."TYPE" IS '用户类型 0:普通用户 1:VIP 2:委托方';
COMMENT ON COLUMN "ZHAO"."USERS"."USER_LANG" IS '用户语言(0默认 1中国 2英语)';
COMMENT ON COLUMN "ZHAO"."USERS"."ISCONSIGN" IS '是否是委托方(0否 1是)';
COMMENT ON COLUMN "ZHAO"."USERS"."ACCOUNT" IS '帐户可用余额';
COMMENT ON COLUMN "ZHAO"."USERS"."FREEZE_ACCOUNT" IS '帐户冻结余额';
COMMENT ON COLUMN "ZHAO"."USERS"."TOTAL_ACCOUNT" IS '帐户总余额';
COMMENT ON COLUMN "ZHAO"."USERS"."BAILS" IS '帐户保证金';
COMMENT ON COLUMN "ZHAO"."USERS"."TOTAL_QUOTA" IS '帐户总额度';
COMMENT ON COLUMN "ZHAO"."USERS"."QUOTA" IS '帐户可用额度';
COMMENT ON COLUMN "ZHAO"."USERS"."BUY_LEVEL" IS '竞买级别(5:五钻会员 4:四钻会员 3:三钻会员 2:二钻会员 1:一钻会员 0:注册会员)';
COMMENT ON COLUMN "ZHAO"."USERS"."SELL_LEVEL" IS '委托级别(15:五星会员 14:四星会员 13:三星会员 12:二星会员 11:一星会员 10:注册会员)';
COMMENT ON COLUMN "ZHAO"."USERS"."BUY_SCORE_AMOUNT" IS '竞买方形象值(积分)';
COMMENT ON COLUMN "ZHAO"."USERS"."SELL_SCORE_AMOUNT" IS '委托方形象值(积分)';
COMMENT ON COLUMN "ZHAO"."USERS"."BUY_SCORE_USEABLE" IS '可用竞买积分';
COMMENT ON COLUMN "ZHAO"."USERS"."SELL_SCORE_USEABLE" IS '可用委托积分';
COMMENT ON COLUMN "ZHAO"."USERS"."BUY_LEVEL_STARTED_AT" IS '竞买积分生效时间';
COMMENT ON COLUMN "ZHAO"."USERS"."BUY_LEVEL_EXPIRED_AT" IS '竞买积分过期时间';
COMMENT ON COLUMN "ZHAO"."USERS"."SELL_LEVEL_STARTED_AT" IS '委托积分生效时间';
COMMENT ON COLUMN "ZHAO"."USERS"."SELL_LEVEL_EXPIRED_AT" IS '委托积分过期时间';
COMMENT ON COLUMN "ZHAO"."USERS"."LOGIN_TIMES" IS '登陆次数';
COMMENT ON COLUMN "ZHAO"."USERS"."LOGIN_DATE" IS '上一次登陆日期';
COMMENT ON COLUMN "ZHAO"."USERS"."LOGINIP" IS '上一次登陆IP';
COMMENT ON COLUMN "ZHAO"."USERS"."REGISTER_DATE" IS '注册日期';
COMMENT ON COLUMN "ZHAO"."USERS"."REGIP" IS '注册IP';
COMMENT ON COLUMN "ZHAO"."USERS"."ISAGREEMENT" IS '是否同意新竞拍规则';
COMMENT ON COLUMN "ZHAO"."USERS"."AGREE_DATE" IS '同意新竞拍规则日期';
COMMENT ON COLUMN "ZHAO"."USERS"."USER_NOTES" IS '备注';
COMMENT ON COLUMN "ZHAO"."USERS"."APP_ID" IS '应用ID(0:PC版 1:WAP 2:IPHONE 3:ANDROID)';
COMMENT ON COLUMN "ZHAO"."USERS"."IS_RANDOM_PWD" IS '是否随机密码(0:否 1:是)';
COMMENT ON COLUMN "ZHAO"."USERS"."CONTRACT_CONFIRM_TYPE" IS '合同确认方式';
COMMENT ON COLUMN "ZHAO"."USERS"."CHARGE_FEE_PERCENT" IS '委托指定收费%';
COMMENT ON COLUMN "ZHAO"."USERS"."IS_IPHONE_LOGIN" IS '0:未登录;1:已登录';
COMMENT ON COLUMN "ZHAO"."USERS"."IS_ANDROID_LOGIN" IS '0:未登录;1:已登录';
COMMENT ON COLUMN "ZHAO"."USERS"."IPHONE_LOGIN_DATE" IS 'iphone客户端登录时间';
COMMENT ON COLUMN "ZHAO"."USERS"."ANDROID_LOGIN_DATE" IS 'andorid客户端登录时间';
COMMENT ON COLUMN "ZHAO"."USERS"."IPHONE_VERSION" IS 'iphone登录版本号';
COMMENT ON COLUMN "ZHAO"."USERS"."ANDROID_VERSION" IS 'andorid登录版本号';
COMMENT ON COLUMN "ZHAO"."USERS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."USERS"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."USERS"."CREDITS" IS '用户积分(新系统不使用)';
COMMENT ON COLUMN "ZHAO"."USERS"."LOGIN_SESSION_ID" IS '登录时的sessionid';
COMMENT ON COLUMN "ZHAO"."USERS"."HOSANEID" IS 'hosane客户编号';

-- ----------------------------
-- Table structure for USERTYPE
-- ----------------------------
DROP TABLE "ZHAO"."USERTYPE";
CREATE TABLE "ZHAO"."USERTYPE" (
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(500 BYTE) NULL ,
"USERMETADATAXML" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for VIPUSER_ASSIGN_HISTORY
-- ----------------------------
DROP TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY";
CREATE TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NOT NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"SERVICE_OP_ID" NUMBER(38) NULL ,
"SERVICE_OP_NAME" VARCHAR2(255 BYTE) NULL ,
"OPERATION_TYPE" VARCHAR2(255 BYTE) NOT NULL ,
"ADMIN_ID" NUMBER NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"OPERATION_REASON" VARCHAR2(1000 BYTE) NULL ,
"REMARKS" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY" IS '客户分配历史记录';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."USER_NAME" IS '客户姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."SERVICE_OP_ID" IS '服务专员';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."SERVICE_OP_NAME" IS '服务专员名称';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."OPERATION_TYPE" IS '操作类型（0：分配 1：取消分配）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."ADMIN_ID" IS '添加人';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."ADMIN_NAME" IS '添加人姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."OPERATION_REASON" IS '操作原因';
COMMENT ON COLUMN "ZHAO"."VIPUSER_ASSIGN_HISTORY"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for VIPUSER_CALL_RECORDS
-- ----------------------------
DROP TABLE "ZHAO"."VIPUSER_CALL_RECORDS";
CREATE TABLE "ZHAO"."VIPUSER_CALL_RECORDS" (
"ID" NUMBER(38) NOT NULL ,
"CALL_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"TELE" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"START_AT" DATE NULL ,
"ANSWER_AT" DATE NULL ,
"END_AT" DATE NULL ,
"WAIT_TIME" NUMBER(38) NULL ,
"CALL_TIME" NUMBER(38) NULL ,
"REMARKS" VARCHAR2(1000 BYTE) NULL ,
"EVALUATE" VARCHAR2(255 BYTE) NULL ,
"SERVICE_OP_ID" NUMBER(38) NULL ,
"SERVICE_OP_NAME" VARCHAR2(255 BYTE) NULL ,
"CALL_TYPE" NUMBER NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_OP" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."VIPUSER_CALL_RECORDS" IS '通话记录表';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."ID" IS '标识';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."CALL_ID" IS '通话记录流水号';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."USER_NAME" IS '客户姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."TELE" IS '电话';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."START_AT" IS '开始时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."ANSWER_AT" IS '接听时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."END_AT" IS '结束时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."WAIT_TIME" IS '等待时长';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."CALL_TIME" IS '通话时长';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."REMARKS" IS '通话备注';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."EVALUATE" IS '用户评价';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."SERVICE_OP_ID" IS '服务人员ID';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."SERVICE_OP_NAME" IS '服务人员名称';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."CALL_TYPE" IS '呼入呼出（0：呼入 1：呼出）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_CALL_RECORDS"."UPDATED_OP" IS '修改人';

-- ----------------------------
-- Table structure for VIPUSER_DETAILS
-- ----------------------------
DROP TABLE "ZHAO"."VIPUSER_DETAILS";
CREATE TABLE "ZHAO"."VIPUSER_DETAILS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NOT NULL ,
"CUSTOMER_LABELS" VARCHAR2(1000 BYTE) NULL ,
"INTERESTED_AUCTIONS" VARCHAR2(1000 BYTE) NULL ,
"NOTIFICATION_METHOD" VARCHAR2(2000 BYTE) NULL ,
"BID_REQUIRE" VARCHAR2(1000 BYTE) NULL ,
"CHARGE_RATE" VARCHAR2(1000 BYTE) NULL ,
"REMIT_TYPE" VARCHAR2(1000 BYTE) NULL ,
"SETTLEMENT_TYPE" VARCHAR2(2000 BYTE) NULL ,
"SHIPMENTS_TYPE" VARCHAR2(1000 BYTE) NULL ,
"COMPLAINTS_RECORD" VARCHAR2(4000 BYTE) NULL ,
"BIRTHDAY" DATE NULL ,
"BIRTHDAY_BLESSING" VARCHAR2(255 BYTE) DEFAULT '0'  NULL ,
"PROFESSION" VARCHAR2(255 BYTE) NULL ,
"FAVORITE" VARCHAR2(1000 BYTE) NULL ,
"COMMUNICATION_CIRCLE" VARCHAR2(1000 BYTE) NULL ,
"HOLIDAY_GIFTS" VARCHAR2(1000 BYTE) NULL ,
"AD_INFORMATION" VARCHAR2(255 BYTE) DEFAULT '0'  NULL ,
"REMARKS" VARCHAR2(4000 BYTE) NULL ,
"BUY_NOPAY_APPROACH" VARCHAR2(1000 BYTE) NULL ,
"SELL_NOPAY_APPROACH" VARCHAR2(1000 BYTE) NULL ,
"BUY_RETURN_APPROCH" VARCHAR2(1000 BYTE) NULL ,
"SELL_RETURN_APPROACH" VARCHAR2(1000 BYTE) NULL ,
"BUY_FUNDS_APPROACH" VARCHAR2(1000 BYTE) NULL ,
"SELL_FUNDS_APPROACH" VARCHAR2(1000 BYTE) NULL ,
"BID_HABIT" VARCHAR2(1000 BYTE) NULL ,
"CONSIGN_HABIT" VARCHAR2(1000 BYTE) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE DEFAULT SYSDATE  NULL ,
"UPDATED_AT" DATE DEFAULT SYSDATE  NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"BUSINESS_OP" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."CUSTOMER_LABELS" IS '客户标签';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."INTERESTED_AUCTIONS" IS '感兴趣的拍品';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."NOTIFICATION_METHOD" IS '委托确认或直接上传通知方式';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BID_REQUIRE" IS '上拍要求';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."CHARGE_RATE" IS '服务费收取标准';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."REMIT_TYPE" IS '汇款方式';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."SETTLEMENT_TYPE" IS '结算方式';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."SHIPMENTS_TYPE" IS '发货方式';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."COMPLAINTS_RECORD" IS '投诉记录';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BIRTHDAY" IS '生日';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BIRTHDAY_BLESSING" IS '是否接受生日祝福(0:否 1：是)';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."PROFESSION" IS '职业';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."FAVORITE" IS '收藏爱好';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."COMMUNICATION_CIRCLE" IS '交际圈';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."HOLIDAY_GIFTS" IS '过节送礼情况';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."AD_INFORMATION" IS '是否接受广告资讯
(0:否 1：是)';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BUY_NOPAY_APPROACH" IS '不支付拍品处理方式（竞买方）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."SELL_NOPAY_APPROACH" IS '不支付拍品处理方式（委托方）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BUY_RETURN_APPROCH" IS '退货拍品处理方式（竞买方）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."SELL_RETURN_APPROACH" IS '退货拍品处理方式（委托方）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BUY_FUNDS_APPROACH" IS '预支及还款（竞买方）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."SELL_FUNDS_APPROACH" IS '预支及还款（委托方）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BID_HABIT" IS '竞拍习惯';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."CONSIGN_HABIT" IS '送拍习惯 (委托习惯)';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."ADMIN_ID" IS '添加人ID';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."ADMIN_NAME" IS '	添加人姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."CREATED_AT" IS '添加时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."VIPUSER_DETAILS"."BUSINESS_OP" IS '业务人员';

-- ----------------------------
-- Table structure for VIPUSER_MEMO
-- ----------------------------
DROP TABLE "ZHAO"."VIPUSER_MEMO";
CREATE TABLE "ZHAO"."VIPUSER_MEMO" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"CONTENT" VARCHAR2(1000 BYTE) NULL ,
"STATUS" VARCHAR2(255 BYTE) NULL ,
"CREATED_OP_ID" NUMBER(38) NULL ,
"CREATED_OP_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."VIPUSER_MEMO" IS '大客户备忘录';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."USER_NAME" IS '客户姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."CONTENT" IS '内容';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."STATUS" IS '状态（0：置顶 1：正常 2：隐藏）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."CREATED_OP_ID" IS '创建人ID';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."CREATED_OP_NAME" IS '创建人姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."ADMIN_ID" IS '最后操作人ID';
COMMENT ON COLUMN "ZHAO"."VIPUSER_MEMO"."ADMIN_NAME" IS '最后操作人姓名';

-- ----------------------------
-- Table structure for VIPUSER_PHONE
-- ----------------------------
DROP TABLE "ZHAO"."VIPUSER_PHONE";
CREATE TABLE "ZHAO"."VIPUSER_PHONE" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"PHONE" VARCHAR2(255 BYTE) NULL ,
"REMARKS" VARCHAR2(255 BYTE) NULL ,
"STATUS" VARCHAR2(255 BYTE) NULL ,
"CREATED_OP_ID" NUMBER(38) NULL ,
"CREATED_OP_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."VIPUSER_PHONE" IS '大客户联系电话';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."USER_NAME" IS '客户姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."PHONE" IS '电话号码';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."STATUS" IS '状态（0：置顶 1：正常）';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."CREATED_OP_ID" IS '创建人';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."CREATED_OP_NAME" IS '创建人姓名';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."ADMIN_ID" IS '最后操作人';
COMMENT ON COLUMN "ZHAO"."VIPUSER_PHONE"."ADMIN_NAME" IS '最后操作人姓名';

-- ----------------------------
-- Table structure for VIPUSERS
-- ----------------------------
DROP TABLE "ZHAO"."VIPUSERS";
CREATE TABLE "ZHAO"."VIPUSERS" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NOT NULL ,
"SERVICE_OP_ID" NUMBER(38) NULL ,
"SERVICE_OP_NAME" VARCHAR2(255 BYTE) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_MAN" VARCHAR2(255 BYTE) NULL ,
"REMARKS" VARCHAR2(1000 BYTE) NULL ,
"IS_VIP" VARCHAR2(255 BYTE) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."VIPUSERS" IS '大客户信息';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."USER_ID" IS '客户编号';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."SERVICE_OP_ID" IS '服务专员ID';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."SERVICE_OP_NAME" IS '服务专员名称';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."ADMIN_ID" IS '创建人';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."ADMIN_NAME" IS '创建人';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."UPDATED_MAN" IS '修改人';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."VIPUSERS"."IS_VIP" IS '是否是VIP客户(0：未分配 1：已分配 )';

-- ----------------------------
-- Table structure for WEB_DATA_DICTIONARY
-- ----------------------------
DROP TABLE "ZHAO"."WEB_DATA_DICTIONARY";
CREATE TABLE "ZHAO"."WEB_DATA_DICTIONARY" (
"ID" NUMBER NOT NULL ,
"KEY" NVARCHAR2(255) NULL ,
"VALUE" NVARCHAR2(255) NULL ,
"DESCRIPTION" NVARCHAR2(255) NULL ,
"IS_DISABLED" NUMBER(1) DEFAULT 1  NULL ,
"PARENT_ID" NUMBER NULL ,
"LIST_ORDER" NUMBER DEFAULT 0  NULL ,
"OPTIONAL" NVARCHAR2(255) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEB_DATA_DICTIONARY"."KEY" IS '数据字典KEY';
COMMENT ON COLUMN "ZHAO"."WEB_DATA_DICTIONARY"."VALUE" IS '数据字典VALUE';
COMMENT ON COLUMN "ZHAO"."WEB_DATA_DICTIONARY"."DESCRIPTION" IS '描述';
COMMENT ON COLUMN "ZHAO"."WEB_DATA_DICTIONARY"."IS_DISABLED" IS '是否禁用(0:禁用,1:启用)';
COMMENT ON COLUMN "ZHAO"."WEB_DATA_DICTIONARY"."PARENT_ID" IS '父ID';
COMMENT ON COLUMN "ZHAO"."WEB_DATA_DICTIONARY"."LIST_ORDER" IS '排序字段';

-- ----------------------------
-- Table structure for WEB_HELPCENTER
-- ----------------------------
DROP TABLE "ZHAO"."WEB_HELPCENTER";
CREATE TABLE "ZHAO"."WEB_HELPCENTER" (
"ID" NUMBER NOT NULL ,
"PARENT_ID" NUMBER NULL ,
"NAME" VARCHAR2(200 BYTE) NULL ,
"CONTENT" VARCHAR2(2000 BYTE) NULL ,
"LIST_ORDER" NUMBER DEFAULT 0  NULL ,
"IS_DELETE" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL ,
"KEY_WORDS" VARCHAR2(200 BYTE) NULL ,
"FILE_PATH" VARCHAR2(225 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."PARENT_ID" IS '父ID';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."NAME" IS '名称';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."CONTENT" IS '内容';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."LIST_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."IS_DELETE" IS '是否删除';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."UPDATED_AT" IS '修改时间';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."KEY_WORDS" IS '关键字';
COMMENT ON COLUMN "ZHAO"."WEB_HELPCENTER"."FILE_PATH" IS '静态页面路径';

-- ----------------------------
-- Table structure for WEB_INDEX_ADVERT
-- ----------------------------
DROP TABLE "ZHAO"."WEB_INDEX_ADVERT";
CREATE TABLE "ZHAO"."WEB_INDEX_ADVERT" (
"ID" NUMBER(38) NOT NULL ,
"TITLE" VARCHAR2(255 BYTE) NULL ,
"LANGUAGE" CHAR(1 BYTE) NULL ,
"POSITION" NUMBER(2) NULL ,
"PICTURE" VARCHAR2(255 BYTE) NULL ,
"LINK" VARCHAR2(255 BYTE) NULL ,
"START_AT" DATE NULL ,
"END_AT" DATE NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 1  NOT NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."WEB_INDEX_ADVERT" IS '首页广告配置';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."LANGUAGE" IS '站点(0:上海站; 1:香港站)';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."POSITION" IS '广告位(0:左一; 1:左二; 2:左三; 3:右一; 4:右二 )';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."PICTURE" IS '图片路径';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."LINK" IS '图片链接';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."START_AT" IS '上线时间';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."END_AT" IS '下线时间';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_ADVERT"."STATUS" IS '状态(0:禁用; 1:启用)';

-- ----------------------------
-- Table structure for WEB_INDEX_CONFIG
-- ----------------------------
DROP TABLE "ZHAO"."WEB_INDEX_CONFIG";
CREATE TABLE "ZHAO"."WEB_INDEX_CONFIG" (
"ID" NUMBER NOT NULL ,
"AUCTION_ID" NUMBER NULL ,
"INDEX_TYPE" VARCHAR2(255 BYTE) DEFAULT 0  NULL ,
"LINK" VARCHAR2(500 BYTE) NULL ,
"BANNER_LINK" VARCHAR2(500 BYTE) NULL ,
"FOCUS_LINK" VARCHAR2(500 BYTE) NULL ,
"BG_LINK" VARCHAR2(500 BYTE) NULL ,
"SUBJECT" VARCHAR2(4000 BYTE) NULL ,
"DESCR" VARCHAR2(4000 BYTE) NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"SORT_ORDER" NUMBER DEFAULT 0  NULL ,
"INDEX_PAGE" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"INDEX_SITE" VARCHAR2(20 BYTE) DEFAULT 0  NULL ,
"AD_TYPE" VARCHAR2(20 BYTE) DEFAULT 1  NULL ,
"ONLINE_AT" DATE NULL ,
"OFFLINE_AT" DATE NULL ,
"CREATED_AT" DATE NULL ,
"AUCTION_SPECIAL_TOPIC_ID" NUMBER NULL ,
"SUBJECT_GBK" VARCHAR2(4000 BYTE) NULL ,
"DESCR_GBK" VARCHAR2(4000 BYTE) NULL ,
"BANNER_LINK_GBK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."AUCTION_ID" IS '拍品Id';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."INDEX_TYPE" IS '类型
类型
1:首页通栏
2:首页焦点
3:网站公告';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."LINK" IS '链接地址';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."BANNER_LINK" IS '通栏图片链接路径';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."FOCUS_LINK" IS '焦点图片链接路径';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."BG_LINK" IS '背景图片链接地址';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."SUBJECT" IS '短标题';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."DESCR" IS '主题描述';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."STATUS" IS '0:默认可用
1:不可用';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."SORT_ORDER" IS '排序';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."INDEX_PAGE" IS '0:首页位置(备留)';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."INDEX_SITE" IS '0:上海站 1:英文站 2:香港站 10:全站通用';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."AD_TYPE" IS '广告类型
0：专场广告
1：单品广告
2：专题广告';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."ONLINE_AT" IS '上线日期';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."OFFLINE_AT" IS '下线日期';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."CREATED_AT" IS '创建日期';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."AUCTION_SPECIAL_TOPIC_ID" IS '专场ID';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."SUBJECT_GBK" IS '短标题繁体';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."DESCR_GBK" IS '主题描述繁体';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_CONFIG"."BANNER_LINK_GBK" IS '通栏图片链接路径繁体';

-- ----------------------------
-- Table structure for WEB_INDEX_FORUM
-- ----------------------------
DROP TABLE "ZHAO"."WEB_INDEX_FORUM";
CREATE TABLE "ZHAO"."WEB_INDEX_FORUM" (
"ID" NUMBER(38) NOT NULL ,
"TITLE" VARCHAR2(255 BYTE) NOT NULL ,
"TITLE_TW" VARCHAR2(255 BYTE) NULL ,
"LINK" VARCHAR2(255 BYTE) NULL ,
"STATUS" CHAR(1 BYTE) DEFAULT 1  NULL ,
"ORDER_NO" NUMBER(38) NULL ,
"ADMIN_ID" NUMBER(38) NULL ,
"ADMIN_NAME" VARCHAR2(255 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"UPDATED_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."WEB_INDEX_FORUM" IS '首页论坛入口配置';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_FORUM"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_FORUM"."TITLE_TW" IS '标题(繁体)';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_FORUM"."LINK" IS '链接';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_FORUM"."STATUS" IS '状态(0:禁用; 1:启用)';
COMMENT ON COLUMN "ZHAO"."WEB_INDEX_FORUM"."ORDER_NO" IS '排序号';

-- ----------------------------
-- Table structure for WEB_URL_NAME_MAPPING
-- ----------------------------
DROP TABLE "ZHAO"."WEB_URL_NAME_MAPPING";
CREATE TABLE "ZHAO"."WEB_URL_NAME_MAPPING" (
"ID" NUMBER(38) NOT NULL ,
"USER_ID" NUMBER(38) NULL ,
"URL" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WEEK
-- ----------------------------
DROP TABLE "ZHAO"."WEEK";
CREATE TABLE "ZHAO"."WEEK" (
"DATE_NUM" DATE NOT NULL ,
"WEEK" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WEIXIN_AUTO_REPLY
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_AUTO_REPLY";
CREATE TABLE "ZHAO"."WEIXIN_AUTO_REPLY" (
"ID" NUMBER NOT NULL ,
"TYPE" VARCHAR2(2 BYTE) NULL ,
"REPLY_TYPE" VARCHAR2(20 BYTE) NULL ,
"TITLE" VARCHAR2(300 BYTE) NULL ,
"IMAGE_URL" VARCHAR2(300 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_OP_ID" NUMBER NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_OP_ID" NUMBER NULL ,
"REMARKS" VARCHAR2(100 BYTE) NULL ,
"URL" VARCHAR2(300 BYTE) NULL ,
"CONTENT" CLOB NULL ,
"REPLY_CONTENT" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."TYPE" IS '消息类型（1  被关注时自动回复） 2 （自动回复）';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."REPLY_TYPE" IS '回复类型（text  文本 image 图片 voice 音频 music 音乐 video 视频 news 图文）';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."IMAGE_URL" IS '图片链接URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."DESCRIPTION" IS '描述';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."CREATED_OP_ID" IS '创建人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."UPDATED_OP_ID" IS '更新人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."URL" IS '点击图文消息跳转链接';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."CONTENT" IS '正文';
COMMENT ON COLUMN "ZHAO"."WEIXIN_AUTO_REPLY"."REPLY_CONTENT" IS '回复内容';

-- ----------------------------
-- Table structure for WEIXIN_GAOJING
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_GAOJING";
CREATE TABLE "ZHAO"."WEIXIN_GAOJING" (
"ID" NUMBER NOT NULL ,
"APP_ID" NUMBER NOT NULL ,
"ERROR_TYPE" VARCHAR2(10 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(50 BYTE) NULL ,
"ALARM_CONTENT" VARCHAR2(100 BYTE) NULL ,
"TIME_STAMP" VARCHAR2(50 BYTE) NULL ,
"APP_SIGNATURE" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."WEIXIN_GAOJING" IS '告警通知信息表';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."APP_ID" IS '公众号Id';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."ERROR_TYPE" IS '错误类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."DESCRIPTION" IS '错误描述';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."ALARM_CONTENT" IS '告警内容';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."TIME_STAMP" IS '时间戳';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GAOJING"."APP_SIGNATURE" IS '签名';

-- ----------------------------
-- Table structure for WEIXIN_GRAPHIC_MATERIAL
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_GRAPHIC_MATERIAL";
CREATE TABLE "ZHAO"."WEIXIN_GRAPHIC_MATERIAL" (
"ID" NUMBER NOT NULL ,
"TITLE" VARCHAR2(300 BYTE) NULL ,
"IMAGE_URL" VARCHAR2(300 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 BYTE) NULL ,
"URL" VARCHAR2(300 BYTE) NULL ,
"CONTENT" CLOB NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_OP" VARCHAR2(50 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_OP" VARCHAR2(50 BYTE) NULL ,
"REMARKS" VARCHAR2(100 BYTE) NULL ,
"ID_KEYWORD" NUMBER NULL ,
"ORDERBY" NUMBER NULL ,
"STATUS" VARCHAR2(2 BYTE) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."IMAGE_URL" IS '图片链接URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."DESCRIPTION" IS '描述';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."URL" IS '图文链接URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."CONTENT" IS '正文';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."CREATED_OP" IS '创建人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."UPDATED_AT" IS '最后修改时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."UPDATED_OP" IS '最后修改人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."ID_KEYWORD" IS 'weixin_keyword表主键ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."ORDERBY" IS '顺序';
COMMENT ON COLUMN "ZHAO"."WEIXIN_GRAPHIC_MATERIAL"."STATUS" IS '是否可用(0否 1 是 默认为1)';

-- ----------------------------
-- Table structure for WEIXIN_KEYWORD
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_KEYWORD";
CREATE TABLE "ZHAO"."WEIXIN_KEYWORD" (
"ID" NUMBER NOT NULL ,
"RULES_NAME" VARCHAR2(100 BYTE) NULL ,
"REPLY_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"KEYWORD" VARCHAR2(200 BYTE) NULL ,
"REPLY_CONTENT" VARCHAR2(2000 BYTE) NULL ,
"IS_VALID" VARCHAR2(2 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_OP" VARCHAR2(50 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_OP" VARCHAR2(50 BYTE) NULL ,
"REMARKS" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."ID" IS '主键';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."RULES_NAME" IS '规则名称';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."REPLY_TYPE" IS '回复类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."KEYWORD" IS '关键字';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."REPLY_CONTENT" IS '回复内容';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."IS_VALID" IS '是否可用 0 可用 1 不可用';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."CREATED_OP" IS '创建人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."UPDATED_AT" IS '最后修改时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."UPDATED_OP" IS '最后修改人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_KEYWORD"."REMARKS" IS '备注';

-- ----------------------------
-- Table structure for WEIXIN_MENU
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_MENU";
CREATE TABLE "ZHAO"."WEIXIN_MENU" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"TYPE" VARCHAR2(20 BYTE) NULL ,
"KEY" VARCHAR2(300 BYTE) NULL ,
"URL" VARCHAR2(300 BYTE) NULL ,
"PARENT_ID" NUMBER NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_OP" VARCHAR2(50 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_OP" VARCHAR2(50 BYTE) NULL ,
"REMARKS" VARCHAR2(100 BYTE) NULL ,
"LEAF" NUMBER NULL ,
"REPLY_TYPE" VARCHAR2(20 BYTE) NULL ,
"REPLY_CONTENT" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."NAME" IS '菜单标题';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."TYPE" IS '菜单的响应动作类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."KEY" IS '菜单KEY值';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."URL" IS '网页链接';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."PARENT_ID" IS '父类菜单ID,0为父类菜单';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."CREATED_OP" IS '创建人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."UPDATED_AT" IS '最后修改时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."UPDATED_OP" IS '最后修改人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."LEAF" IS '是否为子节点 0 否 1 是';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."REPLY_TYPE" IS '回复类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU"."REPLY_CONTENT" IS '回复内容';

-- ----------------------------
-- Table structure for WEIXIN_MENU_DETAIL
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_MENU_DETAIL";
CREATE TABLE "ZHAO"."WEIXIN_MENU_DETAIL" (
"ID" NUMBER NOT NULL ,
"MENU_ID" NUMBER NOT NULL ,
"IMAGE_URL" VARCHAR2(300 BYTE) NULL ,
"TITLE" VARCHAR2(300 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 BYTE) NULL ,
"URL" VARCHAR2(300 BYTE) NULL ,
"CONTENT" CLOB NULL ,
"AUTHOR" VARCHAR2(100 BYTE) NULL ,
"REMARKS" VARCHAR2(200 BYTE) NULL ,
"ORDERBY" NUMBER NULL ,
"STATUS" VARCHAR2(2 BYTE) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."MENU_ID" IS '对应菜单ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."IMAGE_URL" IS '图片链接URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."TITLE" IS '标题';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."DESCRIPTION" IS '描述';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."URL" IS '图文链接URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."CONTENT" IS '正文';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."AUTHOR" IS '作者';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."REMARKS" IS '备注';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."ORDERBY" IS '排序';
COMMENT ON COLUMN "ZHAO"."WEIXIN_MENU_DETAIL"."STATUS" IS '是否可用(0否 1 是 默认为1)';

-- ----------------------------
-- Table structure for WEIXIN_SEND_MSG
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_SEND_MSG";
CREATE TABLE "ZHAO"."WEIXIN_SEND_MSG" (
"ID" NUMBER NOT NULL ,
"HEAD_IMG_URL" VARCHAR2(300 BYTE) NULL ,
"NICK_NAME" VARCHAR2(100 BYTE) NULL ,
"REMARK" VARCHAR2(100 BYTE) NULL ,
"CONTENT" VARCHAR2(1500 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"OPENID" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_SEND_MSG"."HEAD_IMG_URL" IS '头像URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_SEND_MSG"."NICK_NAME" IS '微信昵称';
COMMENT ON COLUMN "ZHAO"."WEIXIN_SEND_MSG"."REMARK" IS '用户备注名';
COMMENT ON COLUMN "ZHAO"."WEIXIN_SEND_MSG"."CONTENT" IS '发送内容';
COMMENT ON COLUMN "ZHAO"."WEIXIN_SEND_MSG"."CREATED_AT" IS '消息发送时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_SEND_MSG"."OPENID" IS 'OPENID';

-- ----------------------------
-- Table structure for WEIXIN_TOUSU
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_TOUSU";
CREATE TABLE "ZHAO"."WEIXIN_TOUSU" (
"ID" NUMBER NOT NULL ,
"OPEN_ID" NUMBER NOT NULL ,
"TIME_STAMP" VARCHAR2(30 BYTE) NOT NULL ,
"MSG_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"FEED_BACK_ID" VARCHAR2(50 BYTE) NOT NULL ,
"TRANS_ID" VARCHAR2(50 BYTE) NULL ,
"REASON" VARCHAR2(100 BYTE) NULL ,
"SOLUTION" VARCHAR2(100 BYTE) NULL ,
"EXT_INFO" VARCHAR2(50 BYTE) NULL ,
"APP_SIGNATURE" VARCHAR2(50 BYTE) NOT NULL ,
"SIGN_METHOD" VARCHAR2(50 BYTE) NULL ,
"PIC_URL" VARCHAR2(150 BYTE) NULL ,
"APP_ID" NUMBER NOT NULL ,
"STATUS" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."WEIXIN_TOUSU" IS '用户投诉信息表';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."ID" IS 'Id';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."OPEN_ID" IS '用户Id';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."TIME_STAMP" IS '时间戳';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."MSG_TYPE" IS '通知类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."FEED_BACK_ID" IS '投诉单号';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."TRANS_ID" IS '交易订单号';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."REASON" IS '用户投诉原因';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."SOLUTION" IS '用户希望解决方案';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."EXT_INFO" IS '备注信息+电话';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."APP_SIGNATURE" IS '签名';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."SIGN_METHOD" IS '加密方法';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."PIC_URL" IS '用户上传的图片凭证URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."APP_ID" IS '公众号 id';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU"."STATUS" IS '处理投诉的状态（0为未处理，1为已经处理）';

-- ----------------------------
-- Table structure for WEIXIN_TOUSU_REPLY
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_TOUSU_REPLY";
CREATE TABLE "ZHAO"."WEIXIN_TOUSU_REPLY" (
"ID" NUMBER NOT NULL ,
"TYPE" VARCHAR2(2 BYTE) NULL ,
"REPLY_TYPE" VARCHAR2(20 BYTE) NULL ,
"CONTENT" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ZHAO"."WEIXIN_TOUSU_REPLY" IS '微信投诉回复';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU_REPLY"."ID" IS 'ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU_REPLY"."TYPE" IS '消息类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU_REPLY"."REPLY_TYPE" IS '回复类型';
COMMENT ON COLUMN "ZHAO"."WEIXIN_TOUSU_REPLY"."CONTENT" IS '回复内容';

-- ----------------------------
-- Table structure for WEIXIN_TREE
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_TREE";
CREATE TABLE "ZHAO"."WEIXIN_TREE" (
"ID" NUMBER NOT NULL ,
"OPCODE" NUMBER NULL ,
"PARENTCODE" VARCHAR2(4 BYTE) NULL ,
"TEXT" VARCHAR2(20 BYTE) NULL ,
"URL" VARCHAR2(100 BYTE) NULL ,
"LEAF" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WEIXIN_USER
-- ----------------------------
DROP TABLE "ZHAO"."WEIXIN_USER";
CREATE TABLE "ZHAO"."WEIXIN_USER" (
"ID" NUMBER NOT NULL ,
"HEAD_IMG_URL" VARCHAR2(300 BYTE) NULL ,
"NICK_NAME" VARCHAR2(100 BYTE) NULL ,
"SEX" VARCHAR2(10 BYTE) NULL ,
"OPENID" VARCHAR2(200 BYTE) NULL ,
"COUNTRY" VARCHAR2(100 BYTE) NULL ,
"PROVINCE" VARCHAR2(100 BYTE) NULL ,
"CITY" VARCHAR2(100 BYTE) NULL ,
"REMARK" VARCHAR2(100 BYTE) NULL ,
"GROUP_ID" NUMBER NULL ,
"SUBSCRIBE_TIME" VARCHAR2(20 BYTE) NULL ,
"CREATED_AT" DATE NULL ,
"CREATED_OP" VARCHAR2(50 BYTE) NULL ,
"UPDATED_AT" DATE NULL ,
"UPDATED_OP" VARCHAR2(50 BYTE) NULL ,
"LANGUAGE" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."HEAD_IMG_URL" IS '用户头像URL';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."NICK_NAME" IS '用户昵称';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."SEX" IS '性别 1 男 2  女';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."OPENID" IS '用户的标识，对当前公众号唯一';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."COUNTRY" IS '国家';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."PROVINCE" IS '省份或州';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."CITY" IS '城市';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."REMARK" IS '用户备注';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."SUBSCRIBE_TIME" IS '关注时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."CREATED_AT" IS '创建时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."CREATED_OP" IS '创建人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."UPDATED_AT" IS '更新时间';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."UPDATED_OP" IS '更新人';
COMMENT ON COLUMN "ZHAO"."WEIXIN_USER"."LANGUAGE" IS '语言';

-- ----------------------------
-- Table structure for WIN_PRIZE_RECORD
-- ----------------------------
DROP TABLE "ZHAO"."WIN_PRIZE_RECORD";
CREATE TABLE "ZHAO"."WIN_PRIZE_RECORD" (
"ID" NUMBER(38) NOT NULL ,
"RECEIVER" VARCHAR2(255 BYTE) NULL ,
"MOBILE" VARCHAR2(255 BYTE) NULL ,
"POST_CODE" VARCHAR2(255 BYTE) NULL ,
"ADDRESS" VARCHAR2(255 BYTE) NULL ,
"PRIZE_ID" NUMBER(38) NULL ,
"USER_ID" NUMBER(38) NULL ,
"USER_NAME" VARCHAR2(255 BYTE) NULL ,
"CATEGORY_ID" NUMBER(38) NULL ,
"STATUS" NUMBER NULL ,
"REMARK" VARCHAR2(400 BYTE) NULL ,
"CREATE_AT" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."ID" IS '主键ID';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."RECEIVER" IS '收件人';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."MOBILE" IS '手机号码';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."POST_CODE" IS '邮编';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."ADDRESS" IS '地址';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."PRIZE_ID" IS '抽奖配置表ID';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."USER_ID" IS '用户ID';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."USER_NAME" IS '用户姓名';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."CATEGORY_ID" IS '奖品类型ID';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."STATUS" IS '获奖状态(0:未中1:中奖)';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."REMARK" IS '备注';
COMMENT ON COLUMN "ZHAO"."WIN_PRIZE_RECORD"."CREATE_AT" IS '创建时间';

-- ----------------------------
-- View structure for QUERY_ACCOUNT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."QUERY_ACCOUNT" AS 
WITH aa AS (  SELECT SUM (a.money) money, user_id
                   FROM user_accounts a
                  WHERE a.direction = 0
               GROUP BY user_id),
        bb AS (  SELECT SUM (a.money) money, user_id
                   FROM user_accounts a
                  WHERE a.direction = 1
               GROUP BY user_id),
        cc AS (SELECT c.account money, id user_id
                 FROM users c),
        dd AS (SELECT aa.money - bb.money money, aa.user_id
                 FROM aa, bb
                WHERE aa.user_id = bb.user_id)
   SELECT TO_CHAR (cc.user_id) "用户编号",
          cc.money "余额",
          dd.money "收入-支出"
     FROM cc, dd
    WHERE dd.user_id = cc.user_id AND dd.money != cc.money
   UNION
   SELECT '汇总', SUM (cc.money) OVER (), SUM (dd.money) OVER ()
     FROM cc, dd
    WHERE dd.user_id = cc.user_id AND dd.money != cc.money;

-- ----------------------------
-- View structure for USERVIEW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."USERVIEW" AS 
SELECT priAd.id,
          priAd.name,
          priAd.true_name,
          priAd.dept_id,
          priAd.email,
          priAd.Login_Times,
          priAd.Is_Useable,
          priAd.User_Lang,
          priAd.Created_At,
          priAd.Created_Man,
          priAd.Updated_At,
          priAd.Updated_Man,
          priAd.is_subscription,
          (SELECT strcat (pap.post_id)
             FROM pri_admin_posts pap
            WHERE pap.admin_id = priAd.id)
             post_id,
          (SELECT strcat (us.user_id)
             FROM pri_admin_users us
            WHERE us.admin_id = priAd.id)
             priAdminUserId
     FROM pri_admins priAd;

-- ----------------------------
-- View structure for V_AUCTION_BIDDINGS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_AUCTION_BIDDINGS" AS 
select aa.user_id,aa.auction_id,
decode(sum(aa.BIDDING),0,0,1) BIDDING,
max(aa.END_AT) END_AT,
decode(sum(aa.WATCHING),0,0,1) WATCHING,
decode(sum(aa.CONSIGN),0,0,1) CONSIGN,
sign(sum(aa.IS_HIGHEST)) IS_HIGHEST
from (
select a.user_id,a.auction_id,b.END_AT,0 BIDDING,1 WATCHING,0 CONSIGN,0 IS_HIGHEST from user_auctions a,auctions b
where b.id=a.auction_id and b.end_at>sysdate
union all
select a.user_id,a.auction_id,max(b.END_AT),1 BIDDING,0 WATCHING,0 CONSIGN,0 IS_HIGHEST from auction_prices a,auctions b
where b.id=a.auction_id and b.end_at>sysdate group by a.user_id,a.auction_id
union all
select a.user_id,b.id,b.END_AT,0 BIDDING,0 WATCHING,1 CONSIGN,0 IS_HIGHEST from contracts a,auctions b
where a.id=b.contract_id and b.end_at>sysdate
union all
select a.user_id,a.auction_id,b.END_AT,0 BIDDING,0 WATCHING,0 CONSIGN,1 IS_HIGHEST from auction_prices a,auctions b
where b.id=a.auction_id and a.is_max=1 and b.end_at>sysdate
union all
select a.user_id,a.auction_id,b.END_AT,1 BIDDING,0 WATCHING,0 CONSIGN,-1 IS_HIGHEST from auction_prices a,auctions b
where b.id=a.auction_id and a.is_max=0 and b.end_at>sysdate
and user_id not in (select c.user_id from auction_prices c where c.is_max=1 and c.auction_id=b.id)
--group by a.user_id,auction_id
) aa,auctions bb where aa.user_id is not null
and aa.auction_id=bb.id
and bb.end_at>=sysdate
group by aa.user_id,aa.auction_id;

-- ----------------------------
-- View structure for V_AUCTION_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_AUCTION_INFO" AS 
SELECT                 /**拍品信息查询  @author ：wangyuxin   update by liu.jing*/
         ac.contract_id,                                            /*合同编号 **/
          ctts.user_id,                                         /*客户编号(委托方)**/
          ac.auction_special_topic_id,                                /*场次 **/
          ac.auction_category_id,                                 /*拍品分类ID **/
          ac.auction_type auction_type_value,                        /*拍卖方式**/
          ac.status,                                                /*拍品状态 **/
          ac.is_preview,                                              /*是否预展*/
          ac.start_at,
          ac.settlement_status stsstatus,                         /*拍品结算状态 **/
          (SELECT logis.logisticStatus
             FROM v_wms_logisticstatus_info logis
            WHERE logis.auctionno = ac.auction_no and rownum = 1)
             --0
             logisstatus,                                         /*拍品物流状态 **/
          ac.id,                                                    /*拍品id **/
          ac.auction_no,                                            /*拍品编号 **/
          ac.name auction_name,                                     /*拍品名称 **/
          ac.dynamic_attribute,                                    /*拍品扩展属性 **/
          DECODE (ac.auction_type,  '1', '竞拍',  '0', '一口价')
             auction_type,                                        /*拍卖方式 名称**/
          (SELECT ast.name
             FROM auction_special_topics ast
            WHERE ast.id = ac.auction_special_topic_id)
             topics_name,                                           /*场次名称 **/
          (SELECT acg.name
             FROM auction_categories acg
            WHERE acg.id = ac.auction_category_id)
             auctioncategory_name,                                /*拍品分类名称 **/
          f_auction_trans_status (ac.status, ac.is_preview, ac.start_at)
             auctions_status,                                     /*竞拍状态名称 **/
          DECODE (ac.settlement_status,
                  '0', '不可结算',
                  '1', '已结算',
                  '2', '待结算',
                  '3', '结算中')
             AS settlement_status,                              /*拍品结算状态名称 **/
          (SELECT logis.logisticStatusName
             FROM v_wms_logisticstatus_info logis
            WHERE logis.auctionno = ac.auction_no and rownum = 1 )
             --'物流状态'
             logistic_status,
          ac.initial_price,                                          /*起拍价 **/
          ac.end_price,                                              /*结标价 **/
          (SELECT uo.total_amount
             FROM user_orders uo
            WHERE uo.auction_id = ac.id)
             total_amount,                                           /*成交价 **/
          ac.remarks,                                               /*拍品备注 **/
          DECODE (ac.status,
                  '0', ac.created_at,
                  '8', ac.return_at,
                  '10', ac.upload_at,
                  '1', ac.preview_at,
                  '2', ac.start_at,
                  '3', ac.end_at,
                  '6', ac.end_at,
                  '11', ac.cancel_at,
                  '12', ac.cancel_at,
                  '', ac.updated_at)
             auction_state_time,                                   /**拍品状态时间*/
          f_auction_settlement_time (ac.settlement_status,
                                     ac.updated_at,
                                     ac.contract_id)
             settlement_state_time,
          ac.updated_at logistics_state_time,                     --物流状态时间暂时未确定
          c.category_id,
          c.user_id sellerId,c.user_name sellerName,
          (select o.user_id from user_orders o where o.auction_id=ac.id) buyerId,
          (select o.user_name from user_orders o where o.auction_id=ac.id) buyerName,
          c.collate_mode,c.contract_type
     FROM auctions ac,contracts c, contract_details ctts
    WHERE ac.contract_id=c.id and ctts.contract_id = ac.contract_id                         /*关联合同表**/
     AND ctts.status >= 12      /*合同申请入库后*/
    -- and ctts.consign_check_status in (2,3)/*合同已委托确认*/;

-- ----------------------------
-- View structure for V_AUCTION_INFO_LOGISTIC
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_AUCTION_INFO_LOGISTIC" AS 
SELECT                 /**拍品信息查询  @author ：wangyuxin   update by liu.jing*/
         ac.contract_id,                                            /*合同编号 **/
           ac.dynamic_attribute,                                    /*拍品扩展属性 **/
          ctts.user_id,                                         /*客户编号(委托方)**/
          ac.auction_special_topic_id,                                /*场次 **/
          ac.auction_category_id,                                 /*拍品分类ID **/
          ac.auction_type auction_type_value,                        /*拍卖方式**/
          ac.status,                                                /*拍品状态 **/
          ac.is_preview,                                              /*是否预展*/
          ac.start_at,
          ac.settlement_status stsstatus,                         /*拍品结算状态 **/
          logis.logisticStatus logisstatus,                       /*拍品物流状态 **/
          ac.id,                                                    /*拍品id **/
          ac.auction_no,                                            /*拍品编号 **/
          ac.name auction_name,                                     /*拍品名称 **/
          DECODE (ac.auction_type,  '1', '竞拍',  '0', '一口价')
             auction_type,                                        /*拍卖方式 名称**/
          (SELECT ast.name
             FROM auction_special_topics ast
            WHERE ast.id = ac.auction_special_topic_id)
             topics_name,                                           /*场次名称 **/
          (SELECT acg.name
             FROM auction_categories acg
            WHERE acg.id = ac.auction_category_id)
             auctioncategory_name,                                /*拍品分类名称 **/
          f_auction_trans_status (ac.status, ac.is_preview, ac.start_at)
             auctions_status,                                     /*竞拍状态名称 **/
          DECODE (ac.settlement_status,
                  '0', '不可结算',
                  '1', '已结算',
                  '2', '待结算',
                  '3', '结算中')
             AS settlement_status,                              /*拍品结算状态名称 **/
          logis.logisticStatusName logistic_status,
          ac.initial_price,                                          /*起拍价 **/
          ac.end_price,                                              /*结标价 **/
          (SELECT uo.total_amount
             FROM user_orders uo
            WHERE uo.auction_id = ac.id)
             total_amount,                                           /*成交价 **/
          ac.remarks,                                               /*拍品备注 **/
          DECODE (ac.status,
                  '0', ac.created_at,
                  '8', ac.return_at,
                  '10', ac.upload_at,
                  '1', ac.preview_at,
                  '2', ac.start_at,
                  '3', ac.end_at,
                  '6', ac.end_at,
                  '11', ac.cancel_at,
                  '12', ac.cancel_at,
                  '', ac.updated_at)
             auction_state_time,                                   /**拍品状态时间*/
          f_auction_settlement_time (ac.settlement_status,
                                     ac.updated_at,
                                     ac.contract_id)
             settlement_state_time,
          ac.updated_at logistics_state_time,                    --物流状态时间暂时未确定
          c.category_id,
          c.user_id sellerId,
          c.user_name sellerName,
          (SELECT o.user_id
             FROM user_orders o
            WHERE o.auction_id = ac.id)
             buyerId,
          (SELECT o.user_name
             FROM user_orders o
            WHERE o.auction_id = ac.id)
             buyerName,
          c.collate_mode,
          c.contract_type
     FROM auctions ac,
          contract_details ctts,
          contracts c,
          v_wms_logisticstatus_info logis
    WHERE c.id = ac.contract_id AND ctts.contract_id = ac.contract_id /*关联合同表**/
                                                                     AND logis.auctionno(+) = ac.auction_no AND ctts.status >= 12 /*合同申请入库后*/
-- and ctts.consign_check_status in (2,3)/*合同已委托确认*/;

-- ----------------------------
-- View structure for V_AUCTION_PICTURES_VIEW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_AUCTION_PICTURES_VIEW" AS 
SELECT auPic.id,
       con.id contractId, /*合同编号**/
       /*此视图用于查询拍品图片(hejinguo)**/
       auPic.Pic_File_Size picFileSize, /*图片大小**/
       au.id auctionId,
       au.auction_type auctionType, /*拍品类型**/
       au.auction_no auctionNo, /*拍品编号**/
       au.name auctionName, /*拍品名称**/
       au.status auctionStatus, /*拍品状态**/
       au.descr, /*拍品中文描述**/
       au.remarks, /*拍品备注**/
       auPic.PATH, /*拍品图片备注**/
       auPic.name auctionPicName, /*拍品图片名称**/
       au.auction_category_id auctionCategoryId, /*分类ID**/
       (auCat.Name || '(' || auCat.Id || ')') auctionCategoryName, /*分类名称**/
       au.auction_character_id auctionCharacterId, /*品级ID**/
       au.return_reason returnReason, /*退拍原因**/
       au.return_remarks returnRemarks, /*退拍备注**/
       conDet.status, /*合同明细状态**/
       auFee.Onload_Fee onloadFee, /*拍品制作费**/
       auFee.Insure_Price insurePrice,/*拍品保险额**/
       au.initial_price  initialPrice,/*拍品起拍价或一口价**/
       au.descr_character  descrCharacter,/*拍品品相描述**/
       au.dynamic_attribute dynamic_attribute/*拍品扩展属性**/
  FROM auction_pictures   auPic /*拍品图片表**/,
       auctions           au /*拍品表 **/,
       auction_fees  auFee/*拍品费用表 **/,
       contracts          con /*合同表 **/,
       contract_details   conDet /*合同明细表**/,
       auction_categories auCat
 where auPic.Auction_Id = au.id
   and  au.id=auFee.Auction_Id
   and au.contract_id = con.id
   and con.id = conDet.Contract_Id
   and au.auction_category_id = auCat.Id
 ORDER BY au.auction_no ASC, auPic.Pic_Order;

-- ----------------------------
-- View structure for V_CONSIGN_RTN_DELIVERY_LST
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_CONSIGN_RTN_DELIVERY_LST" AS 
SELECT "ID","AUCTION_NO","END_AT","SOURCE_TYPE","STORAGE_CODE","NAME","NAME_GBK","STATUS","USER_ID","AUCTION_CATEGORY_ID","AUCTION_SPECIAL_TOPIC_ID","CONTRACT_ID","PIC_PATH","END_PRICE","FEE","SETTLEMENT_STATUS" FROM (
SELECT A.ID,
       A.AUCTION_NO,
       DECODE(A.STATUS,
              '4',
              A.CANCEL_AT,
              '11',
              A.CANCEL_AT,
              '12',
              A.CANCEL_AT,
              '8',
              A.RETURN_AT,
              A.END_AT) END_AT,
       '2' AS SOURCE_TYPE,
       A.NAME,
       A.NAME_GBK,
       DECODE(A.STATUS,
              '4',
              '撤拍',
              '6',
              '流拍',
              '8',
              '退拍',
              '11',
              '撤拍',
              '12',
              '撤拍') AS STATUS,
       C.USER_ID,
       A.AUCTION_CATEGORY_ID,
       A.AUCTION_SPECIAL_TOPIC_ID AS AUCTION_SPECIAL_TOPIC_ID,
       C.ID AS CONTRACT_ID,
       A.PIC_PATH,
       A.INITIAL_PRICE AS END_PRICE,
       (SD.AC_CHARGE+SD.AC_CUSTODY+SD.AC_ONLOAD+SD.AC_INSURE) AS FEE,
       decode(A.SETTLEMENT_STATUS,'1','1','0') SETTLEMENT_STATUS,
       S.CODE AS STORAGE_CODE
  FROM AUCTIONS A
       JOIN CONTRACTS C ON A.CONTRACT_ID=C.ID
       JOIN V_WMS_LOGISTICSTATUS_INFO L ON A.AUCTION_NO=L.auctionNo
       LEFT JOIN SETTLEMENT_DETAILS SD ON SD.AUCTION_ID=A.ID
       LEFT JOIN STORAGES S ON A.STORAGE_ID = S.ID
 WHERE L.logisticStatus IN ('1','2')
   AND A.STATUS IN ('4', '6', '8', '11', '12')
   UNION ALL
SELECT A.ID,
       A.AUCTION_NO,
       O.NEVER_PAY_DATE AS END_AT,
       '2' AS SOURCE_TYPE,
       A.NAME,
       A.NAME_GBK,
       DECODE(O.STATUS,
              '2',
              '不支付',
              '4',
              '不支付',
              '5',
              '不支付'),
       C.USER_ID,
       A.AUCTION_CATEGORY_ID,
       A.AUCTION_SPECIAL_TOPIC_ID AS AUCTION_SPECIAL_TOPIC_ID,
       C.ID AS CONTRACT_ID,
       A.PIC_PATH,
       O.END_PRICE,
       0 AS FEE,
       decode(A.SETTLEMENT_STATUS,'1','1','0') SETTLEMENT_STATUS,
       S.CODE AS STORAGE_CODE
  FROM AUCTIONS A, CONTRACTS C, USER_ORDERS O, V_WMS_LOGISTICSTATUS_INFO L, STORAGES S
 WHERE A.ID = O.AUCTION_ID
   AND A.CONTRACT_ID = C.ID
   AND A.AUCTION_NO=L.auctionNo
   AND L.logisticStatus IN ('1','2')
   AND O.STATUS IN ('2', '4', '5')
   AND a.SETTLEMENT_STATUS = '1'
   AND O.IS_FREEZE = 0
   AND A.STORAGE_ID = S.ID
   UNION ALL
SELECT A.ID,
       A.AUCTION_NO,
       UR.COMPLETE_AT END_AT,
       '2' AS SOURCE_TYPE,
       A.NAME,
       A.NAME_GBK,
       DECODE(A.SETTLEMENT_STATUS,'1','不支付','未结算'),
       C.USER_ID,
       A.AUCTION_CATEGORY_ID,
       A.AUCTION_SPECIAL_TOPIC_ID AS AUCTION_SPECIAL_TOPIC_ID,
       C.ID AS CONTRACT_ID,
       A.PIC_PATH,
       A.END_PRICE,
       0 AS FEE,
       DECODE(A.SETTLEMENT_STATUS,'1' , '1', '0') AS SETTLEMENT_STATUS,
       S.CODE AS STORAGE_CODE
  FROM AUCTIONS A, USER_REFUNDS UR, CONTRACTS C,V_WMS_LOGISTICSTATUS_INFO L, STORAGES S
 WHERE A.CONTRACT_ID = C.ID
   AND UR.AUCTION_ID = A.ID
   AND A.AUCTION_NO=L.auctionNo
   AND A.STORAGE_ID = S.ID
   AND UR.STATUS = 9
   AND ur.SETTLEMENT_STATUS = '0'
   AND A.SETTLEMENT_STATUS = '1'
   AND L.logisticStatus IN ('1','2')) T
   WHERE NOT EXISTS
 (SELECT 1
          FROM USER_LOANS A
         WHERE instr(',' || A.contract_ids || ',',
                     ',' || T.contract_id || ',') > 0
                     and a.status='0');

-- ----------------------------
-- View structure for V_CONTRACT_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_CONTRACT_INFO" AS 
SELECT                               /*合同信息查询  @author:liujing 2011-10-26*/
         a.id contract_id,                                             /*合同号*/
          DECODE (a.contract_type,
                  '0', '拍品合同',
                  '1', '台湾合同')
             contract_type_name,                                      /*合同类型*/
          DECODE (a.user_lang,  'CN', '中文',  'EN', '英文') user_lang,
          d.user_lang usLang,                                         /*用户语言*/
          a.contract_type,
          a.auction_type,                                             /*拍卖方式*/
          a.finished_date,                                          /*要求完成时间*/
          a.sign_date,                                                /*签订时间*/
          a.contract_signer_id,                                     /* 签订人ID*/
          a.signer_name,                                             /*签订人姓名*/
          a.category_id,                                            /*预备版块ID*/
          a.special_topic_id,                                       /*预备场次ID*/
          a.user_id,                                                  /*客户编号*/
          a.user_name,                                                /*客户姓名*/
          a.collate_mode,                                             /*整理模式*/
          vip.service_op_id,                                        /*服务专员ID*/
          vip.service_op_name service_op_name,                        /*服务专员*/
          DECODE (vip.is_vip, NULL, '0', vip.is_vip) is_vip, /*是否是VIP客户(0：未分配 1：已分配 )*/
          DECODE (a.user_level,
                  '10', '注册会员',
                  '11', '一星',
                  '12', '二星',
                  '13', '三星',
                  '14', '四星',
                  '15', '五星')
             user_level,                                              /*客户等级*/
          a.remarks,                                                    /*备注*/
          a.urgent_remarks,                                           /*加急备注*/
          a.settlement_remarks,                                       /*结算备注*/
          (SELECT com.content
             FROM (  SELECT *
                       FROM common_remarks co
                      WHERE co.source_type = 'CONTRACTS'
                            AND co.custom_type = '合同委托确认备注'
                   ORDER BY co.created_at DESC) com
            WHERE com.source_id = a.id AND ROWNUM = 1)
             consignCheckRemarks,                                 /*合同委托确认备注*/
          (SELECT com.content
             FROM (  SELECT *
                       FROM common_remarks co
                      WHERE co.source_type = 'CONTRACTS'
                            AND co.custom_type = '合同上传备注'
                   ORDER BY co.created_at DESC) com
            WHERE com.source_id = a.id AND ROWNUM = 1)
             consignUploadRemarks,                                  /*合同上传备注*/
          a.expect_count,                                            /*预计拍品数*/
          a.register_id,                                             /*合同登记人*/
          a.is_discard,                                               /*是否作废*/
          b.consign_check_status,                                   /*委托确认状态*/
          DECODE (b.consign_check_status,
                  '0', '未确认',
                  '1', '通知委托方确认',
                  '2', '已确认',
                  '3', '无需确认')
             consign_check_status_value,
          a.is_collate_draw,                                        /*整理合作制图*/
          b.cooperate_status,                                       /*合作整理状态*/
          b.status,                                                   /*合同状态*/
          f_contract_status (b.status, 'all') all_status,           /*运营中心状态*/
          f_contract_status (b.status, '') service_status,          /*其他部门状态*/
          f_contract_status_time (b.status, b.contract_id) updated_at, /* 操作时间*/
          (SELECT created_at
             FROM contract_assigns
            WHERE contract_id = a.id AND status = '1' AND assign_type = '1')
             collate_transfer_date,                               /*登记整理交接时间*/
          (SELECT created_at
             FROM contract_assigns
            WHERE contract_id = a.id AND status = '1' AND assign_type = '2')
             collate_assign_date,                                   /*整理分配时间*/
          (SELECT created_at
             FROM contract_assigns
            WHERE contract_id = a.id AND status = '1' AND assign_type = '3')
             draw_transfer_date,                                  /*整理制图交接时间*/
          (SELECT created_at
             FROM contract_assigns
            WHERE contract_id = a.id AND status = '1' AND assign_type = '4')
             draw_assign_date,                                      /*制图分配时间*/
          (SELECT created_at
             FROM contract_assigns
            WHERE contract_id = a.id AND status = '1' AND assign_type = '5')
             audit_transfer_date,                                 /*制图审核交接时间*/
          (SELECT created_at
             FROM contract_assigns
            WHERE contract_id = a.id AND status = '1' AND assign_type = '6')
             audit_assign_date,                                     /*审核分配时间*/
          b.collate_date,                                             /*整理时间*/
          b.collate_check_date,
          f_contract_op_id (b.collate_op_id, 'collate', b.contract_id)
             collate_op_id,                                          /*整理人ID*/
          f_contract_op_name (b.collate_op, 'collate', b.contract_id)
             collate_op,                                               /*整理人*/
          b.draw_date,                                                /*制图时间*/
          b.draw_check_date,
          f_contract_op_id (b.draw_op_id, 'draw', b.contract_id) draw_op_id, /* 制图人ID*/
          f_contract_op_name (b.draw_op, 'draw', b.contract_id) draw_op, /*制图人*/
          b.audit_date,                                               /*审核时间*/
          f_contract_op_id (b.audit_op_id, 'audit', b.contract_id)
             audit_op_id,                                            /*审核人ID*/
          f_contract_op_name (b.audit_op, 'audit', b.contract_id) audit_op,
          b.upload_date,                                              /*上传时间*/
          b.upload_op_id,                                            /*上传人ID*/
          b.upload_op,                                                 /*上传人*/
          b.is_receive_list,                                        /*是否接受清单*/
          c.tel,                                                      /*客户电话*/
          c.mobile_tel,                                               /*客户手机*/
          d.email,                                                    /*客户邮箱*/
          d.contract_confirm_type,                                  /*合同确认方式*/
          b.in_storage_status,                                        /*入库状态*/
          b.in_storage_at,                                          /*申请入库时间*/
          a.created_at,
          (SELECT dic.key
             FROM data_dictionary dic
            WHERE dic.VALUE = a.category_id AND dic.parent_id = '82')
             category_name,                                           /*预备版块*/
          /*(SELECT dic.key
             FROM data_dictionary dic
            WHERE dic.VALUE = a.special_topic_id AND dic.parent_id = '84')
             special_topic_name,  */
          /*预备场次*/
          (SELECT ast.name
             FROM auction_special_topics ast
            WHERE ast.id = a.special_topic_id)
             special_topic_name,                                      /*预备场次*/
          (SELECT COUNT (*)
             FROM auctions au
            WHERE au.contract_id = a.id)
             auction_num,                                             /*拍品数量*/
          (SELECT COUNT (*)
             FROM auctions au
            WHERE au.contract_id = a.id AND au.status = 8)
             retreat_num,                                             /*退拍数量*/
          a.list_no
     FROM contracts a,
          contract_details b,
          user_details c,
          users d,
          vipusers vip
    WHERE     a.id = b.contract_id
          AND a.user_id = c.user_id
          AND a.user_id = d.id
          AND d.id = vip.user_id(+);

-- ----------------------------
-- View structure for V_CUSTOMER_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_CUSTOMER_INFO" AS 
SELECT                   /* 交易单详情   财务部分（提取客户信息） 查询客户信息  @author liu.jing*/
          u.id,                                                       /*客户号*/
          u.true_name,                                                /*客户姓名*/
          DECODE (u.buy_level,
                  '0', '注册','1', '一钻','2', '二钻','3', '三钻','4', '四钻','5', '五钻')
          || '|' ||
          DECODE (u.sell_level,
                     '10', '注册','11', '一星','12', '二星','13', '三星','14', '四星','15', '五星')
          || CASE WHEN ul.remarks IS NOT NULL
                THEN '|<font color="red">白名单</font>'  ELSE ''
             END AS user_level,    /*客户等级*/

          DECODE (u.sell_level,
                  '10', '注册','11', '一星','12', '二星','13', '三星','14', '四星','15', '五星')
             AS sell_level,        /*委托等级*/
          DECODE (u.buy_level,
                  '0', '注册','1', '一钻','2', '二钻','3', '三钻','4', '四钻','5', '五钻')
             AS buy_level,         /*竞买等级*/
          DECODE (ud.cert_type,
                  1, '身份证',
                  2, '军官证',
                  3, '学生证',
                  4, '其他',
                  5, '护照',
                  6, 'Passport',
                  7, 'ID card',
                  8, 'Others')
             AS cert_type,                 /*证件类型*/
          ud.cert_no,                      /*证件号*/

          u.total_account,                  /*总余额*/
          u.account,                        /*可用余额*/
          u.freeze_account,                 /*冻结余额*/
          u.bails,                          /*保证金*/
          CASE
             WHEN
                (u.total_quota - u.quota) - (u.total_quota-u.bails*50) > 0
              THEN
                (u.bails - ((u.total_quota - u.quota) - (u.total_quota-u.bails*50))/50)
              ELSE
                u.bails
          END
             useable_bails,                /*可转保证金,与web一致,参考(com.zhaoonline.web.vo.user.finance.QuotaManageVO)*/

          u.total_quota,                   /*总额度*/
          u.quota,                         /*可用额度*/
          (select sum(q.use_quota)
             from user_quota_usages q,auction_max_prices am,auctions au
             where q.auction_id = am.auction_id
               and q.user_id = am.user_id
               and q.status = '1'
               and q.user_id = u.id
               and q.auction_id = au.id) use_quota,   /*占用额度*/
           u.bails*50 moneyQuota,                     /*资金额度*/
           u.total_quota - (u.bails*50) giftQuota,    /*赠送额度*/

         (select coun.name from user_countries coun where coun.id = ud.country_id) || '|' ||
         (select pro.name from user_provinces pro where pro.id = ud.province_id) || '|' ||
         (select cit.name from user_cities cit where cit.id = ud.city_id) userArea,
          ud.address,                       /*地址*/
          ud.postcode,                      /*邮编*/
          u.email,                          /*邮箱*/
          ud.mobile_tel,                    /*手机号*/
          ud.tel,                           /*电话*/
          u.user_notes,                     /*备注*/
          u.pay_pass,                       /*支付密码*/

          u.status,
          DECODE (u.islock,  '0', '正常',  '1', '冻结') AS islock,  /*账号是否冻结*/
          ul.remarks,
          ud.id_auth_status,
          u.register_date,               /*注册日期*/
          u.buy_score_useable,           /*竞买积分*/
          u.sell_score_useable,          /*委托积分*/
       decode(u.sex,'0','女','1','男') sex,
       decode(u.user_lang,'0','默认','1','中文','2','英语') userLang,  /*客户语言*/
       (select vip.service_op_name from vipusers vip where vip.user_id = u.id) serviceOpName,  /*服务专员*/
       decode(ud.phone_auth_status,'0','未申请','1','申请中','2','已认证','3','未通过','未认证') phoneAuthStatus,  /*手机认证状态*/
       decode(ud.id_auth_status,'0','未申请','1','申请中','2','已认证','3','未通过') idAuthStatusName,   /*证件认证状态*/
       (select strcat(userColl.Name)
          from user_collection_ships ship
          left join user_collections userColl on ship.user_collection_id = userColl.id
         where ship.user_id = u.id) userCollectionName,    /*收藏范围*/

       u.sell_level_expired_at,         /*委托积分过期时间*/
       u.buy_level_expired_at,          /*竞买积分过期时间*/
       u.sell_score_amount,             /*委托形象值*/
       u.buy_score_amount,               /*竞买形象值*/
       (select decode(lis.list_type,'0','白名单','1','买家黑名单','2','卖家黑名单','3','买卖均黑名单')
       from user_lists lis where lis.user_id = u.id) listTypeName,   /*账号状态*/
       urt.userUnReturnLoanCount,     /*未还款的预支款记录*/
       urt.userUnReturnLoanMoney,     /*未还款的预支款总额*/
       urt.loanEarlyLimitDate,    /*最早到期的预支款时间*/
       (select sum(uloo.amount) from(select * from user_loans uloo order by uloo.end_at asc) uloo
       where rownum=1 and uloo.user_id=u.id and uloo.status='0') loanEarlyLimitMoney  /*最早到期的预支款总额*/
     FROM users u
     LEFT JOIN user_details ud ON u.id = ud.user_id
     LEFT JOIN user_lists ul ON u.id = ul.user_id AND ul.list_type = 0                  --白名单;
     left join (
          select count(1) userUnReturnLoanCount,sum(ulo.amount) userUnReturnLoanMoney,ulo.user_id ,
          min(ulo.end_at) loanEarlyLimitDate
          from user_loans ulo where ulo.status='0'
          group by ulo.user_id
     ) urt on urt.user_id=u.id;

-- ----------------------------
-- View structure for V_FINANCE_EXPMONEYFLOW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_FINANCE_EXPMONEYFLOW" AS 
SELECT                       /* @author chengyufen  2011.11.2  导出客户帐户资金流水*/
         o.id,
          s.id user_id,
          s.true_name user_name,
          o.finance_date,
          o.finance_type,
          TO_CHAR (o.finance_date, 'YYYY-MM-DD HH24:MI:SS')
             AS finance_date_ToExcel,
          CASE
             WHEN o.finance_type = 0
             THEN
                '银行存入'
             WHEN o.finance_type = 1
             THEN
                '现金存入'
             WHEN o.finance_type = 2
             THEN
                '保证金转入余额'
             WHEN o.finance_type = 3
             THEN
                '银行转出'
             WHEN o.finance_type = 4
             THEN
                '余额转入保证金'
             WHEN o.finance_type = 5
             THEN
                '坏账扣除'
             WHEN o.finance_type = 6
             THEN
                '邮资补收'
             WHEN o.finance_type = 10
             THEN
                'IPS支付'
             WHEN o.finance_type = 11
             THEN
                '交易单支付'
             WHEN o.finance_type = 12
             THEN
                '结算前退货存款'
             WHEN o.finance_type = 13
             THEN
                '结算转余额'
             WHEN o.finance_type = 14
             THEN
                '结算后退货存款'
             WHEN o.finance_type = 15
             THEN
                'Paypal支付'
             WHEN o.finance_type = 16
             THEN
                '保管费'
             WHEN o.finance_type = 17
             THEN
                '保险费'
             WHEN o.finance_type = 18
             THEN
                '返还委托方结算单服务费'
             WHEN o.finance_type = 19
             THEN
                '商城订单合并支付'
             WHEN o.finance_type = 20
             THEN
                '委托积分转现金'
             WHEN o.finance_type = 21
             THEN
                '商城退货金额'
             WHEN o.finance_type = 22
             THEN
                '余额转入'
             WHEN o.finance_type = 23
             THEN
                '余额转出'
             ELSE
                o.finance_type
          END
             financeTypeName,                                           --交易类型
          CASE
             WHEN o.direction = 0 THEN '收入'
             WHEN o.direction = 1 THEN '支出'
             ELSE o.direction
          END
             direction,                                               --资金流转类型
          o.money,                                                      --交易金额
          o.account_new,                                                  --余额
          o.finance_id,                                                --操作人ID
          o.finance_name,                                              --操作人姓名
          o.source_type,                                                --关联对象
          o.source_id,                                                --关联对象ID
          o.remarks                                                       --备注
     FROM users s JOIN user_accounts o ON (s.id = o.user_id);

-- ----------------------------
-- View structure for V_FINANCE_USER_REMIT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_FINANCE_USER_REMIT" AS 
SELECT                                       /*汇款告知查询   @author  liu.jing*/
         ur.id,                                                       /*告知编号*/
          ur.user_id,                                                 /*客户编号*/
          ur.user_name,                                               /*客户姓名*/
          ur.finance_deposit_type_id,                                 /*汇款方式*/
          ur.finance_company_bank_id,                                 /*汇款银行*/
          ur.currency_rate,                                             /*汇率*/
          CASE WHEN ur.currency != 'RMB' THEN ur.total_amount ELSE 0.00 END
             foreginMoney,                                            /*外币金额*/
          CASE
             WHEN ur.finance_deposit_type_id = 7 AND ur.currency = 'USD'
             THEN
                ROUND (
                   ( (ur.total_amount
                      - ROUND ( (ur.total_amount * 0.032 + 0.3), 2))
                    * ROUND (ur.currency_rate, 2)
                    / 100),
                   2)
             WHEN ur.currency != 'RMB' AND ur.finance_deposit_type_id != 7
             THEN
                ROUND (ur.total_amount * ROUND (ur.currency_rate, 2) / 100,
                       2)
             ELSE
                ur.total_amount
          END
             total_amount,                                            /*汇款金额*/
          CASE
             WHEN ur.currency != 'RMB' THEN ur.total_amount || ur.currency
             ELSE '0.00'
          END
             moneyCurrency,
          ur.currency,                                                  /*币种*/
          ur.deposit_date,                                           /* 汇款日期*/
          ur.deposit_date depositDateToString,              /* 汇款日期(Excel格式)*/
          ur.purpose,                                                 /*汇款目的*/
          ur.bank_return_code,                                       /*银行返回码*/
          ur.status,
          DECODE (ur.status,
                  '0', '未查核',
                  '1', '查核中',
                  '2', '确认收讫',
                  '3', '不通过',
                  '4', '已作废')
             status_desc,                                              /* 状态*/
          DECODE (ur.check_status,
                  '0', '未处理',
                  '1', '财务复核通过',
                  '2', '财务复核不通过')
             check_status_desc,
          ur.check_status,
          ur.service_check_date,
          ur.service_op_name,
          ur.finance_check_date,
          ur.finance_op_name,
          ur.admin_name,                                              /* 提交人*/
          ur.created_at,                                              /*提交日期*/
          ur.created_at createdAtToString,                   /*提交日期(Excel格式)*/
          fcb.name || '(' || fcb.account || ')' AS company_banks_name, /*汇款银行 */
          fdt.name deposit_type_name,                               /*汇款方式名称*/
          (SELECT vip.service_op_name
             FROM vipusers vip
            WHERE vip.user_id = ur.user_id)
             serviceOpName                                         /*大客户服务专员*/
     FROM user_remits ur
          LEFT JOIN finance_company_banks fcb
             ON ur.finance_company_bank_id = fcb.id
          LEFT JOIN finance_deposit_types fdt
             ON ur.finance_deposit_type_id = fdt.id;

-- ----------------------------
-- View structure for V_FINANCE_USERACCOUNT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_FINANCE_USERACCOUNT" AS 
SELECT                                      /**@author chengyufen  存款账户预览*/
         a.user_id,
          s.true_name AS user_name,
          a.direction,
          a.money,
          a.account_old,
          a.account_new,
          a.finance_type,
          /*(decode(a.finance_type, '0', '银行存入', '1', 'PayPal支付'))
          || ':' || (decode(finance_deposit_type_id,
                            '1',
                            '银行划账',
                            '2',
                            '现金付款',
                            '3',
                            '邮政地址汇款',
                            '5',
                            'POS机',
                            '6',
                            '退货存款',
                            '7',
                            '其他转入')) as finance_type,*/
          a.finance_name,
          a.source_id,
          a.source_type
     FROM user_accounts a
          LEFT JOIN users s
             ON (a.user_id = s.id)
          LEFT JOIN user_remits r
             ON (a.source_id = r.id);

-- ----------------------------
-- View structure for V_FREEDOM_USERORDER_QUERY
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_FREEDOM_USERORDER_QUERY" AS 
SELECT                                      /**自淘区交易单查询   @author 苏超*/
         u.id order_id,
          u.user_id buyer_id,
          u.user_name buyer_name,
          u.total_amount,
          u.status,
          (ROUND (
              TO_NUMBER (SYSDATE - u.limit_pay_date) * 24 * 60 * 60 * 1000))
             over_status,
          u.auction_no,
          u.auction_name,
          u.contract_id,
          u.created_at,
          u.limit_pay_date,
          u.is_freeze,
          u.admin_name,
          (SELECT ul.remarks
             FROM user_lists ul
            WHERE ul.user_id = u.user_id AND ul.list_type = '0')
             remarks,
          (SELECT user_lang
             FROM users s
            WHERE s.id = u.user_id)
             user_lang,
          u.logistic_detail_id,
          (SELECT g.id
             FROM logistics g
            WHERE g.id = d.logistic_id)
             logistic_id,
          (SELECT g.transmit_id
             FROM logistics g
            WHERE g.id = d.logistic_id)
             transmit_id,
          (SELECT g.logistic_type_id
             FROM logistics g
            WHERE g.id = d.logistic_id)
             logisticTypeId,
          ld.logistic_lading_id logisticLadingId,
          ld.logisticStatusName logisticLadingStatus,
          f.status refund_status,
          f.id refund_id,
          linf.logisticStatus lstatus,
          linf.logisticStatusName lstatusName,
          CASE
             WHEN (SELECT COUNT (1)
                     FROM v_wms_logisticstatus_info logis
                    WHERE logis.auctionNo = u.auction_no) > 1
             THEN
                (SELECT logis.logisticStatus
                   FROM v_wms_logisticstatus_info logis
                  WHERE logis.auctionNo = u.auction_no AND ROWNUM = 2)
             ELSE
                (SELECT logis.logisticStatus
                   FROM v_wms_logisticstatus_info logis
                  WHERE logis.auctionNo = u.auction_no)
          END
             aucLogisticStatus,
          c.charge_rate,
          c.wait_charges,
          c.completed_charges,
          au.auction_category_id,
          ac.name ||'(' || au.auction_category_id || ')' AS auction_category_id_str,
		  vlogis.logisticstatusname
     FROM user_orders u
          LEFT JOIN storage_wait_charges c
             ON u.id = c.user_order_id
          LEFT JOIN logistic_details d
             ON u.logistic_detail_id = d.id
          LEFT JOIN v_wms_log_order_status_info linf
             ON linf.logisticId = d.logistic_id
          LEFT JOIN user_refunds f
             ON u.user_refund_id = f.id
          LEFT JOIN (SELECT d.logistic_lading_id,
                            logis.logisticStatus,
                            logis.logisticStatusName,
                            d.auction_id
                       FROM logistic_lading_details d,
                            v_wms_log_order_status_info logis
                      WHERE d.logistic_lading_id = logis.logisticId) ld
             ON u.auction_id = ld.auction_id
           LEFT JOIN auctions au ON u.auction_no=au.auction_no
           LEFT JOIN (SELECT * FROM auction_categories t WHERE t.parent_id=900) ac ON au.auction_category_id=ac.id
       LEFT JOIN  v_wms_logisticstatus_info vlogis on au.auction_no = vlogis.auctionno;

-- ----------------------------
-- View structure for V_LOGISTIC_AUCTIONDELIVERY
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_LOGISTIC_AUCTIONDELIVERY" AS 
SELECT                                /*拍品提货-委托方       @author chengyufen*/
         DISTINCT (oos.auction_id),
                  oos.auction_no,
                  oos.auction_name,
                  oos.contract_id,
                  oos.auction_status,
                  oos.user_id,
                  oos.user_name,
                  oos.remarks,
                  logis.logisticStatus,
                  logis.logisticStatusName
     FROM (SELECT a.id auction_id,
                  a.auction_no,
                  a.name auction_name,
                  a.contract_id,
                  DECODE (a.status,
                          '4', '撤拍',
                          '6', '流拍',
                          '8', '退拍',
                          '11', '有理由撤拍',
                          '12', '无理由撤拍')
                     auction_status,
                  c.user_id,
                  c.user_name,
                  a.remarks,
                  a.logistic_detail_id
             FROM auctions a, contracts c
            WHERE c.id = a.contract_id AND a.status IN (4, 6, 8, 11, 12)
           UNION ALL
           SELECT u.auction_id,
                  TO_NUMBER (u.auction_no),
                  u.auction_name,
                  u.contract_id,
                  DECODE (u.status,
                          '2', '不支付',
                          '4', '不支付',
                          '5', '不支付')
                     auction_status,
                  (SELECT c.user_id
                     FROM contracts c
                    WHERE c.id = a.contract_id)
                     user_id,
                  (SELECT c.user_name
                     FROM contracts c
                    WHERE c.id = a.contract_id)
                     user_name,
                  u.remarks,
                  u.logistic_detail_id
             FROM user_orders u, auctions a
            WHERE     u.auction_id = a.id
                  AND u.status IN (2, 4, 5)
                  AND u.is_freeze = 0
           UNION ALL
           SELECT a.id auction_id,
                  a.auction_no,
                  a.name auction_name,
                  a.contract_id,
                  CASE
                     WHEN ur.status = 9 AND ur.settlement_status = 0
                     THEN
                        '结算前退货'
                     WHEN     ur.status = 9
                          AND ur.settlement_status = 1
                          AND ur.stock_status != 2
                     THEN
                        '结算后退货'
                     WHEN     ur.status = 9
                          AND ur.settlement_status = 1
                          AND ur.stock_status = 2
                     THEN
                        '结算后退货追回款项'
                  END
                     auction_status,
                  CASE
                     WHEN ur.settlement_status = 1 AND ur.stock_status != 2
                     THEN
                        800000
                     ELSE
                        (SELECT c.user_id
                           FROM contracts c
                          WHERE c.id = a.contract_id)
                  END
                     user_id,
                  CASE
                     WHEN ur.settlement_status = 1 AND ur.stock_status != 2
                     THEN
                        '800000'
                     ELSE
                        (SELECT c.user_name
                           FROM contracts c
                          WHERE c.id = a.contract_id)
                  END
                     user_name,
                  a.remarks,
                  a.logistic_detail_id
             FROM user_refunds ur, auctions a
            WHERE ur.auction_id = a.id AND ur.status = 9
                  AND (ur.settlement_status IN (0, 1)
                       OR (ur.settlement_status = 1 AND ur.stock_status = 2))) oos
          LEFT JOIN v_wms_logisticstatus_info logis
             ON oos.auction_no = logis.auctionNo
          LEFT JOIN logistic_lading_details ld
             ON oos.auction_id = ld.auction_id
    WHERE logis.logisticStatus IN (1, 2);

-- ----------------------------
-- View structure for V_LOGISTIC_AUCTIONTO_CONSIGN
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_LOGISTIC_AUCTIONTO_CONSIGN" AS 
SELECT                                /**拍品发委托方        @author chengyufen*/
         DISTINCT (oos.id) id,
                  oos.AUCTION_CATEGORY_ID,
                  oos.CHARACTER_NAME,
                  oos.auction_no,
                  oos.INITIAL_PRICE,
                  oos.auction_name,
                  oos.SETTLEMENT_STATUS,
                  oos.contract_id,
                  oos.category_name,
                  oos.auction_status,
                  oos.user_id,
                  oos.user_name,
                  oos.remarks,
                  oos.logistic_detail_id,
                  logis.logisticStatus,
                  logis.logisticStatusName,
                  lo.id userLoanId,
                  (SELECT us.sell_logistic_status
                     FROM users us
                    WHERE us.id = oos.user_id)
                     sellLogisticStatus
     FROM (SELECT a.id,
                  a.AUCTION_CATEGORY_ID,
                  (select name from AUCTION_CHARACTERS where id=a.AUCTION_CHARACTER_ID) CHARACTER_NAME,
                  a.auction_no,
                  a.INITIAL_PRICE,
                  a.name auction_name,
                  a.SETTLEMENT_STATUS,
                  a.contract_id,
                  (SELECT name
                     FROM auction_categories
                    WHERE id = a.auction_category_id)
                     category_name,
                  DECODE (a.status,
                          '4', '撤拍',
                          '6', '流拍',
                          '8', '退拍',
                          '11', '有理由撤拍',
                          '12', '无理由撤拍')
                     auction_status,
                  c.user_id,
                  c.user_name,
                  a.remarks,
                  a.logistic_detail_id
             FROM auctions a, contracts c
            WHERE c.id = a.contract_id AND a.status IN (4, 6, 8, 11, 12)
           UNION ALL
           SELECT a.id,
                  a.AUCTION_CATEGORY_ID,
                  (select name from AUCTION_CHARACTERS where id=a.AUCTION_CHARACTER_ID) CHARACTER_NAME,
                  a.auction_no,
                  a.INITIAL_PRICE,
                  a.name auction_name,
                  a.SETTLEMENT_STATUS,
                  a.contract_id,
                  (SELECT name
                     FROM auction_categories
                    WHERE id = a.auction_category_id)
                     category_name,
                  DECODE (u.status,
                          '2', '不支付',
                          '4', '不支付',
                          '5', '不支付')
                     auction_status,
                  c.user_id,
                  c.user_name,
                  a.remarks,
                  u.logistic_detail_id
             FROM user_orders u, auctions a, contracts c
            WHERE     u.auction_id = a.id
                  AND u.status IN (2, 4, 5)
                  AND u.is_freeze = 0
                  AND a.contract_id = c.id
           UNION ALL
           SELECT a.id,
                  a.AUCTION_CATEGORY_ID,
                  (select name from AUCTION_CHARACTERS where id=a.AUCTION_CHARACTER_ID) CHARACTER_NAME,
                  a.auction_no,
                  a.INITIAL_PRICE,
                  a.name auction_name,
                  a.SETTLEMENT_STATUS,
                  a.contract_id,
                  (SELECT name
                     FROM auction_categories
                    WHERE id = a.auction_category_id)
                     category_name,
                  CASE
                     WHEN ur.status = 9 AND ur.settlement_status = 0
                     THEN
                        '结算前退货'
                     WHEN     ur.status = 9
                          AND ur.settlement_status = 1
                          AND ur.stock_status = 2
                     THEN
                        '结算前后退货追回款项'
                  END
                     auction_status,
                  c.user_id,
                  c.user_name,
                  a.remarks,
                  a.logistic_detail_id
             FROM user_refunds ur, auctions a, contracts c
            WHERE     ur.auction_id = a.id
                  AND a.contract_id = c.id
                  AND ur.status = 9
                  AND (ur.settlement_status = 0
                       OR (ur.settlement_status = 1 AND ur.stock_status = 2))) oos
          LEFT JOIN v_wms_logisticstatus_info logis
             ON oos.auction_no = logis.auctionNo
          LEFT JOIN logistic_lading_details ld
             ON oos.id = ld.auction_id
          LEFT JOIN user_loans lo
             ON status = '0'
                AND INSTR (',' || oos.contract_id || ',',
                           ',' || lo.contract_ids || ',') > 0
    WHERE logis.logisticStatus IN (1, 2);

-- ----------------------------
-- View structure for V_LOGISTIC_BUYAUCTIONDELIVERY
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_LOGISTIC_BUYAUCTIONDELIVERY" AS 
SELECT                                /*拍品提货-竞买方       @author chengyufen*/
         DISTINCT (oos.auction_id),
                  oos.auction_no,
                  oos.auction_name,
                  oos.contract_id,
                  oos.auction_status,
                  oos.user_id,
                  oos.user_name,
                  oos.remarks,
                  oos.logisticStatus,
                  oos.logisticStatusName,
                  oos.end_at
     FROM    (SELECT u.auction_id,
                     TO_NUMBER (u.auction_no) auction_no,
                     u.auction_name,
                     u.contract_id,
                     u.logistic_detail_id,
                     '竞拍已支付' auction_status,
                     u.user_id,
                     u.user_name,
                     u.remarks,
                     logis.logisticStatus,
                     logis.logisticStatusName,
                     a.end_at end_at
                FROM user_orders u,
                     auctions a,
                     v_wms_logisticstatus_info logis
               WHERE     u.auction_id = a.id
                     AND logis.auctionNo = u.auction_no
                     AND logis.logisticStatus IN (1, 2)
                     AND u.status = 1
                     AND u.is_freeze = 0
                     AND u.user_refund_id IS NULL
              UNION ALL
              SELECT a.id auction_id,
                     a.auction_no,
                     a.name auction_name,
                     a.contract_id,
                     a.logistic_detail_id,
                     '退货失败' auction_status,
                     ur.user_id,
                     ur.user_name,
                     a.remarks,
                     logis.logisticStatus,
                     logis.logisticStatusName,
                     a.end_at end_at
                FROM user_refunds ur,
                     auctions a,
                     v_wms_logisticstatus_info logis
               WHERE     ur.auction_id = a.id
                     AND logis.auctionNo = ur.auction_no
                     AND logis.logisticStatus IN (1, 2)
                     AND ur.status = 8) oos
          LEFT JOIN
             logistic_lading_details ld
          ON oos.auction_id = ld.auction_id;

-- ----------------------------
-- View structure for V_LOGISTIC_DEFERAUCTIONS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_LOGISTIC_DEFERAUCTIONS" AS 
SELECT                                /*已暂缓发货的拍品管理     @author chengyufen*/
         aus.auctionId,
          aus.auction_no,
          aus.auction_name,
          aus.auction_gory,
          aus.auction_owed,
          aus.logistic_id,
          aus.user_id,
          aus.user_name,
          aus.logisticStatus,
          aus.logisticStatusName,
          aus.remarks,
          aus.is_keep,
          aus.order_id,
          aus.userRefundStatus,
          aus.userRefundId
     FROM (SELECT a.id auctionId,
                  a.auction_no,
                  a.name auction_name,
                  '拍品' auction_gory,
                  '委托方' auction_owed,
                  d.logistic_id,
                  (SELECT user_id
                     FROM contracts
                    WHERE id = a.contract_id)
                     user_id,
                  (SELECT user_name
                     FROM contracts
                    WHERE id = a.contract_id)
                     user_name,
                  logist.logisticStatus logisticStatus,
                  logist.logisticStatusName logisticStatusName,
                  a.remarks,
                  '' is_keep,
                  0 order_id,
                  '' userRefundStatus,
                  0 userRefundId
             FROM auctions a
                  LEFT JOIN v_wms_logisticstatus_info logist
                     ON a.auction_no = logist.auctionNo
                  LEFT JOIN logistic_details d
                     ON a.logistic_detail_id = d.id
            WHERE d.logistic_id > 0 AND d.delivery_type = 3) aus
    WHERE aus.logisticStatus = 9
   UNION
   SELECT oas.auctionid,
          oas.auction_no,
          oas.auction_name,
          oas.auction_gory,
          oas.auction_owed,
          oas.logistic_id,
          oas.user_id,
          oas.user_name,
          oas.logisticstatus,
          oas.logisticstatusname,
          oas.remarks,
          oas.is_keep,
          oas.order_id,
          oas.userrefundstatus,
          oas.userrefundid
     FROM (SELECT o.auction_id auctionId,
                  TO_NUMBER (o.auction_no) auction_no,
                  o.auction_name,
                  '拍品' auction_gory,
                  CASE
                     WHEN d.delivery_type = 1 THEN '竞买方'
                     ELSE '公司存货'
                  END
                     auction_owed,
                  d.logistic_id,
                  CASE
                     WHEN d.delivery_type = 1 THEN o.user_id
                     ELSE 800000
                  END
                     user_id,
                  CASE
                     WHEN d.delivery_type = 1 THEN o.user_name
                     ELSE '赵涌在线'
                  END
                     user_name,
                  logist.logisticStatus logisticStatus,
                  logist.logisticStatusName logisticStatusName,
                  (SELECT a.remarks
                     FROM auctions a
                    WHERE a.id = o.auction_id)
                     remarks,
                  '' is_keep,
                  o.id order_id,
                  userRe.Status userRefundStatus,
                  userRe.id userRefundId
             FROM user_orders o
                  LEFT JOIN v_wms_logisticstatus_info logist
                     ON o.auction_no = logist.auctionNo
                  LEFT JOIN logistic_details d
                     ON o.logistic_detail_id = d.id
                  LEFT JOIN user_refunds userRe
                     ON userRe.id = o.user_refund_id
            WHERE d.logistic_id > 0 AND d.delivery_type = 1) oas
    WHERE oas.logisticStatus = 9
   UNION
   SELECT oas.auctionid,
          oas.auction_no,
          oas.auction_name,
          oas.auction_gory,
          oas.auction_owed,
          oas.logistic_id,
          oas.user_id,
          oas.user_name,
          oas.logisticstatus,
          oas.logisticstatusname,
          oas.remarks,
          oas.is_keep,
          oas.order_id,
          oas.userrefundstatus,
          oas.userrefundid
     FROM (SELECT userRe.auction_id auctionId,
                  TO_NUMBER (userRe.auction_no) auction_no,
                  userRe.auction_name,
                  '拍品' auction_gory,
                  '竞买方' auction_owed,
                  d.logistic_id,
                  userRe.User_Id,
                  userRe.User_Name,
                  logist.logisticStatus,
                  logist.logisticStatusName,
                  (SELECT a.remarks
                     FROM auctions a
                    WHERE a.id = userRe.auction_id)
                     remarks,
                  '' is_keep,
                  userRe.User_Order_Id order_id,
                  userRe.Status userRefundStatus,
                  userRe.id userRefundId
             FROM user_refunds userRe
                  LEFT JOIN v_wms_logisticstatus_info logist
                     ON userRe.auction_no = logist.auctionNo
                  LEFT JOIN logistic_details d
                     ON userRe.logistic_detail_id = d.id
            WHERE d.logistic_id > 0 AND d.delivery_type IN (1, 2)) oas
    WHERE oas.logisticStatus = 9
   UNION
   SELECT "AUCTIONID",
          "AUCTION_NO",
          "AUCTION_NAME",
          "AUCTION_GORY",
          "AUCTION_OWED",
          "LOGISTIC_ID",
          "USER_ID",
          "USER_NAME",
          "LOGISTICSTATUS",
          "LOGISTICSTATUSNAME",
          "REMARKS",
          "IS_KEEP",
          "ORDER_ID",
          "USERREFUNDSTATUS",
          "USERREFUNDID"
     FROM (SELECT ec.goods_id auctionId,
                  ec.goods_no auction_no,
                  ec.goods_name auction_name,
                  '商品' auction_gory,
                  '' auction_owed,
                  lg.logistic_id,
                  ec.user_id,
                  ec.user_name,
                  ost.logisticStatus,
                  ost.logisticStatusName,
                  ec.remark remarks,
                  '' is_keep,
                  0 order_id,
                  '' userRefundStatus,
                  0 userRefundId
             FROM ec_order_goods ec
                  LEFT JOIN logistic_details lg
                     ON ec.unite_consign_id = lg.id
                  LEFT JOIN v_wms_logisticstatus_info ost
                     ON ost.auctionNo = ec.goods_no
            WHERE lg.logistic_id > 0 AND ost.logisticStatus = 9) ats
   UNION
   SELECT "AUCTIONID",
          "AUCTION_NO",
          "AUCTION_NAME",
          "AUCTION_GORY",
          "AUCTION_OWED",
          "LOGISTIC_ID",
          "USER_ID",
          "USER_NAME",
          "LOGISTICSTATUS",
          "LOGISTICSTATUSNAME",
          "REMARKS",
          "IS_KEEP",
          "ORDER_ID",
          "USERREFUNDSTATUS",
          "USERREFUNDID"
     FROM (SELECT al.id auctionId,
                  al.auction_no,
                  al.name auction_name,
                  '拍品' auction_gory,
                  CASE
                     WHEN o.status = 1 OR userRe.Status = 8
                     THEN
                        '竞买方'
                     WHEN     userRe.Settlement_Status = 1
                          AND userRe.Status = '9'
                          AND userRe.Stock_Status != '3'
                     THEN
                        '公司存货'
                     ELSE
                        '委托方'
                  END
                     auction_owed,
                  ld.logistic_lading_id logistic_id,
                  CASE
                     WHEN o.status = 1 OR userRe.Status = 8
                     THEN
                        o.user_id
                     WHEN     userRe.Settlement_Status = 1
                          AND userRe.Status = '9'
                          AND userRe.Stock_Status != '3'
                     THEN
                        800000
                     ELSE
                        (SELECT c.user_id
                           FROM contracts c
                          WHERE c.id = al.contract_id)
                  END
                     user_id,
                  CASE
                     WHEN o.status = 1 OR userRe.Status = 8
                     THEN
                        o.user_name
                     WHEN     userRe.Settlement_Status = 1
                          AND userRe.Status = '9'
                          AND userRe.Stock_Status != '3'
                     THEN
                        '赵涌在线'
                     ELSE
                        (SELECT c.user_name
                           FROM contracts c
                          WHERE c.id = al.contract_id)
                  END
                     user_name,
                  ost.logisticStatus,
                  ost.logisticStatusName,
                  al.remarks,
                  '' is_keep,
                  o.id order_id,
                  userRe.Status userRefundStatus,
                  o.user_refund_id userRefundId
             FROM auctions al
                  LEFT JOIN user_orders o
                     ON al.id = o.auction_id
                  LEFT JOIN user_refunds userRe
                     ON userRe.id = o.user_refund_id
                  LEFT JOIN logistic_lading_details ld
                     ON ld.auction_id = al.id
                  LEFT JOIN v_wms_logisticstatus_info ost
                     ON ost.auctionNo = ld.auction_no
            WHERE ld.logistic_lading_id > 0 AND ost.logisticStatus = 9) atl;

-- ----------------------------
-- View structure for V_LOGISTIC_STORAGE_AUCTIONS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_LOGISTIC_STORAGE_AUCTIONS" AS 
SELECT                                    /*申请入库拍品查询   @author chengyufen*/
         DISTINCT (oos.auction_no) auction_no,
                  oos.auction_name,
                  oos.auction_status,
                  oos.user_id,
                  oos.user_name,
                  oos.op_name,
                  oos.applyStorageReason,
                  oos.remarks,
                  logis.logisticStatus,
                  logis.logisticStatusName
     FROM    (SELECT t.auction_no,
                     a.name auction_name,
                     f_auction_status (a.id, a.status) auction_status,
                     c.user_id,
                     c.user_name,
                     t.op_name,
                        t.remarks
                     || '--'
                     || TO_CHAR (t.op_date, 'yyyy-mm-dd hh24:mi:ss')
                        applyStorageReason,
                     a.remarks
                FROM auction_apply_storage t
                     JOIN auctions a
                        ON t.auction_no = a.auction_no
                     JOIN contracts c
                        ON a.contract_id = c.id
               WHERE a.status IN (4, 6, 8, 11, 12)
              UNION
              SELECT t.auction_no,
                     o.auction_name,
                     f_auction_status (o.auction_id,
                                       (SELECT a.status
                                          FROM auctions a
                                         WHERE a.id = o.auction_id))
                        auction_status,
                     o.user_id,
                     o.user_name,
                     t.op_name,
                        t.remarks
                     || '--'
                     || TO_CHAR (t.op_date, 'yyyy-mm-dd hh24:mi:ss')
                        applyStorageReason,
                     o.remarks
                FROM auction_apply_storage t
                     JOIN user_orders o
                        ON t.auction_no = TO_NUMBER (o.auction_no)
                     LEFT JOIN user_refunds f
                        ON o.user_refund_id = f.id
               WHERE o.status = 1
                     AND (f.status IS NULL OR f.status NOT IN (8, 9))
              UNION
              SELECT t.auction_no,
                     re.auction_name,
                     f_auction_status (re.auction_id, a.status)
                        auction_status,
                     CASE
                        WHEN re.status = 8
                        THEN
                           re.user_id
                        WHEN re.status = 9 AND re.settlement_status = 1
                        THEN
                           800000
                        ELSE
                           (SELECT c.user_id
                              FROM contracts c
                             WHERE c.id = a.contract_id)
                     END
                        user_id,
                     CASE
                        WHEN re.status = 8
                        THEN
                           re.user_name
                        WHEN re.status = 9 AND re.settlement_status = 1
                        THEN
                           '800000'
                        ELSE
                           (SELECT c.user_name
                              FROM contracts c
                             WHERE c.id = a.contract_id)
                     END
                        user_name,
                     t.op_name,
                        t.remarks
                     || '--'
                     || TO_CHAR (t.op_date, 'yyyy-mm-dd hh24:mi:ss')
                        applyStorageReason,
                     a.remarks
                FROM auction_apply_storage t
                     JOIN user_refunds re
                        ON t.auction_no = TO_NUMBER (re.auction_no)
                     LEFT JOIN auctions a
                        ON re.auction_id = a.id
               WHERE re.status = 8
                     OR (re.status = 9 AND re.settlement_status IN (0, 1))) oos
          LEFT JOIN
             v_wms_logisticstatus_info logis
          ON oos.auction_no = logis.auctionNo
    WHERE logis.logisticStatus IN (1, 2, 3, 4);

-- ----------------------------
-- View structure for V_LOIGSTIC_APPLY_STORAGE
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_LOIGSTIC_APPLY_STORAGE" AS 
SELECT "AUCTION_ID",
          "AUCTION_NO",
          "AUCTION_NAME",
          "AUCTION_STATUS",
          "LOGISTIC_ID",
          "LOGISTIC_LADING_ID",
          "USER_ID",
          "USER_NAME",
          "REMARKS",
          "LOGISTICSTATUS",
          "LOGISTICSTATUSNAME"
     FROM (SELECT                         /**查询符合申请入库的拍品  @author chengyufen*/
                 DISTINCT
                  (oos.auction_id),
                  oos.auction_no,
                  oos.auction_name,
                  oos.auction_status,
                  oos.logistic_id,
                  oos.logistic_lading_id,
                  oos.user_id,
                  oos.user_name,
                  oos.remarks,
                  CASE
                     WHEN (SELECT COUNT (1)
                             FROM v_wms_logisticstatus_info logis
                            WHERE logis.auctionNo = oos.auction_no) > 1
                     THEN
                        (SELECT logis.logisticStatus
                           FROM v_wms_logisticstatus_info logis
                          WHERE logis.auctionNo = oos.auction_no
                                AND ROWNUM = 2)
                     ELSE
                        (SELECT logis.logisticStatus
                           FROM v_wms_logisticstatus_info logis
                          WHERE logis.auctionNo = oos.auction_no)
                  END
                     logisticStatus,
                  CASE
                     WHEN (SELECT COUNT (1)
                             FROM v_wms_logisticstatus_info logis
                            WHERE logis.auctionNo = oos.auction_no) > 1
                     THEN
                        (SELECT logis.logisticStatusName
                           FROM v_wms_logisticstatus_info logis
                          WHERE logis.auctionNo = oos.auction_no
                                AND ROWNUM = 2)
                     ELSE
                        (SELECT logis.logisticStatusName
                           FROM v_wms_logisticstatus_info logis
                          WHERE logis.auctionNo = oos.auction_no)
                  END
                     logisticStatusName
             FROM (SELECT a.id auction_id,
                          a.auction_no,
                          a.name auction_name,
                          d.logistic_id,
                          ld.logistic_lading_id,
                          DECODE (a.status,
                                  '4', '撤拍',
                                  '6', '流拍',
                                  '8', '退拍',
                                  '11', '有理由撤拍',
                                  '12', '无理由撤拍')
                             auction_status,
                          c.user_id,
                          c.user_name,
                          a.remarks
                     FROM auctions a
                          JOIN contracts c
                             ON c.id = a.contract_id
                          LEFT JOIN logistic_details d
                             ON a.logistic_detail_id = d.id
                          LEFT JOIN logistic_lading_details ld
                             ON a.id = ld.auction_id
                    WHERE a.status IN (4, 6, 8, 11, 12)
                   UNION ALL
                   SELECT u.auction_id,
                          TO_NUMBER (u.auction_no),
                          u.auction_name,
                          d.logistic_id,
                          ld.logistic_lading_id,
                          DECODE (u.status,
                                  '1', '竞拍已支付',
                                  '2', '不支付',
                                  '4', '不支付',
                                  '5', '不支付')
                             auction_status,
                          CASE
                             WHEN u.status = '1' THEN u.user_id
                             ELSE (SELECT c.user_id
                                     FROM contracts c
                                    WHERE c.id = u.contract_id)
                          END
                             user_id,
                          CASE
                             WHEN u.status = '1' THEN u.user_name
                             ELSE (SELECT c.user_name
                                     FROM contracts c
                                    WHERE c.id = u.contract_id)
                          END
                             user_name,
                          u.remarks
                     FROM user_orders u
                          LEFT JOIN logistic_details d
                             ON u.logistic_detail_id = d.id
                          LEFT JOIN logistic_lading_details ld
                             ON u.auction_id = ld.auction_id
                    WHERE u.status IN (1, 2, 4, 5) AND u.is_freeze = 0
                   UNION ALL
                   SELECT a.id auction_id,
                          a.auction_no,
                          a.name auction_name,
                          d.logistic_id,
                          ld.logistic_lading_id,
                          DECODE (
                             ur.status,
                             '8', '退货失败',
                             '9', DECODE (ur.settlement_status,
                                          '0', '结算前退货',
                                          '1', '结算后退货'))
                             auction_status,
                          CASE
                             WHEN ur.status = '8'
                             THEN
                                ur.user_id
                             WHEN ur.status = '9'
                                  AND ur.settlement_status = 1
                             THEN
                                800000
                             ELSE
                                (SELECT c.user_id
                                   FROM contracts c
                                  WHERE c.id = a.contract_id)
                          END
                             user_id,
                          CASE
                             WHEN ur.status = '8'
                             THEN
                                ur.user_name
                             WHEN ur.status = '9'
                                  AND ur.settlement_status = 1
                             THEN
                                '800000'
                             ELSE
                                (SELECT c.user_name
                                   FROM contracts c
                                  WHERE c.id = a.contract_id)
                          END
                             user_name,
                          a.remarks
                     FROM user_refunds ur
                          LEFT JOIN auctions a
                             ON ur.auction_id = a.id
                          LEFT JOIN logistic_details d
                             ON ur.logistic_detail_id = d.id
                          LEFT JOIN logistic_lading_details ld
                             ON ur.auction_id = ld.auction_id
                    WHERE (ur.status = 8
                           OR (ur.status = 9
                               AND ur.settlement_status IN (0, 1)))
                   UNION ALL
                   SELECT e.goods_id auction_id,
                          e.goods_no auction_no,
                          e.goods_name auction_name,
                          d.logistic_id,
                          NULL logistic_lading_id,
                          '' auction_status,
                          e.user_id,
                          e.user_name,
                          e.remark
                     FROM    ec_order_goods e
                          LEFT JOIN
                             logistic_details d
                          ON e.unite_consign_id = d.id
                    WHERE e.order_status = 1) oos) logg
    WHERE logg.logisticStatus = 8;

-- ----------------------------
-- View structure for V_REFUNDS_FINI_FLOW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_REFUNDS_FINI_FLOW" AS 
SELECT ur.id id,
          ur.amount amount,                                            /*成交价*/
          ats.end_price endPrice,                                      /*结标价*/
          setDet.ac_charge acCharge,                                   /*结算价*/
          ats.contract_id contractId,
          ats.auction_category_id,
          uos.id tradeId,
          ur.auction_id auctionId,
          ur.auction_no auctionNo,
          ur.auction_name auctionName,
          ur.user_id userId,
          ur.user_name userName,
          ur.settlement_status settlementStatus,
          setDet.status setStatus,
          ur.user_order_id userOrderId,
          ur.status status,
          ur.remarks remarks,
          ur.COMPLETE_AT completeAt,
          ur.created_at createdAt,
          ur.refund_reason_type refundReasonType,
          ur.storage_status storageStatus,
          ur.logistic_detail_id,
          s.name,
          (SELECT s.user_lang
             FROM users s
            WHERE s.id = uos.user_id)
             userLang
     FROM user_orders uos
          JOIN user_refunds ur
             ON uos.user_refund_id = ur.id
          JOIN auctions ats
             ON ats.id = ur.auction_id
          LEFT JOIN settlement_details setDet
             ON setDet.Auction_Id = ats.id AND setDet.status = 1
          LEFT JOIN settlements settl
             ON settl.id = setDet.Settlement_Id AND settl.status != 3
          LEFT JOIN storages s
             ON s.id=ats.storage_id;

-- ----------------------------
-- View structure for V_REFUNDS_FLOW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_REFUNDS_FLOW" AS 
SELECT ur.id id,
          ur.amount amount,
          ats.contract_id contractId,
          uos.id tradeId,
          ur.auction_id auctionId,
          ur.auction_no auctionNo,
          ur.auction_name auctionName,
          ur.user_id userId,
          ur.user_name userName,
          ur.settlement_status settlementStatus,
          ur.user_order_id userOrderId,
          ur.status status,
          ur.remarks remarks,
          ur.created_at createdAt,
          ur.application_type applicationType,
          ur.refund_reason refundReason,
          ur.application_order_status applicationOrderStatus
     FROM user_refunds ur, auctions ats, user_orders uos
    WHERE ats.id = ur.auction_id AND uos.auction_id = ur.auction_id;

-- ----------------------------
-- View structure for V_SETTLEMENT_DESPATCHES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_SETTLEMENT_DESPATCHES" AS 
SELECT                                            /*结算款分配 @author：liujing*/
         sd.id,
          sd.user_id,
          sd.username,
          sd.amount,
          DECODE (sd.f_check_status,
                  '0', '未转入',
                  '1', '已完成',
                  '2', '不通过',
                  '3', '撤回')
             AS f_check_status,
          DECODE (sd.checkout_type,
                  '0', '现金支出',
                  '1', '邮政汇款',
                  '2', '转余额',
                  '3', '银行转账',
                  '4', '现金支出台湾',
                  '5', 'IPS转账',
                  '6', '转账（公）',
                  '7', '汇丰',
                  '8', 'Paypal',
                  '9', '盛付通',
                  '10','财付通')
             AS checkout_type,
          sd.created_at,
          sd.settlement_id,
          CASE
             WHEN sd.bank_info IS NULL THEN sd.bank_account
             ELSE sd.bank_info
          END
             bank_account,
          sd.currency,
          sd.cert_path,
          sd.admin_name,
          sd.bank_user_name,
          sd.f_check_date,
          DECODE (ub.status, NULL, '1', ub.status) status /*有些分配方式没有银行账号，为了提交财务转账时，不对此做银行判断*/
     FROM    settlement_despatches sd
          LEFT JOIN
             user_banks ub
          ON sd.user_bank_id = ub.id;

-- ----------------------------
-- View structure for V_SETTLEMENT_DETAILS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_SETTLEMENT_DETAILS" AS 
SELECT                                            /*结算单明细 @author：liujing*/
         sd.settlement_id,
          au.auction_no,                                              /*拍品编号*/
          sd.auction_name,                                            /*拍品名称*/
          sd.ac_inital,                                                /*起拍价*/
          sd.end_price,                                                /*结标价*/
          sd.ac_charge,                                                /*服务费*/
          sd.ac_custody,                                               /*保管费*/
          sd.ac_onload,                                                /*制作费*/
          sd.ac_insure,                                                /*保险费*/
          sd.total_amount,                                             /*结标价*/
          au.end_at,                                                  /*结标价格*/
          au.name_en,                                               /*拍品英文名称*/
          af.charge_fee_percent,                                    /*手续费百分比*/
          af.insure_price,                                             /*保险额*/
          F_SETTLEMENT_AUCTION_STATUS (au.status, uo.status)
          || DECODE (uo.status,
                     4, '(' || uo.remarks || ')',
                     5, '(' || uo.remarks || ')')
          || DECODE (
                au.status,
                7, (SELECT DECODE (urd.settlement_status,
                                   0, '(结算前退货:',
                                   1, '(结算后退货:')
                           || urd.remarks
                           || ')'
                      FROM user_refunds urd
                     WHERE urd.id = uo.user_refund_id))
             auction_status,                            --结算单详情 不支付拍品、退货拍品显示原因
          af.onload_fee_type,
          sd.return_service_fee
     FROM settlement_details sd
          LEFT JOIN auctions au
             ON sd.auction_id = au.id
          LEFT JOIN auction_fees af
             ON au.id = af.auction_id
          LEFT JOIN user_orders uo
             ON au.id = uo.auction_id;

-- ----------------------------
-- View structure for V_SETTLEMENT_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_SETTLEMENT_INFO" AS 
SELECT sett.id,                /*结算单详情页面（根据结算单ID查看结算单信息） @author liu.jing*/
          /*结算单号**/
          sett.user_id,                                               /*客户编号*/
          sett.user_name,                                             /*客户姓名*/
          CASE
             WHEN sett.check_status = '2'
             THEN
                '不通过' || '(理由:' || sett.remark || ')'
             ELSE
                DECODE (sett.check_status,  '0', '未审核',  '1', '通过')
          END
             check_status,                                            /*审核状态*/
          sett.auction_fee,                                           /*结标金额*/
          sett.charge_fee,                                             /*服务费*/
          sett.insure_fee,                                             /*保险费*/
          sett.onload_fee,                                             /*制作费*/
          sett.custody_fee,                                            /*保管费*/
          sett.orther_fee,                                            /*其他费用*/
          sett.amount,                                                /*结算金额*/
          sett.settlement_scores,                                   /*获得委托积分*/
          sett.created_at,                                            /*创建时间*/
          sett.contract_id,                                            /*合同号*/
          DECODE (sett.status,
                  '0', '待转账',
                  '1', '转账中',
                  '2', '已完成',
                  '3', '无效')
             status,
          ud.postcode,
          ud.address,
          (SELECT SUM (sd.amount)
             FROM settlement_despatches sd
            WHERE sd.settlement_id = sett.id)
             assigned_amount,                                     /*结算单已分配金额*/
          DECODE (con.user_level,
                  '10', '注册',
                  '11', '一星',
                  '12', '二星',
                  '13', '三星',
                  '14', '四星',
                  '15', '五星')
             user_level,                                            /*合同委托等级*/
          con.user_lang,
          ud.tel,                                                    /**客户电话*/
          ud.mobile_tel,                                             /*客户手机**/
          vip.is_vip,                                                /*是否VIP**/
          '<font color="red">' || con.settlement_remarks || '</font>'
             settlement_remarks,                                      /*结算备注*/
          sett.is_free_charge,                                         /*免汇费*/
          (SELECT CASE
                     WHEN COUNT (1) > 0
                     THEN
                           '<font color="red">该客户有'
                        || COUNT (1)
                        || '个超期交易单未支付，总额￥'
                        || SUM (uo.total_amount)
                        || '。</font>'
                     ELSE
                        ''
                  END
             FROM user_orders uo
            WHERE     uo.status = 0
                  AND uo.limit_pay_date < SYSDATE
                  AND uo.user_id = con.user_id)
          || (SELECT CASE
                        WHEN INSTR (',' || ulo.contract_ids || ',',
                                    ',' || con.id || ',') > 0
                        THEN
                              '<font color="red">   该客户有￥'
                           || ulo.amount
                           || '预支款,关联合同号：'
                           || ulo.contract_ids
                           || '。</font>'
                        ELSE
                           ''
                     END
                FROM user_loans ulo
               WHERE     ulo.user_id = con.user_id
                     AND INSTR (',' || ulo.contract_ids || ',',
                                ',' || con.id || ',') > 0
                     AND ulo.status = 0)
             remarks,
          F_SETTLEMENT_COUNT (sett.id, 'outBid') out_bid_num, --结算单里的流拍且还没有生成发货单或提货单的拍品数
          F_SETTLEMENT_COUNT (sett.id, 'return') return_num, --结算单里的退拍且还没有生成发货单或提货单的拍品数
          F_SETTLEMENT_COUNT (sett.id, 'cancel') cancle_num, --结算单里的撤拍且还没有生成发货单或提货单的拍品数
          F_SETTLEMENT_COUNT (sett.id, 'notPay') notpay_num, --结算单里的不支付且还没有生成发货单或提货单的拍品数
          F_SETTLEMENT_COUNT (sett.id, 'comeback') comeback_num, --结算单里的结算前退货且还没有生成发货单或提货单的拍品数
          (SELECT COUNT (1)
             FROM auctions au
            WHERE au.contract_id = con.id AND au.settlement_status IN (0, 2))
             notsett_num,
          sett.check_man,
          (SELECT admin_name
             FROM common_remarks cr
            WHERE     cr.source_type = 'SETTLEMENTS'
                  AND cr.custom_type = '生成结算单'
                  AND cr.source_id = sett.id)
             admin_name
     FROM settlements sett
          LEFT JOIN contracts con
             ON sett.contract_id = con.id
          LEFT JOIN user_details ud
             ON sett.user_id = ud.user_id
          LEFT JOIN vipusers vip
             ON sett.user_id=vip.user_id;

-- ----------------------------
-- View structure for V_SETTLEMENT_USER_BANK
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_SETTLEMENT_USER_BANK" AS 
SELECT                                   /*结算模块，用户银行信息显示 @author liu.jing*/
         ub.id user_bank_id,
          ub.user_id,
          ub.bank_type_id,
          ub.is_default,
          CASE
             WHEN ub.bank_type_id = 1                              /**国内银行卡**/
             THEN
                   ub.bank_name
                || '——'
                || ub.branch_name
                || '——'
                || ub.name
                || '('
                || ub.bank_no
                || ')'
                || DECODE (ub.status, '0', '——未审核')
             WHEN ub.bank_type_id = 2                               /**国外银行卡*/
             THEN
                   'BankLocation:'
                || (SELECT coun.name
                      FROM user_countries coun
                     WHERE coun.id = ub.country_id)
                || '——BankName:'
                || ub.bank_name
                || '——BankAddress:'
                || ub.address
                || '——AccountID:'
                || ub.bank_no
                || '——IBAN:'
                || ub.iban_bank_no
                || '——BeneficiarysName:'
                || ub.name
                || '——SwiftCode:'
                || ub.swift_code
                || DECODE (ub.status, '0', '——未审核')
             WHEN ub.bank_type_id = 4                             /**Paypal**/
             THEN
                ub.bank_no
          END
             bank_name
     FROM user_banks ub
    WHERE ub.status NOT IN (2, 3)
   UNION
   /*邮政地址 */
   SELECT ua.id user_bank_id,
          ua.user_id,
          3,
          ua.isdefault,
             (SELECT coun.name
                FROM user_countries coun
               WHERE coun.id = ua.country_id)
          || (SELECT pro.name
                FROM user_provinces pro
               WHERE pro.id = ua.province_id)
          || (SELECT city.name
                FROM user_cities city
               WHERE city.id = ua.city_id)
          || ua.address
          || '——'
          || ua.receive_name
          || '——'
          || ua.postcode
          || DECODE (ua.status, '0', '——未审核')
     FROM user_addresses ua
    WHERE ua.status NOT IN (2, 3);

-- ----------------------------
-- View structure for V_SETTLEMENT_WAIT_AUCTION
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_SETTLEMENT_WAIT_AUCTION" AS 
SELECT Distinct au.id,                                 /*待结算拍品查询  @author liu.jing*/
          au.auction_no,
          au.name,
          au.contract_id,
          DECODE (
             au.status,
             '0', '未上挂',
             '10', '未预展',
             '1', '预展中',
             '2', '竞拍中',
             '3', DECODE (uos.status,
                          '0', '未支付',
                          '1', '已支付(含退货失败)',
                          '2', '不支付',
                          '4', '有理由不支付',
                          '5', '无理由不支付'),
             '7', '退货成功',
             '8', '已退拍',
             '6', '已流拍',
             '11', '有理由撤拍',
             '12', '无理由撤拍')
             AS auctionsStatus,
          DECODE (
             au.status,
             '3', DECODE (uos.status,
                          '1', 'AUCTION_PAID',                           --已支付
                          '2', 'AUCTION_NOT_PAID',                       --不支付
                          '4', 'AUCTION_NOT_PAID',                    --有理由不支付
                          '5', 'AUCTION_NOT_PAID'),                   --无理由不支付
             '7', 'AUCTION_RETURNED',                                    --已退货
             '8', 'AUCTION_OFF_LIST',                                    --已退拍
             '6', 'AUCTION_NOT_SOLD',                                    --已流拍
             '11', 'AUCTION_CANCELED',                                 --有理由撤拍
             '12', 'AUCTION_NO_REASON_CANCELED')                       --无理由撤拍
             AS settlement_status,
          au.status,
          au.resale_status,
          DECODE (au.initial_price, NULL, 0, au.initial_price) initial_price,
          CASE
             WHEN au.status = '7'
             THEN
                0.00
             WHEN au.status = '3'
             THEN
                CASE
                   WHEN uos.status = '2' THEN 0.00
                   WHEN uos.status = '4' THEN 0.00
                   WHEN uos.status = '5' THEN 0.00
                   ELSE DECODE (au.end_price, NULL, 0, au.end_price)
                END
             ELSE
                DECODE (au.end_price, NULL, 0, au.end_price)
          END
             end_price,
          au.start_at,
          au.end_at,
          uos.pay_date,
          au.preview_at,
          au.return_at,
          au.cancel_at,
          au.upload_at,
          DECODE (afs.onload_fee, NULL, 0, afs.onload_fee) onload_fee,
          afs.charge_fee_type,
          DECODE (afs.charge_fee_percent, NULL, 0, afs.charge_fee_percent)
             charge_fee_percent,
          DECODE (afs.charge_price, NULL, 0, afs.charge_price) charge_price,
          afs.insure_fee_type,
          DECODE (afs.insure_fee_percent, NULL, 0, afs.insure_fee_percent)
             insure_fee_percent,
          afs.insure_fee_props,
          DECODE (afs.insure_price, NULL, 0, insure_price) insure_price,
          DECODE (afs.custody_day_fee, NULL, 0, custody_day_fee)
             custody_day_fee,
          afs.free_custody_days,
          afs.onload_fee_type,
          con.user_id,
          con.user_name,
          con.user_lang,
          con.sign_date,
          au.auction_category_id,
          (select ac.wait_sett_day from auction_categories ac where ac.id = au.auction_category_id) wait_sett_day
     FROM auctions au
          JOIN auction_fees afs
             ON au.id = afs.auction_id
          JOIN contracts con
             ON au.contract_id = con.id
          LEFT JOIN user_orders uos
             ON au.id = uos.auction_id
          left join contract_details cd on con.id = cd.contract_id
      left join client_category_path ccp on ccp.category_id=au.auction_category_id
    WHERE (au.settlement_status = 2   and cd.status = 13) or  (au.status IN (6,8,11,12) and ccp.root_category_id=520 AND au.settlement_status IN (0,2))    /*待结算*/;

-- ----------------------------
-- View structure for V_SETTLEMENT_WAIT_NOT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_SETTLEMENT_WAIT_NOT" AS 
SELECT au.id,                               /**不可结算拍品查询  @author liu.jing*/
          au.auction_no,
          au.name,
          F_SETTLEMENT_AUCTION_STATUS (au.status, uo.status) AS status_name,
          au.status aution_status,
          au.settlement_status,
          uo.status order_status,
          uo.is_freeze,
          uo.user_refund_id,
          au.contract_id,
          au.end_price,
          au.end_at,
          au.remarks,
          uo.id order_id,
          uo.freeze_date,
          au.return_reason,
          au.cancel_at,
          uo.never_pay_date,
          uo.nonpay_reason
     FROM auctions au LEFT JOIN user_orders uo ON au.id = uo.auction_id;

-- ----------------------------
-- View structure for V_STATEMENT_DETAIL
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_STATEMENT_DETAIL" AS 
SELECT BillID ID,
          ONH_PMS_NO,                                            /*PMS系统发货单号*/
          ONH_TELEPHONE,                                              /*固定电话*/
          ONH_CONSIGNEE,                                               /*收货人*/
          ONH_REC_AREA,                                              /* 收货地区*/
          ONH_MOBILE,                                                 /*手机号码*/
          ONH_rec_address,                                           /* 收货地址*/
          ONH_AMOUNT_INSURED,                                       /* 保价总金额*/
          ONH_INSURANCE_FEE,                                           /*保价费*/
          ONH_IS_FREE_POSTAGE,                                       /*是否免邮资*/
          ONH_REMAINING_SUM,                                        /*客户账号余额*/
          ONH_APPLIER_ID,                                             /*客户编号*/
          ONH_APPLIER_NAME,                                           /*客户姓名*/
          ONH_Zip_Code,                                             /* 收货人邮编*/
          ONH_IS_insured,                                             /*是否保价*/
          tras.code AS TRAS_CODE,
          tras.name AS TRAS_NAME,
          carrier.code AS CARRIER_CODE,
          carrier.name AS CARRIER_NAME
     FROM wm_outbound_notice_header outbound
          LEFT JOIN cp_lookup_line tras
             ON outbound.ONH_TRAS_WAY = tras.id
          LEFT JOIN cp_lookup_line carrier
             ON outbound.ONH_CARRIER = carrier.id;

-- ----------------------------
-- View structure for V_TRADE_CONTRACT_UNPAIDORDERS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_TRADE_CONTRACT_UNPAIDORDERS" AS 
SELECT                                      /*合同未支付汇总  @author chengyufen*/
         c.id contract_id,                                             /*合同号*/
          c.user_id consign_id,                                      /*委托方编号*/
          c.user_name consign_name,                                  /*委托方姓名*/
          c.user_level,
          (SELECT COUNT (a.id) auction_num
             FROM auctions a
            WHERE a.contract_id = c.id)
             auction_num,
          (SELECT d.upload_date
             FROM contract_details d
            WHERE d.contract_id = c.id)
             upload_date,
          va.unpaid_num,
          va.unpaid_total_amount,                                 /*未支付交易单总额*/
          ca.overpaid_num,                                          /*超期交易单数*/
          ca.overpaid_total_amount,                                /*超期交易单总额*/
          ca.early_overpaid_date                                    /*最早超期时间*/
     FROM (  SELECT COUNT (*) unpaid_num,
                    SUM (f.total_amount) unpaid_total_amount,
                    f.contract_id
               FROM user_orders f
              WHERE f.status = 0 AND f.is_freeze = 0
           GROUP BY f.contract_id) va
          LEFT JOIN (  SELECT COUNT (*) overpaid_num,
                              SUM (u.total_amount) overpaid_total_amount,
                              MIN (u.limit_pay_date) early_overpaid_date,
                              u.contract_id
                         FROM user_orders u
                        WHERE     u.limit_pay_date < SYSDATE
                              AND u.is_freeze = 0
                              AND u.status = 0
                     GROUP BY u.contract_id) ca
             ON (ca.contract_id = va.contract_id)
          LEFT JOIN contracts c
             ON c.id = va.contract_id;

-- ----------------------------
-- View structure for V_TRADE_CUSTOMER_UNPAIDORDER
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_TRADE_CUSTOMER_UNPAIDORDER" AS 
SELECT                                      /*客户未支付汇总  @author chengyufen*/
         u.id buyer_id,
          u.true_name buyer_name,
          u.account accounts,
          u.buy_level buy_level,
          u.sell_level sell_level,
          (SELECT d.tel
             FROM user_details d
            WHERE d.user_id = u.id)
             tel,
          (SELECT d.mobile_tel
             FROM user_details d
            WHERE d.user_id = u.id)
             mobile_tel,
          (SELECT COUNT (1) num
             FROM contracts c
            WHERE c.user_id = u.id)
             sell_counts,
          uo.unpaid_num,
          uo.unpaid_total_amount,
          DECODE (us.overpaid_num, NULL, 0, us.overpaid_num) overpaid_num,
          us.overpaid_total_amount,
          us.early_overpaid_date,
          (SELECT vip.service_op_name
             FROM vipusers vip
            WHERE vip.user_id = u.id)
             serviceOpName
     FROM (  SELECT COUNT (1) AS unpaid_num,
                    a.user_id,
                    SUM (a.total_amount) AS unpaid_total_amount
               FROM user_orders a
              WHERE a.status = '0' AND a.is_freeze = '0'
           GROUP BY a.user_id) uo
          LEFT JOIN (  SELECT COUNT (uo.id) AS overpaid_num,
                              SUM (uo.total_amount) AS overpaid_total_amount,
                              MIN (uo.limit_pay_date) AS early_overpaid_date,
                              uo.user_id
                         FROM user_orders uo
                        WHERE     uo.status = '0'
                              AND uo.is_freeze = '0'
                              AND uo.limit_pay_date < SYSDATE
                     GROUP BY uo.user_id) us
             ON us.user_id = uo.user_id
          LEFT JOIN users u
             ON u.id = uo.user_id;

-- ----------------------------
-- View structure for V_TRADE_PAYNOTDELIVER_ORDER
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_TRADE_PAYNOTDELIVER_ORDER" AS 
SELECT ORDER_ID,
          contract_id,
          AUCTION_NO,
          AUCTION_ID,
          AUCTION_NAME,
          category_name,
          decode(CHARACTER_NAME,null,'无',CHARACTER_NAME) CHARACTER_NAME,
          category_id,
          BUYER_ID,
          BUYER_NAME,
          TOTAL_AMOUNT,
          CREATED_AT,
          PAY_DATE,
          user_lang,
          refund_status,
          buy_logistic_status,
          charge_rate,
          wait_charges,
          completed_charges,
          va.name,
          va.id
     FROM (SELECT U.ID ORDER_ID,
                  u.contract_id,
                  U.AUCTION_NO,
                  U.AUCTION_ID,
                  U.AUCTION_NAME,
                  aus.auction_category_id category_id,
                  (SELECT c.name
                     FROM auction_categories c
                    WHERE c.id = aus.auction_category_id)
                     category_name,
                  (select name from AUCTION_CHARACTERS where id=aus.AUCTION_CHARACTER_ID) CHARACTER_NAME,
                  U.USER_ID BUYER_ID,
                  U.USER_NAME BUYER_NAME,
                  U.TOTAL_AMOUNT,
                  U.CREATED_AT,
                  U.PAY_DATE,
                  u.logistic_detail_id,
                  (SELECT o.user_lang
                     FROM users o
                    WHERE o.id = u.user_id)
                     user_lang,
                  DECODE (f.status,
                          '', '正常发货',
                          '8', '退货失败发货')
                     AS refund_status,
                  (SELECT us.buy_logistic_status
                     FROM users us
                    WHERE us.id = u.user_id)
                     buy_logistic_status,
                  d.logistic_lading_id,
                  g.charge_rate,
                  g.wait_charges,
                  g.completed_charges,
                  st.name,
                  st.id
             FROM user_orders u
                  LEFT JOIN storage_wait_charges g
                     ON u.id = g.user_order_id
                  LEFT JOIN user_refunds f
                     ON u.auction_id = f.auction_id
                  LEFT JOIN logistic_lading_details d
                     ON u.auction_id = d.auction_id
                  LEFT JOIN v_wms_logisticstatus_info lg
                     ON lg.auctionNo = u.auction_no
                  LEFT JOIN AUCTIONS aus
                     on aus.id = u.auction_id
                  LEFT JOIN STORAGES st
                     on st.id=aus.storage_id
            WHERE     u.status = 1
                  AND u.is_freeze = 0
                  AND lg.logisticStatus IN (1, 2, 10, 13)
                  AND f.id IS NULL
                  AND u.logistic_detail_id IS NULL
                  AND (d.logistic_lading_id IS NULL
                       OR (d.logistic_lading_id > 0 AND lg.logisticStatus = 1))) va
    WHERE 1 = 1;

-- ----------------------------
-- View structure for V_TRADE_PAYNOTDELIVER_ORDER_1
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_TRADE_PAYNOTDELIVER_ORDER_1" AS 
select ORDER_ID,contract_id,
           AUCTION_NO,
           AUCTION_NAME,
           category_name,
           BUYER_ID,
           BUYER_NAME,
           TOTAL_AMOUNT,
           CREATED_AT,
           PAY_DATE,
           user_lang,
           refund_status,
           buy_logistic_status,
           charge_rate,wait_charges,completed_charges
      from (SELECT U.ID ORDER_ID,
                   u.contract_id,
                   U.AUCTION_NO,
                   U.AUCTION_NAME,
                   (select c.name
                      from auction_categories c
                     where c.id = (select au.auction_category_id
                                     from auctions au
                                    where au.id = u.auction_id)) category_name,
                   U.USER_ID BUYER_ID,
                   U.USER_NAME BUYER_NAME,
                   U.TOTAL_AMOUNT,
                   U.CREATED_AT,
                   U.PAY_DATE,
                   u.logistic_detail_id,
                   (select o.user_lang from users o where o.id = u.user_id) user_lang,
                   decode(f.status, '', '正常发货', '8', '退货失败发货') as refund_status,
                  (select us.buy_logistic_status from users us where us.id = u.user_id) buy_logistic_status,
                   d.logistic_lading_id,g.charge_rate,g.wait_charges,g.completed_charges
              from user_orders u
              left join storage_wait_charges g on u.id = g.user_order_id
              left join user_refunds f on u.auction_id=f.auction_id
              left join logistic_lading_details d on u.auction_id = d.auction_id
              left join v_wms_logisticstatus_info lg on lg.auctionNo=u.auction_no
             where u.status = 1
               and u.is_freeze = 0
               and lg.logisticStatus in (1,2,10,13)
               and f.id is null
               and u.logistic_detail_id is null
               and (d.logistic_lading_id is null or (d.logistic_lading_id>0 and lg.logisticStatus=1))
           ) va
     where 1 = 1;

-- ----------------------------
-- View structure for V_USERORDER_QUERY
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_USERORDER_QUERY" AS 
SELECT                                      /**交易单查询   @author chengyufen*/
         u.id order_id,
          u.user_id buyer_id,
          u.user_name buyer_name,
          u.total_amount,
          u.status,
          (ROUND (
              TO_NUMBER (SYSDATE - u.limit_pay_date) * 24 * 60 * 60 * 1000))
             over_status,
          u.auction_no,
          u.auction_name,
          u.contract_id,
          u.created_at,
          u.limit_pay_date,
          u.is_freeze,
          u.admin_name,
          (SELECT ul.remarks
             FROM user_lists ul
            WHERE ul.user_id = u.user_id AND ul.list_type = '0')
             remarks,
          (SELECT user_lang
             FROM users s
            WHERE s.id = u.user_id)
             user_lang,
          u.logistic_detail_id,
          (SELECT g.id
             FROM logistics g
            WHERE g.id = d.logistic_id)
             logistic_id,
          (SELECT g.transmit_id
             FROM logistics g
            WHERE g.id = d.logistic_id)
             transmit_id,
          (SELECT g.logistic_type_id
             FROM logistics g
            WHERE g.id = d.logistic_id)
             logisticTypeId,
          ld.logistic_lading_id logisticLadingId,
          ld.logisticStatusName logisticLadingStatus,
          f.status refund_status,
          f.id refund_id,
          linf.logisticStatus lstatus,
          linf.logisticStatusName lstatusName,
          CASE
             WHEN (SELECT COUNT (1)
                     FROM v_wms_logisticstatus_info logis
                    WHERE logis.auctionNo = u.auction_no) > 1
             THEN
                (SELECT logis.logisticStatus
                   FROM v_wms_logisticstatus_info logis
                  WHERE logis.auctionNo = u.auction_no AND ROWNUM = 2)
             ELSE
                (SELECT logis.logisticStatus
                   FROM v_wms_logisticstatus_info logis
                  WHERE logis.auctionNo = u.auction_no)
          END
             aucLogisticStatus,
          c.charge_rate,
          c.wait_charges,
          c.completed_charges,
          au.auction_category_id,
          ac.name ||'(' || au.auction_category_id || ')' AS auction_category_id_str,
		  vlogis.logisticstatusname,
      ast.is_free_market
     FROM user_orders u
          LEFT JOIN storage_wait_charges c
             ON u.id = c.user_order_id
          LEFT JOIN logistic_details d
             ON u.logistic_detail_id = d.id
          LEFT JOIN v_wms_log_order_status_info linf
             ON linf.logisticId = d.logistic_id
          LEFT JOIN user_refunds f
             ON u.user_refund_id = f.id
          LEFT JOIN (SELECT d.logistic_lading_id,
                            logis.logisticStatus,
                            logis.logisticStatusName,
                            d.auction_id
                       FROM logistic_lading_details d,
                            v_wms_log_order_status_info logis
                      WHERE d.logistic_lading_id = logis.logisticId) ld
             ON u.auction_id = ld.auction_id
           LEFT JOIN auctions au ON u.auction_no=au.auction_no
           LEFT JOIN auction_categories ac ON au.auction_category_id=ac.id
       LEFT JOIN  v_wms_logisticstatus_info vlogis on au.auction_no = vlogis.auctionno
       left join auction_special_topics ast on ast.id=au.auction_special_topic_id;

-- ----------------------------
-- View structure for V_USERORDER_QUERY_1
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_USERORDER_QUERY_1" AS 
select  /**交易单查询   @author chengyufen*/
             u.id order_id,
             u.user_id buyer_id,
             u.user_name buyer_name,
             u.total_amount,
             u.status,
             (round(to_number(sysdate - u.limit_pay_date) * 24 * 60 * 60 * 1000)) over_status,
             u.auction_no,
             u.auction_name,
             u.contract_id,
             u.created_at,
             u.limit_pay_date,
             u.is_freeze,
             u.admin_name,
             (select ul.remarks
                from user_lists ul
               where ul.user_id = u.user_id
                 and ul.list_type = '0') remarks,
             (select user_lang from users s where s.id = u.user_id) user_lang,
             u.logistic_detail_id,
             (select g.id
                from logistics g
               where g.id = d.logistic_id) logistic_id,

             (select g.transmit_id
                        from logistics g
                       where g.id = d.logistic_id) transmit_id,

             (select g.logistic_type_id
                        from logistics g
                       where g.id = d.logistic_id) logisticTypeId,

             ld.logistic_lading_id logisticLadingId,
             ld.logisticStatusName logisticLadingStatus,
             f.status refund_status,
             f.id refund_id,
             linf.logisticStatus lstatus,
             linf.logisticStatusName lstatusName,
             case when (select count(1) from v_wms_logisticstatus_info logis
                               where logis.auctionNo=u.auction_no)>1 then
                       (select logis.logisticStatus from v_wms_logisticstatus_info logis
                               where logis.auctionNo=u.auction_no and rownum=2)
                 else (select logis.logisticStatus from v_wms_logisticstatus_info logis
                               where logis.auctionNo=u.auction_no)
                 end aucLogisticStatus,
                 c.charge_rate,c.wait_charges,c.completed_charges
        from user_orders u
        left join storage_wait_charges c on u.id = c.user_order_id
        left join logistic_details d on u.logistic_detail_id=d.id
        left join v_wms_log_order_status_info linf on linf.logisticId = d.logistic_id
        left join user_refunds f on u.user_refund_id = f.id
        left join (select d.logistic_lading_id,logis.logisticStatus,logis.logisticStatusName,d.auction_id
                        from logistic_lading_details d,
                             v_wms_log_order_status_info logis
                       where d.logistic_lading_id = logis.logisticId
                    ) ld on u.auction_id=ld.auction_id;

-- ----------------------------
-- View structure for V_WMS_LEND_STATUS_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_WMS_LEND_STATUS_INFO" AS 
SELECT le.id lendId,                                               /*临借单号*/
          (CASE                                         /*临借单中根据临借单ID查询临借单状态*/
              WHEN le.status = '1'
              THEN
                 '1'
              WHEN le.status = '2'
              THEN
                 '2'
              WHEN     le.status = '3'
                   AND outLend.status = 10
                   AND outLend.MSCH_LEND_DIRECTION = '1'
              THEN
                 '3'
              WHEN le.status = '4'
              THEN
                 '4'
              WHEN     outLend.MSCH_LEND_DIRECTION = '1'
                   AND outLend.status = 90
                   AND le.status != '7'
                   AND inLend.status IS NULL
              THEN
                 '6'
              WHEN le.status = '7' AND inLend.status IS NULL
              THEN
                 '7'
              WHEN le.status = '8' AND inLend.status != 90
              THEN
                 '8'
              WHEN inLend.status = 90
              THEN
                 '9'
           END)
             lendStatus                                              /*临借单状态*/
                       ,
          (CASE
              WHEN le.status = '1'
              THEN
                 '申请中'
              WHEN le.status = '2'
              THEN
                 'ERP已拒绝'
              WHEN     le.status = '3'
                   AND outLend.status = 10
                   AND outLend.MSCH_LEND_DIRECTION = '1'
              THEN
                 'ERP已受理'
              WHEN le.status = '4'
              THEN
                 'ERP已取消'
              WHEN     outLend.MSCH_LEND_DIRECTION = '1'
                   AND outLend.status = 90
                   AND le.status != '7'
                   AND inLend.status IS NULL
              THEN
                 'WMS已借出'
              WHEN le.status = '7' AND inLend.status IS NULL
              THEN
                 'ERP已确认借出'
              WHEN le.status = '8' AND inLend.status != 90
              THEN
                 'ERP已归还'
              WHEN inLend.status = 90
              THEN
                 'WMS已确认归还'
           END)
             lendStatusName,                                        /*临借单状态值*/
          outLend.MSCH_CONFIRM_DATETIME confirmDateTime
     FROM lends le
          LEFT JOIN (SELECT MSCH_CHANGE_NO_SRC,
                            STATUS,
                            MSCH_LEND_DIRECTION,
                            MSCH_CONFIRM_DATETIME
                       FROM WM_MAT_STATUS_CHANGE_HEADER
                      WHERE MSCH_LEND_DIRECTION IN ('1', '3')) outLend
             ON TO_CHAR (le.id) = outLend.MSCH_CHANGE_NO_SRC
          LEFT JOIN (SELECT MSCH_CHANGE_NO_SRC, STATUS, MSCH_LEND_DIRECTION
                       FROM WM_MAT_STATUS_CHANGE_HEADER
                      WHERE MSCH_LEND_DIRECTION = '2') inLend
             ON TO_CHAR (le.id) = inLend.MSCH_CHANGE_NO_SRC;

-- ----------------------------
-- View structure for V_WMS_LOG_ORDER_STATUS_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_WMS_LOG_ORDER_STATUS_INFO" AS 
SELECT OUTBOUND.ONH_PMS_NO LOGISTICID                           /*PMS物流单号*/
                                        ,
          (CASE
              WHEN OUTBOUND.ONH_ORDER_STATUS = 2
              THEN
                 '1'
              WHEN OUTBOUND.ONH_ORDER_STATUS = 3
              THEN
                 '2'
              WHEN OUTBOUND.ONH_ORDER_STATUS = 4
              THEN
                 '3'
              WHEN OUTBOUND.STATUS = 10 AND OUTBOUND.ONH_BLIND_SEND != 1
              THEN
                 '0'
              WHEN OUTBOUND.STATUS = 20 AND OUTBOUND.ONH_BLIND_SEND != 1
                   OR (OUTBOUND.STATUS = 100 AND PICK.PKH_CHECK_STATUS = 0)
              THEN
                 '4'
              WHEN (    PICK.PKH_CHECK_STATUS = 1
                    AND OUTBOUND.ONH_BLIND_SEND != 1
                    AND (SHIP.STATUS = 10 OR SHIP.STATUS IS NULL))
              THEN
                 '5'
              WHEN (SHIP.STATUS = 90) OR OUTBOUND.ONH_BLIND_SEND = 1
              THEN
                 '6'
           END)
             LOGISTICSTATUS                                           /*物流状态*/
                           ,
          (CASE
              WHEN OUTBOUND.ONH_ORDER_STATUS = 2
              THEN
                 '已暂缓'
              WHEN OUTBOUND.ONH_ORDER_STATUS = 3
              THEN
                 '已退货'
              WHEN OUTBOUND.ONH_ORDER_STATUS = 4
              THEN
                 '取消发货'
              WHEN OUTBOUND.STATUS = 10 AND OUTBOUND.ONH_BLIND_SEND != 1
              THEN
                 '待处理'
              WHEN OUTBOUND.STATUS = 20 AND OUTBOUND.ONH_BLIND_SEND != 1
                   OR (OUTBOUND.STATUS = 100 AND PICK.PKH_CHECK_STATUS = 0)
              THEN
                 '出库中'
              WHEN (    PICK.PKH_CHECK_STATUS = 1
                    AND OUTBOUND.ONH_BLIND_SEND != 1
                    AND (SHIP.STATUS = 10 OR SHIP.STATUS IS NULL))
              THEN
                 '已检验'
              WHEN (SHIP.STATUS = 90) OR OUTBOUND.ONH_BLIND_SEND = 1
              THEN
                 '已发货'
           END)
             LOGISTICSTATUSNAME,                                     /*物流状态值*/
          OUTBOUND.ONH_ORDER_DATETIME AS WAITING_TIME,               /*待处理时间*/
          (SELECT DELEY.SUH_PICKED_TIME
             FROM SCM_OUTBOUNDDELAYHEAD DELEY
            WHERE     DELEY.SUH_PMS_NO = OUTBOUND.ONH_PMS_NO
                  AND DELEY.SUH_ORDER_STATUS = '1'
                  AND ROWNUM = 1)
             AS PENDING_TIME,                                         /*暂缓时间*/
          '' AS CANCEL_TIME,                                        /*取消发货时间*/
          PICK.PKH_PICKED_TIME AS PROCESS_TIME,                      /*出库中时间*/
          PICK.PKH_E_CHECKED_TIME AS CHECKED_TIME,                   /*已检验时间*/
          SHIP.EDITDATE AS SEND_TIME,                                /*已发货时间*/
          OUTBOUND.onh_applier_id userId
     FROM WM_OUTBOUND_NOTICE_HEADER OUTBOUND,
          WM_PICK_HEADER PICK,
          WM_SHIP_HEADER SHIP
    WHERE OUTBOUND.ONH_NOTICE_NO = PICK.PKH_NOTICE_NO(+)
          AND PICK.PKH_PICK_NO = SHIP.SH_PICK_NO(+);

-- ----------------------------
-- View structure for V_WMS_LOGISTICSTATUS_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."V_WMS_LOGISTICSTATUS_INFO" AS 
select to_number(INL_LOT_STRING1) auctionNo /*拍品编号*/,
               INL_LOGISTICS_STATUS logisticStatus /*拍品物流状态*/,
               decode(INL_LOGISTICS_STATUS,
                      '1',
                      '已入库',
                      '2',
                      '退货入库',
                      '3',
                      '待入库',
                      '4',
                      '退货待入库',
                      '5',
                      '待出库',
                      '6',
                      '已出库',
                      '7',
                      '已检验',
                      '8',
                      '已发货',
                      '9',
                      '已暂缓',
                      '10',
                      '已借出',
                      '11',
                      '出库中',
                      '12',
                      '取消暂缓处理中','13','已申请临借') logisticStatusName /*拍品物流状态值*/
          from WM_INBOUND_NOTICE_LINE
         where INL_LOGISTICS_STATUS>=0 and ce=1;

-- ----------------------------
-- View structure for 原版本
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ZHAO"."原版本" AS 
SELECT "ID","AUCTION_NO","END_AT","SOURCE_TYPE","NAME","NAME_GBK","STATUS","USER_ID","AUCTION_CATEGORY_ID","AUCTION_SPECIAL_TOPIC_ID","CONTRACT_ID","PIC_PATH","END_PRICE","FEE","SETTLEMENT_STATUS" FROM (
SELECT A.ID,
       A.AUCTION_NO,
       DECODE(A.STATUS,
              '4',
              A.CANCEL_AT,
              '11',
              A.CANCEL_AT,
              '12',
              A.CANCEL_AT,
              '8',
              A.RETURN_AT,
              A.END_AT) END_AT,
       '2' AS SOURCE_TYPE,
       A.NAME,
       A.NAME_GBK,
       DECODE(A.STATUS,
              '4',
              '撤拍',
              '6',
              '流拍',
              '8',
              '退拍',
              '11',
              '撤拍',
              '12',
              '撤拍') AS STATUS,
       C.USER_ID,
       A.AUCTION_CATEGORY_ID,
       A.AUCTION_SPECIAL_TOPIC_ID AS AUCTION_SPECIAL_TOPIC_ID,
       C.ID AS CONTRACT_ID,
       A.PIC_PATH,
       A.INITIAL_PRICE AS END_PRICE,
       (SD.AC_CHARGE+SD.AC_CUSTODY+SD.AC_ONLOAD+SD.AC_INSURE) AS FEE,
       decode(A.SETTLEMENT_STATUS,'1','1','0') SETTLEMENT_STATUS,
       S.CODE AS STORAGE_CODE
  FROM AUCTIONS A
       JOIN CONTRACTS C ON A.CONTRACT_ID=C.ID
       JOIN V_WMS_LOGISTICSTATUS_INFO L ON A.AUCTION_NO=L.auctionNo
       LEFT JOIN SETTLEMENT_DETAILS SD ON SD.AUCTION_ID=A.ID
       LEFT JOIN STORAGES S ON A.STORAGE_ID = S.ID
 WHERE L.logisticStatus IN ('1','2')
   AND A.STATUS IN ('4', '6', '8', '11', '12')
   UNION ALL
SELECT A.ID,
       A.AUCTION_NO,
       O.NEVER_PAY_DATE AS END_AT,
       '2' AS SOURCE_TYPE,
       A.NAME,
       A.NAME_GBK,
       DECODE(O.STATUS,
              '2',
              '不支付',
              '4',
              '不支付',
              '5',
              '不支付'),
       C.USER_ID,
       A.AUCTION_CATEGORY_ID,
       A.AUCTION_SPECIAL_TOPIC_ID AS AUCTION_SPECIAL_TOPIC_ID,
       C.ID AS CONTRACT_ID,
       A.PIC_PATH,
       O.END_PRICE,
       0 AS FEE,
       decode(A.SETTLEMENT_STATUS,'1','1','0') SETTLEMENT_STATUS,
       S.CODE AS STORAGE_CODE
  FROM AUCTIONS A, CONTRACTS C, USER_ORDERS O, V_WMS_LOGISTICSTATUS_INFO L, STORAGES S
 WHERE A.ID = O.AUCTION_ID
   AND A.CONTRACT_ID = C.ID
   AND A.AUCTION_NO=L.auctionNo
   AND L.logisticStatus IN ('1','2')
   AND O.STATUS IN ('2', '4', '5')
   AND a.SETTLEMENT_STATUS = '1'
   AND O.IS_FREEZE = 0
   AND A.STORAGE_ID = S.ID
   UNION ALL
SELECT A.ID,
       A.AUCTION_NO,
       UR.COMPLETE_AT END_AT,
       '2' AS SOURCE_TYPE,
       A.NAME,
       A.NAME_GBK,
       DECODE(A.SETTLEMENT_STATUS,'1','不支付','未结算'),
       C.USER_ID,
       A.AUCTION_CATEGORY_ID,
       A.AUCTION_SPECIAL_TOPIC_ID AS AUCTION_SPECIAL_TOPIC_ID,
       C.ID AS CONTRACT_ID,
       A.PIC_PATH,
       A.END_PRICE,
       0 AS FEE,
       DECODE(A.SETTLEMENT_STATUS,'1' , '1', '0') AS SETTLEMENT_STATUS,
       S.CODE AS STORAGE_CODE
  FROM AUCTIONS A, USER_REFUNDS UR, CONTRACTS C,V_WMS_LOGISTICSTATUS_INFO L, STORAGES S
 WHERE A.CONTRACT_ID = C.ID
   AND UR.AUCTION_ID = A.ID
   AND A.AUCTION_NO=L.auctionNo
   AND A.STORAGE_ID = S.ID
   AND UR.STATUS = 9
   AND ur.SETTLEMENT_STATUS = '0'
   AND A.SETTLEMENT_STATUS = '1'
   AND L.logisticStatus IN ('1','2')) T
   WHERE NOT EXISTS
 (SELECT 1
          FROM USER_LOANS A
         WHERE instr(',' || A.contract_ids || ',',
                     ',' || T.contract_id || ',') > 0
                     and a.status='0');

-- ----------------------------
-- Procedure structure for LIZHENG_FIX_ENGLISH_DELIVERY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."LIZHENG_FIX_ENGLISH_DELIVERY"
(
	P_USER_ID            IN NUMBER,
	p_copy_logistic_id   IN NUMBER,
	p_country_id         IN NUMBER,
	RESULT_STATUS        IN OUT NUMBER,
	v_logistic_id        IN OUT NUMBER,
	v_logistic_detail_id IN OUT NUMBER
) IS
	/*
   * 英文站补发货单 by lizheng 2013.3.19
   *
  */
	v_receive_name      VARCHAR(255);
	v_address           VARCHAR(500);
	v_postcode          VARCHAR(255);
	v_tel               VARCHAR(255);
	v_mobile_tel        VARCHAR(255);
	v_deliver_type_id   NUMBER;
	v_deliver_type_name VARCHAR(500);
	v_item_count        NUMBER;
	v_transmit_fee      NUMBER := 0;
	v_country_id        NUMBER;
	v_address_id        NUMBER;
BEGIN
	SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM dual;
	SELECT LOGISTIC_DETAILS_SEQ.NEXTVAL INTO v_logistic_detail_id FROM dual;

	SELECT COUNT(*)
		INTO v_item_count
		FROM user_orders
	 WHERE user_id = P_USER_ID
		 AND logistic_detail_id IS NULL
		 AND user_payment_id IS NOT NULL;

	SELECT (SELECT DECODE(U.TRUE_NAME, NULL, U.NICKNAME, U.TRUE_NAME)
						FROM USERS U
					 WHERE ID = P_USER_ID),
				 L.ADDRESS,
				 L.POSTCODE,
				 d.USER_ADDRESS_ID,
				 L.TEL,
				 L.MOBILE_TEL,
				 L.LOGISTIC_TYPE_ID,
				 lt.NAME_EN,
				 d.COUNTRY_ID
		INTO v_receive_name,
				 v_address,
				 v_postcode,
				 v_address_id,
				 v_tel,
				 v_mobile_tel,
				 v_deliver_type_id,
				 v_deliver_type_name,
				 v_country_id
		FROM LOGISTIC_DETAILS D
		JOIN LOGISTICS L ON (D.LOGISTIC_ID = L.ID)
		JOIN FOREIGN_DELIVER_TYPES lt ON lt.id = l.LOGISTIC_TYPE_ID
	 WHERE l.ID = p_copy_logistic_id
		 AND ROWNUM = 1;

	IF p_country_id > 0 THEN
		BEGIN
			BEGIN
				SELECT F.FEE
					INTO v_transmit_fee
					FROM FOREIGN_DELIVER_TYPES T
					JOIN DELIVER_REGIONS R ON (T.ID = R.FOREIGN_DELIVER_ID)
					JOIN DELIVER_FEE F ON (T.ID = F.FOREIGN_DELIVER_ID AND
																R.DELIVER_REGION = F.DELIVER_REGION)
				 WHERE T.ID = v_deliver_type_id
					 AND R.COUNTRY_ID = p_country_id;

			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					RESULT_STATUS := 6;
					ROLLBACK;
					RETURN;
			END;
		END;
	END IF;

	INSERT INTO LOGISTIC_DETAILS
		(ID,
		 USER_ID,
		 STATUS,
		 CREATED_AT,
		 logistic_id,
		 old_logistic_id,
		 REMARKS,
		 DELIVERY_TYPE,
		 LOGISTIC_TYPE_ID,
		 USER_ADDRESS_ID,
		 COUNTRY_ID)
	VALUES
		(v_logistic_detail_id,
		 P_USER_ID,
		 5,
		 SYSDATE,
		 v_logistic_id,
		 v_logistic_id,
		 v_deliver_type_name || ' Paid: ' || v_transmit_fee,
		 '1',
		 v_deliver_type_id,
		 v_address_id,
		 v_country_id);

	INSERT INTO LOGISTICS
		(ID,
		 USER_ID,
		 USER_NAME,
		 ADDRESS,
		 POSTCODE,
		 TEL,
		 MOBILE_TEL,
		 STATUS,
		 REGION_ID,
		 LOGISTIC_TYPE_ID,
		 POSTAGE,
		 TOTAL_FEE,
		 USER_ADDRESS_ID,
		 ITEMS_COUNT,
		 CREATED_AT)
	VALUES
		(v_logistic_id,
		 P_USER_ID,
		 v_receive_name,
		 v_address,
		 v_postcode,
		 v_tel,
		 v_mobile_tel,
		 '5',
		 '3',
		 v_deliver_type_id,
		 v_transmit_fee,
		 v_transmit_fee,
		 v_address_id,
		 v_item_count,
		 SYSDATE);

	UPDATE user_orders
		 SET logistic_detail_id = v_logistic_detail_id
	 WHERE user_id = p_user_id
		 AND logistic_detail_id IS NULL;

	RESULT_STATUS := 0;

END LIZHENG_FIX_ENGLISH_DELIVERY;


 
/

-- ----------------------------
-- Procedure structure for LIZHENG_FIX_MONEY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."LIZHENG_FIX_MONEY"
(
	flow_id       IN NUMBER,
	related_id    IN NUMBER,
	P_PAY_TYPE    IN VARCHAR,
	RESULT_status IN OUT NUMBER
) IS

	v_source_id    NUMBER;
	v_source_type  VARCHAR2(255);
	V_REMARK       VARCHAR2(255);
	V_FINANCE_TYPE VARCHAR2(255);
	V_USE_BALANCE  NUMBER;
	v_finance_date DATE;
	v_user_id      NUMBER;
BEGIN
	SELECT source_id, source_type, REMARKS, finance_date
		INTO v_source_id, v_source_type, V_REMARK, v_finance_date
		FROM user_accounts
	 WHERE id = related_id;

	BEGIN
		SELECT money, user_id
			INTO V_USE_BALANCE, v_user_id
			FROM user_accounts
		 WHERE id = flow_id;

		/*余额+IPS支付时,占用的余额部分*/

		IF P_PAY_TYPE = 'IPS' THEN
			V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
		ELSIF P_PAY_TYPE = 'SDO' THEN
			V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
		END IF;

		INSERT INTO USER_ACCOUNTS
			(ID,
			 USER_ID,
			 SOURCE_ID,
			 SOURCE_TYPE,
			 MONEY,
			 FINANCE_TYPE,
			 FINANCE_DATE,
			 REMARKS,
			 CREATED_AT,
			 ACCOUNT_OLD,
			 ACCOUNT_NEW,
			 DIRECTION,
			 STATUS)
		VALUES
			(USER_ACCOUNTS_SEQ.NEXTVAL,
			 V_USER_ID,
			 v_source_id,
			 v_source_type,
			 V_USE_BALANCE, /*edit by zhangyi 加上 定金部分*/
			 V_FINANCE_TYPE, --余额+第三方支付时余额部分
			 SYSDATE,
			 V_REMARK || ',支付异常,补扣', --IPS/SDO
			 --'+余额:' || V_USE_BALANCE || '支付', --IPS/SDO
			 SYSDATE,
			 (SELECT ACCOUNT FROM USERS WHERE ID = V_USER_ID),
			 (SELECT ACCOUNT - V_USE_BALANCE FROM USERS WHERE ID = V_USER_ID),
			 '1', --支出
			 '1'); --余额占用,支付成功需要更新为1,支付失败更新为0

		DELETE FROM USER_ACCOUNTS WHERE id = flow_id;
		/*扣除余额*/
		UPDATE USERS
			 SET ACCOUNT       = ACCOUNT - V_USE_BALANCE,
					 TOTAL_ACCOUNT = TOTAL_ACCOUNT - V_USE_BALANCE
		 WHERE ID = V_USER_ID;
		/*网银+余额支付,余额部分扣除*/
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RESULT_status := 1;
			RETURN;
	END;
	RESULT_status := 0;
	RETURN;

END LIZHENG_FIX_MONEY;


 
/

-- ----------------------------
-- Procedure structure for P_AUCTION_BID_STATISTIC
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_AUCTION_BID_STATISTIC" as
/*
作者：马磊
推送前台每天访问和竞拍最多的拍品
*/
begin
execute immediate 'truncate table auction_bid_statistic';

/*
insert into auction_bid_statistic(
auction_no,
watching_count,
bid_count,
update_time
)
select aa.product_id,
decode(aa.WATCHING,null,0,aa.WATCHING) watching_count,
decode(bb.BID,null,0,bb.BID) bid_count,
sysdate from (
select a.product_id,count(*) WATCHING from web_tracking_system_hist@ZHAODB a
where a.PRODUCT_ID is not null
and exists(
select * from zhao.auctions b
where to_char(b.end_at,'YYYY-MM-DD')>=to_char(sysdate,'YYYY-MM-DD')
and b.auction_type='1'
and to_char(b.auction_no)=a.product_id
)
group by a.product_id
order by WATCHING desc
) aa,
(
select a.product_id,count(*) BID from web_tracking_system_hist@ZHAODB a
where a.JUMP_URL is not null and a.EVENT_TYPE='EVENT_BID'
and a.product_id is not null
and exists(
select * from zhao.auctions b
where to_char(b.end_at,'YYYY-MM-DD')>=to_char(sysdate,'YYYY-MM-DD')
and b.auction_type='1'
and to_char(b.auction_no)=a.product_id
)
group by a.product_id
--order by BID desc
) bb
where aa.product_id=bb.product_id(+);
*/

insert into auction_bid_statistic(
auction_no,
watching_count,
bid_count,
update_time
)
select
(select auction_no from auctions where id=aa.auction_id ) auction_no,
decode(aa.WATCHING,null,0,aa.WATCHING) watching_count,
decode(bb.BID,null,0,bb.BID) bid_count,
sysdate
from (
--出价
select a.auction_id,count(*) BID from auction_prices a where
exists(
select * from auctions b
where to_char(b.end_at,'YYYY-MM-DD')>=to_char(sysdate,'YYYY-MM-DD')
and b.status=2
and id=a.auction_id
)
group by a.auction_id) bb,
(
--关注
select a.auction_id,count(*) WATCHING from user_auctions a where
exists(
select * from auctions b
where to_char(b.end_at,'YYYY-MM-DD')>=to_char(sysdate,'YYYY-MM-DD')
and b.status=2
and id=a.auction_id
)
group by a.auction_id) aa
where bb.auction_id(+)=aa.auction_id;

commit;
end p_auction_bid_statistic;


 
/

-- ----------------------------
-- Procedure structure for P_AUCTION_DELAY_AUDIT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_AUCTION_DELAY_AUDIT"(P_AUCTION_DELAY_ID IN NUMBER,
                                                  P_AUDIT_ID         IN NUMBER,
                                                  P_AUDIT_NAME       IN VARCHAR,
                                                  P_AUDIT_STATUS     IN VARCHAR,
                                                  P_RESULT_STAUTS    OUT NUMBER) IS

  /*
    故障延期审核,通过的情况下删除交易单,返还支付余额
    创建人: 李征
    时间: 2014.04.17
  */

  V_SQL          VARCHAR2(4000);
  V_TOTAL_AMOUNT NUMBER;
  V_DELAY_HOURS  NUMBER;

  CURSOR CANCEL_USER_ORDER(V_DELAY_ID NUMBER) IS
    SELECT P.ID AS PAYMENT_ID, O.USER_ID, SUM(O.TOTAL_AMOUNT) TOTAL_AMOUNT, SUM(END_PRICE) END_PRICE
      FROM USER_ORDERS O, AUCTION_DELAY_DETAILS D, USER_PAYMENTS P
     WHERE O.AUCTION_ID = D.AUCTION_ID
       AND O.USER_PAYMENT_ID = P.ID
       AND D.AUCTION_DELAY_ID = V_DELAY_ID
     GROUP BY P.ID, O.USER_ID;

BEGIN
  P_RESULT_STAUTS := 0;
  UPDATE AUCTION_DELAY SET STATUS = P_AUDIT_STATUS WHERE ID = P_AUCTION_DELAY_ID;
  IF P_AUDIT_STATUS = '1' THEN
    --备份需要取消的交易单
    V_SQL := 'insert into user_order_cancel' ||
             '(id, user_id, user_name, tel, email, pay_date, limit_pay_date, never_pay_date, nonpay_reason, total_amount, end_price, service_charge, actual_charge, contract_id, auction_id, auction_name, auction_no, end_date, is_delay, is_auto_delay, is_freeze, freeze_date, user_payment_id, logistic_detail_id, user_refund_id, admin_id, admin_name, remarks, status, created_at, updated_at, has_collection_certificate, auction_delay_id)' ||
             ' select o.id, o.user_id, o.user_name, tel, email, pay_date, limit_pay_date, never_pay_date, nonpay_reason, total_amount, end_price, service_charge, actual_charge, contract_id, o.auction_id, auction_name, auction_no, end_date, is_delay, is_auto_delay, is_freeze, freeze_date, user_payment_id, logistic_detail_id, user_refund_id, admin_id, admin_name, remarks, o.status, created_at, updated_at, has_collection_certificate,' ||
             P_AUCTION_DELAY_ID ||
             ' from user_orders o, auction_delay_details d where o.auction_id=d.auction_id and d.auction_delay_id=' ||
             P_AUCTION_DELAY_ID;
    EXECUTE IMMEDIATE V_SQL;
    --更新藏品状态,延长结标时间
    SELECT DELAY_HOURS INTO V_DELAY_HOURS FROM AUCTION_DELAY WHERE ID = P_AUCTION_DELAY_ID;
    V_SQL := 'UPDATE AUCTIONS SET STATUS=2,END_AT=END_AT+INTERVAL ''' || V_DELAY_HOURS ||
             ''' HOUR WHERE ID IN (SELECT AUCTION_ID FROM AUCTION_DELAY_DETAILS WHERE AUCTION_DELAY_ID =' ||
             P_AUCTION_DELAY_ID || ')';
    EXECUTE IMMEDIATE V_SQL;
    --删除交易单
    DELETE FROM USER_ORDERS
     WHERE AUCTION_ID IN (SELECT AUCTION_ID FROM AUCTION_DELAY_DETAILS WHERE AUCTION_DELAY_ID = P_AUCTION_DELAY_ID);
  
    UPDATE SCORES
       SET SCORE_STATUS = '2'
     WHERE SOURCE_TYPE = 'USER_ORDERS'
       AND SOURCE_ID IN (SELECT O.ID FROM USER_ORDER_CANCEL O WHERE O.AUCTION_DELAY_ID = P_AUCTION_DELAY_ID);
  
    UPDATE AUCTION_DELAY
       SET STATUS = P_AUDIT_STATUS, AUDITOR_ID = P_AUDIT_ID, AUDITOR_NAME = P_AUDIT_NAME, AUDIT_DATE = SYSDATE
     WHERE ID = P_AUCTION_DELAY_ID;
  
    FOR UO IN CANCEL_USER_ORDER(P_AUCTION_DELAY_ID) LOOP
      SELECT TOTAL_AMOUNT INTO V_TOTAL_AMOUNT FROM USER_PAYMENTS WHERE ID = UO.PAYMENT_ID;
      --支付总金额=交易单金额. 单笔支付, 直接作废交易流水返还金额
      IF V_TOTAL_AMOUNT = UO.TOTAL_AMOUNT THEN
        --流水无效
        UPDATE USER_ACCOUNTS
           SET STATUS = '0'
         WHERE SOURCE_ID = UO.PAYMENT_ID
           AND SOURCE_TYPE = 'USER_PAYMENTS';
        --返还支付金额
        UPDATE USERS
           SET ACCOUNT       = ACCOUNT + V_TOTAL_AMOUNT,
               TOTAL_ACCOUNT = TOTAL_ACCOUNT + V_TOTAL_AMOUNT,
               QUOTA         = QUOTA - UO.END_PRICE
         WHERE ID = UO.USER_ID;
      
        UPDATE USER_PAYMENTS P SET P.PAY_STATUS = 0 WHERE ID = UO.PAYMENT_ID;
      
      ELSE
        --支付总金额!=交易单金额, 多笔同时支付,扣除流水中相应部分金额并返还余额
        UPDATE USER_ACCOUNTS
           SET MONEY = MONEY - V_TOTAL_AMOUNT
         WHERE SOURCE_ID = UO.PAYMENT_ID
           AND SOURCE_TYPE = 'USER_PAYMENTS';
        --返还支付金额
        UPDATE USERS
           SET ACCOUNT       = ACCOUNT + V_TOTAL_AMOUNT,
               TOTAL_ACCOUNT = TOTAL_ACCOUNT + V_TOTAL_AMOUNT,
               QUOTA         = QUOTA - UO.END_PRICE
         WHERE ID = UO.USER_ID;
      END IF;
    
      --占用额度
      INSERT INTO USER_QUOTA_USAGES
        SELECT USER_QUOTA_USAGES_SEQ.NEXTVAL,
               UO.USER_ID,
               O.END_PRICE,
               0,
               1,
               O.AUCTION_ID,
               A.AUCTION_NO,
               A.NAME,
               SYSDATE,
               NULL
          FROM USER_ORDERS O, AUCTIONS A
         WHERE O.AUCTION_ID = A.ID
           AND O.USER_PAYMENT_ID = UO.PAYMENT_ID
           AND USER_ID = UO.USER_ID;
    
    END LOOP;
  
  ELSE
    UPDATE USER_ORDERS
       SET IS_FREEZE = 0
     WHERE AUCTION_ID IN (SELECT AUCTION_ID FROM AUCTION_DELAY_DETAILS WHERE AUCTION_DELAY_ID = P_AUCTION_DELAY_ID);
    UPDATE AUCTION_DELAY
       SET STATUS = P_AUDIT_STATUS, AUDITOR_ID = P_AUDIT_ID, AUDITOR_NAME = P_AUDIT_NAME, AUDIT_DATE = SYSDATE
     WHERE ID = P_AUCTION_DELAY_ID;
  END IF;

END P_AUCTION_DELAY_AUDIT;

 
/

-- ----------------------------
-- Procedure structure for P_AUCTION_DELAY_REQUEST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_AUCTION_DELAY_REQUEST"(P_AUCTION_IDS      IN VARCHAR2,
                                                    P_DELAY_HOURS      IN NUMBER,
                                                    P_REMARKS          IN VARCHAR2,
                                                    P_ADMIN_ID         IN NUMBER,
                                                    P_ADMIN_NAME       IN VARCHAR2,
                                                    P_AUCTION_DELAY_ID OUT NUMBER,
                                                    P_RESULT_STATUS    OUT NUMBER) IS

  /*
    因故障需要延期拍品, 冻结交易单. 保存需要延期的拍品明细
    创建人: 李征
    时间: 2014.04.17
  */

  V_SQL VARCHAR2(4000);
BEGIN
  BEGIN
    --冻结交易单
    V_SQL := 'update user_orders set is_freeze=1,freeze_date=sysdate where id in(' || P_AUCTION_IDS || ')';
    EXECUTE IMMEDIATE V_SQL;
  
    --备份需要取消的交易单
    SELECT AUCTION_DELAY_SEQ.NEXTVAL INTO P_AUCTION_DELAY_ID FROM DUAL;
  
    --生成故障调整单
    INSERT INTO AUCTION_DELAY
      (ID, REMARK, DELAY_HOURS, ADMIN_ID, ADMIN_NAME, CREATED_AT)
    VALUES
      (P_AUCTION_DELAY_ID, P_REMARKS, P_DELAY_HOURS, P_ADMIN_ID, P_ADMIN_NAME, SYSDATE);
  
    --延期拍品明细
    V_SQL := 'insert into auction_delay_details select AUCTION_DELAY_SEQ.NEXTVAL,id,end_at,status,' ||
             P_AUCTION_DELAY_ID || ' from auctions where id in(' || P_AUCTION_IDS || ')';
    EXECUTE IMMEDIATE V_SQL;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
  END;

  P_RESULT_STATUS := 0;

END P_AUCTION_DELAY_REQUEST;

 
/

-- ----------------------------
-- Procedure structure for P_BID
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID"
(
	p_user_id              NUMBER,
	p_user_nickname        VARCHAR2,
	p_auction_id           NUMBER,
	p_price                IN OUT NUMBER,
	p_ip                   VARCHAR2,
	p_app_id               VARCHAR2,
	RESULT_HIGHEST_USER_ID OUT NUMBER,
	RESULT_HIGHEST_PRICES  OUT NUMBER,
	RESULT_PROXY_PRICES    OUT NUMBER,
	RESULT_USER_QUOTA      OUT NUMBER,
	RESULT_BID_TIMES       OUT NUMBER,
	RESULT_BID_LEFTTIME    OUT NUMBER,
	RESULT_STATUS          OUT NUMBER
	/*
                   作者：  Dwen
                   日期：  2011-07-22
                   描述：  用户出价入口(目前为竞拍和一口价)
                   参数说明：
                   p_user_id : 当前用户ID
                   p_auction_id :当前拍品ID
                   p_price      :当前出价
                   p_ip         :IP
                   p_app_id    :  0:PC, 1:WAP, 2:IPHONE, 3:ANDROID
                   RESULT_STATUS如下：
                   0: 出价成功
                   1: 用户不存在
                   2: 用户锁定冻结
                   3: 用户额度不够
                   4: 拍品已结标或过期
                   5: 加价幅度不符合
                   6: 不可重复出价
                   7: 系统锁错误
                   8: 系统末知错误
  
                   11:拍品撤拍
  
                   更新:2012-04-21
                   更新人:李征
                   内容:添加竞拍次数返回
  
                   更新:2012-05-16
                   更新人:李征
                   内容:拍品撤拍,返回状态11
  
                   更新:2012-07-04
                   更新人:李征
                   内容:添加结标剩余时间
              */
) IS
	v_initial_price NUMBER := 0;
	v_isauction     CHAR(1) := '1';
	v_auction_no    NUMBER;
	v_auction_name  VARCHAR(1000);
	V_END_AT        DATE;
BEGIN
	/*  检查用户是否满足出价条件 */
	BEGIN
		P_BID_INITI(p_user_id,
								p_auction_id,
								p_price,
								v_initial_price,
								v_isauction,
								v_auction_no,
								v_auction_name,
								V_END_AT,
								RESULT_STATUS);
	END;

	/* 用户出价条件满足*/
	IF RESULT_STATUS = 0 THEN
		IF v_isauction != '1' THEN
			/* 一口价 */
			P_BID_BUY_NOW(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										p_ip,
										v_auction_no,
										v_auction_name,
										p_app_id,
										RESULT_STATUS);
		ELSE
			/* 竞拍*/
			P_BID_AUCTION(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										v_initial_price,
										p_ip,
										v_auction_no,
										v_auction_name,
										p_app_id,
										RESULT_STATUS);
		END IF;
	
		IF RESULT_STATUS = 0 THEN
			COMMIT;
			INSERT INTO AUCTION_STATUS_CHANGE_LOGS
				(id, AUCTION_ID, OLD_STATUS, NEW_STATUS, UPDATED_AT)
			VALUES
				(auction_status_change_logs_seq.NEXTVAL,
				 p_auction_id,
				 '2',
				 '2',
				 SYSDATE);
		END IF;
	END IF;
	BEGIN
		--快速竞拍,需要获取出价后的最新竞拍信息
		SELECT AMP.USER_ID,
					 AMP.MAX_PRICE,
					 DECODE(AMP.Proxy_Price, NULL, 0, AMP.Proxy_Price),
					 DECODE(AMP.AUCTION_TIME, NULL, 0, AMP.AUCTION_TIME),
					 A.END_AT - SYSDATE
			INTO RESULT_HIGHEST_USER_ID,
					 RESULT_HIGHEST_PRICES,
					 RESULT_PROXY_PRICES,
					 RESULT_BID_TIMES,
					 RESULT_BID_LEFTTIME
			FROM AUCTION_MAX_PRICES_NEW AMP, AUCTIONS A
		 WHERE AMP.AUCTION_ID = A.ID
			 AND AMP.AUCTION_ID = p_auction_id;
	
		SELECT U.QUOTA
			INTO RESULT_USER_QUOTA
			FROM USERS U
		 WHERE U.ID = P_USER_ID;
	
		IF RESULT_STATUS = 0 THEN
			MERGE INTO AUCTION_BIDDINGS AB
			USING (SELECT P_AUCTION_ID AS AUCTION_ID,
										P_USER_ID AS USER_ID,
										'1' AS BIDDING,
										DECODE(RESULT_HIGHEST_USER_ID, P_USER_ID, 1, -1) AS IS_HIGHEST,
										V_END_AT AS END_AT
							 FROM DUAL) T
			ON (AB.AUCTION_ID = T.AUCTION_ID AND AB.USER_ID = T.USER_ID)
			WHEN NOT MATCHED THEN
				INSERT
					(ID, USER_ID, AUCTION_ID, BIDDING, END_AT, IS_HIGHEST)
				VALUES
					(auction_biddings_seq.NEXTVAL,
					 T.USER_ID,
					 T.AUCTION_ID,
					 T.BIDDING,
					 T.END_AT,
					 T.IS_HIGHEST)
			WHEN MATCHED THEN
				UPDATE SET AB.IS_HIGHEST = T.IS_HIGHEST, AB.BIDDING = '1';
		
			IF RESULT_HIGHEST_USER_ID = p_user_id THEN
				UPDATE auction_biddings
					 SET is_highest = '-1'
				 WHERE auction_id = p_auction_id
					 AND user_id != p_user_id
					 AND is_highest = '1';
			ELSE
				UPDATE auction_biddings
					 SET is_highest = '1'
				 WHERE auction_id = p_auction_id
					 AND user_id = RESULT_HIGHEST_USER_ID;
			END IF;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN;
	END;
	RETURN;
END P_BID;

 
/

-- ----------------------------
-- Procedure structure for P_BID_APP
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_APP"
(
	p_user_id       NUMBER,
	p_user_nickname VARCHAR2,
	p_auction_id    NUMBER,
	p_price         IN OUT NUMBER,
	p_ip            VARCHAR2,
	p_app_id        VARCHAR2,
	RESULT_STATUS   OUT NUMBER
	/*
                                               作者：  lizheng
                                               日期：  2012-05-20
                                               描述：  客户端出价(目前为竞拍和一口价)
                                               参数说明：
                                               p_user_id : 当前用户ID
                                               p_auction_id :当前拍品ID
                                               p_price      :当前出价
                                               p_ip         :IP
                                               p_app_id    :1:WAP, 2:IPHONE, 3:ANDROID
                                               RESULT_STATUS如下：
                                               0: 出价成功
                                               1: 用户不存在
                                               2: 用户锁定冻结
                                               3: 用户额度不够
                                               4: 拍品已结标或过期
                                               5: 加价幅度不符合
                                               6: 不可重复出价
                                               7: 系统锁错误
                                               8: 系统末知错误
  
                                               11:拍品撤拍
  
                                          */
) IS
	v_initial_price   NUMBER := 0;
	v_isauction       CHAR(1) := '1';
	v_auction_no      NUMBER;
	v_auction_name    VARCHAR(1000);
	V_END_AT          DATE;
	v_HIGHEST_USER_ID NUMBER;
BEGIN
	/*  检查用户是否满足出价条件 */
	BEGIN
		P_BID_INITI(p_user_id,
								p_auction_id,
								p_price,
								v_initial_price,
								v_isauction,
								v_auction_no,
								v_auction_name,
								V_END_AT,
								RESULT_STATUS);
	END;

	/* 用户出价条件满足*/
	IF RESULT_STATUS = 0 THEN
		IF v_isauction != '1' THEN
			/* 一口价 */
			P_BID_BUY_NOW(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										p_ip,
										v_auction_no,
										v_auction_name,
										p_app_id,
										RESULT_STATUS);
		ELSE
			/* 竞拍*/
			P_BID_AUCTION(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										v_initial_price,
										p_ip,
										v_auction_no,
										v_auction_name,
										p_app_id,
										RESULT_STATUS);
		END IF;
	END IF;

	IF result_status = 0 THEN
		COMMIT;
	
		MERGE INTO AUCTION_BIDDINGS AB
		USING (SELECT P_AUCTION_ID AS AUCTION_ID,
									P_USER_ID AS USER_ID,
									'1' AS BIDDING,
									DECODE(amp.USER_ID, P_USER_ID, 1, -1) AS IS_HIGHEST,
									V_END_AT AS END_AT
						 FROM auction_max_prices amp
						WHERE amp.auction_id = P_AUCTION_ID) T
		ON (AB.AUCTION_ID = T.AUCTION_ID AND AB.USER_ID = T.USER_ID)
		WHEN NOT MATCHED THEN
			INSERT
				(ID, USER_ID, AUCTION_ID, BIDDING, END_AT, IS_HIGHEST)
			VALUES
				(AUCTION_BIDDINGS_SEQ.NEXTVAL,
				 T.USER_ID,
				 T.AUCTION_ID,
				 T.BIDDING,
				 T.END_AT,
				 T.IS_HIGHEST)
		WHEN MATCHED THEN
			UPDATE SET AB.IS_HIGHEST = T.IS_HIGHEST, AB.BIDDING = '1';
	
		SELECT user_id
			INTO v_HIGHEST_USER_ID
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE auction_id = p_auction_id;
	
		IF v_HIGHEST_USER_ID = p_user_id THEN
			UPDATE auction_biddings
				 SET is_highest = '-1'
			 WHERE auction_id = p_auction_id
				 AND user_id != p_user_id
				 AND is_highest = '1';
		ELSE
			UPDATE auction_biddings
				 SET is_highest = '1'
			 WHERE auction_id = p_auction_id
				 AND user_id = v_HIGHEST_USER_ID;
		
		END IF;
	END IF;

	RETURN;
END P_BID_APP;

 
/

-- ----------------------------
-- Procedure structure for P_BID_APP_NEW
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_APP_NEW"
(
	p_user_id       NUMBER,
	p_user_nickname VARCHAR2,
	p_auction_id    NUMBER,
	p_price         IN OUT NUMBER,
	p_ip            VARCHAR2,
	p_app_id        VARCHAR2,
	P_SERVER_TIME   OUT VARCHAR2,
	P_LEFTTIME      OUT NUMBER,
	RESULT_STATUS   OUT NUMBER
	/*
                                                 作者：  lizheng
                                                 日期：  2012-05-20
                                                 描述：  客户端出价(目前为竞拍和一口价)
                                                 参数说明：
                                                 p_user_id : 当前用户ID
                                                 p_auction_id :当前拍品ID
                                                 p_price      :当前出价
                                                 p_ip         :IP
                                                 p_app_id    :1:WAP, 2:IPHONE, 3:ANDROID
                                                 RESULT_STATUS如下：
                                                 0: 出价成功
                                                 1: 用户不存在
                                                 2: 用户锁定冻结
                                                 3: 用户额度不够
                                                 4: 拍品已结标或过期
                                                 5: 加价幅度不符合
                                                 6: 不可重复出价
                                                 7: 系统锁错误
                                                 8: 系统末知错误
  
                                                 11:拍品撤拍
  
              更新:2013-05-09, 李征
              出价推送需要多2个返回参数, 原P_BID_APP 做废.
  
                                            */
) IS
	v_initial_price   NUMBER := 0;
	v_isauction       CHAR(1) := '1';
	v_auction_no      NUMBER;
	v_auction_name    VARCHAR(1000);
	V_END_AT          DATE;
	v_HIGHEST_USER_ID NUMBER;
BEGIN
	/*  检查用户是否满足出价条件 */
	BEGIN
		P_BID_INITI(p_user_id,
								p_auction_id,
								p_price,
								v_initial_price,
								v_isauction,
								v_auction_no,
								v_auction_name,
								V_END_AT,
								RESULT_STATUS);
	END;

	/* 用户出价条件满足*/
	IF RESULT_STATUS = 0 THEN
		IF v_isauction != '1' THEN
			/* 一口价 */
			P_BID_BUY_NOW(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										p_ip,
										v_auction_no,
										v_auction_name,
										p_app_id,
										RESULT_STATUS);
		ELSE
			/* 竞拍*/
			P_BID_AUCTION(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										v_initial_price,
										p_ip,
										v_auction_no,
										v_auction_name,
										p_app_id,
										RESULT_STATUS);
		END IF;
	END IF;

	SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), A.END_AT - SYSDATE
		INTO P_SERVER_TIME, P_LEFTTIME
		FROM AUCTIONS A
	 WHERE A.ID = P_AUCTION_ID;

	IF result_status = 0 THEN
		COMMIT;
	
		MERGE INTO AUCTION_BIDDINGS AB
		USING (SELECT P_AUCTION_ID AS AUCTION_ID,
									P_USER_ID AS USER_ID,
									'1' AS BIDDING,
									DECODE(amp.USER_ID, P_USER_ID, 1, -1) AS IS_HIGHEST,
									V_END_AT AS END_AT
						 FROM AUCTION_MAX_PRICES_NEW amp
						WHERE amp.auction_id = P_AUCTION_ID) T
		ON (AB.AUCTION_ID = T.AUCTION_ID AND AB.USER_ID = T.USER_ID)
		WHEN NOT MATCHED THEN
			INSERT
				(ID, USER_ID, AUCTION_ID, BIDDING, END_AT, IS_HIGHEST)
			VALUES
				(AUCTION_BIDDINGS_SEQ.NEXTVAL,
				 T.USER_ID,
				 T.AUCTION_ID,
				 T.BIDDING,
				 T.END_AT,
				 T.IS_HIGHEST)
		WHEN MATCHED THEN
			UPDATE SET AB.IS_HIGHEST = T.IS_HIGHEST, AB.BIDDING = '1';
	
		SELECT user_id
			INTO v_HIGHEST_USER_ID
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE auction_id = p_auction_id;
	
		IF v_HIGHEST_USER_ID = p_user_id THEN
			UPDATE auction_biddings
				 SET is_highest = '-1'
			 WHERE auction_id = p_auction_id
				 AND user_id != p_user_id
				 AND is_highest = '1';
		ELSE
			UPDATE auction_biddings
				 SET is_highest = '1'
			 WHERE auction_id = p_auction_id
				 AND user_id = v_HIGHEST_USER_ID;
		
		END IF;
	END IF;

	RETURN;
END P_BID_APP_NEW;

 
/

-- ----------------------------
-- Procedure structure for P_BID_AUCTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_AUCTION"
(
	p_user_id       NUMBER,
	p_user_nickname VARCHAR2,
	p_auction_id    NUMBER,
	p_price         IN OUT NUMBER,
	p_initial_price IN OUT NUMBER,
	p_ip            VARCHAR,
	p_auction_no    NUMBER,
	p_auction_name  VARCHAR,
	p_app_id        VARCHAR,
	RESULT_STATUS   OUT NUMBER
	/*
                  作者： Dwen
                  日期： 2011-07-22
                  描述： 竞拍出价
                  0: 出价成功
                  1: 用户不存在
                  2: 用户锁定冻结
                  3: 用户额度不够
                  4: 拍品已结标或过期
                  5: 加价幅度不符合
                  6: 不可重复出价
                  7: 系统锁错误
                  8: 系统末知错误
              */
	/*
              更新:2012-05-12.李征
              拍品第一口价大于初始价时,自动出代理价
              P_BID_PRIMITIVE添加参数p_price
         */
) IS
	v_now              DATE := SYSDATE;
	v_current_price    NUMBER := 0;
	v_last_user_id     NUMBER := 0;
	v_last_proxy_price NUMBER := 0;
	v_last_ip          VARCHAR(200);
	v_next_legal_price NUMBER := 0;
	v_price_interval   NUMBER := 0;
	v_auction_lock     NUMBER;
	v_isauction        CHAR(1) := '1';
	v_last_app_id      VARCHAR(255);
BEGIN
	/*========================竞拍出价=========================*/
	/*The price should be times of v_price_interval*/
	BEGIN
		P_BID_INTERVAL(p_price, v_next_legal_price, v_price_interval);
	END;
	IF MOD(p_price, v_price_interval) > 0 THEN
		BEGIN
			p_price := p_price - MOD(p_price, v_price_interval);
		END;
	END IF;

	/* 对当前拍品记录进行锁定 */
	BEGIN
		SELECT ID
			INTO v_auction_lock
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE AUCTION_ID = p_auction_id
			 AND ROWNUM = 1
			 FOR UPDATE;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 7;
			RETURN;
	END;

	BEGIN
		/* 查询当前拍品最大价格记录 */
		SELECT MAX_PRICE, USER_ID, PROXY_PRICE, APP_ID
			INTO v_current_price,
					 v_last_user_id,
					 v_last_proxy_price,
					 v_last_app_id
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE AUCTION_ID = p_auction_id
			 AND ROWNUM = 1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
	END;

	BEGIN
		/* 查询拍品出价记录IP*/
		SELECT IP
			INTO v_last_ip
			FROM AUCTION_PRICES
		 WHERE AUCTION_ID = p_auction_id
			 AND IS_MAX = 1
			 AND ROWNUM = 1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 0;
	END;

	IF v_last_user_id IS NULL THEN
		/* 该拍品末出过价情况 */
		P_BID_PRIMITIVE(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										p_initial_price,
										p_ip,
										p_auction_no,
										p_auction_name,
										p_app_id,
										RESULT_STATUS);
	ELSE
		/* 该拍品出过价情况 */
		P_BID_HAD_PRICE(p_user_id,
										p_user_nickname,
										p_auction_id,
										p_price,
										v_current_price,
										v_last_user_id,
										v_last_proxy_price,
										p_ip,
										v_last_ip,
										p_auction_no,
										p_auction_name,
										p_app_id,
										v_last_app_id,
										RESULT_STATUS);
	END IF;
END P_BID_AUCTION;

 
/

-- ----------------------------
-- Procedure structure for P_BID_BIDDINGAUCTIONS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_BIDDINGAUCTIONS"(P_USER_ID IN NUMBER) IS
BEGIN
  DBMS_OUTPUT.ENABLE(1000000);
  DELETE FROM AUCTION_BIDDINGS
   WHERE USER_ID = P_USER_ID
     AND END_AT < SYSDATE;
  BEGIN

    INSERT INTO AUCTION_BIDDINGS
      (ID, USER_ID, AUCTION_ID, BIDDING, END_AT, IS_HIGHEST)
      SELECT AUCTION_BIDDINGS_SEQ.NEXTVAL,
             P_USER_ID AS USER_ID,
             A.ID,
             '1' AS BIDDING,
             A.END_AT,
             DECODE((SELECT COUNT(1)
                      FROM AUCTION_PRICES AP
                     WHERE AP.AUCTION_ID = AMP.AUCTION_ID
                       AND AP.USER_ID = P_USER_ID),
                    0,
                    0,
                    decode(AMP.USER_ID, NULL, 0, P_USER_ID, 1, -1)) AS IS_HIGHEST
        FROM AUCTIONS A, AUCTION_MAX_PRICES AMP
       WHERE AMP.AUCTION_ID = A.ID
         AND A.STATUS = '2'
         AND A.AUCTION_TYPE = '1'
         AND A.END_AT > SYSDATE
         AND NOT EXISTS (SELECT USER_ID
                FROM AUCTION_BIDDINGS AB
               WHERE AB.USER_ID = P_USER_ID
                 AND AB.AUCTION_ID = A.ID)
         AND EXISTS (SELECT AP.ID
                FROM AUCTION_PRICES AP
               WHERE AP.AUCTION_ID = A.ID
                 AND AP.USER_ID = P_USER_ID);

    --------------------
    /*MERGE INTO AUCTION_BIDDINGS AB
    USING (SELECT P_USER_ID AS USER_ID,
                  A.ID,
                  '1' AS BIDDING,
                  A.END_AT,
                  DECODE((SELECT COUNT(1)
                           FROM AUCTION_PRICES AP
                          WHERE AP.AUCTION_ID = AMP.AUCTION_ID
                            AND AP.USER_ID = P_USER_ID),
                         0,
                         0,
                         decode(AMP.USER_ID, NULL, 0, P_USER_ID, 1, -1)) AS IS_HIGHEST
             FROM AUCTIONS A, AUCTION_MAX_PRICES AMP
            WHERE AMP.AUCTION_ID = A.ID
              AND A.STATUS = '2'
              AND A.AUCTION_TYPE = '1'
              AND A.END_AT > SYSDATE
              AND EXISTS (SELECT AP.ID
                     FROM AUCTION_PRICES AP
                    WHERE AP.AUCTION_ID = A.ID
                      AND AP.USER_ID = P_USER_ID)) T
    ON (AB.AUCTION_ID = T.ID AND AB.USER_ID = T.USER_ID)
    WHEN NOT MATCHED THEN
      INSERT
        (USER_ID, AUCTION_ID, BIDDING, END_AT, IS_HIGHEST)
      VALUES
        (T.USER_ID, T.ID, T.BIDDING, T.END_AT, T.IS_HIGHEST);*/
    -----------------------------------
    INSERT INTO AUCTION_BIDDINGS
      (ID, USER_ID, AUCTION_ID, END_AT, WATCHING)
      SELECT AUCTION_BIDDINGS_SEQ.NEXTVAL,
             P_USER_ID AS USER_ID,
             A.ID,
             A.END_AT,
             '1'
        FROM AUCTIONS A, USER_AUCTIONS UA
       WHERE A.ID = UA.AUCTION_ID
         AND A.STATUS = '2'
         AND A.AUCTION_TYPE = '1'
         AND A.END_AT > SYSDATE
         AND UA.USER_ID = P_USER_ID
         AND NOT EXISTS (SELECT USER_ID
                FROM AUCTION_BIDDINGS AB
               WHERE AB.USER_ID = P_USER_ID
                 AND AB.AUCTION_ID = A.ID);

    UPDATE AUCTION_BIDDINGS AB
       SET AB.WATCHING = '1'
     WHERE EXISTS (SELECT USER_ID
              FROM AUCTIONS A, USER_AUCTIONS UA
             WHERE A.ID = UA.AUCTION_ID
               AND A.STATUS = '2'
               AND A.AUCTION_TYPE = '1'
               AND A.END_AT > SYSDATE
               AND UA.USER_ID = P_USER_ID
               AND A.ID = AB.AUCTION_ID);
    ------------------------------------
    /*MERGE INTO AUCTION_BIDDINGS AB
    USING (SELECT P_USER_ID AS USER_ID, A.ID, A.END_AT
             FROM AUCTIONS A, USER_AUCTIONS UA
            WHERE A.ID = UA.AUCTION_ID
              AND A.STATUS = '2'
              AND A.AUCTION_TYPE = '1'
              AND A.END_AT > SYSDATE
              AND UA.USER_ID = P_USER_ID
            GROUP BY A.ID, A.END_AT) T
    ON (AB.AUCTION_ID = T.ID AND AB.USER_ID = T.USER_ID)
    WHEN NOT MATCHED THEN
      INSERT
        (USER_ID, AUCTION_ID, END_AT, WATCHING)
      VALUES
        (T.USER_ID, T.ID, T.END_AT, '1')
    WHEN MATCHED THEN
      UPDATE SET AB.WATCHING = '1';*/

    ------------------------------
    INSERT INTO AUCTION_BIDDINGS
      (ID, USER_ID, AUCTION_ID, END_AT, CONSIGN)
      SELECT AUCTION_BIDDINGS_SEQ.NEXTVAL,
             P_USER_ID AS USER_ID,
             A.ID,
             A.END_AT,
             '1'
        FROM AUCTIONS A, AUCTION_MAX_PRICES AMP, CONTRACTS C
       WHERE A.ID = AMP.AUCTION_ID
         AND A.CONTRACT_ID = C.ID
         AND A.STATUS = '2'
         AND A.AUCTION_TYPE = '1'
         AND A.END_AT > SYSDATE
         AND C.USER_ID = P_USER_ID
         AND NOT EXISTS (SELECT user_id
                FROM auction_BIDDINGS AB
               WHERE AB.AUCTION_ID = A.ID);

/*    UPDATE AUCTION_BIDDINGS AB
       SET AB.CONSIGN = '1'
     WHERE AB.AUCTION_ID =
           (SELECT A.ID
              FROM AUCTIONS A, AUCTION_MAX_PRICES AMP, CONTRACTS C
             WHERE A.ID = AMP.AUCTION_ID
               AND A.CONTRACT_ID = C.ID
               AND A.STATUS = '2'
               AND A.AUCTION_TYPE = '1'
               AND C.CONTRACT_TYPE <> '1'
               AND C.USER_ID = P_USER_ID
               AND A.ID = AB.AUCTION_ID)
       AND AB.USER_ID = P_USER_ID;*/

    ------------------------------
    /*MERGE INTO AUCTION_BIDDINGS AB
    USING (SELECT P_USER_ID AS USER_ID, A.ID, A.END_AT
             FROM AUCTIONS A, AUCTION_MAX_PRICES AMP, CONTRACTS C
            WHERE A.ID = AMP.AUCTION_ID
              AND A.CONTRACT_ID = C.ID
              AND A.STATUS = '2'
              AND A.AUCTION_TYPE = '1'
              AND A.END_AT > SYSDATE
              AND C.USER_ID = P_USER_ID) T
    ON (AB.AUCTION_ID = T.ID AND AB.USER_ID = T.USER_ID)
    WHEN NOT MATCHED THEN
      INSERT
        (USER_ID, AUCTION_ID, END_AT, CONSIGN)
      VALUES
        (T.USER_ID, T.ID, T.END_AT, '1')
    WHEN MATCHED THEN
      UPDATE SET AB.CONSIGN = '1';*/
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line('SQLCODE' || SQLCODE || ',SQLERRM:' || SQLERRM);
      RETURN;
  END;
END P_BID_BIDDINGAUCTIONS;


 
/

-- ----------------------------
-- Procedure structure for P_BID_BUY_NOW
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_BUY_NOW"
(
	p_user_id       NUMBER,
	p_user_nickname VARCHAR2,
	p_auction_id    NUMBER,
	p_price         IN OUT NUMBER,
	p_ip            VARCHAR,
	p_auction_no    NUMBER,
	p_auction_name  VARCHAR,
	p_app_id        VARCHAR,
	RESULT_STATUS   OUT NUMBER
	/*
                     作者：  Dwen
                     日期：  2011-07-22
                     描述：  一口价出价
                     参数说明：
                     p_user_id      :   当前用户ID
                     p_auction_id   :   当前拍品ID
                     p_price        :   当前出价
                     p_ip           :   IP
                     p_app_id       :   0:PC, 1:WAP, 2:IPHONE, 3:ANDROID
                     RESULT_STATUS如下：
                     0: 出价成功
                     1: 用户不存在
                     2: 用户锁定冻结
                     3: 用户额度不够
                     4: 拍品已结标或过期
                     5: 加价幅度不符合
                     6: 不可重复出价
                     7: 系统锁错误
                     8: 系统末知错误
                */
) IS
	v_now           DATE := SYSDATE;
	v_current_price NUMBER := 0;
	v_last_user_id  NUMBER := 0;
	v_auction_lock  NUMBER;
BEGIN

	/* 对当前拍品记录进行锁定 */
	BEGIN
		SELECT ID
			INTO v_auction_lock
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE AUCTION_ID = p_auction_id
			 AND ROWNUM = 1
			 FOR UPDATE;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 7;
			RETURN;
	END;

	BEGIN
		/* 更改当前一口价商品截止时间为当前时间 */
		UPDATE AUCTIONS SET END_AT = SYSDATE WHERE ID = p_auction_id;
		/* 查询当前拍品最大价格记录 */
		SELECT MAX_PRICE, USER_ID
			INTO v_current_price, v_last_user_id
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE AUCTION_ID = p_auction_id
			 AND ROWNUM = 1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			/* 末找到数据 */
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
		WHEN OTHERS THEN
			/* 其它异常 */
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
	END;

	/* 当前出价不能小于拍品最大记录价格 */
	IF p_price < v_current_price THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS := 5;
			RETURN;
		END;
	END IF;

	/* 一口价拍品中最大价格记录表中确保无用户出过价*/
	IF v_last_user_id IS NULL THEN
		BEGIN
			/* 减去用户额度 */
			UPDATE USERS SET QUOTA = QUOTA - p_price WHERE id = p_user_id;
		
			/* 记录用户出价记录*/
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 NICKNAME,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_price,
				 p_ip,
				 0,
				 v_now,
				 1,
				 p_app_id);
		
			/* 更改拍品最大记录*/
			UPDATE AUCTION_MAX_PRICES_NEW
				 SET USER_ID      = p_user_id,
						 NICKNAME     = p_user_nickname,
						 AUCTION_TIME = 1,
						 MAX_PRICE    = p_price,
						 PROXY_PRICE  = 0.0,
						 APP_ID       = p_app_id
			 WHERE AUCTION_ID = p_auction_id;
		
			/*记录用户额度占用*/
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 1,
				 0,
				 v_now);
		
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				/*插入数据唯一索引对应的列上有重复值*/
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN NO_DATA_FOUND THEN
				/* 末找到数据 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN OTHERS THEN
				/* 其它异常 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
		END;
	END IF;
	--一口价出价后直接生成交易单
	p_user_make_one_user_orders(p_user_id, RESULT_STATUS);

	RESULT_STATUS := 0;
END P_BID_BUY_NOW;

 
/

-- ----------------------------
-- Procedure structure for P_BID_CANCEL_PROXY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_CANCEL_PROXY"
(
	p_user_id      IN NUMBER,
	p_auction_id   IN NUMBER,
	p_max_price    OUT NUMBER,
	p_last_user_id OUT NUMBER,
	p_bid_times    OUT NUMBER,
	P_USER_QUOTA   OUT NUMBER,
	RESULT_STATUS  OUT NUMBER
	/*
              作者：李征
              日期：2012.05.09
              描述：取消代理价,返回当前用户及当前价
              RESULT_STATUS说明：
              10：表示取消代理价成功.
              11：表示末找到当前拍品的额度占用记录.
              12：表示取消代理价失败.
           */
) IS

	v_current_price    NUMBER := 0;
	v_last_user_id     NUMBER := 0;
	v_last_proxy_price NUMBER := 0;
	v_bid_times        NUMBER := 0;
	v_user_quota       NUMBER := 0;

	v_now DATE := SYSDATE;
BEGIN
	RESULT_STATUS := 0;

	/* 查询当前拍品最大记录 */
	BEGIN
		SELECT MAX_PRICE, USER_ID, PROXY_PRICE, AUCTION_TIME, U.QUOTA
			INTO v_current_price,
					 v_last_user_id,
					 v_last_proxy_price,
					 v_bid_times,
					 v_user_quota
			FROM AUCTION_MAX_PRICES_NEW AMP
			JOIN USERS U ON U.ID = AMP.USER_ID
		 WHERE AUCTION_ID = p_auction_id
			 AND ROWNUM = 1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 11;
			RETURN;
	END;

	/* 拍品最大记录用户是当前用户情况 */
	IF v_last_user_id = p_user_id AND v_last_proxy_price > 0 THEN
		BEGIN
			/* 额度释放 */
			UPDATE USERS
				 SET QUOTA = QUOTA + (v_last_proxy_price - v_current_price)
			 WHERE ID = p_user_id;
		
			/* 更改额度占用状态为不占用 */
			UPDATE USER_QUOTA_USAGES
				 SET STATUS = 0
			 WHERE USER_ID = p_user_id
				 AND AUCTION_ID = p_auction_id;
		
			/* 更改代理价为0 */
			UPDATE AUCTION_MAX_PRICES_NEW
				 SET PROXY_PRICE = 0
			 WHERE AUCTION_ID = p_auction_id;
		
			/* 插入额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID, USER_ID, AUCTION_ID, USE_QUOTA, STATUS, USE_TYPE, CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 v_current_price,
				 1,
				 0,
				 v_now);
		
			UPDATE AUCTION_PROXY_PRICES AP
				 SET AP.STATUS = 0, AP.UPDATED_AT = SYSDATE
			 WHERE AUCTION_ID = p_auction_id
				 AND USER_ID = p_user_id;
		
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				/*插入数据唯一索引对应的列上有重复值*/
				ROLLBACK;
				RESULT_STATUS := 12;
			
			WHEN NO_DATA_FOUND THEN
				/* 末找到数据 */
				ROLLBACK;
				RESULT_STATUS := 13;
			
			WHEN OTHERS THEN
				/* 其它异常 */
				ROLLBACK;
				RESULT_STATUS := 14;
			
		END;
	END IF;
	IF result_status != 0 THEN
		p_max_price    := 0;
		p_last_user_id := 0;
		p_bid_times    := 0;
		P_USER_QUOTA   := 0;
		RETURN;
	END IF;
	P_USER_QUOTA   := v_user_quota + (v_last_proxy_price - v_current_price);
	p_last_user_id := v_last_user_id;
	p_max_price    := v_current_price;
	p_bid_times    := v_bid_times;
	RESULT_STATUS  := 10;
END P_BID_CANCEL_PROXY;

 
/

-- ----------------------------
-- Procedure structure for P_BID_HAD_PRICE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_HAD_PRICE" (P_USER_ID          NUMBER,
                                            P_USER_NICKNAME    VARCHAR2,
                                            P_AUCTION_ID       NUMBER,
                                            P_PRICE            IN OUT NUMBER,
                                            P_CURRENT_PRICE    NUMBER,
                                            P_LAST_USER_ID     NUMBER,
                                            P_LAST_PROXY_PRICE NUMBER,
                                            P_IP               VARCHAR,
                                            P_LAST_IP          VARCHAR,
                                            P_AUCTION_NO       NUMBER,
                                            P_AUCTION_NAME     VARCHAR,
                                            P_APP_ID           VARCHAR,
                                            P_LAST_APP_ID      VARCHAR,
                                            RESULT_STATUS      OUT NUMBER
                                            /*
                                                      作者：  Dwen
                                                      日期：  2011-07-22
                                                      描述：  当前拍品出过价情况
                                                      RESULT_STATUS说明：
                                                      0: 出价成功
                                                      1: 用户不存在
                                                      2: 用户锁定冻结
                                                      3: 用户额度不够
                                                      4: 拍品已结标或过期
                                                      5: 加价幅度不符合
                                                      6: 不可重复出价
                                                      7: 系统锁错误
                                                      8: 系统末知错误

                                                      修改日期:2012.11.23
                                                      修改人:李征
                                                      描述:更新代理价时,记录新代理价
                                                  */) IS
  V_NEXT_LEGAL_PRICE NUMBER := 0;
  V_PRICE_INTERVAL   NUMBER := 0;
BEGIN
  /*===============当前拍品出过价情况====================*/

  /* 调制拍品出价价格 */
  BEGIN
    P_BID_INTERVAL(P_CURRENT_PRICE, V_NEXT_LEGAL_PRICE, V_PRICE_INTERVAL);
  END;
  /* 检查用户是否重复出价 */
  IF P_LAST_USER_ID = P_USER_ID THEN
    BEGIN
      P_BID_MODIFY_PROXY_2(P_USER_ID,
                         P_USER_NICKNAME,
                         P_AUCTION_ID,
                         P_PRICE,
                         P_APP_ID,
                         RESULT_STATUS);
      IF RESULT_STATUS != 0 THEN
        ROLLBACK;
        RESULT_STATUS := 6;
        RETURN;
      END IF;
      /*自动设置代理价*/
      RESULT_STATUS :=0;
      RETURN;
    END;
  END IF;

  /* 当前出价不能小于拍品下一个出价 */
  IF P_PRICE < V_NEXT_LEGAL_PRICE THEN
    BEGIN
      ROLLBACK;
      RESULT_STATUS := 5;
      RETURN;
    END;
  END IF;

  BEGIN
    /*  更新当前拍品最高出价状态为'否'*/
    UPDATE AUCTION_PRICES
       SET IS_MAX = 0
     WHERE AUCTION_ID = P_AUCTION_ID
       AND IS_MAX = 1;
  EXCEPTION
    WHEN OTHERS THEN
      /* 其它异常 */
      ROLLBACK;
      RESULT_STATUS := 8;
      RETURN;
  END;

  IF P_LAST_PROXY_PRICE > 0 THEN
    /* 当前拍品有代理价 */
    P_BID_HAD_PROXY(P_USER_ID,
                    P_USER_NICKNAME,
                    P_AUCTION_ID,
                    P_PRICE,
                    P_LAST_USER_ID,
                    P_LAST_PROXY_PRICE,
                    P_IP,
                    P_LAST_IP,
                    P_APP_ID,
                    P_LAST_APP_ID,
                    P_AUCTION_NO,
                    P_AUCTION_NAME,
                    RESULT_STATUS);
  ELSE
    /* 当前拍品无代理价 */
    P_BID_NONE_PROXY(P_USER_ID,
                     P_USER_NICKNAME,
                     P_AUCTION_ID,
                     P_PRICE,
                     V_NEXT_LEGAL_PRICE,
                     P_LAST_USER_ID,
                     P_IP,
                     P_APP_ID,
                     P_LAST_USER_ID,
                     P_AUCTION_NO,
                     P_AUCTION_NAME,
                     RESULT_STATUS);
  END IF;

END P_BID_HAD_PRICE;


 
/

-- ----------------------------
-- Procedure structure for P_BID_HAD_PROXY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_HAD_PROXY"
(
	p_user_id          NUMBER,
	p_user_nickname    VARCHAR2,
	p_auction_id       NUMBER,
	p_price            IN OUT NUMBER,
	p_last_user_id     NUMBER,
	p_last_proxy_price NUMBER,
	p_ip               VARCHAR,
	p_last_ip          VARCHAR,
	p_app_id           VARCHAR,
	p_last_app_id      VARCHAR,
	p_auction_no       NUMBER,
	p_auction_name     VARCHAR,
	RESULT_STATUS      OUT NUMBER
	/*
                            作者： Dwen
                            日期： 2011-07-22
                            描述：当前拍品有代理价情况
                            RESULT_STATUS说明：
                            0: 出价成功
                            1: 用户不存在
                            2: 用户锁定冻结
                            3: 用户额度不够
                            4: 拍品已结标或过期
                            5: 加价幅度不符合
                            6: 不可重复出价
                            7: 系统锁错误
                            8: 系统末知错误
                        */
) IS
	v_now                DATE := SYSDATE;
	v_next_legal_price   NUMBER := 0;
	v_price_interval     NUMBER := 0;
	v_used_quota         NUMBER := 0;
	v_last_user_nickname VARCHAR2(255);
BEGIN
	SELECT nickname
		INTO v_last_user_nickname
		FROM auction_max_prices_new
	 WHERE user_id = p_last_user_id
		 AND auction_id = p_auction_id;

	/*===================当前拍品有代理价情况====================*/
	/*----------代理价大于等于当前出价--------------*/
	IF p_last_proxy_price >= p_price THEN
		BEGIN
			/* 记录(当前)用户出价记录(当前用户记录出局) */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_price,
				 p_ip,
				 0,
				 v_now,
				 0,
				 p_app_id);
		
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_price,
				 p_ip,
				 0,
				 v_now,
				 0,
				 p_app_id);
		
			/* 记录(有代理价)用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_last_user_id,
				 v_last_user_nickname,
				 p_price,
				 p_last_ip,
				 1,
				 v_now,
				 1,
				 p_last_app_id);
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_last_user_id,
				 v_last_user_nickname,
				 p_price,
				 p_last_ip,
				 1,
				 v_now,
				 1,
				 p_last_app_id);
		
			/*-------当前出价等于当前拍品代理价-------*/
			IF p_price = p_last_proxy_price THEN
				/* 更新当前拍品代理价为0,最大价格为当前价*/
				UPDATE AUCTION_MAX_PRICES_NEW
					 SET MAX_PRICE    = p_price,
							 PROXY_PRICE  = 0,
							 AUCTION_TIME = AUCTION_TIME + 2,
							 APP_ID       = p_last_app_id
				 WHERE AUCTION_ID = p_auction_id;
				/*------当前拍品代理价大于当前出价--------*/
			ELSE
				/* 更新最大价格为当前价*/
				UPDATE AUCTION_MAX_PRICES_NEW
					 SET MAX_PRICE    = p_price,
							 AUCTION_TIME = AUCTION_TIME + 2,
							 APP_ID       = p_last_app_id
				 WHERE AUCTION_ID = p_auction_id;
			END IF;
		
			/*出价用户额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 0,
				 0,
				 v_now);
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				/*插入数据唯一索引对应的列上有重复值*/
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN NO_DATA_FOUND THEN
				/* 末找到数据 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN OTHERS THEN
				/* 其它异常 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
		END;
		/*-------------当前出价大于代理价----------------*/
	ELSE
		BEGIN
			/*====START_释放当前拍品有代理价用户的额度====*/
			/* 统计所占当前拍品的额度 */
			SELECT nvl(SUM(USE_QUOTA), 0)
				INTO v_used_quota
				FROM USER_QUOTA_USAGES
			 WHERE USER_ID = p_last_user_id
				 AND AUCTION_ID = p_auction_id
				 AND STATUS = 1;
			/* 回滚该用户当前拍品所占额度 */
			UPDATE USERS
				 SET QUOTA = QUOTA + v_used_quota
			 WHERE ID = p_last_user_id;
			/* 该用户对当前拍品额度状态更改成不占用 */
			UPDATE USER_QUOTA_USAGES
				 SET STATUS = 0
			 WHERE USER_ID = p_last_user_id
				 AND AUCTION_ID = p_auction_id;
			/*====END_释放当前拍品有代理价用户的额度====*/
		
			/* 记录当前用户额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 1,
				 1,
				 v_now);
			/* 减去用户出价所占额度 */
			UPDATE USERS SET QUOTA = QUOTA - p_price WHERE id = p_user_id;
		
			/* 记录(当前)用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_last_proxy_price,
				 p_ip,
				 1,
				 v_now,
				 0,
				 p_app_id);
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_last_proxy_price,
				 p_ip,
				 1,
				 v_now,
				 0,
				 p_app_id);
		
			/* 记录(代理价)用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_last_user_id,
				 v_last_user_nickname,
				 p_last_proxy_price,
				 p_last_ip,
				 1,
				 v_now,
				 0,
				 p_last_app_id);
		
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_last_user_id,
				 v_last_user_nickname,
				 p_last_proxy_price,
				 p_last_ip,
				 1,
				 v_now,
				 0,
				 p_last_app_id);
			/*
      * 根据业务规则，不能把当前出价显示为代理价,
      * 因为当前出价大于代理价已成为前拍品代理价。必须对当前拍品竞拍价格进行调制。
      */
			BEGIN
				P_BID_INTERVAL(p_last_proxy_price,
											 v_next_legal_price,
											 v_price_interval);
			END;
		
			/* 记录(当前)用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 v_next_legal_price,
				 p_ip,
				 1,
				 v_now,
				 1,
				 p_app_id);
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 v_next_legal_price,
				 p_ip,
				 1,
				 v_now,
				 1,
				 p_app_id);
			/*------当前出价大于该拍品下一个合法价------ */
			IF p_price > v_next_legal_price THEN
				/* 更改该拍品最大价格为当前用户，下一个合法价为最大价，当前出价为代理价*/
				UPDATE AUCTION_MAX_PRICES_NEW
					 SET USER_ID      = p_user_id,
							 nickname     = p_user_nickname,
							 MAX_PRICE    = v_next_legal_price,
							 PROXY_PRICE  = p_price,
							 AUCTION_TIME = AUCTION_TIME + 3,
							 APP_ID       = p_app_id
				 WHERE AUCTION_ID = p_auction_id;
			
				/* 记录代理价出价记录 */
				INSERT INTO AUCTION_PROXY_PRICES
					(ID,
					 AUCTION_ID,
					 PROXY_PRICE,
					 USER_ID,
					 nickname,
					 CREATED_AT,
					 STATUS,
					 APP_ID)
				VALUES
					(AUCTION_PROXY_PRICES_SEQ.NEXTVAL,
					 p_auction_id,
					 p_price,
					 p_user_id,
					 p_user_nickname,
					 v_now,
					 1,
					 p_app_id);
				/*-------当前出价小于或等于该拍品下一个合法价-------*/
			ELSE
				/* 更改该拍品最大价格为当前用户，下一个合法价为最大价，代理价为0*/
				UPDATE AUCTION_MAX_PRICES_NEW
					 SET USER_ID      = p_user_id,
							 nickname     = p_user_nickname,
							 MAX_PRICE    = v_next_legal_price,
							 PROXY_PRICE  = 0,
							 AUCTION_TIME = AUCTION_TIME + 3,
							 APP_ID       = p_app_id
				 WHERE AUCTION_ID = p_auction_id;
			END IF;
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				/*插入数据唯一索引对应的列上有重复值*/
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN NO_DATA_FOUND THEN
				/* 末找到数据 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN OTHERS THEN
				/* 其它异常 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
		END;
	END IF;
	RESULT_STATUS := 0;
END P_BID_HAD_PROXY;

 
/

-- ----------------------------
-- Procedure structure for P_BID_INITI
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_INITI"
(
	p_user_id       NUMBER,
	p_auction_id    NUMBER,
	p_price         NUMBER,
	p_initial_price OUT NUMBER,
	p_auction_type  OUT NUMBER,
	p_auction_no    OUT NUMBER,
	p_auction_name  OUT VARCHAR,
	P_END_AT        OUT DATE,
	RESULT_STATUS   OUT NUMBER
	/*
                                       作者：  Dwen
                                       日期：  2011-07-22
                                       描述：  检查用户是否满足出价条件
                                       RESULT_STATUS说明：
                                       0: 用户符合出价条件
                                       1: 用户不存在
                                       2: 用户被锁定冻结
                                       3: 用户额度不够
                                       4: 拍品已结标或过期
                                       5: 出价不符合规则
                                  */
) IS
	v_islock        NUMBER;
	v_quota         NUMBER;
	v_now           DATE := SYSDATE;
	v_initial_price NUMBER := 0;
	v_auction_type  CHAR(1) := '1';
	v_auction_no    NUMBER;
	v_auction_name  VARCHAR(1000);

	V_AUCTION_END_AT   DATE;
	V_AUCTION_START_AT DATE;
	V_AUCTION_STATUS   VARCHAR2(255);

	V_USER_ID     NUMBER;
	V_PROXY_PRICE NUMBER;
	V_MAX_PRICE   NUMBER;
BEGIN
	/*检查用户是否存在*/
	BEGIN
		SELECT STATUS, QUOTA
			INTO v_islock, v_quota
			FROM USERS
		 WHERE ID = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 1;
			RETURN;
	END;

	/*
  检查用户是否被锁定,
  不支付冻结,冻结竞拍权限,冻结资金竞拍权限,
  以上状态不能竞拍
  更新人:李征 2012-01-18
  */
	IF v_islock = 1 OR v_islock = 3 OR v_islock = 4 THEN
		ROLLBACK;
		RESULT_STATUS := 2;
		RETURN;
	END IF;

	BEGIN
		/*如果出价用户为当前代理领先,可用额度为当前拍品的代理价+用户可用额度,
    这样用户无需取消代理价再出新的代理价
    方便用户直接更新代理价*/
		SELECT USER_ID, PROXY_PRICE, MAX_PRICE
			INTO V_USER_ID, V_PROXY_PRICE, V_MAX_PRICE
			FROM AUCTION_MAX_PRICES_NEW
		 WHERE AUCTION_ID = p_auction_id;
	
		IF V_USER_ID = p_user_id THEN
			IF V_QUOTA IS NULL THEN
				V_QUOTA := 0;
			END IF;
			IF V_PROXY_PRICE <= 0 THEN
				V_QUOTA := V_QUOTA + V_MAX_PRICE;
			ELSE
				V_QUOTA := V_QUOTA + V_PROXY_PRICE;
			END IF;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RESULT_STATUS := 4;
			RETURN;
	END;

	/*检查用户额度是否为空并且检查用户额度是否小于当前拍品价格*/
	IF v_quota IS NULL OR v_quota < p_price THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS := 3;
			RETURN;
		END;
	END IF;

	/*
  *检查拍品是否符合在线出售条件
  *在线出售条件:
  *   1、拍品status=2在线出售状态
  *   2、拍品出售时间合法
  */
	BEGIN
		SELECT AUCTION_NO, NAME, INITIAL_PRICE, AUCTION_TYPE
			INTO v_auction_no, v_auction_name, v_initial_price, v_auction_type
			FROM AUCTIONS
		 WHERE END_AT >= v_now
			 AND START_AT <= v_now
			 AND STATUS = 2
			 AND ID = p_auction_id;
	
		SELECT AUCTION_NO,
					 NAME,
					 INITIAL_PRICE,
					 AUCTION_TYPE,
					 STATUS,
					 START_AT,
					 END_AT
			INTO v_auction_no,
					 v_auction_name,
					 v_initial_price,
					 v_auction_type,
					 V_AUCTION_STATUS,
					 V_AUCTION_START_AT,
					 V_AUCTION_END_AT
			FROM AUCTIONS
		 WHERE ID = p_auction_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 4;
			RETURN;
	END;
	--如果拍品撤拍
	IF V_AUCTION_STATUS IN ('4', '11', '12') THEN
		RESULT_STATUS := 11;
		RETURN;
	END IF;
	--拍品已经过期,或还未开拍
	IF V_AUCTION_END_AT < V_NOW OR V_AUCTION_START_AT > V_NOW THEN
		RESULT_STATUS := 4;
		RETURN;
	END IF;

	IF p_price < V_MAX_PRICE THEN
		RESULT_STATUS := 5;
		RETURN;
	END IF;
	P_END_AT        := V_AUCTION_END_AT;
	p_initial_price := v_initial_price; /*拍品初始化价格*/
	p_auction_type  := v_auction_type; /*标识拍品状态：1表示竞拍品，0表示一口价*/
	p_auction_no    := v_auction_no;
	p_auction_name  := v_auction_name;
	RESULT_STATUS   := 0;
	RETURN;
END P_BID_INITI;

 
/

-- ----------------------------
-- Procedure structure for P_BID_INTERVAL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_INTERVAL" (
	PRICE NUMBER,
	NEXT_PRICE OUT NUMBER,
	PRICE_INTERVAL OUT NUMBER
      /*
      * 作者： Dwen
      * 日期： 2011-11-28
      * 描述：竞拍价格调制控制
      * 参数说明：
      *   price           ：当前出价
      *   next_price      ：下一个出价
      *   price_interval  ：调制价格区间
      */
	)
	IS
BEGIN
	IF PRICE>0 AND PRICE< 50 THEN
		BEGIN
			PRICE_INTERVAL:=1;
		END;
	ELSIF PRICE>=50 AND PRICE<100 THEN
		BEGIN
			PRICE_INTERVAL:=2;
		END;
	ELSIF PRICE>=100 AND PRICE<500 THEN
		BEGIN
			PRICE_INTERVAL:=5;
		END;
	ELSIF PRICE>=500 AND PRICE<1000 THEN
		BEGIN
			PRICE_INTERVAL:=10;
		END;
	ELSIF PRICE>=1000 AND PRICE<2000 THEN
		BEGIN
			PRICE_INTERVAL:=20;
		END;
	ELSIF PRICE>=2000 AND PRICE<5000 THEN
		BEGIN
			PRICE_INTERVAL:=50;
		END;
	ELSIF PRICE>=5000 AND PRICE<10000 THEN
		BEGIN
			PRICE_INTERVAL:=100;
		END;
	ELSIF PRICE>=10000 AND PRICE<20000 THEN
		BEGIN
			PRICE_INTERVAL:=200;
		END;
	ELSIF PRICE>=20000 AND PRICE<50000 THEN
		BEGIN
			PRICE_INTERVAL:=500;
		END;
	ELSIF PRICE>=50000 AND PRICE<200000 THEN
		BEGIN
			PRICE_INTERVAL:=1000;
		END;
	ELSIF PRICE>=200000 THEN
		BEGIN
			PRICE_INTERVAL:=2000;
		END;
	END IF;
	NEXT_PRICE:=PRICE+PRICE_INTERVAL;
END P_BID_INTERVAL;


 
/

-- ----------------------------
-- Procedure structure for P_BID_MODIFY_PROXY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_MODIFY_PROXY" (
	p_user_id NUMBER,
	p_auction_id NUMBER,
	p_proxy_price IN OUT NUMBER,
  p_app_id VARCHAR,
	RESULT_STATUS OUT NUMBER
	 /*
      作者： Dwen
      日期： 2011-12-08>
      描述： 用户修改代理价
      参数说明:
      p_user_id       : 当前用户ID
      p_auction_id    :当前拍品ID
      p_proxy_price   :当前需要修改的代理价
      p_app_id        :  0:PC, 1:WAP, 2:IPHONE, 3:ANDROID
      RESULT_STATUS说明：
      0: 出价成功
      1: 用户不存在
      2: 用户锁定冻结
      3: 用户额度不够
      4: 拍品已结标或过期
      5: 加价幅度不符合
      7: 系统锁错误
      8: 系统末知错误
      9: 系统最大价格数据末找到错误
	*/
	) IS
        v_islock NUMBER;
       	v_quota NUMBER;
       	v_now DATE:=SYSDATE;
       	v_current_price NUMBER:=0;
       	v_last_user_id NUMBER:=0;
       	v_last_proxy_price NUMBER:=0;
       	v_initial_price NUMBER:=0;
       	v_next_legal_price NUMBER:=0;
       	v_price_interval NUMBER:=0;
       	v_auction_lock NUMBER;
       	v_used_quota NUMBER:=0;
BEGIN
	/* 检查用户是否存在 */
	BEGIN
		SELECT ISLOCK, QUOTA into v_islock, v_quota FROM USERS WHERE ID=p_user_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=1;
		RETURN;
	END;

	/*  检查用户是否被锁 */
	IF v_islock = 1 THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS:=2;
			RETURN;
		END;
	END IF;

	/* 检查当前拍品是否可以合法出价 */
	BEGIN
		SELECT INITIAL_PRICE INTO v_initial_price FROM AUCTIONS WHERE END_AT>=v_now AND START_AT<=v_now AND STATUS=2 AND ID=p_auction_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=4;
		RETURN;
	END;

	/* 调制拍品出价价格 */
	BEGIN P_BID_INTERVAL(p_proxy_price,v_next_legal_price,v_price_interval); END;
	IF MOD(p_proxy_price,v_price_interval)>0 THEN
		BEGIN
			p_proxy_price:=p_proxy_price-MOD(p_proxy_price,v_price_interval);
		END;
	END IF;

	/* 对当前拍品记录进行锁定 */
	BEGIN
		SELECT ID INTO v_auction_lock FROM AUCTION_MAX_PRICES_NEW WHERE AUCTION_ID=p_auction_id FOR UPDATE;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=7;
		RETURN;
	END;

	/* 获得当前拍最大价格记录 */
	BEGIN
		SELECT MAX_PRICE,USER_ID,PROXY_PRICE INTO v_current_price, v_last_user_id,v_last_proxy_price FROM AUCTION_MAX_PRICES_NEW WHERE AUCTION_ID=p_auction_id AND USER_ID=p_user_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=9;
		RETURN;
	END;

	/* 检查用户额度是否小于当前出价 */
	IF v_quota + case  when v_last_proxy_price>0 then v_last_proxy_price else v_current_price end < p_proxy_price THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS:=3;
			RETURN;
		END;
	END IF;

	/* 代理价小于拍品当前价 */
	IF p_proxy_price < v_current_price THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS:=5;
			RETURN;
		END;
	END IF;

	/* 额度释放 */
	BEGIN
		SELECT USE_QUOTA INTO v_used_quota FROM USER_QUOTA_USAGES WHERE USER_ID=v_last_user_id AND AUCTION_ID=p_auction_id AND STATUS=1 AND ROWNUM=1;
		UPDATE USERS SET QUOTA = QUOTA+v_used_quota-p_proxy_price WHERE ID=v_last_user_id;
		UPDATE USER_QUOTA_USAGES SET STATUS=0 WHERE USER_ID=v_last_user_id AND AUCTION_ID=p_auction_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=8;
		RETURN;
  WHEN OTHERS THEN
    ROLLBACK;
		RESULT_STATUS:=8;
		RETURN;
	END;

  BEGIN
  /* 代理价等于拍品当前价 */
	IF p_proxy_price = v_current_price THEN
			UPDATE AUCTION_MAX_PRICES_NEW
			SET PROXY_PRICE=0,APP_ID=p_app_id
			WHERE AUCTION_ID=p_auction_id;

			/* 额度占用 */
			INSERT INTO USER_QUOTA_USAGES
			(ID,USER_ID,AUCTION_ID,USE_QUOTA,STATUS,USE_TYPE,CREATED_AT)
			VALUES
      (USER_QUOTA_USAGES_SEQ.NEXTVAL,v_last_user_id,p_auction_id,p_proxy_price,1,0,v_now);

  /* 代理价大于拍品当前价 */
	ELSE
			UPDATE AUCTION_MAX_PRICES_NEW
			SET PROXY_PRICE=p_proxy_price,APP_ID=p_app_id
			WHERE AUCTION_ID=p_auction_id;

			UPDATE AUCTION_PRICES
			SET IS_PROXY=1,APP_ID=p_app_id
			WHERE AUCTION_ID=p_auction_id AND user_id=p_user_id;

			/* 额度占用 */
			INSERT INTO USER_QUOTA_USAGES
			(ID,USER_ID,AUCTION_ID,USE_QUOTA,STATUS,USE_TYPE,CREATED_AT)
			VALUES
			(USER_QUOTA_USAGES_SEQ.NEXTVAL,v_last_user_id,p_auction_id,p_proxy_price,1,1,v_now);
	END IF;
  EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
        ROLLBACK;
        RESULT_STATUS:=8;
        RETURN;
  WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
        ROLLBACK;
        RESULT_STATUS:=8;
        RETURN;
  WHEN OTHERS THEN              /* 其它异常 */
        ROLLBACK;
        RESULT_STATUS:=8;
        RETURN;
  END;
COMMIT;
RESULT_STATUS:=0;
END P_BID_MODIFY_PROXY;


 
/

-- ----------------------------
-- Procedure structure for P_BID_MODIFY_PROXY_2
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_MODIFY_PROXY_2" (
	p_user_id NUMBER,
  p_user_nickname VARCHAR2,
	p_auction_id NUMBER,
	p_proxy_price IN OUT NUMBER,
  p_app_id VARCHAR,
	RESULT_STATUS OUT NUMBER
	 /*
      作者： Dwen
      日期： 2011-12-08>
      描述： 用户修改代理价
      参数说明:
      p_user_id       : 当前用户ID
      p_auction_id    :当前拍品ID
      p_proxy_price   :当前需要修改的代理价
      p_app_id        :  0:PC, 1:WAP, 2:IPHONE, 3:ANDROID
      RESULT_STATUS说明：
      0: 出价成功
      1: 用户不存在
      2: 用户锁定冻结
      3: 用户额度不够
      4: 拍品已结标或过期
      5: 加价幅度不符合
      7: 系统锁错误
      8: 系统末知错误
      9: 系统最大价格数据末找到错误

      修改日期:2012-11-21
      修改人:李征
      描述:修改代理价时,更新原代理价记录,出新代理价记录
	*/
	) IS
        v_islock NUMBER;
       	v_quota NUMBER;
       	v_now DATE:=SYSDATE;
       	v_current_price NUMBER:=0;
       	v_last_user_id NUMBER:=0;
       	v_last_proxy_price NUMBER:=0;
       	v_initial_price NUMBER:=0;
       	v_next_legal_price NUMBER:=0;
       	v_price_interval NUMBER:=0;
       	v_auction_lock NUMBER;
       	v_used_quota NUMBER:=0;
BEGIN
	/* 检查用户是否存在 */
	BEGIN
		SELECT ISLOCK, QUOTA into v_islock, v_quota FROM USERS WHERE ID=p_user_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=1;
		RETURN;
	END;

	/*  检查用户是否被锁 */
	IF v_islock = 1 THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS:=2;
			RETURN;
		END;
	END IF;

	/* 检查当前拍品是否可以合法出价 */
	BEGIN
		SELECT INITIAL_PRICE INTO v_initial_price FROM AUCTIONS WHERE END_AT>=v_now AND START_AT<=v_now AND STATUS=2 AND ID=p_auction_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=4;
		RETURN;
	END;

	/* 调制拍品出价价格 */
	BEGIN P_BID_INTERVAL(p_proxy_price,v_next_legal_price,v_price_interval); END;
	IF MOD(p_proxy_price,v_price_interval)>0 THEN
		BEGIN
			p_proxy_price:=p_proxy_price-MOD(p_proxy_price,v_price_interval);
		END;
	END IF;

	/* 对当前拍品记录进行锁定 */
	BEGIN
		SELECT ID INTO v_auction_lock FROM AUCTION_MAX_PRICES_NEW WHERE AUCTION_ID=p_auction_id FOR UPDATE;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=7;
		RETURN;
	END;

	/* 获得当前拍最大价格记录 */
	BEGIN
		SELECT MAX_PRICE,USER_ID,PROXY_PRICE INTO v_current_price, v_last_user_id,v_last_proxy_price FROM AUCTION_MAX_PRICES_NEW WHERE AUCTION_ID=p_auction_id AND USER_ID=p_user_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=9;
		RETURN;
	END;

	/* 检查用户额度是否小于当前出价 */
	IF v_quota + case  when v_last_proxy_price>0 then v_last_proxy_price else v_current_price end < p_proxy_price THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS:=3;
			RETURN;
		END;
	END IF;

	/* 代理价小于拍品当前价 */
	IF p_proxy_price < v_current_price THEN
		BEGIN
			ROLLBACK;
			RESULT_STATUS:=5;
			RETURN;
		END;
	END IF;

	/* 额度释放 */
	BEGIN
		SELECT USE_QUOTA INTO v_used_quota FROM USER_QUOTA_USAGES WHERE USER_ID=v_last_user_id AND AUCTION_ID=p_auction_id AND STATUS=1 AND ROWNUM=1;
		UPDATE USERS SET QUOTA = QUOTA+v_used_quota-p_proxy_price WHERE ID=v_last_user_id;
		UPDATE USER_QUOTA_USAGES SET STATUS=0 WHERE USER_ID=v_last_user_id AND AUCTION_ID=p_auction_id;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		RESULT_STATUS:=8;
		RETURN;
  WHEN OTHERS THEN
    ROLLBACK;
		RESULT_STATUS:=8;
		RETURN;
	END;

  BEGIN
  /* 代理价等于拍品当前价 */
	IF p_proxy_price = v_current_price THEN
			UPDATE AUCTION_MAX_PRICES_NEW
			SET PROXY_PRICE=0,APP_ID=p_app_id
			WHERE AUCTION_ID=p_auction_id;

			/* 额度占用 */
			INSERT INTO USER_QUOTA_USAGES
			(ID,USER_ID,AUCTION_ID,USE_QUOTA,STATUS,USE_TYPE,CREATED_AT)
			VALUES
      (USER_QUOTA_USAGES_SEQ.NEXTVAL,v_last_user_id,p_auction_id,p_proxy_price,1,0,v_now);

  /* 代理价大于拍品当前价 */
	ELSE
			UPDATE AUCTION_MAX_PRICES_NEW
			SET PROXY_PRICE=p_proxy_price,APP_ID=p_app_id
			WHERE AUCTION_ID=p_auction_id;

			UPDATE AUCTION_PRICES
			SET IS_PROXY=1,APP_ID=p_app_id
			WHERE AUCTION_ID=p_auction_id AND user_id=p_user_id;

			/* 额度占用 */
			INSERT INTO USER_QUOTA_USAGES
			(ID,USER_ID,AUCTION_ID,USE_QUOTA,STATUS,USE_TYPE,CREATED_AT)
			VALUES
			(USER_QUOTA_USAGES_SEQ.NEXTVAL,v_last_user_id,p_auction_id,p_proxy_price,1,1,v_now);

      UPDATE AUCTION_PROXY_PRICES AP SET AP.UPDATED_AT=SYSDATE,AP.STATUS='0'
      WHERE AP.USER_ID=P_USER_ID AND AP.AUCTION_ID=p_auction_id AND AP.STATUS='1';

      /* 记录代理价出价记录 */
			INSERT INTO AUCTION_PROXY_PRICES
				(ID,
				 AUCTION_ID,
				 nickname,
				 PROXY_PRICE,
				 USER_ID,
				 CREATED_AT,
				 STATUS,
				 APP_ID)
			VALUES
				(AUCTION_PROXY_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_nickname,
				 p_proxy_price,
				 p_user_id,
				 SYSDATE,
				 1,
				 p_app_id);

	END IF;
  EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
        ROLLBACK;
        RESULT_STATUS:=8;
        RETURN;
  WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
        ROLLBACK;
        RESULT_STATUS:=8;
        RETURN;
  WHEN OTHERS THEN              /* 其它异常 */
        ROLLBACK;
        RESULT_STATUS:=8;
        RETURN;
  END;
COMMIT;
RESULT_STATUS:=0;
END P_BID_MODIFY_PROXY_2;


 
/

-- ----------------------------
-- Procedure structure for P_BID_NONE_PROXY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_NONE_PROXY"
(
	p_user_id          NUMBER,
	p_user_nickname    VARCHAR2,
	p_auction_id       NUMBER,
	p_price            IN OUT NUMBER,
	p_next_legal_price NUMBER,
	p_last_user_id     NUMBER,
	p_ip               VARCHAR,
	p_app_id           VARCHAR,
	p_last_app_id      VARCHAR,
	p_auction_no       NUMBER,
	p_auction_name     VARCHAR,
	RESULT_STATUS      OUT NUMBER
	/*
                      作者： Dwen
                      日期： 2011-07-22
                      描述： 当前拍品无代理价情况
                      RESULT_STATUS说明：
                      0: 出价成功
                      1: 用户不存在
                      2: 用户锁定冻结
                      3: 用户额度不够
                      4: 拍品已结标或过期
                      5: 加价幅度不符合
                      6: 不可重复出价
                      7: 系统锁错误
                      8: 系统末知错误
                  */
) IS
	v_now        DATE := SYSDATE;
	v_used_quota NUMBER := 0;
BEGIN
	/*===================当前拍品无代理价情况====================*/
	BEGIN
		/*====START_释放当前拍品用户的额度====*/
		/* 统计所占当前拍品的额度 */
		SELECT nvl(SUM(USE_QUOTA), 0)
			INTO v_used_quota
			FROM USER_QUOTA_USAGES
		 WHERE USER_ID = p_last_user_id
			 AND AUCTION_ID = p_auction_id
			 AND STATUS = 1;
		/* 回滚该用户当前拍品所占额度 */
		UPDATE USERS
			 SET QUOTA = QUOTA + v_used_quota
		 WHERE ID = p_last_user_id;
		/* 该用户对当前拍品额度状态更改成不占用 */
		UPDATE USER_QUOTA_USAGES
			 SET STATUS = 0
		 WHERE USER_ID = p_last_user_id
			 AND AUCTION_ID = p_auction_id;
		/*====END_释放当前拍品用户的额度====*/
	
		/* 减去用户出价所占额度 */
		UPDATE USERS SET QUOTA = QUOTA - p_price WHERE id = p_user_id;
	
		/*------当前出价等于该拍品下一个合法价------*/
		IF p_price = p_next_legal_price THEN
			/* 记录(当前)用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_next_legal_price,
				 p_ip,
				 0,
				 v_now,
				 1,
				 p_app_id);
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_next_legal_price,
				 p_ip,
				 0,
				 v_now,
				 1,
				 p_app_id);
		
			/* 更改该拍品最大价格为当前用户，最大价为下一个合法价，代理价为0*/
			UPDATE AUCTION_MAX_PRICES_NEW
				 SET USER_ID      = p_user_id,
						 nickname     = p_user_nickname,
						 MAX_PRICE    = p_next_legal_price,
						 PROXY_PRICE  = 0,
						 AUCTION_TIME = AUCTION_TIME + 1,
						 APP_ID       = p_app_id
			 WHERE AUCTION_ID = p_auction_id;
		
			/* 记录当前用户额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 1,
				 0,
				 v_now);
		
			/*------当前出价大于该拍品下一个合法价,则设为代理价------*/
		ELSE
			/* 记录(当前)用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_next_legal_price,
				 p_ip,
				 1,
				 v_now,
				 1,
				 p_app_id);
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_next_legal_price,
				 p_ip,
				 1,
				 v_now,
				 1,
				 p_app_id);
		
			/* 更改该拍品最大价格为当前用户，最大价为下一个合法价，当前出价为代理价*/
			UPDATE AUCTION_MAX_PRICES_NEW
				 SET USER_ID      = p_user_id,
						 nickname     = p_user_nickname,
						 MAX_PRICE    = p_next_legal_price,
						 PROXY_PRICE  = p_price,
						 AUCTION_TIME = AUCTION_TIME + 1,
						 APP_ID       = p_app_id
			 WHERE AUCTION_ID = p_auction_id;
		
			/* 记录代理价出价记录 */
			INSERT INTO AUCTION_PROXY_PRICES
				(ID,
				 AUCTION_ID,
				 nickname,
				 PROXY_PRICE,
				 USER_ID,
				 CREATED_AT,
				 STATUS,
				 APP_ID)
			VALUES
				(AUCTION_PROXY_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_nickname,
				 p_price,
				 p_user_id,
				 v_now,
				 1,
				 p_app_id);
		
			/* 记录当前用户额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 1,
				 1,
				 v_now);
		END IF;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			/*插入数据唯一索引对应的列上有重复值*/
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
		WHEN NO_DATA_FOUND THEN
			/* 末找到数据 */
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
		WHEN OTHERS THEN
			/* 其它异常 */
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
	END;
	RESULT_STATUS := 0;
END P_BID_NONE_PROXY;

 
/

-- ----------------------------
-- Procedure structure for P_BID_PRIMITIVE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_PRIMITIVE"
(
	p_user_id       NUMBER,
	p_user_nickname VARCHAR2,
	p_auction_id    NUMBER,
	p_price         IN OUT NUMBER,
	p_initial_price IN OUT NUMBER,
	p_ip            VARCHAR,
	p_auction_no    NUMBER,
	p_auction_name  VARCHAR,
	p_app_id        VARCHAR,
	RESULT_STATUS   OUT NUMBER
	/*
                                    作者： Dwen
                                    日期： 2011-07-22
                                    描述： 当前拍品末出过价情况
                                    RESULT_STATUS说明：
                                    0: 出价成功
                                    1: 用户不存在
                                    2: 用户锁定冻结
                                    3: 用户额度不够
                                    4: 拍品已结标或过期
                                    5: 加价幅度不符合
                                    6: 不可重复出价
                                    7: 系统锁错误
                                    8: 系统末知错误
                                */
	/*
                                          更新:2012-05-12.李征
                                          拍品第一口价大于初始价时,自动出代理价
                                          添加参数p_price
                                     */
) IS
	v_now              DATE := SYSDATE;
	v_initial_price    NUMBER := 0;
	v_next_legal_price NUMBER := 0;
	v_price_interval   NUMBER := 0;
BEGIN
	/* ============当前拍品末出过价情况================= */
	BEGIN
		/* 调制拍品出价价格
       未出过价,拍品第一口出价为初始价,下一合法价也是初始价
       如果第一口价大于初始价,自动出代理价
    */
		P_BID_INTERVAL(p_price, v_next_legal_price, v_price_interval);
		/* 当前出价不符合规则 */
		IF MOD(p_price, v_price_interval) > 0 THEN
			ROLLBACK;
			RESULT_STATUS := 5;
			RETURN;
		END IF;
		/*没出过价的情况下,出价符合规则,下一出价为初始价*/
		v_next_legal_price := p_initial_price;
	END;

	BEGIN
		/* 减去用户出价所占额度 */
		UPDATE USERS SET QUOTA = QUOTA - p_price WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			/* 末找到数据 */
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
		WHEN OTHERS THEN
			/* 其它异常 */
			ROLLBACK;
			RESULT_STATUS := 8;
			RETURN;
	END;

	/*-------当前出价等于下一个出价(用户无手动改变价格，默认出价情况)-------*/
	IF p_price = v_next_legal_price THEN
		BEGIN
			/* 记录用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_price,
				 p_ip,
				 0,
				 v_now,
				 1,
				 p_app_id);
		
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 p_price,
				 p_ip,
				 0,
				 v_now,
				 1,
				 p_app_id);
		
			/* 更改拍品最大记录 */
			UPDATE AUCTION_MAX_PRICES_NEW
				 SET USER_ID      = p_user_id,
						 nickname     = p_user_nickname,
						 AUCTION_TIME = 1,
						 MAX_PRICE    = p_price,
						 PROXY_PRICE  = 0.0,
						 APP_ID       = p_app_id
			 WHERE AUCTION_ID = p_auction_id;
		
			/* 记录用户额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 1,
				 0,
				 v_now);
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				/*插入数据唯一索引对应的列上有重复值*/
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN NO_DATA_FOUND THEN
				/* 末找到数据 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN OTHERS THEN
				/* 其它异常 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
		END;
		/*------当前出价大于下一个出价(用户手动改变价格，大于下一个出价则设为代理价)-------*/
	ELSE
		BEGIN
			/* 记录用户出价记录 */
			INSERT INTO AUCTION_PRICES
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 v_next_legal_price,
				 p_ip,
				 1,
				 v_now,
				 1,
				 p_app_id);
		
			INSERT INTO AUCTION_PRICES_PARTITION
				(ID,
				 AUCTION_ID,
				 USER_ID,
				 nickname,
				 BID,
				 IP,
				 IS_PROXY,
				 CREATED_AT,
				 IS_MAX,
				 APP_ID)
			VALUES
				(AUCTION_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_user_id,
				 p_user_nickname,
				 v_next_legal_price,
				 p_ip,
				 1,
				 v_now,
				 1,
				 p_app_id);
		
			/* 更改拍品最大记录(当前价格设为代理价)*/
			UPDATE AUCTION_MAX_PRICES_NEW
				 SET USER_ID      = p_user_id,
						 nickname     = p_user_nickname,
						 AUCTION_TIME = 1,
						 MAX_PRICE    = v_next_legal_price,
						 PROXY_PRICE  = p_price,
						 APP_ID       = p_app_id
			 WHERE AUCTION_ID = p_auction_id;
		
			/* 记录用户额度占用 */
			INSERT INTO USER_QUOTA_USAGES
				(ID,
				 USER_ID,
				 AUCTION_ID,
				 AUCTION_NO,
				 AUCTION_NAME,
				 USE_QUOTA,
				 STATUS,
				 USE_TYPE,
				 CREATED_AT)
			VALUES
				(USER_QUOTA_USAGES_SEQ.NEXTVAL,
				 p_user_id,
				 p_auction_id,
				 p_auction_no,
				 p_auction_name,
				 p_price,
				 1,
				 1,
				 v_now);
		
			/* 记录代理价出价记录*/
			INSERT INTO AUCTION_PROXY_PRICES
				(ID,
				 AUCTION_ID,
				 PROXY_PRICE,
				 USER_ID,
				 nickname,
				 CREATED_AT,
				 STATUS,
				 APP_ID)
			VALUES
				(AUCTION_PROXY_PRICES_SEQ.NEXTVAL,
				 p_auction_id,
				 p_price,
				 p_user_id,
				 p_user_nickname,
				 v_now,
				 1,
				 p_app_id);
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				/*插入数据唯一索引对应的列上有重复值*/
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN NO_DATA_FOUND THEN
				/* 末找到数据 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
			WHEN OTHERS THEN
				/* 其它异常 */
				ROLLBACK;
				RESULT_STATUS := 8;
				RETURN;
		END;
	END IF;
	RESULT_STATUS := 0;
END P_BID_PRIMITIVE;

 
/

-- ----------------------------
-- Procedure structure for P_BID_WATCH_BIDDING_AUCTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BID_WATCH_BIDDING_AUCTION"
(
	P_AUCTION_ID    IN NUMBER, --拍品id
	P_USER_ID       IN NUMBER, --用户id
	P_ADD_OR_REMOVE IN NUMBER --关注1/取消关注0
) IS
	/*
     创建人:李征
     时间:2012-07-03
     描述:快速竞拍关注/取消关注拍品
  */
	IS_WATCHING CHAR(1) := '0';
	IS_BIDDING  CHAR(1) := '0';
	IS_CONSIGN  CHAR(1) := '0';
BEGIN
	--添加关注
	IF P_ADD_OR_REMOVE = 1 THEN
		/*MERGE INTO AUCTION_BIDDINGS AB
    USING (SELECT P_USER_ID AS USER_ID,
                  A.ID AS AUCTION_ID,
                  '1' AS WATCHING,
                  A.END_AT
             FROM AUCTIONS A
            WHERE ID = P_AUCTION_ID
              AND A.END_AT > SYSDATE) T
    ON (T.AUCTION_ID = AB.AUCTION_ID AND T.USER_ID = AB.USER_ID)
    WHEN NOT MATCHED THEN
      INSERT
        (ID, USER_ID, AUCTION_ID, WATCHING, END_AT)
      VALUES
        (AUCTION_BIDDING_SEQ.NEXTVAL,
         T.USER_ID,
         T.AUCTION_ID,
         T.WATCHING,
         T.END_AT);*/
		BEGIN
			INSERT INTO AUCTION_BIDDINGS
				(ID, USER_ID, AUCTION_ID, END_AT, WATCHING)
				SELECT AUCTION_BIDDINGS_SEQ.NEXTVAL,
							 P_USER_ID AS USER_ID,
							 A.ID,
							 A.END_AT,
							 '1'
					FROM AUCTIONS A
				 WHERE A.ID = P_AUCTION_ID
					 AND A.AUCTION_TYPE = '1'
					 AND A.STATUS IN ('1', '2')
					 AND NOT EXISTS (SELECT USER_ID
									FROM AUCTION_BIDDINGS UA
								 WHERE UA.USER_ID = P_USER_ID
									 AND UA.AUCTION_ID = A.ID)
					 AND EXISTS (SELECT CATEGORY_ID
									FROM CLIENT_CATEGORY_PATH CCP
								 WHERE CCP.CATEGORY_ID = A.AUCTION_CATEGORY_ID
									 AND CCP.ROOT_CATEGORY_ID != 800);
		EXCEPTION
			WHEN OTHERS THEN
				ROLLBACK;
		END;

		/*MERGE INTO USER_AUCTIONS UA
    USING (SELECT P_USER_ID AS USER_ID, P_AUCTION_ID AS AUCTION_ID FROM DUAL) T
    ON (T.AUCTION_ID = UA.AUCTION_ID AND T.USER_ID = UA.USER_ID)
    WHEN NOT MATCHED THEN
      INSERT
        (ID, USER_ID, AUCTION_ID, CREATED_AT)
      VALUES
        (USER_AUCTIONS_SEQ.NEXTVAL, T.USER_ID, T.AUCTION_ID, SYSDATE);*/

		INSERT INTO USER_AUCTIONS
			(ID, USER_ID, AUCTION_ID, CREATED_AT)
			SELECT USER_AUCTIONS_SEQ.NEXTVAL, P_USER_ID, A.ID, SYSDATE
				FROM AUCTIONS A
			 WHERE A.ID = P_AUCTION_ID
				 AND NOT EXISTS (SELECT ID
								FROM USER_AUCTIONS UA
							 WHERE UA.AUCTION_ID = A.ID
								 AND UA.USER_ID = P_USER_ID);

	ELSE
		--取消关注
		DELETE FROM USER_AUCTIONS
		 WHERE AUCTION_ID = P_AUCTION_ID
			 AND USER_ID = P_USER_ID;

		BEGIN
			SELECT BIDDING, WATCHING, CONSIGN
				INTO IS_BIDDING, IS_WATCHING, IS_CONSIGN
				FROM AUCTION_BIDDINGS
			 WHERE AUCTION_ID = P_AUCTION_ID
				 AND USER_ID = P_USER_ID;

			IF IS_BIDDING = '0' AND IS_CONSIGN = '0' THEN
				DELETE FROM AUCTION_BIDDINGS
				 WHERE USER_ID = P_USER_ID
					 AND AUCTION_ID = P_AUCTION_ID;
			ELSE
				UPDATE AUCTION_BIDDINGS
					 SET WATCHING = '0'
				 WHERE USER_ID = P_USER_ID
					 AND AUCTION_ID = P_AUCTION_ID;
			END IF;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				RETURN;
		END;
	END IF;

END P_BID_WATCH_BIDDING_AUCTION;


 
/

-- ----------------------------
-- Procedure structure for P_BUY_SCORE_ADD_WITH_USERINFO
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_BUY_SCORE_ADD_WITH_USERINFO" (p_user_id     IN NUMBER,
                                                        p_scores      IN NUMBER,
                                                        p_scores_type IN VARCHAR2,
                                                        result_status OUT NUMBER
                                                        /*0:成功;1:参数错误;2:积分不够;3:积分详细表数据错误;5:未知错误*/) IS
  /**
  作者：张禕
  描述：用户中心操作追加竞买积分
  **/
  v_tmp_user_name           VARCHAR2(100);
  v_tmp_buyer_add_scores    NUMBER := 0;
  v_tmp_score_id            NUMBER := 0;
  v_add_scores_count        NUMBER := 0;




BEGIN
    select count(1)
    into v_add_scores_count
    from SCORES s
   where s.user_id = p_user_id
     and s.remarks = p_scores_type
     and s.score_source = '4';
IF v_add_scores_count =0 then



        IF p_user_id IS NULL OR p_scores IS NULL THEN
          result_status := 1;
          RETURN;
        END IF;
        --v_tmp_sell_cut_scores  := p_scores;
        v_tmp_buyer_add_scores := p_scores;
        BEGIN
          SELECT U.NICKNAME
            INTO v_tmp_user_name
            FROM USERS U
           WHERE U.ID = p_user_id;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            result_status := 1;
            RETURN;
        END;

        BEGIN

          SELECT SCORES_SEQ.NEXTVAL INTO v_tmp_score_id FROM DUAL;
          /**增加竞买积分记录**/
          INSERT INTO SCORES
                  (id,
                   user_id,
                   user_name,
                   score_type,
                   score_status,
                   score_source,
                   scores,
                   useable_scores,
                   source_type,
                   created_at,
                   effected_at,
                   expired_at,
                   SOURCE_ID,
                   remarks)
                VALUES
                  (v_tmp_score_id,
                   p_user_id,
                   v_tmp_user_name,
                   '0',
                   '1',
                   '4',
                   v_tmp_buyer_add_scores,
                   v_tmp_buyer_add_scores,
                   'SCORES',
                   sysdate,
                   sysdate,
                   ADD_MONTHS(SYSDATE, 12),
                   '',
                   p_scores_type);
          /**竞买积分流水记录**/
          INSERT INTO SCORE_INCOME_EXPENSES
            (id,
             user_id,
             user_name,
             source_id,
             source_type,
             scores,
             score_type,
             direction,
             operation_type,
             created_at,
             remarks)
          VALUES
            (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
             p_user_id,
             v_tmp_user_name,
             v_tmp_score_id,
             'Scores',
             v_tmp_buyer_add_scores,
             '0',
             '0',
             '2',
             sysdate,
             p_scores_type);

             UPDATE USERS U
               SET U.BUY_SCORE_USEABLE  = U.BUY_SCORE_USEABLE + p_scores
             WHERE U.ID = p_user_id;

            result_status := 0;
          END;
END IF;
result_status := 0;
      COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      result_status := 5;
      ROLLBACK;
      RETURN;
END;


 
/

-- ----------------------------
-- Procedure structure for P_CALCULATE_STORAGE_CHARGES
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_CALCULATE_STORAGE_CHARGES"  is
   /*满足条件下面条件：
      交易单已支付、拍品已结标超过30天(截止当前日期前一天23点59分59秒)且未申请过退货
      未申请发货，或者已申请发货但发货单已暂缓 */
   cursor user_order_cur is
   
begin
   
  
end P_CALCULATE_STORAGE_CHARGES;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_CLEAN_AUCTION_CHANGE_LOGS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_CLEAN_AUCTION_CHANGE_LOGS" IS
	/*
     描述:定时清理AUCTION_STATUS_CHANGE_LOGS记录,提高查询速度
     创建人:李征
  */
BEGIN
	DELETE FROM AUCTION_STATUS_CHANGE_LOGS WHERE UPDATED_AT < SYSDATE - 3;
  commit;
END P_CLEAN_AUCTION_CHANGE_LOGS;


 
/

-- ----------------------------
-- Procedure structure for P_CLIENT_CATEGORY_PATH
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_CLIENT_CATEGORY_PATH"(P_ID IN NUMBER) IS
	/*
        创建人:李征
        日期:2012-03-28
        描述:初始生成各个类别的完整路径
  */
	CURSOR CTG IS
		SELECT C.ID, c.NAME_PINYIN
			FROM AUCTION_CATEGORIES C
		 START WITH C.PARENT_ID = 0
		CONNECT BY PRIOR C.ID = C.PARENT_ID
		 ORDER BY LEVEL DESC;
	V_CATEGORY_PATH        VARCHAR2(255);
	V_CATEGORY_PINYIN_PATH VARCHAR2(255);
	v_root_id              NUMBER;
BEGIN
	FOR CTG_ID IN CTG LOOP
		--V_CATEGORY_PINYIN_PATH := F_GET_PARENT_CATEGORY(CTG_ID.ID);
		V_CATEGORY_PATH := F_GET_CATEGORY_PATH(CTG_ID.ID, v_root_id);

		MERGE INTO CLIENT_CATEGORY_PATH CCP
		USING (SELECT CTG_ID.ID          AS ID,
									ctg_id.NAME_PINYIN AS PINYIN,
									V_CATEGORY_PATH    AS PATH
						 FROM DUAL) T
		ON (CCP.CATEGORY_ID = T.ID)
		WHEN MATCHED THEN
			UPDATE SET CCP.CATEGORY_PATH = T.PATH, CCP.NAME_PINYIN = PINYIN
		WHEN NOT MATCHED THEN
			INSERT
				(CATEGORY_ID, CATEGORY_PATH, NAME_PINYIN, ROOT_CATEGORY_ID)
			VALUES
				(T.ID, T.PATH, T.PINYIN, v_root_id);

	END LOOP;
	RETURN;
END P_CLIENT_CATEGORY_PATH;


 
/

-- ----------------------------
-- Procedure structure for P_CONTRACT_AMOUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_CONTRACT_AMOUNT" (p_assign_type in varchar, --合同操作类型
                                              p_post_id     in varchar) is
  /*
  作者:刘静
  修改时间:2011-12-18
  描述:统计合同统计工作量（后台调用）
  */
  v_contract_count       number := 0; --合同数
  v_auction_count        number := 0; --拍品数
  v_check_contract_count number := 0; --待检查合同数
  v_check_auction_count  number := 0; --待检查拍品数

  v_before_finished_date date; --最早完成时间
  v_after_finished_date  date; --最完完成时间

  v_contract_count_overdate number := 0; --超期合同数

  v_status_assign     number; --分配完毕状态
  v_status_wait_check number; --待检查状态

  type cur_type is ref cursor;
  cur_admins cur_type;
  v_sql    varchar2(10000);
  result_row  pri_admins%rowtype;
  v_post_id varchar2(255);

  --查找postId岗位下的人员
 /* cursor admin_cur is
    select pa.*
      from pri_admins pa
     where pa.id in (
              select admin_id
              from pri_admin_posts
              where post_id in (
                 select pp.id
                  from pri_posts pp
                 start with pp.id in ( p_post_id)
                connect by prior pp.id = pp.parent_id
              )
           )
     order by pa.id;*/

begin

   if p_assign_type = '2' then
    -- 2：整理分配
    v_post_id := '1078,1043,1044,1032';
  elsif p_assign_type = '4' then
    -- 4：制图分配
    v_post_id := '1049,1050';
  elsif p_assign_type = '6' then
    -- 4：审核分配
    v_post_id := '1046,1079';
  end if;

    v_sql := 'select pa.id,pa.true_name
             from pri_admins pa
             where pa.id in (
                select admin_id
                from pri_admin_posts
                where post_id in (
                   select pp.id
                    from pri_posts pp
                   start with pp.id in ('||v_post_id||')
                   connect by prior pp.id = pp.parent_id
                )
              )
              and pa.is_useable = 1
           order by pa.id';


  delete temp_contract_total where optype = p_assign_type;
  commit;
  if p_assign_type = '2' then
    -- 2：整理分配
    v_status_assign     := 2; -- 整理分配完毕
    v_status_wait_check := 3; --整理完毕

  elsif p_assign_type = '4' then
    -- 4：制图分配
    v_status_assign     := 6; -- 制图分配完毕
    v_status_wait_check := 7; --制图完毕

  elsif p_assign_type = '6' then
    -- 4：审核分配
    v_status_assign     := 10; -- 审核分配完毕
    v_status_wait_check := 11; --审核完毕

  end if;

  --for result_row in admin_cur loop

   open cur_admins for v_sql;
   loop
     fetch cur_admins
        into result_row.id,
         result_row.true_name
        ;
      exit when cur_admins%notfound;

    /*分配完成后 */
    if p_assign_type = '2' then --整理阶段是预计拍品数，其他都是拍品数
       /*合同数、预计拍品数*/
      select count(1),
             decode(sum(c.expect_count), null, 0, sum(c.expect_count))
        into v_contract_count, v_auction_count
        from contracts c
        left join contract_details cd on c.id = cd.contract_id
       where cd.status = v_status_assign -- 分配完成后
         and c.id in (select ca.contract_id
                        from contract_assigns ca
                       where ca.status = 1
                         and ca.assign_type = p_assign_type
                         and ca.assigned_to_id = result_row.id);
    else
      /*合同数、拍品数*/
      select count(1), decode(sum(auction_num), null, 0, sum(auction_num))
        into v_contract_count, v_auction_count
        from (select c.id,
                     (select count(1)
                        from auctions au
                       where au.contract_id = c.id) auction_num
                from contracts c
                left join contract_details cd on c.id = cd.contract_id
               where cd.status = v_status_assign -- 分配完成后
                 and c.id in
                     (select ca.contract_id
                        from contract_assigns ca
                       where ca.status = 1
                         and ca.assign_type = p_assign_type
                         and ca.assigned_to_id = result_row.id)

              );
    end if;

    /*待检查*/
    select count(1), decode(sum(auction_num), null, 0, sum(auction_num))
      into v_check_contract_count, v_check_auction_count
      from (select c.id,
                   (select count(1)
                      from auctions au
                     where au.contract_id = c.id) auction_num
              from contracts c
              left join contract_details cd on c.id = cd.contract_id
             where cd.status = v_status_wait_check -- 待检查状态
               and c.id in
                   (select ca.contract_id
                      from contract_assigns ca
                     where ca.status = 1
                       and ca.assign_type = p_assign_type
                       and ca.assigned_to_id = result_row.id)

            );



    if p_assign_type = '2' then
      -- 2：整理分配

     /*最早完成时间、最晚完成时间*/
     select min(c.finished_date), max(c.finished_date)
      into v_before_finished_date, v_after_finished_date
      from contracts c
      left join contract_details cd on c.id = cd.contract_id
     where  cd.status in (1,2,3)
     and c.id in (select ca.contract_id
                      from contract_assigns ca
                     where ca.status = 1
                       and ca.assign_type = p_assign_type
                       and ca.assigned_to_id = result_row.id);
      /*超期合同数*/
      select count(1)
        into v_contract_count_overdate
        from (select ca1.created_at--, conset.limit_collate_days
                from contracts c
                left join contract_details cd on c.id = cd.contract_id
               -- left join contract_settings conset on conset.user_level =
               --                                            c.user_level
                left join contract_assigns ca1 on c.id =
                                                       ca1.contract_id
                                                   and ca1.status = '1'
                                                   and ca1.assign_type = '1' --登记整理交接
               where cd.status in (1,2,3,4) ---1: 合同交接完毕2:整理分配完毕 3：整理完毕 4：整理检查完毕
                 and c.id in
                     (select ca.contract_id
                        from contract_assigns ca
                       where ca.status = 1
                         and ca.assign_type = p_assign_type
                         and ca.assigned_to_id = result_row.id)

              ) va
       where ceil(sysdate - va.created_at) > 4;

    elsif p_assign_type = '4' then
      -- 4：制图分配
      /*最早完成时间、最晚完成时间*/
     select min(c.finished_date), max(c.finished_date)
      into v_before_finished_date, v_after_finished_date
      from contracts c
      left join contract_details cd on c.id = cd.contract_id
     where  cd.status in (5,6,7)
     and c.id in (select ca.contract_id
                      from contract_assigns ca
                     where ca.status = 1
                       and ca.assign_type = p_assign_type
                       and ca.assigned_to_id = result_row.id);
      /*超期合同数*/
      select count(1)
        into v_contract_count_overdate
        from (select ca1.created_at--, conset.limit_draw_days
                from contracts c
                left join contract_details cd on c.id = cd.contract_id
               -- left join contract_settings conset on conset.user_level =
                --                                           c.user_level
                left join contract_assigns ca1 on c.id =
                                                       ca1.contract_id
                                                   and ca1.status = '1'
                                                   and ca1.assign_type = '3' --整理制图交接
               where cd.status in (5,6,7,8) ---5:整理制图交接完毕6:制图分配完毕 7：制图完毕 8：制图检查完毕
                 and c.id in
                     (select ca.contract_id
                        from contract_assigns ca
                       where ca.status = 1
                         and ca.assign_type = p_assign_type
                         and ca.assigned_to_id = result_row.id)

              ) va
       where ceil(sysdate - va.created_at) > 4;

    elsif p_assign_type = '6' then
      -- 4：审核分配
      /*最早完成时间、最晚完成时间*/
     select min(c.finished_date), max(c.finished_date)
      into v_before_finished_date, v_after_finished_date
      from contracts c
      left join contract_details cd on c.id = cd.contract_id
     where  cd.status in (9,10)
     and c.id in (select ca.contract_id
                      from contract_assigns ca
                     where ca.status = 1
                       and ca.assign_type = p_assign_type
                       and ca.assigned_to_id = result_row.id);
     /*超期合同数*/
      select count(1)
        into v_contract_count_overdate
        from (select ca1.created_at--, conset.limit_audit_days
                from contracts c
                left join contract_details cd on c.id = cd.contract_id
                --left join contract_settings conset on conset.user_level =
                 --                                          c.user_level
                left join contract_assigns ca1 on c.id =
                                                       ca1.contract_id
                                                   and ca1.status = '1'
                                                   and ca1.assign_type = '5' --制图审核交接
               where cd.status in (9,10,11) ---9：制图审核交接10:审核分配完毕 11：审核完毕
                 and c.id in
                     (select ca.contract_id
                        from contract_assigns ca
                       where ca.status = 1
                         and ca.assign_type = p_assign_type
                         and ca.assigned_to_id = result_row.id)

              ) va
       where ceil(sysdate - va.created_at) > 4;

    end if;

    /*添加到临时表*/
    insert into temp_contract_total
      (pk_id,
       id,
       optype,
       op,
       contractcount,
       auctioncount,
       checkcontractcount,
       checkauctioncount,
       beforefinisheddate,
       afterfinisheddate,
       remarkscount)
    values
      (temp_contract_total_seq.nextval,
       result_row.id,
       p_assign_type,
       result_row.true_name,
       v_contract_count,
       v_auction_count,
       v_check_contract_count,
       v_check_auction_count,
       v_before_finished_date,
       v_after_finished_date,
       v_contract_count_overdate);

    commit;
   end loop;
  --end loop;

end p_contract_amount;


 
/

-- ----------------------------
-- Procedure structure for P_CREATE_PAYPAL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_CREATE_PAYPAL"
(
	p_user_id          IN NUMBER,
	p_order_ids        IN VARCHAR,
	p_amount           IN NUMBER,
	p_deposit          IN NUMBER,
	p_remark           IN VARCHAR,
	p_currency         IN VARCHAR,
	p_deliver_type_id  IN NUMBER,
	p_receive_name     IN VARCHAR,
	p_address          IN VARCHAR,
	p_postcode         IN VARCHAR,
	p_country_id       IN NUMBER,
	p_tel              IN VARCHAR,
	p_mobile_tel       IN VARCHAR,
	p_keep_orders      IN CHAR,
	p_first_name       IN VARCHAR,
	p_last_name        IN VARCHAR,
	p_unite_consign_id IN NUMBER,
	IPS_PAYMENT_ID     OUT NUMBER,
	RESULT_STATUS      OUT NUMBER
	/*
      *     作者：       Dwen
      *     日期：       2012-07-25
      *     描述：       在线支付创建支付单
      *     RESULT_STATUS说明:
      *     1:末找到用户
      *     2:无订单
      *     3:发货国家不可用
      */
) IS
	v_sql              VARCHAR2(4000);
	v_orders_count     NUMBER := 0;
	v_total_amount     NUMBER := 0;
	v_now              DATE := SYSDATE;
	v_mc_gross         NUMBER := 0;
	v_mc_fee           NUMBER := 0;
	v_bid              NUMBER := 0;
	v_user_id          NUMBER := 0;
	v_deliver_fee      NUMBER := 0;
	v_unite_consign_id NUMBER := 0;
	v_custody_fee      NUMBER := 0;
	v_custody_fee1     NUMBER := 0;
	v_custody_fee2     NUMBER := 0;
	v_insurance_fee    NUMBER := 0;
BEGIN
	/* 检查该用户 */
	BEGIN
		SELECT ID INTO v_user_id FROM USERS WHERE ID = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 1;
			RETURN;
	END;
	CASE
	/* 1.订单支付 */
		WHEN p_order_ids IS NOT NULL THEN
			BEGIN
				/* 查询订单数，订单总额，保管费(30天后每天收1毛钱) */
				v_sql := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT),SUM(CEIL(SYSDATE-END_DATE-30))*0.1 FROM USER_ORDERS WHERE USER_ID=' ||
								 v_user_id || ' AND STATUS!=1 AND ID IN (' || p_order_ids || ')';
				EXECUTE IMMEDIATE v_sql
					INTO v_orders_count, v_total_amount, v_custody_fee1;
				IF v_orders_count = 0 THEN
					BEGIN
						ROLLBACK;
						RESULT_STATUS := 2;
						RETURN;
					END;
				END IF;

				BEGIN
					SELECT ID
						INTO v_unite_consign_id
						FROM LOGISTIC_DETAILS
					 WHERE ID = p_unite_consign_id
						 AND STATUS < 2;

					SELECT SUM(CEIL(SYSDATE - END_DATE - 30) * 0.1)
						INTO v_custody_fee2
						FROM USER_ORDERS
					 WHERE LOGISTIC_DETAIL_ID = p_unite_consign_id;
					v_deliver_fee := 0;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						BEGIN
							BEGIN
								SELECT F.FEE
									INTO v_deliver_fee
									FROM FOREIGN_DELIVER_TYPES T
									JOIN DELIVER_REGIONS R ON (T.ID = R.FOREIGN_DELIVER_ID)
									JOIN DELIVER_FEE F ON (T.ID = F.FOREIGN_DELIVER_ID AND
																				R.DELIVER_REGION =
																				F.DELIVER_REGION)
								 WHERE T.ID = p_deliver_type_id
									 AND R.COUNTRY_ID = p_country_id;
							EXCEPTION
								WHEN NO_DATA_FOUND THEN
									RESULT_STATUS := 3;
									ROLLBACK;
									RETURN;
							END;
						END;
				END;

				/* 运费 */
				v_total_amount := v_total_amount + v_deliver_fee;

				IF p_country_id <> '40' THEN
					BEGIN
						v_insurance_fee := v_total_amount * 0.015;
					END;
				END IF;

				/* 保险费 */
				v_total_amount := v_total_amount + v_insurance_fee;

				CASE
					WHEN p_keep_orders = '0' AND v_custody_fee1 + v_custody_fee2 > 0 THEN
						BEGIN
							v_custody_fee  := v_custody_fee1 + v_custody_fee2;
							v_total_amount := v_total_amount + v_custody_fee;
						END;
					ELSE
						BEGIN
							v_custody_fee := 0;
						END;
				END CASE;
			END;
			/* 2.猜测可能是充值 */
		WHEN p_amount IS NOT NULL THEN
			BEGIN
				v_total_amount := p_amount;
			END;
		ELSE
			BEGIN
				ROLLBACK;
				RESULT_STATUS := 3;
				RETURN;
			END;
	END CASE;

	/* 计算paypal手续费（充值和支付订单均需计算paypal手续费）*/
	SELECT USER_IPS_PAYMENTS_SEQ.NEXTVAL INTO IPS_PAYMENT_ID FROM DUAL;
	BEGIN
		SELECT BUY_PRICE
			INTO v_bid
			FROM FINANCE_EXCHANGE_RATES
		 WHERE STATUS = '1'
			 AND SYMBOL = P_currency;
		v_mc_gross := v_total_amount * 100 / v_bid; /* Paypal收取手续费 */
		v_mc_fee   := v_mc_gross * 0.034 + 0.30; /* Paypal收取总额 */
		v_mc_gross := v_mc_gross + v_mc_fee; /* Paypal收取手续费 */
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			BEGIN
				v_mc_gross := 0;
				v_mc_fee   := 0;
			END;
	END;

	/* 创建用户在线支付单 */
	INSERT INTO USER_IPS_PAYMENTS
		(ID,
		 ORDER_IDS,
		 AMOUNT,
		 DEPOSIT,
		 CREATED_AT,
		 STATUS,
		 F_CHECK,
		 USER_ID,
		 REMARK,
		 MC_GROSS,
		 CHARGED_FEE,
		 CURRENCY,
		 LOGISTIC_TYPE_ID,
		 RECEIVE_NAME,
		 ADDRESS,
		 POSTCODE,
		 COUNTRY_ID,
		 TEL,
		 MOBILE_TEL,
		 DELIVER_FEE,
		 KEEP_ORDERS,
		 FIRST_NAME,
		 LAST_NAME,
		 LOGISTIC_DETAIL_ID,
		 CUSTODY_FEE,
		 INSURANCE_FEE)
	VALUES
		(IPS_PAYMENT_ID,
		 p_order_ids,
		 v_total_amount,
		 p_deposit,
		 v_now,
		 '0',
		 '0',
		 p_user_id,
		 p_remark,
		 v_mc_gross,
		 v_mc_fee,
		 p_currency,
		 p_deliver_type_id,
		 p_receive_name,
		 p_address,
		 p_postcode,
		 p_country_id,
		 p_tel,
		 p_mobile_tel,
		 v_deliver_fee,
		 p_keep_orders,
		 p_first_name,
		 p_last_name,
		 p_unite_consign_id,
		 v_custody_fee,
		 v_insurance_fee);

	RESULT_STATUS := 0;
	COMMIT;
END P_CREATE_PAYPAL;


 
/

-- ----------------------------
-- Procedure structure for P_CUS_INSERT_PHONE
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_CUS_INSERT_PHONE" is
  cursor cur_custom_phone is
    select d.user_id, s.true_name, d.tel, d.mobile_tel
      from user_details d, users s
     where d.user_id = s.id;
begin
  for res_phone in cur_custom_phone loop
    if res_phone.tel is not null and res_phone.mobile_tel is null then
      insert into vipuser_phone
        (id, user_id, user_name, phone, status, remarks, created_at)
      values
        (vipuser_phone_seq.nextval,
         res_phone.user_id,
         res_phone.true_name,
         res_phone.tel,
         '1',
         '客户详情联系电话',
         sysdate);
    end if;
    if res_phone.mobile_tel is not null and res_phone.tel is null then
      insert into vipuser_phone
        (id, user_id, user_name, phone, status, remarks, created_at)
      values
        (vipuser_phone_seq.nextval,
         res_phone.user_id,
         res_phone.true_name,
         res_phone.mobile_tel,
         '1',
         '客户详情 手机',
         sysdate);
    end if;

    if res_phone.mobile_tel is not null and res_phone.tel is not null then
      if res_phone.mobile_tel = res_phone.tel then
        insert into vipuser_phone
          (id, user_id, user_name, phone, status, remarks, created_at)
        values
          (vipuser_phone_seq.nextval,
           res_phone.user_id,
           res_phone.true_name,
           res_phone.mobile_tel,
           '1',
           '客户详情 手机',
           sysdate);
      end if;
      if res_phone.mobile_tel != res_phone.tel then
        insert into vipuser_phone
          (id, user_id, user_name, phone, status, remarks, created_at)
        values
          (vipuser_phone_seq.nextval,
           res_phone.user_id,
           res_phone.true_name,
           res_phone.tel,
           '1',
           '客户详情联系电话',
           sysdate);

        insert into vipuser_phone
          (id, user_id, user_name, phone, status, remarks, created_at)
        values
          (vipuser_phone_seq.nextval,
           res_phone.user_id,
           res_phone.true_name,
           res_phone.mobile_tel,
           '1',
           '客户详情 手机',
           sysdate);
      end if;
    end if;
  end loop;
  commit;


end p_cus_insert_phone;


 
/

-- ----------------------------
-- Procedure structure for P_CUSTOMER_THAW_NO_PAY
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_CUSTOMER_THAW_NO_PAY"(p_user_id        in number, --要解冻的客户编号
                                                   p_admin_id       in number, --操作人id
                                                   p_admin_name     in varchar, --操作人
                                                   p_freezeTypeName in varchar, --解冻类型
                                                   P_remarks        in varchar, --解冻理由
                                                   result_status    out number
                                                   /*
                                                                                                                                                                                                                                                                 0:成功
                                                                                                                                                                                                                                                                 1:客户号为空
                                                                                                                                                                                                                                                                 2:客户不存在或者不是不支付冻结客户
                                                                                                                                                                                                                                                                 3:其他异常
                                                                                                                                                                                                                                                                 */) is
  /*
  作者:雷美芳    update by liu.jing
  时间:2011-11-28
  描述:客户不支付解冻时竞买积分和竞买形象值归零（后台调用）
  */
  v_date      DATE := SYSDATE; --本次操作的时间
  v_user_id   NUMBER := p_user_id; --此次修改的客户ID
  v_user_name varchar(300); --当前用户

  v_buy_score_amonut  NUMBER := 0; --当前用户形象值
  v_buy_score_useable NUMBER := 0; --当前用户可用竞买积分
  v_buy_level         NUMBER;

  v_count number := 0;

  v_score_consumes_seq number; --积分消费主键

  --定义游标 查询该客户的积分情况
  cursor scores_cur is

    select c.id, c.useable_scores
      from scores c
     where c.user_id = v_user_id
       and c.score_status = 1 --可用积分
       and c.score_type != 1; -- 0：竞买积分:2：赠送积分:3：活动积分:4：委托转入 1:委托积分

begin
  if v_user_id is null then
    result_status := 1; --客户号为空
  else
    BEGIN
      select s.buy_score_amount,
             s.buy_score_useable,
             s.true_name,
             s.buy_level
        into v_buy_score_amonut,
             v_buy_score_useable,
             v_user_name,
             v_buy_level
        from users s
       where s.id = v_user_id
         and s.islock = 1 ---冻结
         and s.status = 1; ---不支付冻结
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        result_status := 2; --客户不存在或者不是不支付冻结客户
        return;
    END;

    /*是否是白名单用户*/
    select count(1)
      into v_count
      from user_lists
     where user_id = v_user_id
       and list_type = 0;

    if v_count > 0 then
      /*是白名单用户*/
      update users
         set islock        = 0,
             status        = 0,
             lock_operator = p_admin_name,
             lock_reason   = p_remarks,
             updated_at    = v_date
       where id = v_user_id;

    else

      /*修改客户竞买积分和形象值归零*/
      update users
         set islock            = 0,
             status            = 0,
             buy_level         = 0,
             buy_score_amount  = 0,
             buy_score_useable = 0,
             lock_operator     = p_admin_name,
             lock_reason       = p_remarks,
             updated_at        = v_date
       where id = v_user_id;

      /*用户等级变化记录*/
      insert into user_level_hists
        (id,
         user_id,
         user_type,
         change_type,
         user_change_level,
         user_changed_level,
         remark,
         op,
         op_date,
         consume_scores)
      values
        (user_level_hists_seq.nextval,
         v_user_id,
         '0', --竞买方
         '2', --降级
         v_buy_level,
         '0',
         '不支付冻结解冻后，积分形象值清零',
         p_admin_id,
         v_date,
         v_buy_score_amonut);

      update scores
         set score_status = 10, useable_scores = 0
       where score_type != 1 -- 0：竞买积分:2：赠送积分:3：活动积分:4：委托转入 1:委托积分
            --and score_status = 1 -- 可用积分
         and user_id = v_user_id;
      /*
      处理积分归零
      1.修改积分表中的类型为使用积分
      2.将该客户的积分进行消费(归零)
      3.记录积分消费流水
      */
      if v_buy_score_useable > 0 then

        select score_consumes_seq.nextval
          into v_score_consumes_seq
          from dual; --取积分消费主键
        --消费总额
        insert into score_consumes
          (id,
           user_id,
           user_name,
           score_type,
           consume_type,
           consume_scores,
           created_at,
           admin_id,
           admin_name,
           remarks)
        values
          (v_score_consumes_seq,
           v_user_id,
           v_user_name,
           '0', --积分类型：竞买
           '6', --消费类型：竞买积分清零
           v_buy_score_useable,
           v_date,
           p_admin_id,
           p_admin_name,
           p_remarks);

        --查看游标
        for s in scores_cur loop

          --消费积分明细
          insert into score_consume_details
            (id, score_id, score_consume_id, scores, created_at, remarks)
          values
            (score_consume_details_seq.nextval,
             s.id,
             v_score_consumes_seq,
             s.useable_scores,
             v_date,
             p_remarks);

        end loop;

        --积分流水信息
        insert into score_income_expenses
          (id,
           user_id,
           user_name,
           source_id,
           source_type,
           scores,
           score_type,
           direction,
           operation_type,
           created_at,
           admin_id,
           admin_name,
           remarks)
        values
          (score_income_expenses_seq.nextval,
           v_user_id,
           v_user_name,
           v_score_consumes_seq,
           'SCORE_CONSUMES',
           v_buy_score_useable,
           '0', --积分类型：竞买
           '1', --流水类型：消费
           '10', --消费：竞买积分清零
           v_date,
           p_admin_id,
           p_admin_name,
           p_remarks);

      end if;

      /*
      客户的竞买形象值归零
      1.形象流水表中记录历史,
      2.竞买形象值归零
      */
      if v_buy_score_amonut > 0 then
        --形象流水表中记录历史,
        insert into user_level_details
          (id,
           user_id,
           user_name,
           user_type,
           scores,
           direction,
           operate_type,
           resource_id,
           resource_type,
           admin_id,
           admin_name,
           remarks,
           created_at)
        values
          (user_level_details_seq.nextval,
           v_user_id,
           p_admin_name,
           '0', --竞买
           v_buy_score_amonut,
           '1', ---消费
           '7', --形象值清零
           v_user_id,
           'USERS',
           p_admin_id,
           p_admin_name,
           p_remarks,
           v_date);

      end if;

    end if;
    /*添加公共备注*/
    insert into common_remarks
      (id,
       SOURCE_ID,
       SOURCE_TYPE,
       CUSTOM_TYPE,
       CONTENT,
       ADMIN_ID,
       ADMIN_NAME,
       CREATED_AT)
    values
      (common_remarks_seq.nextval,
       v_user_id,
       'USERS',
       p_freezeTypeName,
       p_remarks,
       p_admin_id,
       p_admin_name,
       v_date);

    result_status := 0;
    return;
  end if;

exception
  WHEN OTHERS THEN
    result_status := 3; --其他异常
    return;
end p_customer_thaw_no_pay;
 
/

-- ----------------------------
-- Procedure structure for P_DONT_WIN
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_DONT_WIN" as
begin
  /*
  未得标数据表 定时删除数据 只保留最高价格
  作者:马磊
  */
/*insert into auction_prices_partition
select * from auction_prices a where (a.user_id,a.auction_id,a.bid) in (
select b.user_id,b.auction_id,max(b.bid) from auction_prices b where  b.id<61324614 and b.id>61282574 group by b.user_id,b.auction_id);
*/

delete from auction_prices_partition c where c.id in (
select id from auction_prices_partition a,
(
select b.user_id,b.auction_id,max(b.bid) bid from auction_prices_partition b where b.created_at>sysdate-7 group by b.user_id,b.auction_id) bb
where a.user_id=bb.user_id
and a.auction_id=bb.auction_id
and a.bid!=bb.bid
);
  commit;
end p_dont_win;


 
/

-- ----------------------------
-- Procedure structure for P_EC_BOOK_AUCTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EC_BOOK_AUCTION"(
                                                p_good_no IN NUMBER,
                                                p_user_id IN NUMBER,
                                                /*
                                                                                                                                                    ZH_CN=0;
                                                                                                                                                    ZH_TW=1;
                                                                                                                                                    EN_US=2;

                                                p_quantity IN NUMBER,
                                                p_contact  IN VARCHAR2,
                                                /**
                                                                                                                                                      *0 :success
                                                                                                                                                      *1 :没有此用户
                                                                                                                                                      *2; 余额不足
                                                                                                                                                      *3:参数不完整
                                                                                                                                                      *4:没有此商品
                                                                                                                                                      5:未知错误
                                                                                                                                                      6：没有预定记录无法购买
                                                                                                                                                      */
                                                RESULT_STATUS OUT NUMBER,
                                                p_book_id OUT NUMBER) IS
  V_SQL                 VARCHAR2(4000);
  v_user_total_account  NUMBER;
  v_ec_goods_shop_price NUMBER;
  v_user_name           VARCHAR(100);
  --v_ec_auction_book_count  NUMBER;
  v_ec_goods_sale_number   NUMBER;
BEGIN
  IF p_good_no IS NULL OR p_user_id IS NULL OR p_quantity IS NULL OR
     p_quantity <= 0 THEN
    RESULT_STATUS := 3;
    RETURN;
  END IF;
  BEGIN
    SELECT NVL(EG.SHOP_PRICE, 0),EG.SALE_NUMBER
      INTO v_ec_goods_shop_price,v_ec_goods_sale_number
      FROM EC_GOODS EG
     WHERE EG.GOODS_NO = p_good_no;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 1; /*没有此用户或者用户被锁定*/
      RETURN;
  END;
  BEGIN
    SELECT NVL(U.TOTAL_ACCOUNT, 0), u.true_name
      INTO v_user_total_account, v_user_name
      FROM USERS U
     WHERE U.ID = p_user_id
       AND U.ISLOCK = 0
       AND U.STATUS = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 4; /*没有此用户或者用户被锁定*/
      RETURN;
  END;
  IF v_ec_goods_sale_number >= p_quantity THEN
      RESULT_STATUS := 3; /*可售数量大于购买数量*/
      RETURN;
  END IF;
  IF v_user_total_account >= v_ec_goods_shop_price * p_quantity * 0.2 THEN
    SELECT EC_AUCTION_BOOK_SEQ.nextval INTO
    p_book_id
    FROM DUAL;
    INSERT INTO EC_AUCTION_BOOK
      (ID,
       USER_ID,
       USER_NAME,
       CONTACT,
       AUCTION_NO,
       QUANTITY,
       PRICE,
       DEPOSIT,
       STATUS,
       DEPOSIT_STATUS,
       REMARK,
       SALE_NUMBER,
       CREATED_AT,
       UPDATED_AT)
    VALUES
      (p_book_id,
       p_user_id,
       v_user_name,
       p_contact,
       p_good_no,
       nvl(p_quantity,0),
       (select nvl(eg.shop_price, 0)
          from ec_goods eg
         where eg.goods_no = p_good_no),
       (select nvl(eg.shop_price, 0) * 0.2 * nvl(p_quantity, 0)
          from ec_goods eg
         where eg.goods_no = p_good_no),
       0,
       1,
       'remark',
       v_ec_goods_sale_number,
       sysdate,
       sysdate);
    V_SQL := 'update USERS set ' ||
             'account = account-(select nvl(eg.shop_price,0)*0.2*nvl(' ||
             p_quantity || ',0) from ec_goods eg where eg.goods_no=' ||
             p_good_no || '),' ||
             'freeze_account = freeze_account+(select nvl(eg.shop_price,0)*0.2*nvl(' ||
             p_quantity || ',0) from ec_goods eg where eg.goods_no=' ||
             p_good_no || ') where id=' || p_user_id ||
             ' and account>=(select nvl(eg.shop_price,0)*0.2*nvl(' ||
             p_quantity || ',0) from ec_goods eg where eg.goods_no=' ||
             p_good_no || ')';
    EXECUTE IMMEDIATE V_SQL;
    IF SQL%ROWCOUNT != 1 THEN
      ROLLBACK;
      RESULT_STATUS := 2; /*余额不足*/
      RETURN;
    ELSE
      COMMIT;
    END IF;
  ELSE
    ROLLBACK;
    RESULT_STATUS := 2; /*余额不足*/
    RETURN;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS := 5;
    RETURN;
END P_EC_BOOK_AUCTION;


 
/

-- ----------------------------
-- Procedure structure for P_EC_INSERT_TO_CART
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EC_INSERT_TO_CART"(
																								/*main goods id or single goods_id or score goods_id*/p_goods_id IN NUMBER,
																								/*  0:单件购买
                                                                                                                                                                                                                                                      1:套餐购买
                                                                                                                                                                                                                                                      2:积分换购
                                                                                                                                                                                                                                                      9:投资产品预定
                                                                                                                                                                                                                                                  */
																								p_buy_type IN VARCHAR2,
																								p_user_id  IN NUMBER,

																								/*
                                                                                                                                                                                                                                                                                                    ZH_CN=0;
                                                                                                                                                                                                                                                                                                    ZH_TW=1;
                                                                                                                                                                                                                                                                                                    EN_US=2;

																								p_locale IN NUMBER,
																								/*other goods_id of a package */
																								p_package_id IN NUMBER,
																								p_cart_notes IN VARCHAR2,
																								/**
                                                                                                                                                                                                                                                                                                      *0 :success
                                                                                                                                                                                                                                                                                                      *1 :没有此用户
                                                                                                                                                                                                                                                                                                      *2; 购买积分不够
                                                                                                                                                                                                                                                                                                      *3:参数不完整
                                                                                                                                                                                                                                                                                                      *4:没有此商品
                                                                                                                                                                                                                                                                                                      5:未知错误
                                                                                                                                                                                                                                                                                                      6：没有预定记录无法购买
                                                                                                                                                                                                                                                                                                      */
																								RESULT_STATUS OUT NUMBER

																								) IS
	v_key_time              VARCHAR(100);
	v_goods_type            VARCHAR(10);
	v_goods_kind            VARCHAR(1);
	v_have_package          VARCHAR(10);
	v_goods_name            VARCHAR(2000);
	v_goods_id              NUMBER;
	v_goods_no              NUMBER;
	v_market_price          NUMBER(10, 2);
	v_goods_scores          NUMBER;
	v_shop_price            NUMBER(10, 2);
	v_user_get_score        NUMBER(10, 2);
	v_package_price         NUMBER(10, 2);
	v_limit_number          NUMBER;
	v_sale_number           NUMBER;
	v_user_buy_score_amount NUMBER;
	v_stock_price           NUMBER(10, 2);
	v_contract_id           NUMBER;
	v_user_buy_level        NUMBER; /**处理灯塔折扣价,灯塔产品特别折扣三钻会员9.5折，四钻会员9.2折，五钻会员8.8折*/
	v_user_sell_level       NUMBER;
	v_book_price            NUMBER;
	v_book_quantity         NUMBER;

	--双十一所有商城商品半价
	v_double11_start DATE := to_date('2013-11-11 11:00:00',
																	 'yyyy-mm-dd hh24:mi:ss');
	v_double11_end   DATE := to_date('2013-11-11 23:00:00',
																	 'yyyy-mm-dd hh24:mi:ss');
	v_remark         VARCHAR2(100);

BEGIN
	IF p_goods_id IS NULL OR p_buy_type IS NULL OR
		 (p_buy_type != 1 AND p_buy_type != 2 AND p_buy_type != 0 AND
		 p_buy_type != 9) OR p_user_id IS NULL OR
		 (p_buy_type = 1 AND p_package_id IS NULL) THEN
		RESULT_STATUS := 3;
		RETURN;
	END IF;

	BEGIN
		SELECT U.BUY_SCORE_USEABLE, U.BUY_LEVEL, U.SELL_LEVEL
			INTO v_user_buy_score_amount, v_user_buy_level, v_user_sell_level
			FROM USERS U
		 WHERE U.ID = p_user_id;
		--AND U.ISLOCK = 0;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 1; /*没有此用户或者用户被锁定*/
			RETURN;
	END;

	SELECT EC_CART_KEY_TIME_SEQ.NEXTVAL INTO v_key_time FROM dual;

	IF p_buy_type = 0 THEN
		/*单件购买*/
		BEGIN
			SELECT CASE
							 WHEN p_locale = 1 THEN
								GOODS_GBK
							 WHEN p_locale = 2 THEN
								GOODS_EN
							 ELSE
								GOODS_CN
						 END GOODS_NAME,
						 GOODS_NO,
						 GOODS_TYPE,
						 HAVE_PACKAGE,
						 MARKET_PRICE,
						 CASE
							 WHEN SYSDATE - v_double11_start > 0 AND
										SYSDATE - v_double11_end < 0 THEN
								round(shop_price / 2, 2)
							 WHEN v_user_buy_level = 3 AND v_user_sell_level <= 13 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.95, 2)
							 WHEN v_user_buy_level = 4 AND v_user_sell_level <= 14 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.92, 2)
							 WHEN v_user_buy_level = 5 AND v_user_sell_level <= 15 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.88, 2)
							 WHEN v_user_sell_level = 13 AND v_user_buy_level <= 3 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.95, 2)
							 WHEN v_user_sell_level = 14 AND v_user_buy_level <= 4 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.92, 2)
							 WHEN v_user_sell_level = 15 AND v_user_buy_level <= 5 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.88, 2)
							 ELSE
								SHOP_PRICE
						 END SHOP_PRICE,
						 GOODS_SCORES,
						 GOODS_KIND,
						 CASE
							 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
								BUY_FIXED_SCORES
							 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
								FLOOR(SHOP_PRICE * SCORE_BUY_PARAM)
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID,
						 CASE
							 WHEN SYSDATE - v_double11_start > 0 AND
										SYSDATE - v_double11_end < 0 THEN
								'双11半价活动'
							 ELSE
								p_cart_notes
						 END
				INTO v_goods_name,
						 v_goods_no,
						 v_goods_type,
						 v_have_package,
						 v_market_price,
						 v_shop_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id,
						 v_remark
				FROM EC_GOODS
			 WHERE ID = p_goods_id
				 AND SYSDATE >= SALE_START
				 AND SYSDATE <= SALE_END
				 AND GOODS_STATUS = 1
				 AND SALE_NUMBER > 0
				 AND GOODS_TYPE != 3;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_shop_price,
				 1,
				 '1',
				 SYSDATE,
				 v_remark,
				 v_limit_number,
				 '0',
				 '0',
				 v_user_get_score,
				 v_key_time,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,单件购买时不插入套餐ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 EG.GOODS_NO,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 1,
							 '1',
							 SYSDATE,
							 '0',
							 0,
							 v_key_time,
							 EGS.ID,
							 '1',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = p_goods_id);

			COMMIT;
			RESULT_STATUS := 0;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;

	IF p_buy_type = 1 AND p_package_id IS NOT NULL THEN
		/**套餐购买,不考虑灯塔折扣*/
		BEGIN
			BEGIN
				SELECT CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 GOODS_NO,
							 GOODS_TYPE,
							 HAVE_PACKAGE,
							 MARKET_PRICE,
							 PACKAGE_PRICE,
							 GOODS_SCORES,
							 GOODS_KIND,
							 CASE
								 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
									BUY_FIXED_SCORES
								 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
									FLOOR(PACKAGE_PRICE * SCORE_BUY_PARAM)
								 ELSE
									0
							 END USER_GET_SCORE,
							 CASE
								 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
									SALE_NUMBER
								 ELSE
									limit_number
							 END AS LIMIT_NUMBER,
							 SALE_NUMBER,
							 STOCK_PRICE,
							 CONTRACT_ID
					INTO v_goods_name,
							 v_goods_no,
							 v_goods_type,
							 v_have_package,
							 v_market_price,
							 v_package_price,
							 v_goods_scores,
							 v_goods_kind,
							 v_user_get_score,
							 v_limit_number,
							 v_sale_number,
							 v_stock_price,
							 v_contract_id
					FROM EC_GOODS
				 WHERE ID = p_goods_id
					 AND SYSDATE >= SALE_START
					 AND SYSDATE <= SALE_END
					 AND GOODS_STATUS = 1
					 AND SALE_NUMBER > 0
					 AND GOODS_TYPE != 3;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					ROLLBACK;
					RESULT_STATUS := 4; /*没有此商品*/
					RETURN;
			END;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 PACKAGE_ID,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_package_price,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '1',
				 '0',
				 v_user_get_score,
				 v_key_time,
				 p_package_id,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,插入套餐ID,配件ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 PACKAGE_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 1,
							 1,
							 SYSDATE,
							 '1',
							 0,
							 v_key_time,
							 EGS.ID,
							 p_package_id,
							 '0',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = p_goods_id);

			/*按套餐ID和主商品ID查询套餐商品*/
			SELECT CASE
							 WHEN p_locale = 1 THEN
								EG.GOODS_GBK
							 WHEN p_locale = 2 THEN
								EG.GOODS_EN
							 ELSE
								EG.GOODS_CN
						 END GOODS_NAME,
						 EG.ID,
						 EG.GOODS_NO,
						 EG.GOODS_TYPE,
						 EG.MARKET_PRICE,
						 EG.PACKAGE_PRICE,
						 EG.GOODS_SCORES,
						 EG.GOODS_KIND,
						 CASE
							 WHEN EG.BUY_FIXED_SCORES IS NOT NULL THEN
								EG.BUY_FIXED_SCORES
							 WHEN EG.SCORE_BUY_PARAM IS NOT NULL THEN
								FLOOR(EG.PACKAGE_PRICE * SCORE_BUY_PARAM)
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 EG.SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID
				INTO v_goods_name,
						 v_goods_id,
						 v_goods_no,
						 v_goods_type,
						 v_market_price,
						 v_package_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id
				FROM EC_GOODS EG
				JOIN EC_PACKAGES EPS ON (EPS.ID = p_package_id AND
																EPS.GOODS_ID = p_goods_id AND
																EPS.package_id = EG.id)
			 WHERE SYSDATE >= EG.SALE_START
				 AND SYSDATE <= EG.SALE_END
				 AND EG.GOODS_STATUS = 1
				 AND EG.SALE_NUMBER > 0
				 AND EG.GOODS_TYPE != 3;
			/** 插入套餐商品 */

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 PACKAGE_ID,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 v_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_package_price,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '1',
				 '0',
				 v_user_get_score,
				 v_key_time,
				 p_package_id,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,插入套餐ID,配件ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 PACKAGE_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 1,
							 1,
							 SYSDATE,
							 '1',
							 0,
							 v_key_time,
							 EGS.ID,
							 p_package_id,
							 '0',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = v_goods_id);

			RESULT_STATUS := 0;

			COMMIT;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;
	IF p_buy_type = 2 THEN
		/*购买积分商品,不考虑灯塔折扣*/
		BEGIN
			SELECT CASE
							 WHEN p_locale = 1 THEN
								GOODS_GBK
							 WHEN p_locale = 2 THEN
								GOODS_EN
							 ELSE
								GOODS_CN
						 END GOODS_NAME,
						 GOODS_NO,
						 GOODS_TYPE,
						 HAVE_PACKAGE,
						 MARKET_PRICE,
						 SHOP_PRICE,
						 GOODS_SCORES,
						 GOODS_KIND,
						 CASE
							 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
								BUY_FIXED_SCORES
							 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
								SHOP_PRICE * SCORE_BUY_PARAM
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID
				INTO v_goods_name,
						 v_goods_no,
						 v_goods_type,
						 v_have_package,
						 v_market_price,
						 v_shop_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id
				FROM EC_GOODS
			 WHERE ID = p_goods_id
				 AND SYSDATE >= SALE_START
				 AND SYSDATE <= SALE_END
				 AND SALE_NUMBER > 0
				 AND GOODS_STATUS = 1
				 AND GOODS_TYPE = 3;

			IF v_user_buy_score_amount < v_goods_scores THEN
				RESULT_STATUS := 2; /*购买积分不够*/
				RETURN;
			END IF;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 CONSUME_SCORES,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_shop_price,
				 v_goods_scores,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '2',
				 '0',
				 0,
				 v_key_time,
				 v_stock_price,
				 v_contract_id);
			COMMIT;

			RESULT_STATUS := 0;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;

	IF p_buy_type = 9 THEN
		/*先找出定金记录*/
		BEGIN
			SELECT SUM(EAB.QUANTITY)
				INTO v_book_quantity
				FROM EC_AUCTION_BOOK EAB, EC_GOODS EG
			 WHERE EG.GOODS_NO = EAB.AUCTION_NO
				 AND EAB.USER_ID = p_user_id
				 AND EG.ID = p_goods_id
				 AND EAB.STATUS IN (4, 5)
				 AND EAB.DEPOSIT_STATUS = 1
				 AND EAB.ORDER_ID IS NULL;

		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				v_book_quantity := 1;
		END;
		/*购买投资理财商品,不考虑灯塔折扣 并且要减去定金*/
		BEGIN

			SELECT CASE
							 WHEN p_locale = 1 THEN
								GOODS_GBK
							 WHEN p_locale = 2 THEN
								GOODS_EN
							 ELSE
								GOODS_CN
						 END GOODS_NAME,
						 GOODS_NO,
						 GOODS_TYPE,
						 HAVE_PACKAGE,
						 MARKET_PRICE,
						 SHOP_PRICE SHOP_PRICE,
						 GOODS_SCORES,
						 GOODS_KIND,
						 CASE
							 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
								BUY_FIXED_SCORES
							 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
								FLOOR(SHOP_PRICE * SCORE_BUY_PARAM)
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID
				INTO v_goods_name,
						 v_goods_no,
						 v_goods_type,
						 v_have_package,
						 v_market_price,
						 v_shop_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id
				FROM EC_GOODS
			 WHERE ID = p_goods_id
				 AND SYSDATE >= SALE_START
				 AND SYSDATE <= SALE_END
				 AND GOODS_STATUS = 1
				 AND SALE_NUMBER > 0
				 AND GOODS_TYPE != 3;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_shop_price,
				 nvl(v_book_quantity, 1), --直接设置成预定数量
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 p_buy_type,
				 '0',
				 v_user_get_score,
				 v_key_time,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,单件购买时不插入套餐ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 EG.GOODS_NO,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 v_book_quantity, --直接设置成预定数量
							 '1',
							 SYSDATE,
							 p_buy_type,
							 0,
							 v_key_time,
							 EGS.ID,
							 '1',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = p_goods_id);

			COMMIT;
			RESULT_STATUS := 0;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
		RESULT_STATUS := 5;
		RETURN;
END P_EC_INSERT_TO_CART;


 
/

-- ----------------------------
-- Procedure structure for P_EC_INSERT_TO_CART_BAK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EC_INSERT_TO_CART_BAK" (
                                                  /*main goods id or single goods_id or score goods_id*/p_goods_id IN NUMBER,
                                                  /*  0:单件购买
                                                                                                    1:套餐购买
                                                                                                    2:积分换购 */
                                                  p_buy_type IN VARCHAR2,
                                                  p_user_id  IN NUMBER,

                                                  /*
                                                                                                    ZH_CN=0;
                                                                                                    ZH_TW=1;
                                                                                                    EN_US=2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */
                                                  p_locale IN NUMBER,
                                                  /*other goods_id of a package */
                                                  p_package_id IN NUMBER,
                                                  p_cart_notes IN VARCHAR2,
                                                  /**
                                                                                                      *0 :success
                                                                                                      *1 :没有此用户
                                                                                                      *2; 购买积分不够
                                                                                                      *3:参数不完整
                                                                                                      *4:没有此商品
                                                                                                      5:未知错误
                                                                                                      */
                                                  RESULT_STATUS OUT NUMBER

                                                  ) IS
  v_key_time              VARCHAR(100);
  v_goods_type            VARCHAR(10);
  v_goods_kind            VARCHAR(1);
  v_have_package          VARCHAR(10);
  v_goods_name            VARCHAR(2000);
  v_goods_id              NUMBER;
  v_goods_no              NUMBER;
  v_market_price          NUMBER(10, 2);
  v_goods_scores          NUMBER;
  v_shop_price            NUMBER(10, 2);
  v_user_get_score        NUMBER(10, 2);
  v_package_price         NUMBER(10, 2);
  v_limit_number          NUMBER;
  v_sale_number           NUMBER;
  v_user_buy_score_amount NUMBER;
  v_stock_price           NUMBER(10, 2);
  v_contract_id           NUMBER;
  v_user_buy_level        NUMBER; /**处理灯塔折扣价,灯塔产品特别折扣三钻会员9.5折，四钻会员9.2折，五钻会员8.8折*/
  v_user_sell_level       NUMBER;
BEGIN
  IF p_goods_id IS NULL OR p_buy_type IS NULL OR
     (p_buy_type != 1 AND p_buy_type != 2 AND p_buy_type != 0) OR
     p_user_id IS NULL OR (p_buy_type = 1 AND p_package_id IS NULL) THEN
    RESULT_STATUS := 3;
    RETURN;
  END IF;

  BEGIN
    SELECT U.BUY_SCORE_USEABLE, U.BUY_LEVEL, U.SELL_LEVEL
      INTO v_user_buy_score_amount, v_user_buy_level, v_user_sell_level
      FROM USERS U
     WHERE U.ID = p_user_id;
    --AND U.ISLOCK = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 1; /*没有此用户或者用户被锁定*/
      RETURN;
  END;

  SELECT EC_CART_KEY_TIME_SEQ.NEXTVAL INTO v_key_time FROM dual;

  IF p_buy_type = 0 THEN
    /*单件购买*/
    BEGIN
      SELECT CASE
               WHEN p_locale = 1 THEN
                GOODS_GBK
               WHEN p_locale = 2 THEN
                GOODS_EN
               ELSE
                GOODS_CN
             END GOODS_NAME,
             GOODS_NO,
             GOODS_TYPE,
             HAVE_PACKAGE,
             MARKET_PRICE,
             CASE
               WHEN v_user_buy_level = 3 AND v_user_sell_level <= 13 AND
                    BRAND_ID = 1000 THEN
                round(SHOP_PRICE * 0.95, 2)
               WHEN v_user_buy_level = 4 AND v_user_sell_level <= 14 AND
                    BRAND_ID = 1000 THEN
                round(SHOP_PRICE * 0.92, 2)
               WHEN v_user_buy_level = 5 AND v_user_sell_level <= 15 AND
                    BRAND_ID = 1000 THEN
                round(SHOP_PRICE * 0.88, 2)
               WHEN v_user_sell_level = 13 AND v_user_buy_level <= 3 AND
                    BRAND_ID = 1000 THEN
                round(SHOP_PRICE * 0.95, 2)
               WHEN v_user_sell_level = 14 AND v_user_buy_level <= 4 AND
                    BRAND_ID = 1000 THEN
                round(SHOP_PRICE * 0.92, 2)
               WHEN v_user_sell_level = 15 AND v_user_buy_level <= 5 AND
                    BRAND_ID = 1000 THEN
                round(SHOP_PRICE * 0.88, 2)
               ELSE
                SHOP_PRICE
             END SHOP_PRICE,
             GOODS_SCORES,
             GOODS_KIND,
             CASE
               WHEN BUY_FIXED_SCORES IS NOT NULL THEN
                BUY_FIXED_SCORES
               WHEN SCORE_BUY_PARAM IS NOT NULL THEN
                FLOOR(SHOP_PRICE * SCORE_BUY_PARAM)
               ELSE
                0
             END USER_GET_SCORE,
             CASE
               WHEN LIMIT_NUMBER > SALE_NUMBER THEN
                SALE_NUMBER
               ELSE
                limit_number
             END AS LIMIT_NUMBER,
             SALE_NUMBER,
             STOCK_PRICE,
             CONTRACT_ID
        INTO v_goods_name,
             v_goods_no,
             v_goods_type,
             v_have_package,
             v_market_price,
             v_shop_price,
             v_goods_scores,
             v_goods_kind,
             v_user_get_score,
             v_limit_number,
             v_sale_number,
             v_stock_price,
             v_contract_id
        FROM EC_GOODS
       WHERE ID = p_goods_id
         AND SYSDATE >= SALE_START
         AND SYSDATE <= SALE_END
         AND GOODS_STATUS = 1
         AND SALE_NUMBER > 0
         AND GOODS_TYPE != 3;

      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NO,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         CART_NOTES,
         LIMIT_NUM,
         BUY_TYPE,
         IS_GIFT,
         GET_SCORES,
         KEY_TIME,
         STOCK_PRICE,
         CONTRACT_ID)
      VALUES
        (EC_CARTS_SEQ.NEXTVAL,
         p_user_id,
         p_goods_id,
         v_goods_no,
         v_goods_name,
         v_market_price,
         v_shop_price,
         1,
         '1',
         SYSDATE,
         p_cart_notes,
         v_limit_number,
         '0',
         '0',
         v_user_get_score,
         v_key_time,
         v_stock_price,
         v_contract_id);

      /*处理配件,单件购买时不插入套餐ID*/
      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NO,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         BUY_TYPE,
         GET_SCORES,
         KEY_TIME,
         GIFT_ID,
         IS_GIFT,
         STOCK_PRICE,
         CONTRACT_ID)
        SELECT EC_CARTS_SEQ.NEXTVAL,
               p_user_id,
               EG.ID,
               EG.GOODS_NO,
               CASE
                 WHEN p_locale = 1 THEN
                  GOODS_GBK
                 WHEN p_locale = 2 THEN
                  GOODS_EN
                 ELSE
                  GOODS_CN
               END GOODS_NAME,
               MARKET_PRICE,
               0,
               1,
               '1',
               SYSDATE,
               '0',
               0,
               v_key_time,
               EGS.ID,
               '1',
               STOCK_PRICE,
               CONTRACT_ID
          FROM EC_GOODS EG
          JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
                               EGS.GOODS_ID = p_goods_id);

      COMMIT;
      RESULT_STATUS := 0;
      RETURN;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS := 4; /*没有此商品*/
        RETURN;
    END;
  END IF;

  IF p_buy_type = 1 AND p_package_id IS NOT NULL THEN
    /**套餐购买,不考虑灯塔折扣*/
    BEGIN
      BEGIN
        SELECT CASE
                 WHEN p_locale = 1 THEN
                  GOODS_GBK
                 WHEN p_locale = 2 THEN
                  GOODS_EN
                 ELSE
                  GOODS_CN
               END GOODS_NAME,
               GOODS_NO,
               GOODS_TYPE,
               HAVE_PACKAGE,
               MARKET_PRICE,
               PACKAGE_PRICE,
               GOODS_SCORES,
               GOODS_KIND,
               CASE
                 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
                  BUY_FIXED_SCORES
                 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
                  FLOOR(PACKAGE_PRICE * SCORE_BUY_PARAM)
                 ELSE
                  0
               END USER_GET_SCORE,
               CASE
                 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
                  SALE_NUMBER
                 ELSE
                  limit_number
               END AS LIMIT_NUMBER,
               SALE_NUMBER,
               STOCK_PRICE,
               CONTRACT_ID
          INTO v_goods_name,
               v_goods_no,
               v_goods_type,
               v_have_package,
               v_market_price,
               v_package_price,
               v_goods_scores,
               v_goods_kind,
               v_user_get_score,
               v_limit_number,
               v_sale_number,
               v_stock_price,
               v_contract_id
          FROM EC_GOODS
         WHERE ID = p_goods_id
           AND SYSDATE >= SALE_START
           AND SYSDATE <= SALE_END
           AND GOODS_STATUS = 1
           AND SALE_NUMBER > 0
           AND GOODS_TYPE != 3;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ROLLBACK;
          RESULT_STATUS := 4; /*没有此商品*/
          RETURN;
      END;

      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NO,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         CART_NOTES,
         LIMIT_NUM,
         BUY_TYPE,
         IS_GIFT,
         GET_SCORES,
         KEY_TIME,
         PACKAGE_ID,
         STOCK_PRICE,
         CONTRACT_ID)
      VALUES
        (EC_CARTS_SEQ.NEXTVAL,
         p_user_id,
         p_goods_id,
         v_goods_no,
         v_goods_name,
         v_market_price,
         v_package_price,
         1,
         '1',
         SYSDATE,
         p_cart_notes,
         v_limit_number,
         '1',
         '0',
         v_user_get_score,
         v_key_time,
         p_package_id,
         v_stock_price,
         v_contract_id);

      /*处理配件,插入套餐ID,配件ID*/
      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         BUY_TYPE,
         GET_SCORES,
         KEY_TIME,
         GIFT_ID,
         PACKAGE_ID,
         IS_GIFT,
         STOCK_PRICE,
         CONTRACT_ID)
        SELECT EC_CARTS_SEQ.NEXTVAL,
               p_user_id,
               EG.ID,
               CASE
                 WHEN p_locale = 1 THEN
                  GOODS_GBK
                 WHEN p_locale = 2 THEN
                  GOODS_EN
                 ELSE
                  GOODS_CN
               END GOODS_NAME,
               MARKET_PRICE,
               0,
               1,
               1,
               SYSDATE,
               '1',
               0,
               v_key_time,
               EGS.ID,
               p_package_id,
               '0',
               STOCK_PRICE,
               CONTRACT_ID
          FROM EC_GOODS EG
          JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
                               EGS.GOODS_ID = p_goods_id);

      /*按套餐ID和主商品ID查询套餐商品*/
      SELECT CASE
               WHEN p_locale = 1 THEN
                EG.GOODS_GBK
               WHEN p_locale = 2 THEN
                EG.GOODS_EN
               ELSE
                EG.GOODS_CN
             END GOODS_NAME,
             EG.ID,
             EG.GOODS_NO,
             EG.GOODS_TYPE,
             EG.MARKET_PRICE,
             EG.PACKAGE_PRICE,
             EG.GOODS_SCORES,
             EG.GOODS_KIND,
             CASE
               WHEN EG.BUY_FIXED_SCORES IS NOT NULL THEN
                EG.BUY_FIXED_SCORES
               WHEN EG.SCORE_BUY_PARAM IS NOT NULL THEN
                FLOOR(EG.PACKAGE_PRICE * SCORE_BUY_PARAM)
               ELSE
                0
             END USER_GET_SCORE,
             CASE
               WHEN LIMIT_NUMBER > SALE_NUMBER THEN
                SALE_NUMBER
               ELSE
                limit_number
             END AS LIMIT_NUMBER,
             EG.SALE_NUMBER,
             STOCK_PRICE,
             CONTRACT_ID
        INTO v_goods_name,
             v_goods_id,
             v_goods_no,
             v_goods_type,
             v_market_price,
             v_package_price,
             v_goods_scores,
             v_goods_kind,
             v_user_get_score,
             v_limit_number,
             v_sale_number,
             v_stock_price,
             v_contract_id
        FROM EC_GOODS EG
        JOIN EC_PACKAGES EPS ON (EPS.ID = p_package_id AND
                                EPS.GOODS_ID = p_goods_id AND
                                EPS.package_id = EG.id)
       WHERE SYSDATE >= EG.SALE_START
         AND SYSDATE <= EG.SALE_END
         AND EG.GOODS_STATUS = 1
         AND EG.SALE_NUMBER > 0
         AND EG.GOODS_TYPE != 3;
      /** 插入套餐商品 */

      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NO,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         CART_NOTES,
         LIMIT_NUM,
         BUY_TYPE,
         IS_GIFT,
         GET_SCORES,
         KEY_TIME,
         PACKAGE_ID,
         STOCK_PRICE,
         CONTRACT_ID)
      VALUES
        (EC_CARTS_SEQ.NEXTVAL,
         p_user_id,
         v_goods_id,
         v_goods_no,
         v_goods_name,
         v_market_price,
         v_package_price,
         1,
         '1',
         SYSDATE,
         p_cart_notes,
         v_limit_number,
         '1',
         '0',
         v_user_get_score,
         v_key_time,
         p_package_id,
         v_stock_price,
         v_contract_id);

      /*处理配件,插入套餐ID,配件ID*/
      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         BUY_TYPE,
         GET_SCORES,
         KEY_TIME,
         GIFT_ID,
         PACKAGE_ID,
         IS_GIFT,
         STOCK_PRICE,
         CONTRACT_ID)
        SELECT EC_CARTS_SEQ.NEXTVAL,
               p_user_id,
               EG.ID,
               CASE
                 WHEN p_locale = 1 THEN
                  GOODS_GBK
                 WHEN p_locale = 2 THEN
                  GOODS_EN
                 ELSE
                  GOODS_CN
               END GOODS_NAME,
               MARKET_PRICE,
               0,
               1,
               1,
               SYSDATE,
               '1',
               0,
               v_key_time,
               EGS.ID,
               p_package_id,
               '0',
               STOCK_PRICE,
               CONTRACT_ID
          FROM EC_GOODS EG
          JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
                               EGS.GOODS_ID = v_goods_id);

      RESULT_STATUS := 0;

      COMMIT;
      RETURN;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS := 4; /*没有此商品*/
        RETURN;
    END;
  END IF;
  IF p_buy_type = 2 THEN
    /*购买积分商品,不考虑灯塔折扣*/
    BEGIN
      SELECT CASE
               WHEN p_locale = 1 THEN
                GOODS_GBK
               WHEN p_locale = 2 THEN
                GOODS_EN
               ELSE
                GOODS_CN
             END GOODS_NAME,
             GOODS_NO,
             GOODS_TYPE,
             HAVE_PACKAGE,
             MARKET_PRICE,
             SHOP_PRICE,
             GOODS_SCORES,
             GOODS_KIND,
             CASE
               WHEN BUY_FIXED_SCORES IS NOT NULL THEN
                BUY_FIXED_SCORES
               WHEN SCORE_BUY_PARAM IS NOT NULL THEN
                SHOP_PRICE * SCORE_BUY_PARAM
               ELSE
                0
             END USER_GET_SCORE,
             CASE
               WHEN LIMIT_NUMBER > SALE_NUMBER THEN
                SALE_NUMBER
               ELSE
                limit_number
             END AS LIMIT_NUMBER,
             SALE_NUMBER,
             STOCK_PRICE,
             CONTRACT_ID
        INTO v_goods_name,
             v_goods_no,
             v_goods_type,
             v_have_package,
             v_market_price,
             v_shop_price,
             v_goods_scores,
             v_goods_kind,
             v_user_get_score,
             v_limit_number,
             v_sale_number,
             v_stock_price,
             v_contract_id
        FROM EC_GOODS
       WHERE ID = p_goods_id
         AND SYSDATE >= SALE_START
         AND SYSDATE <= SALE_END
         AND SALE_NUMBER > 0
         AND GOODS_STATUS = 1
         AND GOODS_TYPE = 3;

      IF v_user_buy_score_amount < v_goods_scores THEN
        RESULT_STATUS := 2; /*购买积分不够*/
        RETURN;
      END IF;

      INSERT INTO EC_CARTS
        (ID,
         USER_ID,
         GOODS_ID,
         GOODS_NO,
         GOODS_NAME,
         MARTET_PRICE,
         GOODS_PRICE,
         CONSUME_SCORES,
         GOODS_NUMBER,
         IS_REAL,
         CREATED_AT,
         CART_NOTES,
         LIMIT_NUM,
         BUY_TYPE,
         IS_GIFT,
         GET_SCORES,
         KEY_TIME,
         STOCK_PRICE,
         CONTRACT_ID)
      VALUES
        (EC_CARTS_SEQ.NEXTVAL,
         p_user_id,
         p_goods_id,
         v_goods_no,
         v_goods_name,
         v_market_price,
         v_shop_price,
         v_goods_scores,
         1,
         '1',
         SYSDATE,
         p_cart_notes,
         v_limit_number,CREATE OR REPLACE PROCEDURE "P_EC_INSERT_TO_CART" (
																									/*main goods id or single goods_id or score goods_id*/p_goods_id IN NUMBER,
																									/*  0:单件购买
                                                                                                    1:套餐购买
                                                                                                    2:积分换购 */
																									p_buy_type IN VARCHAR2,
																									p_user_id  IN NUMBER,

																									/*
                                                                                                    ZH_CN=0;
                                                                                                    ZH_TW=1;
                                                                                                    EN_US=2;

																									p_locale IN NUMBER,
																									/*other goods_id of a package */
																									p_package_id IN NUMBER,
																									p_cart_notes IN VARCHAR2,
																									/**
                                                                                                      *0 :success
                                                                                                      *1 :没有此用户
                                                                                                      *2; 购买积分不够
                                                                                                      *3:参数不完整
                                                                                                      *4:没有此商品
                                                                                                      5:未知错误
                                                                                                      */
																									RESULT_STATUS OUT NUMBER

																									) IS
	v_key_time              VARCHAR(100);
	v_goods_type            VARCHAR(10);
	v_goods_kind            VARCHAR(1);
	v_have_package          VARCHAR(10);
	v_goods_name            VARCHAR(2000);
	v_goods_id              NUMBER;
	v_goods_no              NUMBER;
	v_market_price          NUMBER(10, 2);
	v_goods_scores          NUMBER;
	v_shop_price            NUMBER(10, 2);
	v_user_get_score        NUMBER(10, 2);
	v_package_price         NUMBER(10, 2);
	v_limit_number          NUMBER;
	v_sale_number           NUMBER;
	v_user_buy_score_amount NUMBER;
	v_stock_price           NUMBER(10, 2);
	v_contract_id           NUMBER;
	v_user_buy_level        NUMBER; /**处理灯塔折扣价,灯塔产品特别折扣三钻会员9.5折，四钻会员9.2折，五钻会员8.8折*/
	v_user_sell_level       NUMBER;
BEGIN
	IF p_goods_id IS NULL OR p_buy_type IS NULL OR
		 (p_buy_type != 1 AND p_buy_type != 2 AND p_buy_type != 0) OR
		 p_user_id IS NULL OR (p_buy_type = 1 AND p_package_id IS NULL) THEN
		RESULT_STATUS := 3;
		RETURN;
	END IF;

	BEGIN
		SELECT U.BUY_SCORE_USEABLE, U.BUY_LEVEL, U.SELL_LEVEL
			INTO v_user_buy_score_amount, v_user_buy_level, v_user_sell_level
			FROM USERS U
		 WHERE U.ID = p_user_id;
		--AND U.ISLOCK = 0;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 1; /*没有此用户或者用户被锁定*/
			RETURN;
	END;

	SELECT EC_CART_KEY_TIME_SEQ.NEXTVAL INTO v_key_time FROM dual;

	IF p_buy_type = 0 THEN
		/*单件购买*/
		BEGIN
			SELECT CASE
							 WHEN p_locale = 1 THEN
								GOODS_GBK
							 WHEN p_locale = 2 THEN
								GOODS_EN
							 ELSE
								GOODS_CN
						 END GOODS_NAME,
						 GOODS_NO,
						 GOODS_TYPE,
						 HAVE_PACKAGE,
						 MARKET_PRICE,
						 CASE
							 WHEN v_user_buy_level = 3 AND v_user_sell_level <= 13 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.95, 2)
							 WHEN v_user_buy_level = 4 AND v_user_sell_level <= 14 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.92, 2)
							 WHEN v_user_buy_level = 5 AND v_user_sell_level <= 15 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.88, 2)
							 WHEN v_user_sell_level = 13 AND v_user_buy_level <= 3 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.95, 2)
							 WHEN v_user_sell_level = 14 AND v_user_buy_level <= 4 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.92, 2)
							 WHEN v_user_sell_level = 15 AND v_user_buy_level <= 5 AND
										BRAND_ID = 1000 THEN
								round(SHOP_PRICE * 0.88, 2)
							 ELSE
								SHOP_PRICE
						 END SHOP_PRICE,
						 GOODS_SCORES,
						 GOODS_KIND,
						 CASE
							 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
								BUY_FIXED_SCORES
							 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
								FLOOR(SHOP_PRICE * SCORE_BUY_PARAM)
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID
				INTO v_goods_name,
						 v_goods_no,
						 v_goods_type,
						 v_have_package,
						 v_market_price,
						 v_shop_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id
				FROM EC_GOODS
			 WHERE ID = p_goods_id
				 AND SYSDATE >= SALE_START
				 AND SYSDATE <= SALE_END
				 AND GOODS_STATUS = 1
				 AND SALE_NUMBER > 0
				 AND GOODS_TYPE != 3;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_shop_price,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '0',
				 '0',
				 v_user_get_score,
				 v_key_time,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,单件购买时不插入套餐ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 EG.GOODS_NO,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 1,
							 '1',
							 SYSDATE,
							 '0',
							 0,
							 v_key_time,
							 EGS.ID,
							 '1',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = p_goods_id);

			COMMIT;
			RESULT_STATUS := 0;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;

	IF p_buy_type = 1 AND p_package_id IS NOT NULL THEN
		/**套餐购买,不考虑灯塔折扣*/
		BEGIN
			BEGIN
				SELECT CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 GOODS_NO,
							 GOODS_TYPE,
							 HAVE_PACKAGE,
							 MARKET_PRICE,
							 PACKAGE_PRICE,
							 GOODS_SCORES,
							 GOODS_KIND,
							 CASE
								 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
									BUY_FIXED_SCORES
								 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
									FLOOR(PACKAGE_PRICE * SCORE_BUY_PARAM)
								 ELSE
									0
							 END USER_GET_SCORE,
							 CASE
								 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
									SALE_NUMBER
								 ELSE
									limit_number
							 END AS LIMIT_NUMBER,
							 SALE_NUMBER,
							 STOCK_PRICE,
							 CONTRACT_ID
					INTO v_goods_name,
							 v_goods_no,
							 v_goods_type,
							 v_have_package,
							 v_market_price,
							 v_package_price,
							 v_goods_scores,
							 v_goods_kind,
							 v_user_get_score,
							 v_limit_number,
							 v_sale_number,
							 v_stock_price,
							 v_contract_id
					FROM EC_GOODS
				 WHERE ID = p_goods_id
					 AND SYSDATE >= SALE_START
					 AND SYSDATE <= SALE_END
					 AND GOODS_STATUS = 1
					 AND SALE_NUMBER > 0
					 AND GOODS_TYPE != 3;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					ROLLBACK;
					RESULT_STATUS := 4; /*没有此商品*/
					RETURN;
			END;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 PACKAGE_ID,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_package_price,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '1',
				 '0',
				 v_user_get_score,
				 v_key_time,
				 p_package_id,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,插入套餐ID,配件ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 PACKAGE_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 1,
							 1,
							 SYSDATE,
							 '1',
							 0,
							 v_key_time,
							 EGS.ID,
							 p_package_id,
							 '0',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = p_goods_id);

			/*按套餐ID和主商品ID查询套餐商品*/
			SELECT CASE
							 WHEN p_locale = 1 THEN
								EG.GOODS_GBK
							 WHEN p_locale = 2 THEN
								EG.GOODS_EN
							 ELSE
								EG.GOODS_CN
						 END GOODS_NAME,
						 EG.ID,
						 EG.GOODS_NO,
						 EG.GOODS_TYPE,
						 EG.MARKET_PRICE,
						 EG.PACKAGE_PRICE,
						 EG.GOODS_SCORES,
						 EG.GOODS_KIND,
						 CASE
							 WHEN EG.BUY_FIXED_SCORES IS NOT NULL THEN
								EG.BUY_FIXED_SCORES
							 WHEN EG.SCORE_BUY_PARAM IS NOT NULL THEN
								FLOOR(EG.PACKAGE_PRICE * SCORE_BUY_PARAM)
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 EG.SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID
				INTO v_goods_name,
						 v_goods_id,
						 v_goods_no,
						 v_goods_type,
						 v_market_price,
						 v_package_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id
				FROM EC_GOODS EG
				JOIN EC_PACKAGES EPS ON (EPS.ID = p_package_id AND
																EPS.GOODS_ID = p_goods_id AND
																EPS.package_id = EG.id)
			 WHERE SYSDATE >= EG.SALE_START
				 AND SYSDATE <= EG.SALE_END
				 AND EG.GOODS_STATUS = 1
				 AND EG.SALE_NUMBER > 0
				 AND EG.GOODS_TYPE != 3;
			/** 插入套餐商品 */

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 PACKAGE_ID,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 v_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_package_price,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '1',
				 '0',
				 v_user_get_score,
				 v_key_time,
				 p_package_id,
				 v_stock_price,
				 v_contract_id);

			/*处理配件,插入套餐ID,配件ID*/
			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 BUY_TYPE,
				 GET_SCORES,
				 KEY_TIME,
				 GIFT_ID,
				 PACKAGE_ID,
				 IS_GIFT,
				 STOCK_PRICE,
				 CONTRACT_ID)
				SELECT EC_CARTS_SEQ.NEXTVAL,
							 p_user_id,
							 EG.ID,
							 CASE
								 WHEN p_locale = 1 THEN
									GOODS_GBK
								 WHEN p_locale = 2 THEN
									GOODS_EN
								 ELSE
									GOODS_CN
							 END GOODS_NAME,
							 MARKET_PRICE,
							 0,
							 1,
							 1,
							 SYSDATE,
							 '1',
							 0,
							 v_key_time,
							 EGS.ID,
							 p_package_id,
							 '0',
							 STOCK_PRICE,
							 CONTRACT_ID
					FROM EC_GOODS EG
					JOIN EC_GIFTS EGS ON (EGS.GIFT_GOODS_ID = EG.ID AND
															 EGS.GOODS_ID = v_goods_id);

			RESULT_STATUS := 0;

			COMMIT;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;
	IF p_buy_type = 2 THEN
		/*购买积分商品,不考虑灯塔折扣*/
		BEGIN
			SELECT CASE
							 WHEN p_locale = 1 THEN
								GOODS_GBK
							 WHEN p_locale = 2 THEN
								GOODS_EN
							 ELSE
								GOODS_CN
						 END GOODS_NAME,
						 GOODS_NO,
						 GOODS_TYPE,
						 HAVE_PACKAGE,
						 MARKET_PRICE,
						 SHOP_PRICE,
						 GOODS_SCORES,
						 GOODS_KIND,
						 CASE
							 WHEN BUY_FIXED_SCORES IS NOT NULL THEN
								BUY_FIXED_SCORES
							 WHEN SCORE_BUY_PARAM IS NOT NULL THEN
								SHOP_PRICE * SCORE_BUY_PARAM
							 ELSE
								0
						 END USER_GET_SCORE,
						 CASE
							 WHEN LIMIT_NUMBER > SALE_NUMBER THEN
								SALE_NUMBER
							 ELSE
								limit_number
						 END AS LIMIT_NUMBER,
						 SALE_NUMBER,
						 STOCK_PRICE,
						 CONTRACT_ID
				INTO v_goods_name,
						 v_goods_no,
						 v_goods_type,
						 v_have_package,
						 v_market_price,
						 v_shop_price,
						 v_goods_scores,
						 v_goods_kind,
						 v_user_get_score,
						 v_limit_number,
						 v_sale_number,
						 v_stock_price,
						 v_contract_id
				FROM EC_GOODS
			 WHERE ID = p_goods_id
				 AND SYSDATE >= SALE_START
				 AND SYSDATE <= SALE_END
				 AND SALE_NUMBER > 0
				 AND GOODS_STATUS = 1
				 AND GOODS_TYPE = 3;

			IF v_user_buy_score_amount < v_goods_scores THEN
				RESULT_STATUS := 2; /*购买积分不够*/
				RETURN;
			END IF;

			INSERT INTO EC_CARTS
				(ID,
				 USER_ID,
				 GOODS_ID,
				 GOODS_NO,
				 GOODS_NAME,
				 MARTET_PRICE,
				 GOODS_PRICE,
				 CONSUME_SCORES,
				 GOODS_NUMBER,
				 IS_REAL,
				 CREATED_AT,
				 CART_NOTES,
				 LIMIT_NUM,
				 BUY_TYPE,
				 IS_GIFT,
				 GET_SCORES,
				 KEY_TIME,
				 STOCK_PRICE,
				 CONTRACT_ID)
			VALUES
				(EC_CARTS_SEQ.NEXTVAL,
				 p_user_id,
				 p_goods_id,
				 v_goods_no,
				 v_goods_name,
				 v_market_price,
				 v_shop_price,
				 v_goods_scores,
				 1,
				 '1',
				 SYSDATE,
				 p_cart_notes,
				 v_limit_number,
				 '2',
				 '0',
				 0,
				 v_key_time,
				 v_stock_price,
				 v_contract_id);
			COMMIT;

			RESULT_STATUS := 0;
			RETURN;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 4; /*没有此商品*/
				RETURN;
		END;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
		RESULT_STATUS := 5;
		RETURN;
END P_EC_INSERT_TO_CART;


         '2',
         '0',
         0,
         v_key_time,
         v_stock_price,
         v_contract_id);
      COMMIT;

      RESULT_STATUS := 0;
      RETURN;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS := 4; /*没有此商品*/
        RETURN;
    END;
  END IF;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS := 5;
    RETURN;
END P_EC_INSERT_TO_CART_BAK;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_EC_MAKE_FINANCE_ORDERS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EC_MAKE_FINANCE_ORDERS"
(
  p_user_id        IN NUMBER,
  p_goods_id        IN NUMBER,
  p_goods_number   IN NUMBER,
  RESULT_STATUS    OUT NUMBER,
  RESULT_CART_IDS  OUT VARCHAR,
  RESULT_ORDER_IDS OUT VARCHAR
  /**
          描述:生成商城交易单
          *0:成功
          *1:没有此用户或者被锁定
          *2:存在积分商品,且积分不够
          *3:存在购买数量大于库存数量或限购数量的情况
          *5:未知错误
          */
) IS
  v_user_buy_score_amount NUMBER;
  v_consume_account       NUMBER;
  v_sale_number           NUMBER;
  v_user_name             VARCHAR2(1000);
  v_goods_no_storage      VARCHAR2(1000);
  v_goods_no_num          NUMBER;
  v_user_buy_level        NUMBER; /**处理灯塔折扣价,灯塔产品特别折扣三钻会员9.5折，四钻会员9.2折，五钻会员8.8折*/
  v_user_sell_level       NUMBER;

  V_EC_ORDER_IDS VARCHAR2(2000);

  CURSOR C_EC_GOODS(C_GOODS_ID NUMBER,C_GOODS_NUMBER NUMBER) IS
    SELECT EC_ORDER_GOODS_SEQ.NEXTVAL AS ORDER_ID,
           EG.GOODS_GBK
           C_GOODS_ID AS ID
           EG.GOODS_NO,
           C_GOODS_NUMBER AS GOODS_NUMBER,
           EG.MARKET_PRICE AS MARKET_PRICE,
           EG.SHOP_PRICE ORDER_PRICE,--无需打折
           EG.GOODS_SCORES CONSUME_SCORES,
           --EG.IS_REAL AS IS_TRUE_GOODS,
           SYSDATE + 3 AS LIMIT_PAY_DATE,
           SYSDATE AS CREATED_AT,
           '0' AS ORDER_STATUS,
           '' AS ORDER_NOTES,--订单备注 等需求来了再问
           EC.BUY_TYPE,--
           EG.BUY_FIXED_SCORES GET_SCORES,
           '0' AS IS_GIFT,
           EC.KEY_TIME,--猜想应该是 时间戳
           '' AS PACKAGE_ID,--猜想应该是 套餐id 默认为空
           EC.GIFT_ID,
           EG.STOCK_PRICE,
           EG.CONTRACT_ID
      FROM EC_GOODS EG
     WHERE EG.ID = C_GOODS_ID;

BEGIN
  BEGIN
    SELECT U.ACCOUNT, U.TRUE_NAME, U.BUY_LEVEL, U.SELL_LEVEL
      INTO v_user_account,
           v_user_name,
           v_user_buy_level,
           v_user_sell_level
      FROM USERS U
     WHERE U.ID = p_user_id
       AND U.ISLOCK = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS    := 1; /*没有此用户或者用户被锁定*/
      RESULT_ORDER_IDS := '';
      RETURN;
  END;
  BEGIN
    SELECT SUM(goods.shop_price * p_goods_number),goods.sale_number
      INTO v_consume_account,
           v_sale_number
      FROM ec_goods goods
    WHERE goods.id = p_goods_id
    IF p_goods_number < v_sale_number THEN
      IF v_user_account < v_consume_account THEN
        RESULT_STATUS    := 2; /*账户金额不够*/
        RESULT_ORDER_IDS := '';
        RETURN;
      END IF;
    ELSE IF
       RESULT_STATUS    := 3; /*SH*/
       RESULT_ORDER_IDS := '';
       RETURN;
    END IF;
  END;



  FOR RESULT_ROW IN C_EC_CARTS_GOODS(p_goods_id,p_goods_number) LOOP
    INSERT INTO EC_ORDER_GOODS
      (ID,
       GOODS_NAME,
       GOODS_ID,
       GOODS_NO,
       GOODS_NUMBER,
       MARKET_PRICE,
       ORDER_PRICE,
       CONSUME_SCORES,
       IS_TRUE_GOODS,
       LIMIT_PAY_DATE,
       CREATED_AT,
       ORDER_STATUS,
       ORDER_NOTES,
       USER_ID,
       USER_NAME,
       BUY_TYPE,
       GET_SCORES,
       IS_GIFT,
       KEY_TIME,
       PACKAGE_ID,
       GIFT_ID,
       STOCK_PRICE,
       CONTRACT_ID)
    VALUES
      (RESULT_ROW.ORDER_ID,
       RESULT_ROW.GOODS_NAME,
       RESULT_ROW.GOODS_ID,
       RESULT_ROW.GOODS_NO,
       RESULT_ROW.GOODS_NUMBER,
       RESULT_ROW.MARKET_PRICE,
       RESULT_ROW.ORDER_PRICE,
       RESULT_ROW.CONSUME_SCORES,
       RESULT_ROW.IS_TRUE_GOODS,
       RESULT_ROW.LIMIT_PAY_DATE,
       RESULT_ROW.CREATED_AT,
       RESULT_ROW.ORDER_STATUS,
       RESULT_ROW.ORDER_NOTES,
       P_USER_ID,
       V_USER_NAME,
       RESULT_ROW.BUY_TYPE,
       RESULT_ROW.GET_SCORES,
       RESULT_ROW.IS_GIFT,
       RESULT_ROW.KEY_TIME,
       RESULT_ROW.PACKAGE_ID,
       RESULT_ROW.GIFT_ID,
       RESULT_ROW.STOCK_PRICE,
       RESULT_ROW.CONTRACT_ID);

    V_EC_ORDER_IDS := V_EC_ORDER_IDS || RESULT_ROW.ORDER_ID || ',';

    IF RESULT_ROW.GOODS_NUMBER > 0 THEN
      UPDATE EC_GOODS EC
         SET EC.SALED_NUMBER = SALED_NUMBER + RESULT_ROW.GOODS_NUMBER,
             EC.SALE_NUMBER  = SALE_NUMBER - RESULT_ROW.GOODS_NUMBER
       WHERE ID = RESULT_ROW.GOODS_ID;
    END IF;
  END LOOP;

  DELETE FROM EC_CARTS EC WHERE EC.USER_ID = p_user_id;

  RESULT_ORDER_IDS := SUBSTR(V_EC_ORDER_IDS, 0, LENGTH(V_EC_ORDER_IDS) - 1);

  COMMIT;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS    := 5;
    RESULT_ORDER_IDS := '';
    RETURN;

END P_EC_MAKE_ORDERS;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_EC_MAKE_ORDERS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EC_MAKE_ORDERS"(P_USER_ID        IN NUMBER,
                                             RESULT_STATUS    OUT NUMBER,
                                             RESULT_CART_IDS  OUT VARCHAR,
                                             RESULT_ORDER_IDS OUT VARCHAR
                                             /**
                                                                                                            描述:生成商城交易单
                                                                                                            *0:成功
                                                                                                            *1:没有此用户或者被锁定
                                                                                                            *2:存在积分商品,且积分不够
                                                                                                            *3:存在购买数量大于库存数量或限购数量的情况
                                                                                                            *5:未知错误
                                                                                                            *6:购买数量不能小于 预定数量
                                                                                                            */) IS
  V_USER_BUY_SCORE_AMOUNT NUMBER;
  V_CONSUME_SCORES        NUMBER;
  V_USER_NAME             VARCHAR2(1000);
  V_GOODS_NO_STORAGE      VARCHAR2(1000);
  V_GOODS_NO_NUM          NUMBER;
  V_USER_BUY_LEVEL        NUMBER; /**处理灯塔折扣价,灯塔产品特别折扣三钻会员9.5折，四钻会员9.2折，五钻会员8.8折*/
  V_USER_SELL_LEVEL       NUMBER;
  V_BOOK_PRICE            NUMBER;
  V_BOOK_QUANTITY         NUMBER;
  V_BOOK_ID               NUMBER;
  V_EC_ORDER_IDS          VARCHAR2(2000);

  --双十一所有商城商品半价
  V_DOUBLE11_START DATE := TO_DATE('2013-11-11 11:00:00', 'yyyy-mm-dd hh24:mi:ss');
  V_DOUBLE11_END   DATE := TO_DATE('2013-11-11 23:00:00', 'yyyy-mm-dd hh24:mi:ss');
  V_PRICE          NUMBER;
  V_SCORE          NUMBER;

  CURSOR C_EC_CARTS_GOODS(C_USER_ID NUMBER) IS
    SELECT EC_ORDER_GOODS_SEQ.NEXTVAL AS ORDER_ID,
           EC.GOODS_NAME,
           EC.GOODS_ID,
           EC.GOODS_NO,
           EC.GOODS_NUMBER,
           EC.MARTET_PRICE AS MARKET_PRICE,
           CASE
           --双十一半价
             WHEN SYSDATE - V_DOUBLE11_START > 0 AND SYSDATE - V_DOUBLE11_END < 0 THEN
              EG.SHOP_PRICE
             WHEN V_USER_BUY_LEVEL = 3 AND V_USER_SELL_LEVEL <= 13 AND BRAND_ID = 1000 THEN
              ROUND(EG.SHOP_PRICE * 0.95, 2)
             WHEN V_USER_BUY_LEVEL = 4 AND V_USER_SELL_LEVEL <= 14 AND BRAND_ID = 1000 THEN
              ROUND(EG.SHOP_PRICE * 0.92, 2)
             WHEN V_USER_BUY_LEVEL = 5 AND V_USER_SELL_LEVEL <= 15 AND BRAND_ID = 1000 THEN
              ROUND(EG.SHOP_PRICE * 0.88, 2)
             WHEN V_USER_SELL_LEVEL = 13 AND V_USER_BUY_LEVEL <= 3 AND BRAND_ID = 1000 THEN
              ROUND(EG.SHOP_PRICE * 0.95, 2)
             WHEN V_USER_SELL_LEVEL = 14 AND V_USER_BUY_LEVEL <= 4 AND BRAND_ID = 1000 THEN
              ROUND(EG.SHOP_PRICE * 0.92, 2)
             WHEN V_USER_SELL_LEVEL = 15 AND V_USER_BUY_LEVEL <= 5 AND BRAND_ID = 1000 THEN
              ROUND(EG.SHOP_PRICE * 0.88, 2)
             ELSE
              EG.SHOP_PRICE
           END ORDER_PRICE,
           EG.SHOP_PRICE AS SHOP_PRICE,
           EG.GOODS_SCORES CONSUME_SCORES,
           --end
           EC.IS_REAL AS IS_TRUE_GOODS,
           SYSDATE + 3 AS LIMIT_PAY_DATE,
           SYSDATE AS CREATED_AT,
           '0' AS ORDER_STATUS,
           EC.CART_NOTES AS ORDER_NOTES,
           EC.BUY_TYPE,
           EC.GET_SCORES,
           EC.IS_GIFT,
           EC.KEY_TIME,
           EC.PACKAGE_ID,
           EC.GIFT_ID,
           EC.STOCK_PRICE,
           EC.CONTRACT_ID
      FROM EC_CARTS EC
      JOIN EC_GOODS EG ON (EG.ID = EC.GOODS_ID) /*防止生成订单前修改售价的情况*/
     WHERE EC.USER_ID = C_USER_ID;
BEGIN
  BEGIN
    SELECT U.BUY_SCORE_USEABLE, U.TRUE_NAME, U.BUY_LEVEL, U.SELL_LEVEL
      INTO V_USER_BUY_SCORE_AMOUNT, V_USER_NAME, V_USER_BUY_LEVEL, V_USER_SELL_LEVEL
      FROM USERS U
     WHERE U.ID = P_USER_ID
       AND U.ISLOCK = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS    := 1; /*没有此用户或者用户被锁定*/
      RESULT_ORDER_IDS := '';
      RETURN;
  END;
  BEGIN
    SELECT SUM(CARTS.CONSUME_SCORES * CARTS.GOODS_NUMBER)
      INTO V_CONSUME_SCORES
      FROM EC_CARTS CARTS
     WHERE CARTS.USER_ID = P_USER_ID
       AND CARTS.BUY_TYPE = 2;
    IF V_USER_BUY_SCORE_AMOUNT < V_CONSUME_SCORES THEN
      RESULT_STATUS    := 2; /*存在积分商品,且积分不够*/
      RESULT_ORDER_IDS := '';
      RETURN;
    END IF;
  END;
  BEGIN
    SELECT COUNT(EC.ID)
      INTO V_GOODS_NO_NUM
      FROM EC_CARTS EC
      JOIN EC_GOODS EG ON (EC.GOODS_ID = EG.ID AND EC.USER_ID = P_USER_ID)
     WHERE EC.GOODS_NUMBER > EG.SALE_NUMBER;
    --OR EC.GOODS_NUMBER > EG.LIMIT_NUMBER;
    IF V_GOODS_NO_NUM > 0 THEN
      SELECT TRANSLATE(LTRIM(TEXT, '/'), '*/', '*,') RESEARCHERLIST
        INTO V_GOODS_NO_STORAGE
        FROM (SELECT ROW_NUMBER() OVER(PARTITION BY USER_ID ORDER BY USER_ID, LVL DESC) RN, USER_ID, TEXT
                FROM (SELECT USER_ID, LEVEL LVL, SYS_CONNECT_BY_PATH(ID, '/') TEXT
                        FROM (SELECT EC.USER_ID,
                                     EC.ID AS ID,
                                     ROW_NUMBER() OVER(PARTITION BY USER_ID ORDER BY USER_ID, EC.ID) X
                                FROM EC_CARTS EC
                                JOIN EC_GOODS EG ON (EC.GOODS_ID = EG.ID AND USER_ID = P_USER_ID)
                               WHERE EC.GOODS_NUMBER > EG.SALE_NUMBER
                              --OR EC.GOODS_NUMBER > EG.LIMIT_NUMBER
                               ORDER BY USER_ID, ID) A
                      CONNECT BY USER_ID = PRIOR USER_ID
                             AND X - 1 = PRIOR X))
       WHERE RN = 1
       ORDER BY USER_ID;
      IF V_GOODS_NO_STORAGE IS NOT NULL THEN
        RESULT_STATUS    := 3; /*存在购买数量大于库存数量或限购数量的情况*/
        RESULT_CART_IDS  := V_GOODS_NO_STORAGE;
        RESULT_ORDER_IDS := '';
        RETURN;
      END IF;
    END IF;
  END;
  FOR RESULT_ROW IN C_EC_CARTS_GOODS(P_USER_ID) LOOP
    --判断数据是否是预约商品 即buy_type=9
    IF RESULT_ROW.BUY_TYPE != 9 THEN
      --双十一半价
      IF SYSDATE - V_DOUBLE11_START > 0 AND SYSDATE - V_DOUBLE11_END < 0 THEN
        V_PRICE := ROUND(RESULT_ROW.ORDER_PRICE / 2, 2);
      ELSE
        V_PRICE := RESULT_ROW.ORDER_PRICE;
      END IF;
      INSERT INTO EC_ORDER_GOODS
        (ID,
         GOODS_NAME,
         GOODS_ID,
         GOODS_NO,
         GOODS_NUMBER,
         MARKET_PRICE,
         ORDER_PRICE,
         CONSUME_SCORES,
         IS_TRUE_GOODS,
         LIMIT_PAY_DATE,
         CREATED_AT,
         ORDER_STATUS,
         ORDER_NOTES,
         USER_ID,
         USER_NAME,
         BUY_TYPE,
         GET_SCORES,
         IS_GIFT,
         KEY_TIME,
         PACKAGE_ID,
         GIFT_ID,
         STOCK_PRICE,
         CONTRACT_ID)
      VALUES
        (RESULT_ROW.ORDER_ID,
         RESULT_ROW.GOODS_NAME,
         RESULT_ROW.GOODS_ID,
         RESULT_ROW.GOODS_NO,
         RESULT_ROW.GOODS_NUMBER,
         RESULT_ROW.MARKET_PRICE,
         V_PRICE,
         RESULT_ROW.CONSUME_SCORES,
         RESULT_ROW.IS_TRUE_GOODS,
         RESULT_ROW.LIMIT_PAY_DATE,
         RESULT_ROW.CREATED_AT,
         RESULT_ROW.ORDER_STATUS,
         RESULT_ROW.ORDER_NOTES,
         P_USER_ID,
         V_USER_NAME,
         RESULT_ROW.BUY_TYPE,
         RESULT_ROW.GET_SCORES,
         RESULT_ROW.IS_GIFT,
         RESULT_ROW.KEY_TIME,
         RESULT_ROW.PACKAGE_ID,
         RESULT_ROW.GIFT_ID,
         RESULT_ROW.STOCK_PRICE,
         RESULT_ROW.CONTRACT_ID);
    ELSE
    
      BEGIN
        SELECT SUM(NVL(EAB.QUANTITY, 0))
          INTO V_BOOK_QUANTITY
          FROM EC_AUCTION_BOOK EAB
         WHERE EAB.USER_ID = P_USER_ID
           AND EAB.AUCTION_NO = RESULT_ROW.GOODS_NO
           AND EAB.STATUS IN (4, 5)
           AND EAB.DEPOSIT_STATUS = 1
           AND EAB.ORDER_ID IS NULL;
      
        IF V_BOOK_QUANTITY > RESULT_ROW.GOODS_NUMBER THEN
          RESULT_STATUS := 6; /*购买数量不能小于 预定数量*/
          RETURN;
        END IF;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_BOOK_QUANTITY := 0;
      END;
    
      INSERT INTO EC_ORDER_GOODS
        (ID,
         GOODS_NAME,
         GOODS_ID,
         GOODS_NO,
         GOODS_NUMBER,
         MARKET_PRICE,
         ORDER_PRICE,
         CONSUME_SCORES,
         IS_TRUE_GOODS,
         LIMIT_PAY_DATE,
         CREATED_AT,
         ORDER_STATUS,
         ORDER_NOTES,
         USER_ID,
         USER_NAME,
         BUY_TYPE,
         GET_SCORES,
         IS_GIFT,
         KEY_TIME,
         PACKAGE_ID,
         GIFT_ID,
         STOCK_PRICE,
         CONTRACT_ID)
      VALUES
        (RESULT_ROW.ORDER_ID,
         RESULT_ROW.GOODS_NAME,
         RESULT_ROW.GOODS_ID,
         RESULT_ROW.GOODS_NO,
         RESULT_ROW.GOODS_NUMBER,
         RESULT_ROW.MARKET_PRICE,
         RESULT_ROW.SHOP_PRICE,
         RESULT_ROW.CONSUME_SCORES,
         RESULT_ROW.IS_TRUE_GOODS,
         RESULT_ROW.LIMIT_PAY_DATE,
         RESULT_ROW.CREATED_AT,
         RESULT_ROW.ORDER_STATUS,
         RESULT_ROW.ORDER_NOTES,
         P_USER_ID,
         V_USER_NAME,
         RESULT_ROW.BUY_TYPE,
         RESULT_ROW.GET_SCORES,
         RESULT_ROW.IS_GIFT,
         RESULT_ROW.KEY_TIME,
         RESULT_ROW.PACKAGE_ID,
         RESULT_ROW.GIFT_ID,
         RESULT_ROW.STOCK_PRICE,
         RESULT_ROW.CONTRACT_ID);
    
      --将定金绑定到具体订单
      UPDATE EC_AUCTION_BOOK EAB
         SET EAB.ORDER_ID = RESULT_ROW.ORDER_ID
       WHERE EAB.USER_ID = P_USER_ID
         AND EAB.AUCTION_NO = RESULT_ROW.GOODS_NO
         AND EAB.STATUS IN (4, 5)
         AND EAB.DEPOSIT_STATUS = 1
         AND EAB.ORDER_ID IS NULL;
    END IF;
  
    V_EC_ORDER_IDS := V_EC_ORDER_IDS || RESULT_ROW.ORDER_ID || ',';
    IF RESULT_ROW.GOODS_NUMBER > 0 THEN
      UPDATE EC_GOODS EC
         SET EC.SALED_NUMBER = SALED_NUMBER + RESULT_ROW.GOODS_NUMBER,
             EC.SALE_NUMBER  = SALE_NUMBER - RESULT_ROW.GOODS_NUMBER
       WHERE ID = RESULT_ROW.GOODS_ID;
    END IF;
  
  END LOOP;
  DELETE FROM EC_CARTS EC WHERE EC.USER_ID = P_USER_ID;
  RESULT_ORDER_IDS := SUBSTR(V_EC_ORDER_IDS, 0, LENGTH(V_EC_ORDER_IDS) - 1);
  COMMIT;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS    := 5;
    RESULT_ORDER_IDS := '';
    RETURN;
END P_EC_MAKE_ORDERS;

 
/

-- ----------------------------
-- Procedure structure for P_EC_MAKE_ORDERS_BAK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EC_MAKE_ORDERS_BAK"
(
  p_user_id        IN NUMBER,
  RESULT_STATUS    OUT NUMBER,
  RESULT_CART_IDS  OUT VARCHAR,
  RESULT_ORDER_IDS OUT VARCHAR
  /**
          描述:生成商城交易单
          *0:成功
          *1:没有此用户或者被锁定
          *2:存在积分商品,且积分不够
          *3:存在购买数量大于库存数量或限购数量的情况
          *5:未知错误
          */
) IS
  v_user_buy_score_amount NUMBER;
  v_consume_scores        NUMBER;
  v_user_name             VARCHAR2(1000);
  v_goods_no_storage      VARCHAR2(1000);
  v_goods_no_num          NUMBER;
  v_user_buy_level        NUMBER; /**处理灯塔折扣价,灯塔产品特别折扣三钻会员9.5折，四钻会员9.2折，五钻会员8.8折*/
  v_user_sell_level       NUMBER;

  V_EC_ORDER_IDS VARCHAR2(2000);

  CURSOR C_EC_CARTS_GOODS(C_USER_ID NUMBER) IS
    SELECT EC_ORDER_GOODS_SEQ.NEXTVAL AS ORDER_ID,
           EC.GOODS_NAME,
           EC.GOODS_ID,
           EC.GOODS_NO,
           EC.GOODS_NUMBER,
           EC.MARTET_PRICE AS MARKET_PRICE,
           CASE
             WHEN v_user_buy_level = 3 AND v_user_sell_level <= 13 AND
                  BRAND_ID = 1000 THEN
              round(EG.SHOP_PRICE * 0.95, 2)
             WHEN v_user_buy_level = 4 AND v_user_sell_level <= 14 AND
                  BRAND_ID = 1000 THEN
              round(EG.SHOP_PRICE * 0.92, 2)
             WHEN v_user_buy_level = 5 AND v_user_sell_level <= 15 AND
                  BRAND_ID = 1000 THEN
              round(EG.SHOP_PRICE * 0.88, 2)
             WHEN v_user_sell_level = 13 AND v_user_buy_level <= 3 AND
                  BRAND_ID = 1000 THEN
              round(EG.SHOP_PRICE * 0.95, 2)
             WHEN v_user_sell_level = 14 AND v_user_buy_level <= 4 AND
                  BRAND_ID = 1000 THEN
              round(EG.SHOP_PRICE * 0.92, 2)
             WHEN v_user_sell_level = 15 AND v_user_buy_level <= 5 AND
                  BRAND_ID = 1000 THEN
              round(EG.SHOP_PRICE * 0.88, 2)
             ELSE
              EG.SHOP_PRICE
           END ORDER_PRICE,
           EG.GOODS_SCORES CONSUME_SCORES,
           EC.IS_REAL AS IS_TRUE_GOODS,
           SYSDATE + 3 AS LIMIT_PAY_DATE,
           SYSDATE AS CREATED_AT,
           '0' AS ORDER_STATUS,
           EC.CART_NOTES AS ORDER_NOTES,
           EC.BUY_TYPE,
           EC.GET_SCORES,
           EC.IS_GIFT,
           EC.KEY_TIME,
           EC.PACKAGE_ID,
           EC.GIFT_ID,
           EC.STOCK_PRICE,
           EC.CONTRACT_ID
      FROM EC_CARTS EC
      JOIN EC_GOODS EG ON (EG.ID = EC.GOODS_ID) /*防止生成订单前修改售价的情况*/
     WHERE EC.USER_ID = C_USER_ID;

BEGIN
  BEGIN
    SELECT U.BUY_SCORE_USEABLE, U.TRUE_NAME, U.BUY_LEVEL, U.SELL_LEVEL
      INTO v_user_buy_score_amount,
           v_user_name,
           v_user_buy_level,
           v_user_sell_level
      FROM USERS U
     WHERE U.ID = p_user_id
       AND U.ISLOCK = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS    := 1; /*没有此用户或者用户被锁定*/
      RESULT_ORDER_IDS := '';
      RETURN;
  END;
  BEGIN
    SELECT SUM(carts.consume_scores * carts.goods_number)
      INTO v_consume_scores
      FROM EC_CARTS carts
     WHERE carts.user_id = p_user_id
       AND carts.buy_type = 2;
    IF v_user_buy_score_amount < v_consume_scores THEN
      RESULT_STATUS    := 2; /*存在积分商品,且积分不够*/
      RESULT_ORDER_IDS := '';
      RETURN;
    END IF;
  END;

  BEGIN
    SELECT COUNT(ec.id)
      INTO v_goods_no_num
      FROM EC_CARTS EC
      JOIN EC_GOODS EG ON (EC.GOODS_ID = EG.ID AND EC.USER_ID = p_user_id)
     WHERE EC.GOODS_NUMBER > EG.SALE_NUMBER
        OR EC.GOODS_NUMBER > EG.LIMIT_NUMBER;
    IF v_goods_no_num > 0 THEN
      SELECT TRANSLATE(LTRIM(text, '/'), '*/', '*,') researcherList
        INTO v_goods_no_storage
        FROM (SELECT ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY user_id, lvl DESC) rn,
                     user_id,
                     text
                FROM (SELECT user_id,
                             LEVEL lvl,
                             SYS_CONNECT_BY_PATH(id, '/') text
                        FROM (SELECT ec.user_id,
                                     ec.id AS id,
                                     ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY user_id, ec.id) x
                                FROM EC_CARTS EC
                                JOIN EC_GOODS EG ON (EC.GOODS_ID = EG.ID AND
                                                    USER_ID = p_user_id)
                               WHERE EC.GOODS_NUMBER > EG.SALE_NUMBER
                                  OR EC.GOODS_NUMBER > EG.LIMIT_NUMBER
                               ORDER BY user_id, id) a
                      CONNECT BY user_id = PRIOR user_id
                             AND x - 1 = PRIOR x))
       WHERE rn = 1
       ORDER BY user_id;

      IF v_goods_no_storage IS NOT NULL THEN
        RESULT_STATUS    := 3; /*存在购买数量大于库存数量或限购数量的情况*/
        RESULT_CART_IDS  := v_goods_no_storage;
        RESULT_ORDER_IDS := '';
        RETURN;
      END IF;
    END IF;
  END;

  FOR RESULT_ROW IN C_EC_CARTS_GOODS(P_USER_ID) LOOP
    INSERT INTO EC_ORDER_GOODS
      (ID,
       GOODS_NAME,
       GOODS_ID,
       GOODS_NO,
       GOODS_NUMBER,
       MARKET_PRICE,
       ORDER_PRICE,
       CONSUME_SCORES,
       IS_TRUE_GOODS,
       LIMIT_PAY_DATE,
       CREATED_AT,
       ORDER_STATUS,
       ORDER_NOTES,
       USER_ID,
       USER_NAME,
       BUY_TYPE,
       GET_SCORES,
       IS_GIFT,
       KEY_TIME,
       PACKAGE_ID,
       GIFT_ID,
       STOCK_PRICE,
       CONTRACT_ID)
    VALUES
      (RESULT_ROW.ORDER_ID,
       RESULT_ROW.GOODS_NAME,
       RESULT_ROW.GOODS_ID,
       RESULT_ROW.GOODS_NO,
       RESULT_ROW.GOODS_NUMBER,
       RESULT_ROW.MARKET_PRICE,
       RESULT_ROW.ORDER_PRICE,
       RESULT_ROW.CONSUME_SCORES,
       RESULT_ROW.IS_TRUE_GOODS,
       RESULT_ROW.LIMIT_PAY_DATE,
       RESULT_ROW.CREATED_AT,
       RESULT_ROW.ORDER_STATUS,
       RESULT_ROW.ORDER_NOTES,
       P_USER_ID,
       V_USER_NAME,
       RESULT_ROW.BUY_TYPE,
       RESULT_ROW.GET_SCORES,
       RESULT_ROW.IS_GIFT,
       RESULT_ROW.KEY_TIME,
       RESULT_ROW.PACKAGE_ID,
       RESULT_ROW.GIFT_ID,
       RESULT_ROW.STOCK_PRICE,
       RESULT_ROW.CONTRACT_ID);

    V_EC_ORDER_IDS := V_EC_ORDER_IDS || RESULT_ROW.ORDER_ID || ',';

    IF RESULT_ROW.GOODS_NUMBER > 0 THEN
      UPDATE EC_GOODS EC
         SET EC.SALED_NUMBER = SALED_NUMBER + RESULT_ROW.GOODS_NUMBER,
             EC.SALE_NUMBER  = SALE_NUMBER - RESULT_ROW.GOODS_NUMBER
       WHERE ID = RESULT_ROW.GOODS_ID;
    END IF;
  END LOOP;

  DELETE FROM EC_CARTS EC WHERE EC.USER_ID = p_user_id;

  RESULT_ORDER_IDS := SUBSTR(V_EC_ORDER_IDS, 0, LENGTH(V_EC_ORDER_IDS) - 1);

  COMMIT;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS    := 5;
    RESULT_ORDER_IDS := '';
    RETURN;

END P_EC_MAKE_ORDERS_BAK;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_EN_KEYWORD
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_EN_KEYWORD" (P_KEYWORD VARCHAR
/*
       作者：  Dwen
       日期：  2012-03-07
       描述：  英文站搜索关键字插入
       参数说明：
       p_keyword ：关健字
*/) IS
  V_KEYWORD_ID NUMBER;
  V_NOW        DATE := SYSDATE;
BEGIN
  IF P_KEYWORD IS NOT NULL THEN
    BEGIN
      SELECT ID
        INTO V_KEYWORD_ID
        FROM KEYWORDS
       WHERE KEYWORD = P_KEYWORD
         AND ROWNUM = 1;
      UPDATE KEYWORDS SET COUNTS = COUNTS + 1 WHERE ID = V_KEYWORD_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT KEYWORDS_SEQ.NEXTVAL INTO V_KEYWORD_ID FROM DUAL;
        INSERT INTO KEYWORDS
          (ID, KEYWORD, COUNTS, STATUS, CREATED_AT, UPDATED_AT)
        VALUES
          (V_KEYWORD_ID, P_KEYWORD, '0', '0', V_NOW, V_NOW);
    END;
  END IF;
END P_EN_KEYWORD;


 
/

-- ----------------------------
-- Procedure structure for P_ENTRADE_PAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_ENTRADE_PAY"(p_userid         IN NUMBER, /**客户编号*/
                                            p_order_ids      IN VARCHAR, /**所有需要支付的交易单*/
                                            p_user_addressid IN NUMBER, /*客户收货地址*/
                                            p_delivertypeid  IN NUMBER, /**发货方式*/
                                            UNITE_CONSIGN_ID OUT NUMBER,
                                            p_admin_id       IN NUMBER, /**操作人员ID*/
                                            p_admin_name     IN VARCHAR, /**操作人员姓名*/
                                            RESULT_STATUS    OUT VARCHAR) is
  /*
    0:成功
    1:余额保证金错误
    2:没有当前用户
    3:部分交易单被冻结或者已经处理
    4:当前客户资金不足
    5:发货地址信息不全，没有国家
    6:选择的发货方式找不到相应国家区域的运费设置
    7:钱币类拍品不能发往国外，目前按照职能做上门自取处理，不考虑国外客户发往国内地址情况
  */
  v_user_name     VARCHAR(255); /**客户名称*/
  v_country_id    NUMBER(38); /*国家id*/
  v_address       VARCHAR(255); /*住址*/
  v_postcode      VARCHAR(255); /*邮编*/
  v_tel           VARCHAR(255); /*电话*/
  v_mobile        VARCHAR(255); /*手机*/
  v_delivertypeid NUMBER(38); /*发货类型id*/

  v_id              NUMBER(38);
  v_unite_consignid NUMBER(38);
  v_result_status   NUMBER(38);
  v_auction_nos     varchar2(255);
  v_split           VARCHAR2(2) := ',';

BEGIN
  v_delivertypeid := p_delivertypeid;

  if p_user_addressid = 0 then
    /*上门自取*/
    v_delivertypeid := 22;
    v_country_id    := 40;
    select true_name into v_user_name from users where id = p_userid;

  else

     select us.receive_name,
           us.country_id,
           us.postcode,
           us.tel,
           us.mobile_tel,
           us.address
      into v_user_name,
           v_country_id,
           v_postcode,
           v_tel,
           v_mobile,
           v_address
      from user_addresses us
     where us.id = p_user_addressid;
     /*发往国外的检查*/
     if  v_country_id <> 40 then

      /*检查拍品是否属于钱币类，属于钱币类不能发往国外*/
    select strcat(au.auction_no)
      into v_auction_nos
      from user_orders uo, auctions au
     where uo.auction_id = au.id
       and instr(v_split || p_order_ids || v_split,
                 v_split || uo.id || v_split) > 0
       and exists (
            select id from (
              select id
                from auction_categories ac
               start with id = 180
              connect by prior id = parent_id
              union
              select id from  auction_categories ac
              where ac.id in (188,510)
             ) a  where a.id = au.auction_category_id
            );

    if v_auction_nos is not null and length(v_auction_nos) > 0 then
       v_result_status := 7;
       RESULT_STATUS := to_char(v_result_status);
       return;
    end if;

    end if;

  end if;

  if v_country_id = 0 then
    /*没有国家*/
    v_result_status := 5;
  else
    p_paypalen_pay(0,
                   null,
                   p_userid,
                   p_order_ids,
                   v_country_id,
                   v_delivertypeid,
                   0,
                   v_user_name,
                   v_address,
                   v_postcode,
                   v_tel,
                   v_mobile,
                   null,
                   null,
                   '备注',
                   0,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   p_user_addressid,
                   p_admin_id,
                   p_admin_name,
                   v_id,
                   v_unite_consignid,
                   v_result_status);

    UNITE_CONSIGN_ID := v_unite_consignid;
  end if;
  RESULT_STATUS := to_char(v_result_status);
END P_ENTRADE_PAY;


 
/

-- ----------------------------
-- Procedure structure for P_ENTRADE_PAY_OLD
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_ENTRADE_PAY_OLD"(p_userid         IN NUMBER, /**客户编号*/
                                            p_order_ids      IN VARCHAR, /**所有需要支付的交易单*/
                                            p_user_addressid IN NUMBER, /*客户收货地址*/
                                            p_delivertypeid  IN NUMBER, /**发货方式*/
                                            UNITE_CONSIGN_ID OUT NUMBER,
                                            RESULT_STATUS    OUT VARCHAR) is
                                            /*
                                              0:成功
                                              1:余额保证金错误
                                              2:没有当前用户
                                              3:部分交易单被冻结或者已经处理
                                              4:当前客户资金不足
                                              5:发货地址信息不全，没有国家
                                            */
  v_user_name  VARCHAR(255); /**客户名称*/
  v_country_id NUMBER(38); /*国家id*/
  v_address    VARCHAR(255); /*住址*/
  v_postcode   VARCHAR(255); /*邮编*/
  v_tel        VARCHAR(255); /*电话*/
  v_mobile     VARCHAR(255); /*手机*/
  v_delivertypeid NUMBER(38);/*发货类型id*/

  v_id              NUMBER(38);
  v_unite_consignid NUMBER(38);
  v_result_status   NUMBER(38);
BEGIN
  v_delivertypeid:=p_delivertypeid;
   select us.receive_name,us.country_id,us.postcode,us.tel,us.mobile_tel,us.address 
       into v_user_name, v_country_id, v_postcode, v_tel, v_mobile,v_address   
       from user_addresses us where us.id=p_user_addressid;
  if p_user_addressid = 0 then
    v_delivertypeid := 22;
    v_country_id    := 40;
  end if;
  if v_country_id = 0 then
     v_result_status := 5;
  else 
    p_paypalen_pay_old(0,
                 null,
                 p_userid,
                 p_order_ids,
                 v_country_id,
                 v_delivertypeid,
                 0,
                 v_user_name,
                 v_address,
                 v_postcode,
                 v_tel,
                 v_mobile,
                 null,
                 null,
                 '备注',
                 0,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 p_user_addressid,
                 v_id,
                 v_unite_consignid,
                 v_result_status);

    UNITE_CONSIGN_ID := v_unite_consignid;
  end if;
  RESULT_STATUS    := to_char(v_result_status);
END P_ENTRADE_PAY_OLD;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_FINANCE_CIRCALUTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_FINANCE_CIRCALUTION" (p_user_id       in number, --客户id
                                                  p_transfer_type in number, --内部转账类型
                                                  /*
                                                    1:余额转保证金
                                                    2:保证金转余额
                                                    3:余额转其他账户余额
                                                    3:保证金转其他账户保证金
                                                    */
                                                  p_amount       in number, --转款金额
                                                  p_admin_id     in number, --操作人id
                                                  p_admin_name   in varchar, --操作人
                                                  p_remarks      in varchar, --备注
                                                  result_status  out number
                                                  /*
                                                    0:成功,
                                                    1:p_user_id为空,
                                                    2:用户不存在,
                                                    3:转款金额大于用户金额,
                                                    4:可用额度不够,
                                                    5:p_turn_user_id为空,
                                                    6:要转入的客户不存在,
                                                    7:其他异常
                                                  */
                                                  ) is
  /*
  作者: 雷美芳
  日期:2011-10-26
  描述:客户余额内部转账  update by cyf
  */
  v_date             DATE := SYSDATE; --本次操作的时间
  v_user_id          NUMBER := p_user_id; --此次修改的客户ID
  v_in_direction     varchar2(50) := '0'; --收入
  v_out_direction    varchar2(50) := '1'; --支出
  v_out_margin_type  varchar2(50) := '0'; --余额转出(保证金)
  v_in_margin_type   varchar2(50) := '1'; --余额转入(保证金)
  v_account_old      number(16, 2); --操作前账户余额
  v_account_new      number(16, 2); --操作后账户余额
  v_bails_account_old        number(16, 2); --操作前保证金余额
  v_bails_account_new        number(16, 2); --操作后保证金余额
  v_custom_type      varchar2(500); --公共备注自定义类型
  v_status           varchar2(50) := '1'; --状态
  v_account          NUMBER := 0; --本客户金额
  v_bails            NUMBER := 0; --本客户保证金
  v_username         VARCHAR(500); --本客户姓名
  v_quota            NUMBER := 0; --可用额度
  v_quota_amount number(16, 2);--可用额度(额度流水表)
  v_quota_in_type varchar2(50) := '1'; --1保证金存入
  v_quota_out_type varchar2(50):=3;-- 3保证金转出
  v_operate_type varchar2(50) := '0';--0额度为人工操作
  v_account_id NUMBER;
	v_margin_id   NUMBER;
  v_constant   number:=50;

      /* finance_type： 0:银行存入 1:现金存入 2:保证金转入余额 3:银行转出 4:余额转入保证金 5:坏账扣除 6:邮资补收
        10:IPS支付  11:交易单支付  12:结算前退货存款 13:结算转余额 14:结算后退货存款 15:Paypal支付
        16:保管费 17:保险费 18:返还委托方结算单服务费 19:商城订单合并支付 20:委托积分转现金  21:商城退货金额
        22:余额转入 23:余额转出**/

begin
  IF v_user_id IS NULL THEN
    result_status := 1;
  ELSE
    /*按客户id查询客户信息*/
    BEGIN
      SELECT ACCOUNT, BAILS, TRUE_NAME, QUOTA, total_account
        INTO v_account, v_bails, v_username, v_quota, v_account_old
        FROM USERS
       WHERE ID = v_user_id;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        result_status := 2;
        RETURN;
    END;

   -- savepoint circalutionPoint1; --设置保存点
    /** 余额转保证金 **/
    IF p_transfer_type = 1 THEN
      BEGIN
        IF v_account IS NULL OR v_account < p_amount THEN
          ROLLBACK;
           result_status:=3;
            RETURN;
        END IF;
        v_custom_type      := '余额转保证金';
        v_account_new := v_account - p_amount; --操作后账户余额
        v_bails_account_old := v_bails; --操作前保证金余额
        v_bails_account_new := v_bails + p_amount;  --操作后保证金余额
        v_quota_amount:=p_amount*v_constant;--额度

        select user_accounts_seq.nextval into v_account_id FROM DUAL;

			  select user_margins_seq.nextval into v_margin_id FROM DUAL;

        /*添加转款信息*/
      insert into user_transfers
        (id,  from_id, to_id,  amount, direction,  transfer_type, admin_id,
         admin_name, REMARKS, status,  created_at)
      values
        (user_transfers_seq.nextval,
         v_user_id,   v_user_id,  p_amount, '1', '1', p_admin_id,  p_admin_name,p_remarks, v_status,  v_date);

        /*添加客户帐户流水*/
        insert into user_accounts
          (id, user_id, source_id,source_type, money,  direction, finance_type, finance_id, finance_name,
          FINANCE_DATE, REMARKS, status,  created_at, account_old,account_new)
        values
          (v_account_id, v_user_id, v_margin_id,'USER_MARGINS',p_amount,v_out_direction,'4',p_admin_id,
          p_admin_name, v_date,  p_remarks, v_status, v_date,  v_account, v_account_new);

        /*保证金流水*/
        insert into user_margins
          (id, user_id, user_name, amount, account_old, account_new, direction, margin_type,  remarks,
           admin_id,  admin_name,  created_at, resource_id, resource_type)
        values
          (v_margin_id, v_user_id, v_username, p_amount, v_bails_account_old, v_bails_account_new,  v_in_direction,
          v_in_margin_type, p_remarks, p_admin_id, p_admin_name,v_date,v_account_id, 'USER_ACCOUNTS');

          /*添加额度流水*/
          insert into user_quotas (id, user_id, amount, quota_type, operate_type, admin_id, admin_name, remarks, created_at)
          values(user_quotas_seq.nextval,v_user_id,v_quota_amount,v_quota_in_type,v_operate_type,p_admin_id, p_admin_name,p_remarks,v_date);
        /*更改客户账户信息*/
        UPDATE USERS
           SET BAILS         = BAILS + p_amount,
               ACCOUNT       = ACCOUNT - p_amount,
               total_account = total_account - p_amount,
               TOTAL_QUOTA   = TOTAL_QUOTA + p_amount * v_constant,
               QUOTA         = QUOTA + p_amount * v_constant
         WHERE ID = v_user_id;
      END;
    END IF;

    /* 保证金转余额 */
    IF p_transfer_type = 2 THEN
      BEGIN
        IF v_bails IS NULL OR v_bails < p_amount OR
           v_quota - p_amount * v_constant < 0 THEN
          ROLLBACK;
          result_status := 4;
            RETURN;
        END IF;
        v_custom_type      := '保证金转余额';
        v_account_new := v_account + p_amount; --操作后账户余额
        v_bails_account_old := v_bails; --操作前保证金余额
        v_bails_account_new := v_bails - p_amount;  --操作后保证金余额
        v_quota_amount:=p_amount * v_constant;--额度

        select user_accounts_seq.nextval into v_account_id FROM DUAL;
        select user_margins_seq.nextval into v_margin_id FROM DUAL;
       /*添加转款信息*/
        insert into user_transfers
          (id,  from_id, to_id,  amount, direction,  transfer_type, admin_id,
           admin_name, REMARKS, status,  created_at)
        values
          (user_transfers_seq.nextval,
           v_user_id,   v_user_id,  p_amount, '1', '2', p_admin_id,  p_admin_name,p_remarks, v_status,  v_date);

        /*添加客户帐户流水*/
        insert into user_accounts
          (id, user_id, source_id,source_type, money,  direction, finance_type, finance_id, finance_name,
          FINANCE_DATE, REMARKS, status,  created_at, account_old,account_new)
        values
          (v_account_id, v_user_id, v_margin_id,'USER_MARGINS',p_amount,v_in_direction,'2',p_admin_id,
          p_admin_name, v_date,  p_remarks, v_status, v_date,  v_account, v_account_new);

        /*保证金流水*/
        insert into user_margins
          (id, user_id, user_name, amount, account_old, account_new, direction, margin_type,  remarks,
           admin_id,  admin_name,  created_at, resource_id, resource_type)
        values
          (v_margin_id,v_user_id,v_username,p_amount,v_bails_account_old,v_bails_account_new,v_out_direction,
          v_out_margin_type, p_remarks, p_admin_id, p_admin_name,v_date, v_account_id, 'USER_ACCOUNTS');

          /*添加额度流水*/
        insert into user_quotas (id, user_id, amount, quota_type, operate_type, admin_id, admin_name, remarks,created_at)
         values (user_quotas_seq.nextval,v_user_id,v_quota_amount,v_quota_out_type,v_operate_type,p_admin_id,
           p_admin_name,p_remarks,v_date);
        /*更改客户账户信息*/
        UPDATE USERS
           SET BAILS         = BAILS - p_amount,
               ACCOUNT       = ACCOUNT + p_amount,
               total_account = total_account + p_amount,
               TOTAL_QUOTA   = TOTAL_QUOTA - p_amount * v_constant,
               QUOTA         = QUOTA - p_amount * v_constant
         WHERE ID = v_user_id;
      END;
    END IF;
    /*添加公共备注*/
    insert into common_remarks
      (id,SOURCE_ID,SOURCE_TYPE, CUSTOM_TYPE,  CONTENT,  ADMIN_ID, ADMIN_NAME,  CREATED_AT)
    values
      (common_remarks_seq.nextval,
       v_user_id, 'USERS', v_custom_type, p_remarks, p_admin_id,  p_admin_name,  v_date);
  END IF;
  result_status := 0;
  RETURN;
exception
  when others then
    ROLLBACK;
          result_status := 7;
    return;
end;


 
/

-- ----------------------------
-- Procedure structure for P_FINANCE_FUNDS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_FINANCE_FUNDS" is
  v_account_old      number(16, 2); --操作前余额
  v_account_new      number(16, 2); --操作后余额
  v_pervious_account number(16, 2); --后一条流水的操作前余额
  v_num              number := 0; --自增变量
  type cur_type is ref cursor;
  cus_flow     cur_type;
  v_sql        varchar2(10000);
  res_cus_flow user_accounts%rowtype;
  j number:=0;

  cursor cur_customer_info is
     select id, total_account from users where id = 2045768;
begin
  for res_custom_info in cur_customer_info loop
    v_sql := 'select a.id, a.money, a.direction,a.account_old,a.account_new
         from user_accounts a
         where 1 = 1 and status=1
               and a.user_id = '|| res_custom_info.id ||'
               --and a.finance_date > to_date(''2011-10-01 00:00:00'',''yyyy-mm-dd hh24:mi:ss'')
         order by user_id desc, a.finance_date desc, a.id desc';

    open cus_flow for v_sql;
    loop
      fetch cus_flow
        into res_cus_flow.id, res_cus_flow.money,
             res_cus_flow.direction, res_cus_flow.account_old, res_cus_flow.account_new;
      exit when cus_flow%notfound;
      if v_num = 0 then
        v_account_new := res_custom_info.total_account;
        if res_cus_flow.direction = 0 then  /**收入*/
               v_account_old := v_account_new - res_cus_flow.money;
        elsif res_cus_flow.direction = 1 then
               v_account_old := v_account_new + res_cus_flow.money;
        end if;
        v_pervious_account := v_account_old; /**第二条操作后*/
      else
        v_account_new := v_pervious_account;
        if res_cus_flow.direction = 0 then
               v_account_old := v_pervious_account - res_cus_flow.money;
               v_account_new := v_account_old + res_cus_flow.money;
        elsif res_cus_flow.direction = 1 then
              v_account_old := v_pervious_account + res_cus_flow.money;
              v_account_new := v_account_old - res_cus_flow.money;
        end if;
        v_pervious_account := v_account_old;
      end if;
      update user_accounts
         set account_new = v_account_new, account_old = v_account_old
       where id = res_cus_flow.id;
       commit;
      v_num := v_num + 1;
    end loop;
    v_num := 0;
    j:=j+1;
    commit;
  end loop;
end p_finance_funds;


 
/

-- ----------------------------
-- Procedure structure for P_FINANCE_REMITS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_FINANCE_REMITS" (p_remitId    in number,
                                         p_admin_id   in number,
                                         p_admin_name in varchar2,
                                         p_status in varchar2,            --汇款告知状态
                                         p_finance_rate in number,        --汇率
                                         result_stat       out number  /*0:成功,1:p_remitId为空,2:其他异常*/
                                         ) is
  /**
       作者：@author chengyufen
       日期：2011.11.16
       描述：汇款告知高权限操作(通过)
   */
  v_money       number(16,2);     --充入总额
  v_account_old number(16,2);  --操作前帐户余额
  v_account_new number(16,2); --操作后帐户余额
  v_deposit_old number(16,2);  --操作前保证金余额
  v_deposit_new number(16,2);  --操作后保证金余额
  v_buy_price   number(16,2);   --买入价
  v_charge_amount number(16,2);   --充入金额
  v_charge_deposit number(16,2);  --充入保证金
  v_currency    varchar2(100);    --币种
  v_deposit_type varchar(2);
  v_service_fee  number(16,2);   --手续费
  v_account_direction_in varchar2(50):='0'; --收入
  v_account_direction_out varchar2(50):='1';  --支出
  v_constant   number:=50;     --保证金/额度  1:50
  v_quota_amount number(16, 2);--可用额度
  v_quota_direction_in varchar2(50) := '0'; --收入
  v_quota_in_type varchar2(50) := '1';   --保证金存入
  v_quota_operate_type varchar2(50) := '1'; --程序自动赠送
  v_date             DATE := sysdate; --本次操作的时间
  i             number(2):=0;

  /*查出客户可用余额,总余额,保证金*/
  cursor cur_user_money is
   select s.id,
          s.true_name,
          u.in_amount,
          u.amount,
          u.deposit,
          u.in_deposit,
          s.total_account,
          s.account,
          s.bails,
          s.total_quota,
          s.quota
     from users s
     left join user_remit_despatches u on (s.id = u.user_id)
    where user_remit_id = p_remitid;

   /*收支方式(financeType)： 0:银行存入 1:现金存入 2:保证金转入余额 3:银行转出 4:余额转保证金 5:坏账扣除 6:邮资补收
       10:IPS支付  11:交易单支付  12:结算前退货存款 13:结算转余额 14:结算后退货存款 15:Paypal支付 16:保管费 17:保险费
     18:返还委托方结算单服务费 19:商城订单合并支付 20:委托积分转现金  21:商城退货金额 22:余额转入 23:余额转出*/
begin
    if p_remitId is null then
       result_stat := 1;
    else
        begin
          select currency, finance_deposit_type_id
            into v_currency, v_deposit_type
            from user_remits
           where id = p_remitid;
        end;
    end if;

    if p_remitId is not null then
       /*将汇款告知状态修改为查核通过(确认收讫)*/
       update user_remits
          set status          = p_status,
              currency_rate   = p_finance_rate,
              service_op_name = p_admin_name,
              service_check_date = v_date
        where id = p_remitId;
       v_buy_price := p_finance_rate;
       /*计算充入汇款金额后总额,总保证金*/
       for result_user in cur_user_money loop
           if v_currency != 'RMB' then
              if v_currency = 'USD' and v_deposit_type = 7 then
                 if i=0 then
                    v_service_fee:=result_user.in_amount*0.032+0.3; /*美元手续费*/
                 else
                    v_service_fee:=result_user.in_amount*0.032; /*美元手续费*/
                 end if;
                 v_charge_amount := (result_user.in_amount-v_service_fee) * v_buy_price/100;
              else
                 v_charge_amount := result_user.in_amount * v_buy_price/100; --外币换算
              end if;
              if result_user.in_deposit > 0 then
                 if v_currency = 'USD'  and v_deposit_type = 7 then
                    if i=0 then
                        v_service_fee:=result_user.in_deposit*0.032+0.3; /*美元手续费*/
                    else
                        v_service_fee:=result_user.in_deposit*0.032; /*美元手续费*/
                    end if;
                    v_charge_deposit := (result_user.in_deposit-v_service_fee) * v_buy_price/100;
                 else
                    v_charge_deposit := result_user.in_deposit * v_buy_price/100;
                 end if;
              else
                 v_charge_deposit := result_user.in_deposit;
              end if;
           else
              v_charge_amount := result_user.amount;
              v_charge_deposit := result_user.deposit;
           end if;
           v_money := v_charge_amount; --流水金额 = 汇款分配金额
           v_account_old := result_user.total_account;     --操作前客户余额
           v_account_new := result_user.total_account + v_charge_amount;  --操作后客户余额=操作前余额+充入的汇款分配金额
           v_deposit_old := result_user.bails;  --操作前保证金余额
           v_deposit_new := result_user.bails + v_charge_deposit; --操作后保证金余额=操作前保证金余额+充入的保证金
           v_quota_amount := v_charge_deposit * v_constant;  --操作额度

           /*添加客户帐户资金流水*/
             insert into user_accounts
               (id, user_id, source_id, source_type, direction, money, account_old, account_new,
                finance_type,finance_date, finance_id, finance_name, status, created_at,remarks)
             values
               (user_accounts_seq.nextval, result_user.id, p_remitId, 'USER_REMITS', v_account_direction_in,v_money, v_account_old,v_account_new,
               0, v_date, p_admin_id, p_admin_name, '1', v_date,'汇款告知： 告知单号'||' '||p_remitId);

               if (v_currency!='RMB' and result_user.in_deposit!=0) or (result_user.deposit!=0) then    /*余额转保证金*/
                 /**如果有分配保证金,则先全部充入余额再从余额转出保证金,则转出记录的当前操作余额v_account_new为上笔余额存入的操作后余额*/
                 insert into user_accounts
                 (id, user_id, source_id, source_type, direction, money, account_old, account_new,
                  finance_type,finance_date, finance_id, finance_name, status, created_at,remarks)
                 values
                 (user_accounts_seq.nextval, result_user.id, p_remitId, 'USER_MARGINS', v_account_direction_out,
                 v_charge_deposit, v_account_new,v_account_new-v_charge_deposit, 4, v_date, p_admin_id, p_admin_name, '1', v_date,'汇款告知余额转保证金:'||p_remitId);

                   /*添加保证金流水*/
                   insert into user_margins
                     (id, user_id, user_name, amount, account_old, account_new, direction,
                      margin_type, resource_id,resource_type, admin_id, admin_name, status, created_at,remarks)
                   values
                    (user_margins_seq.nextval,result_user.id,result_user.true_name,v_charge_deposit,v_deposit_old,v_deposit_new,'0',
                      '1',p_remitId,'USER_ACCOUNTS', p_admin_id, p_admin_name, '1', v_date,'汇款告知余额转保证金:'||' '||p_remitId);
                    /*添加额度流水*/
                  insert into user_quotas (id, user_id, amount, direction,quota_type, operate_type, admin_id, admin_name, remarks,created_at)
                   values (user_quotas_seq.nextval,result_user.id,v_quota_amount,v_quota_direction_in,v_quota_in_type,v_quota_operate_type,p_admin_id,
                     p_admin_name,'汇款告知余额转保证金',v_date);
              end if;

              update users set total_account = total_account + v_charge_amount - v_charge_deposit,
                              account = account + v_charge_amount - v_charge_deposit,
                              bails = bails + v_charge_deposit,
                              total_quota = total_quota + v_charge_deposit * v_constant,
                              quota = quota + v_charge_deposit * v_constant
                              where id=result_user.id;

              /**更新汇款分配表*/
              if p_finance_rate > 0 then
                update user_remit_despatches d set d.amount=v_charge_amount,d.deposit=v_charge_deposit,
                       d.currency_rate=p_finance_rate  where d.user_remit_id=p_remitId and d.user_id=result_user.id;
              end if;
              i:=i+1;
          end loop;

       /*添加汇款告知处理备注*/
       insert into common_remarks
        (id,source_id,source_type,custom_type,content,admin_id,admin_name,created_at)
        values
         (common_remarks_seq.nextval,p_remitId,'USER_REMITS','确认收讫','',p_admin_id,p_admin_name,v_date);
    end if;
    result_stat := 0;
end p_finance_remits;


 
/

-- ----------------------------
-- Procedure structure for P_FINANCE_REPORT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_FINANCE_REPORT"
(
  p_start IN DATE,
  p_end   IN DATE,
  status  OUT VARCHAR
) IS

  --*****************************财务期度统计表（二）变量定义************************

  ---------------H支付结算信息-------------------------
  v_h1_1 NUMBER := 0; --本期支付（合计）
  v_h1_2 NUMBER := 0; --本期支付（竞拍平台）
  v_h1_3 NUMBER := 0; --本期支付（普通商品）
  v_h1_4 NUMBER := 0; --本期支付（积分商品）

  v_h2_1 NUMBER := 0; --成交服务费（合计）
  v_h2_2 NUMBER := 0; --成交服务费（竞拍平台）
  v_h2_3 NUMBER := 0; --成交服务费（普通商品）
  v_h2_4 NUMBER := 0; --成交服务费（积分商品）
  v_h2_5 NUMBER := 0; --收藏品证书费用

  v_h3_1 NUMBER := 0; --落槌价（合计）
  v_h3_2 NUMBER := 0; --落槌价（竞拍平台）
  v_h3_3 NUMBER := 0; --落槌价（普通商品）
  v_h3_4 NUMBER := 0; --落槌价（积分商品）

  v_hg_1 NUMBER := 0; --仓储费（合计）
  v_hg_2 NUMBER := 0; --仓储费（竞拍平台）
  v_hg_3 NUMBER := 0; --仓储费（普通商品）

  v_h4_1 NUMBER := 0; --本期结算落槌价（合计）
  v_h4_2 NUMBER := 0; --本期结算落槌价（竞拍平台）
  v_h4_3 NUMBER := 0; --本期结算落槌价（普通商品）
  v_h4_4 NUMBER := 0; --本期结算落槌价（积分商品）

  v_h5_1 NUMBER := 0; --结算款（合计）
  v_h5_2 NUMBER := 0; --结算款（竞拍平台）
  v_h5_3 NUMBER := 0; --结算款（普通商品）
  v_h5_4 NUMBER := 0; --结算款（积分商品）

  v_h6_1 NUMBER := 0; --委托费用（合计）
  v_h6_2 NUMBER := 0; --委托费用（竞拍平台）
  v_h6_3 NUMBER := 0; --委托费用（普通商品）
  v_h6_4 NUMBER := 0; --委托费用（积分商品）

  v_h7_1 NUMBER := 0; --手续费（合计）
  v_h7_2 NUMBER := 0; --手续费（竞拍平台）
  v_h7_3 NUMBER := 0; --手续费（普通商品）
  v_h7_4 NUMBER := 0; --手续费（积分商品）

  v_h8_1 NUMBER := 0; --保险费（合计）
  v_h8_2 NUMBER := 0; --保险费（竞拍平台）
  v_h8_3 NUMBER := 0; --保险费（普通商品）
  v_h8_4 NUMBER := 0; --保险费（积分商品）

  v_h9_1 NUMBER := 0; --制作上挂费（合计）
  v_h9_2 NUMBER := 0; --制作上挂费（竞拍平台）
  v_h9_3 NUMBER := 0; --制作上挂费（普通商品）
  v_h9_4 NUMBER := 0; --制作上挂费（积分商品）

  v_ha_1 NUMBER := 0; --保管费（合计）
  v_ha_2 NUMBER := 0; --保管费（竞拍平台）
  v_ha_3 NUMBER := 0; --保管费（普通商品）
  v_ha_4 NUMBER := 0; --保管费（积分商品）

  v_hb_1 NUMBER := 0; --其他（合计）
  v_hb_2 NUMBER := 0; --其他（竞拍平台）
  v_hb_3 NUMBER := 0; --其他（普通商品）
  v_hb_4 NUMBER := 0; --其他（积分商品）

  v_hc_1 NUMBER := 0; --本期实际支出结算款（合计）
  v_hc_2 NUMBER := 0; --本期实际支出结算款（竞拍平台）
  v_hc_3 NUMBER := 0; --本期实际支出结算款（普通商品）
  v_hc_4 NUMBER := 0; --本期实际支出结算款（积分商品）

  v_hd_1 NUMBER := 0; --期前结算（合计）
  v_hd_2 NUMBER := 0; --期前结算（竞拍平台）
  v_hd_3 NUMBER := 0; --期前结算（普通商品）
  v_hd_4 NUMBER := 0; --期前结算（积分商品）

  v_he_1 NUMBER := 0; --本期结算（合计）
  v_he_2 NUMBER := 0; --本期结算（竞拍平台）
  v_he_3 NUMBER := 0; --本期结算（普通商品）
  v_he_4 NUMBER := 0; --本期结算（积分商品）

  v_hf_1 NUMBER := 0; --本期结算未支出结算款（合计）
  v_hf_2 NUMBER := 0; --本期结算未支出结算款（竞拍平台）
  v_hf_3 NUMBER := 0; --本期结算未支出结算款（普通商品）
  v_hf_4 NUMBER := 0; --本期结算未支出结算款（积分商品）

  -- v_h6_2 = v_h6_2_service_fee+v_hb_2 = (v_h7_2+v_h8_2+v_h9_2+v_ha_2)+v_hb_2
  v_h6_2_service_fee NUMBER := 0;

  ---------------G退货信息---------------------------
  v_g1_1 NUMBER := 0; --本期退货（合计）
  v_g1_2 NUMBER := 0; --本期退货（竞拍平台）
  v_g1_3 NUMBER := 0; --本期退货（普通商品）
  v_g1_4 NUMBER := 0; --本期退货（积分商品）

  v_g2_1 NUMBER := 0; --结算前（合计）
  v_g2_2 NUMBER := 0; --结算前（竞拍平台）
  v_g2_3 NUMBER := 0; --结算前（普通商品）
  v_g2_4 NUMBER := 0; --结算前（积分商品）

  v_g3_1 NUMBER := 0; --成交服务费（合计）
  v_g3_2 NUMBER := 0; --成交服务费（竞拍平台）
  v_g3_3 NUMBER := 0; --成交服务费（普通商品）
  v_g3_4 NUMBER := 0; --成交服务费（积分商品）

  v_g4_1 NUMBER := 0; --落槌价（合计）
  v_g4_2 NUMBER := 0; --落槌价（竞拍平台）
  v_g4_3 NUMBER := 0; --落槌价（普通商品）
  v_g4_4 NUMBER := 0; --落槌价（积分商品）

  v_g5_1 NUMBER := 0; --结算后（合计）
  v_g5_2 NUMBER := 0; --结算后（竞拍平台）
  v_g5_3 NUMBER := 0; --结算后（普通商品）
  v_g5_4 NUMBER := 0; --结算后（积分商品）

  v_g6_1 NUMBER := 0; --成交服务费（合计）
  v_g6_2 NUMBER := 0; --成交服务费（竞拍平台）
  v_g6_3 NUMBER := 0; --成交服务费（普通商品）
  v_g6_4 NUMBER := 0; --成交服务费（积分商品）

  v_g7_1 NUMBER := 0; --落槌价（合计）
  v_g7_2 NUMBER := 0; --落槌价（竞拍平台）
  v_g7_3 NUMBER := 0; --落槌价（普通商品）
  v_g7_4 NUMBER := 0; --落槌价（积分商品）

  v_g8_1 NUMBER := 0; --委托费用（合计）
  v_g8_2 NUMBER := 0; --委托费用（竞拍平台）
  v_g8_3 NUMBER := 0; --委托费用（普通商品）
  v_g8_4 NUMBER := 0; --委托费用（积分商品）

  v_g9_1 NUMBER := 0; --结算款（合计）
  v_g9_2 NUMBER := 0; --结算款（竞拍平台）
  v_g9_3 NUMBER := 0; --结算款（普通商品）
  v_g9_4 NUMBER := 0; --结算款（积分商品）

  --  2013-12-9 新增加 退款 要退 仓储费
  v_g10_1 NUMBER := 0; --退货 结算前 仓储费（合计）
  v_g10_2 NUMBER := 0; --退货 结算前 仓储费（竞拍平台）
  v_g10_3 NUMBER := 0; --退货 结算前 仓储费（普通商品）
  v_g10_4 NUMBER := 0; --退货 结算前 仓储费（积分商品）

  v_g11_1 NUMBER := 0; --退货 结算后 仓储费（合计）
  v_g11_2 NUMBER := 0; --退货 结算后 仓储费（竞拍平台）
  v_g11_3 NUMBER := 0; --退货 结算后 仓储费（普通商品）
  v_g11_4 NUMBER := 0; --退货 结算后 仓储费（积分商品）

  -- 2014-06-17 新增加 退货 收藏证书费
  v_g_temp NUMBER := 20; --单个收藏证书的费用
  v_g12_1  NUMBER := 0; --退货 结算前 收藏证书费用（合计）
  v_g13_1  NUMBER := 0; --退货 结算后 收藏证书费用（合计）

  -- v_g8_2 = v_g8_2_charge + v_hg_2_insure + v_g8_2_onload + v_g8_2_custody + v_g8_2_other
  v_g8_2_charge  NUMBER := 0;
  v_g8_2_insure  NUMBER := 0;
  v_g8_2_onload  NUMBER := 0;
  v_g8_2_custody NUMBER := 0;
  v_g8_2_other   NUMBER := 0;

  --**********************************财务期度统计表（一）变量定义**************************

  ---------------A概要信息----------------------
  v_a1  NUMBER := 0; --沉淀资金(期初) 1900-01-01 00:00:00 -- 01号0点
  v_a6  NUMBER := 0; --余额(期初)
  v_a11 NUMBER := 0; --保证金(期初)
  v_a16 NUMBER := 0; --未结算(期初)

  v_a2  NUMBER := 0; --沉淀资金(期度合计)
  v_a7  NUMBER := 0; --余额(期度合计)
  v_a12 NUMBER := 0; --保证金(期度合计)
  v_a17 NUMBER := 0; --未结算(期度合计)

  v_a3  NUMBER := 0; --沉淀资金(期度增加)
  v_a8  NUMBER := 0; --余额(期度增加)
  v_a13 NUMBER := 0; --保证金(期度增加)
  v_a18 NUMBER := 0; --未结算(期度增加)

  v_a4  NUMBER := 0; --沉淀资金(期度减少)
  v_a9  NUMBER := 0; --余额(期度减少)
  v_a14 NUMBER := 0; --保证金(期度减少)
  v_a19 NUMBER := 0; --未结算(期度减少)

  v_a5  NUMBER := 0; --沉淀资金(期末)
  v_a10 NUMBER := 0; --余额(期末)
  v_a15 NUMBER := 0; --保证金(期末)
  v_a20 NUMBER := 0; --未结算(期末)

  v_a21 NUMBER := 0; --有效积分
  v_a26 NUMBER := 0; --竞买积分
  v_a31 NUMBER := 0; --委托积分

  v_a22 NUMBER := 0; --有效积分(合计)
  v_a27 NUMBER := 0; --竞买积分(合计)
  v_a32 NUMBER := 0; --委托积分(合计)

  v_a23 NUMBER := 0; --有效积分(期度增加)
  v_a28 NUMBER := 0; --竞买积分(期度增加)
  v_a33 NUMBER := 0; --委托积分(期度增加)

  v_a24 NUMBER := 0; --有效积分(期度减少)
  v_a29 NUMBER := 0; --竞买积分(期度减少)
  v_a34 NUMBER := 0; --委托积分(期度减少)

  v_a25 NUMBER := 0; --有效积分(期末)
  v_a30 NUMBER := 0; --竞买积分(期末)
  v_a35 NUMBER := 0; --委托积分(期末)

  --v_a6 = v_a6_1 - v_a6_2
  v_a6_1 NUMBER := 0; --审核前流入余额
  v_a6_2 NUMBER := 0; --审核前流出余额

  v_a10_1 NUMBER := 0; --审核前流入余额
  v_a10_2 NUMBER := 0; --审核前流出余额

  --v_a11 = v_a11_1 - v_a11_2
  v_a11_1 NUMBER := 0; --审核前流入保证金
  v_a11_2 NUMBER := 0; --审核前流出保证金

  --v_a16 = v_a16_1 - v_a16_2
  v_a16_1 NUMBER := 0; -- 已支付
  v_a16_2 NUMBER := 0; --已结算

  --v_a15 = v_a15_1 - v_a15_2
  v_a15_1 NUMBER := 0; -- 已支付
  v_a15_2 NUMBER := 0; --已结算

  --v_a9 = v_a9_1 - v_f13;
  v_a9_1 NUMBER := 0;

  --v_a14 = v_a14_1 + v_f13;
  v_a14_1 NUMBER := 0;

  ---------------B  期度营业信息-------------------------
  v_b1 NUMBER := 0; --盈利合计
  v_b4 NUMBER := 0; --收益合计
  v_b7 NUMBER := 0; --抵充合计

  v_b2 NUMBER := 0; --竟拍盈利
  v_b5 NUMBER := 0; --竟拍收益
  v_b8 NUMBER := 0; --竟拍抵充

  v_b3 NUMBER := 0; --商城盈利
  v_b6 NUMBER := 0; --商城收益
  v_b9 NUMBER := 0; --商城抵充

  ---------------C  预信息---------------------
  v_c1 NUMBER := 0; --本期预提
  v_c2 NUMBER := 0; --本期使用
  v_c3 NUMBER := 0; --累计预提
  v_c4 NUMBER := 0; --累计使用

  --v_c4 = v_c4_1 + v_c4_2;
  v_c4_1 NUMBER := 0;
  v_c4_2 NUMBER := 0;

  ---------------D 期度积分信息-----------------
  v_d1 NUMBER := 0; --积分预提款
  v_d2 NUMBER := 0; --积分消费款
  v_d3 NUMBER := 0; --兑现
  v_d4 NUMBER := 0; --结算

  ---------------E  预提资金流信息-----------------
  v_e1   NUMBER := 0; --流入资金
  v_e2   NUMBER := 0; --流出资金
  v_e3   NUMBER := 0; --退款
  v_e4   NUMBER := 0; --结算
  v_e4_1 NUMBER := 0; --结算
  v_e4_2 NUMBER := 0; --结算

  ---------------F 期度余额保证金信息-------------------
  v_f1  NUMBER := 0; --到帐
  v_f2  NUMBER := 0; --结算
  v_f3  NUMBER := 0; --竟拍返拥
  v_f4  NUMBER := 0; --积分兑现
  v_f5  NUMBER := 0; --退货
  v_f6  NUMBER := 0; --结算前
  v_f7  NUMBER := 0; --结算后
  v_f8  NUMBER := 0; --保证金转
  v_f9  NUMBER := 0; --退款
  v_f10 NUMBER := 0; --支付
  v_f11 NUMBER := 0; --运费
  v_f12 NUMBER := 0; --转保证金
  v_f13 NUMBER := 0; --竟拍保证金罚扣
  v_f14 NUMBER := 0; --预订资金罚扣

  --v_f6 = v_f6_1 + v_g4_3;
  v_f6_1 NUMBER := 0;

  --v_f10 = v_f10_1 + v_h1_3;
  v_f10_1 NUMBER := 0;

BEGIN

  --**********************************统计表（二）统计过程*****************************

  ---------------H支付结算信息(开始)-----------------------------------
  --H1(2) 竞拍本期支付（成交服务费+落槌价）,H3(2) 竞拍本期支付（落槌价）
  SELECT decode(SUM(t.total_amount), NULL, 0.00, SUM(t.total_amount)) total_amount,
         decode(SUM(t.end_price), NULL, 0.00, SUM(t.end_price)) end_price
    INTO v_h1_2, v_h3_2
    FROM user_orders t
   WHERE status = 1 -- 0:未支付, 1:已支付, 2:不支付
     AND t.pay_date >= p_start
     AND t.pay_date <= p_end;

  --H2(2) 竞拍本期支付（成交服务费）
  v_h2_2 := v_h1_2 - v_h3_2;

  --本期收藏证书费
  SELECT COUNT(t.id) * v_g_temp certificateCharges
    INTO v_h2_5
    FROM user_orders t
   WHERE t.has_collection_certificate = '1'
     AND t.status = 1
     AND t.pay_date >= p_start
     AND t.pay_date <= p_end;

  --本期交易单仓储费
  SELECT decode(SUM(scc.charges), NULL, 0.00, SUM(scc.charges)) charges
    INTO v_hg_2
    FROM storage_completed_charges scc
   WHERE scc.deducted_at >= p_start
     AND scc.deducted_at <= p_end;

  --update by liu.jing 20130408 仓储费
  v_h1_2 := v_h1_2 + v_hg_2;

  --H5(2),H7(2),H8(2),H9(2),Ha(2),Hb(2),H6(2)_service_fee
  SELECT decode(SUM(t.amount), NULL, 0.00, SUM(t.amount)) amount,
         decode(SUM(t.charge_fee), NULL, 0.00, SUM(t.charge_fee)) charge_fee,
         decode(SUM(t.insure_fee), NULL, 0.00, SUM(t.insure_fee)) insure_fee,
         decode(SUM(t.onload_fee), NULL, 0.00, SUM(t.onload_fee)) onload_fee,
         decode(SUM(t.custody_fee), NULL, 0.00, SUM(t.custody_fee)) custody_fee,
         decode(SUM(t.orther_fee), NULL, 0.00, SUM(t.orther_fee)) orther_fee,
         decode(SUM(t.service_fee), NULL, 0.00, SUM(t.service_fee)) service_fee
    INTO v_h5_2, v_h7_2, v_h8_2, v_h9_2, v_ha_2, v_hb_2, v_h6_2_service_fee
    FROM settlements t
   WHERE t.status = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
     AND t.f_check_date >= p_start
     AND t.f_check_date <= p_end;

  --Hb(2)
  --v_hb_2 := -v_hb_2; --因为orther费用是负数，特做此处理
  --liu.jing 2012-12-04修改，负数的其他费用已经修改为正数

  --H6(2)   v_h6_2 = v_h6_2_service_fee+v_hb_2 = (v_h7_2+v_h8_2+v_h9_2+v_ha_2)+v_hb_2
  v_h6_2 := v_h6_2_service_fee + v_hb_2;

  --H4(2)
  v_h4_2 := v_h5_2 + v_h6_2;

  --E4 旧系统 商城结算与拍品结算在一起   liujing 2012-11-30 修改，目前拍品与商城分开
  /*  select decode(sum(d.amount),null,0.00,sum(d.amount)) amount
   into v_e4
   from settlement_despatches d
  where d.f_check_status = 1 -- 0:未转入, 1:已完成, 2:不通过
    and d.f_check_date >= p_start
    and d.f_check_date <= p_end
    and d.checkout_type in (0, 1, 3, 4, 5, 6, 7, 8,9);*/ -- 0:现金支出, 1:邮政转款, 2:转余额, 3:银行转账,
  --4:现金支出--台湾, 5:IPS转账, 6:转帐(公), 7:汇丰, 8:Paypal 9 盛付通
  --F2
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f2
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 13; --13:结算转余额

  --Hc(2)=E4+F2
  --v_hc_2 := v_e4 + v_f2;
  --liujing 2012-11-30 修改，此前包含了商城数据
  SELECT decode(SUM(d.amount), NULL, 0.00, SUM(d.amount)) amount
    INTO v_hc_2
    FROM settlement_despatches d
   WHERE d.f_check_status = 1 -- 0:未转入, 1:已完成, 2:不通过
     AND d.f_check_date >= p_start
     AND d.f_check_date <= p_end;

  --Hf(2) 本期结算未支出结算款
  SELECT decode(SUM(t.amount), NULL, 0.00, SUM(t.amount)) amount
    INTO v_hf_2
    FROM settlement_despatches t
    JOIN settlements s ON (s.id = t.settlement_id)
   WHERE s.f_check_date >= p_start
     AND s.f_check_date <= p_end
     AND s.status = 2 -- 0:待转账, 1:转账中, 2:已完成, 3:不通过
     AND (t.f_check_date IS NULL OR t.f_check_date > p_end);

  SELECT decode(SUM(t.amount), NULL, 0.00, SUM(t.amount)) amount
    INTO v_hf_2
    FROM settlement_despatches t
    JOIN settlements s ON (s.id = t.settlement_id)
   WHERE s.f_check_date >= p_start
     AND s.f_check_date <= p_end
     AND s.status = 2 -- 0:待转账, 1:转账中, 2:已完成, 3:不通过
     AND t.f_check_date < p_start;

  --He(2) 本期结算 （本期结算价 - 本期结算未支出结算款）
  --v_he_2 := v_h5_2 - v_hf_2;
  --modify by liu.jing 2012-12-17
  v_he_2 := v_h5_2;

  SELECT decode(SUM(t.amount), NULL, 0.00, SUM(t.amount)) amount
    INTO v_hd_2
    FROM settlement_despatches t
    JOIN settlements s ON (s.id = t.settlement_id)
   WHERE t.f_check_date <= p_end
     AND t.f_check_status = 1
     AND (s.f_check_date IS NULL OR s.f_check_date > p_end);

  --modify by liu.jing 2012-12-17
  --Hd(2) 期前结算
  --v_hd_2 := v_hc_2 - v_he_2;

  --H3(2)成交服务费——普通商品
  v_h2_3 := 0.0;

  --H3(3)本期支付落槌价——普通商品
  SELECT decode(SUM(goods_number * order_price),
                NULL,
                0.00,
                SUM(goods_number * order_price))
    INTO v_h3_3
    FROM ec_order_goods e
   WHERE e.order_status = '1' -- 订单状态:1:待支付, 2:已支付, 3:不支付
     AND e.pay_date >= p_start
     AND e.pay_date <= p_end;

  --H1(3)—本期支付——普通商品
  --update by liu.jing 20130408增加仓储费
  --v_h1_3 := v_h3_3 + v_h2_3;
  v_h1_3 := v_h3_3 + v_h2_3 + v_hg_3;

  --H5(3),H7(3),H9(3),Hb(3)
  SELECT decode(SUM(t.amount), NULL, 0.00, SUM(t.amount)) amount,
         decode(SUM(t.total_charge_fee),
                NULL,
                0.00,
                SUM(t.total_charge_fee)) charge_fee,
         decode(SUM(t.total_load_fee), NULL, 0.00, SUM(t.total_load_fee)) onload_fee,
         decode(SUM(t.others_fee), NULL, 0.00, SUM(t.others_fee)) orther_fee
    INTO v_h5_3, v_h7_3, v_h9_3, v_hb_3
    FROM ec_settlements t
   WHERE status IN (2) -- 0：待转账 1：转账 2：已经完成 3：不通过
     AND f_check_date >= p_start
     AND f_check_date <= p_end;

  --H8(3)
  v_h8_3 := 0.0;

  --Ha(3)
  v_ha_3 := 0.0;

  --H6(3)
  v_h6_3 := v_h7_3 + v_h8_3 + v_h9_3 + v_ha_3 + v_hb_3;

  --H4(3)
  v_h4_3 := v_h5_3 + v_h6_3;

  --Hd(3) --He(3) --Hf(3)

  --Hc(3)——普通商品  本期实际支出结算款
  --v_hc_3 := v_hd_3 + v_he_3;
  -- liujing 2012-11-30 修改  之前的商城结算一直算在了竞拍平台里面
  SELECT decode(SUM(d.amount), NULL, 0.00, SUM(d.amount)) amount
    INTO v_hc_3
    FROM ec_settlement_despatches d
   WHERE d.f_check_status = 1 -- 0:未转入, 1:已完成, 2:不通过
     AND d.f_check_date >= p_start
     AND d.f_check_date <= p_end;

  --HF(3) --普通商品 本期结算未支付结算款
  SELECT decode(SUM(t.amount), NULL, 0.00, SUM(t.amount)) amount
    INTO v_hf_3
    FROM ec_settlement_despatches t
    JOIN ec_settlements s ON (s.id = t.settlement_id)
   WHERE s.f_check_date >= p_start
     AND s.f_check_date <= p_end
     AND s.status = 2 -- 0:待转账, 1:转账中, 2:已完成, 3:不通过
     AND (t.f_check_date IS NULL OR t.f_check_date > p_end);

  --He(3) 普通商品 本期结算 （本期结算价 - 本期结算未支出结算款）
  v_he_3 := v_h5_3 - v_hf_3;

  --Hd(3) 普通商品 期前结算
  v_hd_3 := v_hc_3 - v_he_3;

  --H1(4) --H2(4) --H3(4) --H4(4) --H5(4) --H6(4) --H7(4) --H8(4)
  --H9(4) --Ha(4) --Hb(4) --Hc(4) --Hd(4) --He(4) --Hf(4)

  ---------------H支付结算信息(结束)-------------------------------

  ---------------G退货信息(开始)------------------------------------
  --G2(2),G3(2),G4(2)
  SELECT decode(SUM(o.total_amount), NULL, 0.00, SUM(o.total_amount)) total_amount,
         decode(SUM(o.actual_charge), NULL, 0.00, SUM(o.actual_charge)) actual_charge,
         decode(SUM(o.end_price), NULL, 0.00, SUM(o.end_price)) end_price
    INTO v_g2_2, v_g3_2, v_g4_2
    FROM user_refunds t
    JOIN user_orders o ON (o.id = t.user_order_id)
   WHERE t.settlement_status = 0 -- 1:结算后, 0:结算前
     AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
        -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
        -- 8：退货失败 9：退货成功
     AND t.complete_at >= p_start
     AND t.complete_at <= p_end;

  --  --  2013-12-9 新增加 退款 要退 仓储费   只有 竞拍平台 收仓储费  v_g10_3=0 v_g10_4=0    开始
  SELECT decode(SUM(s.charges), NULL, 0.00, SUM(s.charges)) charges
    INTO v_g10_2
    FROM (SELECT t.user_order_id
            FROM zhao.user_refunds t
           WHERE t.settlement_status = 0 -- 1:结算后, 0:结算前
             AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                -- 8：退货失败 9：退货成功
             AND t.complete_at >= p_start
             AND t.complete_at <= p_end) f
    LEFT JOIN (SELECT scc.id, scc.user_order_id, scc.charges
                 FROM zhao.storage_completed_charges scc
                WHERE scc.deducted_at <= p_end) s ON f.user_order_id =
                                                     s.user_order_id
   WHERE s.id IS NOT NULL;
  v_g2_2 := v_g2_2 + v_g10_2;

  SELECT decode(SUM(s.charges), NULL, 0.00, SUM(s.charges)) charges
    INTO v_g10_1
    FROM (SELECT t.user_order_id
            FROM zhao.user_refunds t
           WHERE t.settlement_status = 0 -- 1:结算后, 0:结算前
             AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                -- 8：退货失败 9：退货成功
             AND t.complete_at >= p_start
             AND t.complete_at <= p_end) f
    LEFT JOIN (SELECT scc.id, scc.user_order_id, scc.charges
                 FROM zhao.storage_completed_charges scc
                WHERE scc.deducted_at <= p_end) s ON f.user_order_id =
                                                     s.user_order_id
   WHERE s.id IS NOT NULL;

  --  --  2013-12-9 新增加 退款 要退 仓储费   只有 竞拍平台 收仓储费  v_g10_3=0 v_g10_4=0    结束

  --  --  2014-06-17 新增加 退款 要退 收藏证书费   只有 竞拍平台 收收藏证书费  v_g12_1=0   v_g13_1=0   开始

  SELECT COUNT(ucc.id) * v_g_temp
    INTO v_g12_1
    FROM user_collection_certificate ucc
    LEFT JOIN user_refunds urs ON ucc.order_id = urs.user_order_id
   WHERE urs.settlement_status = 0
     AND urs.status = 9
     AND ucc.id != 81 --8月结算前退货这一笔没退收藏证书费用 lizheng@2014-12-08 17:06
     AND urs.complete_at >= p_start
     AND urs.complete_at <= p_end;

  SELECT COUNT(ucc.id) * v_g_temp
    INTO v_g13_1
    FROM user_collection_certificate ucc
    LEFT JOIN user_refunds urs ON ucc.order_id = urs.user_order_id
   WHERE urs.settlement_status = 1
     AND urs.status = 9
     AND urs.complete_at >= p_start
     AND urs.complete_at <= p_end;

  v_g2_2 := v_g2_2 + v_g12_1;
  --  --  2014-06-17 新增加 退款 要退 收藏证书费   只有 竞拍平台 收收藏证书费  v_g12_1=0   v_g13_1=0   结束

  --G5(2),G6(2),G7(2)
  SELECT decode(SUM(o.total_amount), NULL, 0.00, SUM(o.total_amount)) total_amount,
         decode(SUM(o.actual_charge), NULL, 0.00, SUM(o.actual_charge)) actual_charge,
         decode(SUM(o.end_price), NULL, 0.00, SUM(o.end_price)) end_price
    INTO v_g5_2, v_g6_2, v_g7_2
    FROM user_refunds t
    JOIN user_orders o ON (o.id = t.user_order_id)
   WHERE t.settlement_status = 1 -- 1:结算后, 0:结算前
     AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
        -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
        -- 8：退货失败 9：退货成功
     AND t.complete_at >= p_start
     AND t.complete_at <= p_end;

  v_g5_2 := v_g5_2 + v_g13_1;
  --  --  2013-12-9 新增加 退款 要退 仓储费   只有 竞拍平台 收仓储费  v_g11_3=0 v_g11_4=0    开始
  SELECT decode(SUM(s.charges), NULL, 0.00, SUM(s.charges)) charges
    INTO v_g11_2
    FROM (SELECT t.user_order_id
            FROM zhao.user_refunds t
           WHERE t.settlement_status = 1 -- 1:结算后, 0:结算前
             AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                -- 8：退货失败 9：退货成功
             AND t.complete_at >= p_start
             AND t.complete_at <= p_end) f
    LEFT JOIN (SELECT scc.id, scc.user_order_id, scc.charges
                 FROM zhao.storage_completed_charges scc
                WHERE scc.deducted_at <= p_end) s ON f.user_order_id =
                                                     s.user_order_id
   WHERE s.id IS NOT NULL;
  v_g5_2 := v_g5_2 + v_g11_2;

  SELECT decode(SUM(s.charges), NULL, 0.00, SUM(s.charges)) charges
    INTO v_g11_1
    FROM (SELECT t.user_order_id
            FROM zhao.user_refunds t
           WHERE t.settlement_status = 1 -- 1:结算后, 0:结算前
             AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                -- 8：退货失败 9：退货成功
             AND t.complete_at >= p_start
             AND t.complete_at <= p_end) f
    LEFT JOIN (SELECT scc.id, scc.user_order_id, scc.charges
                 FROM zhao.storage_completed_charges scc
                WHERE scc.deducted_at <= p_end) s ON f.user_order_id =
                                                     s.user_order_id
   WHERE s.id IS NOT NULL;
  --  --  2013-12-9 新增加 退款 要退 仓储费   只有 竞拍平台 收仓储费  v_g10_3=0 v_g10_4=0    结束
  --G1(2)
  v_g1_2 := v_g2_2 + v_g5_2;

  --G9(2),G8(2)_charge,G8(2)_insure,G8(2)_onload,G8(2)_custody
  SELECT decode(SUM(d.total_amount), NULL, 0.00, SUM(d.total_amount)) total_amount,
         decode(SUM(d.ac_charge), NULL, 0.00, SUM(d.ac_charge)) ac_charge,
         decode(SUM(d.ac_insure), NULL, 0.00, SUM(d.ac_insure)) ac_insure,
         decode(SUM(d.ac_onload), NULL, 0.00, SUM(d.ac_onload)) ac_onload,
         decode(SUM(d.ac_custody), NULL, 0.00, SUM(d.ac_custody)) ac_custody
    INTO v_g9_2,
         v_g8_2_charge,
         v_g8_2_insure,
         v_g8_2_onload,
         v_g8_2_custody
    FROM user_refunds t
    JOIN settlement_details d ON (d.auction_id = t.auction_id AND
                                 d.status = 1)
   WHERE t.settlement_status = 1 -- 1:结算后,0:结算前
     AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
        -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
        -- 8：退货失败 9：退货成功
     AND t.complete_at >= p_start
     AND t.complete_at <= p_end;

  --G8(2)_other
  v_g8_2_other := 0.0;

  --G8(2)
  v_g8_2 := v_g8_2_charge + v_g8_2_insure + v_g8_2_onload + v_g8_2_custody +
            v_g8_2_other;

  --G4(3)结算前落槌价——普通商品
  SELECT decode(SUM(back_total_price), NULL, 0.00, SUM(back_total_price)) back_total_price
    INTO v_g4_3
    FROM comeback_ec_goods c
   WHERE c.finance_date >= p_start
     AND c.finance_date <= p_end
     AND back_status = 1 -- 0:查核中, 1:通过, 2:拒绝
     AND balance_status = 0; -- 0:结算后, 1:结算前

  --G2(3)结算前——普通商品
  v_g2_3 := v_g4_3;

  --G7(3)本期退货结算后落槌价——普通商品
  SELECT decode(SUM(back_total_price), NULL, 0.00, SUM(back_total_price)) back_total_price
    INTO v_g7_3
    FROM comeback_ec_goods c
   WHERE c.apply_date >= p_start
     AND c.apply_date <= p_end
     AND back_status = 1 -- 0:查核中, 1:通过, 2:拒绝
     AND balance_status = 1; -- 0:结算后, 1:结算前

  --G5(3)本期退货结算后——普通商品
  v_g5_3 := v_g7_3;

  --G1(3)本期退货——普通商品
  v_g1_3 := v_g2_3 + v_g5_3;

  --G1(4) --G2(4) --G3(4) --G4(4) --G5(4) --G6(4) --G7(4) --G8(4) --G9(4)
  ---------------G退货信息(结束)--------------------------

  ---------------合计信息---------------------------------
  v_g1_1  := v_g1_2 + v_g1_3;
  v_g2_1  := v_g2_2 + v_g2_3 + v_g10_1;
  v_g3_1  := v_g3_2 + v_g3_3;
  v_g4_1  := v_g4_2 + v_g4_3;
  v_g5_1  := v_g5_2 + v_g5_3;
  v_g6_1  := v_g6_2 + v_g6_3;
  v_g7_1  := v_g7_2 + v_g7_3;
  v_g8_1  := v_g8_2 + v_g8_3;
  v_g9_1  := v_g9_2 + v_g9_3;
  v_g10_1 := v_g10_2 + v_g10_3;
  v_g11_1 := v_g11_2 + v_g11_3;
  v_h1_1  := v_h1_2 + v_h1_3 + v_h2_5;
  v_h2_1  := v_h2_2 + v_h2_3; --+v_h2_5
  v_h3_1  := v_h3_2 + v_h3_3;
  v_hg_1  := v_hg_2 + v_hg_3;
  v_h4_1  := v_h4_2 + v_h4_3;
  v_h5_1  := v_h5_2 + v_h5_3;
  v_h6_1  := v_h6_2 + v_h6_3;
  v_h7_1  := v_h7_2 + v_h7_3;
  v_h8_1  := v_h8_2 + v_h8_3;
  v_h9_1  := v_h9_2 + v_h9_3;
  v_ha_1  := v_ha_2 + v_ha_3;
  v_hb_1  := v_hb_2 + v_hb_3;
  v_hc_1  := v_hc_2 + v_hc_3;
  v_hd_1  := v_hd_2 + v_hd_3;
  v_he_1  := v_he_2 + v_he_3;
  v_hf_1  := v_hf_2 + v_hf_3;

  --**********************统计表{一}统计过程************************

  ---------------------------F 期度余额保证金信息(开始)-----------------------
  /** user_accounts:f_type
     收支方式:
       0 :银行存入, 1:现金存入, 2:保证金转入余额, 3:银行转出, 4:余额转入保证金,
       5:坏账扣除, 6:邮资补收, 10:IPS支付, 11:交易单支付, 12:结算前退货存款, 13:结算转余额 ,
       14:结算后退货存款, 15:Paypal支付, 16:保管费, 17:保险费, 18:返还委托方结算单服务费,
       19:商城订单合并支付, 20:委托积分转现金, 21:商城退货金额
  **/
  --F1(到帐)
  -- select decode(sum(t.money), null, 0.00, sum(t.money)) money
  --    into v_f1
  --   from user_accounts t
  --  where t.finance_date >= p_start
  --    and t.finance_date <= p_end
  --    and t.status = 1
  --   and t.finance_type in (0, 1, 10, 15,9); --0 :银行存入, 1:现金存入, 10:IPS支付,15:Paypal支付,9：盛付通支付
  --modify by mkl 20120704 add 9

  SELECT decode(SUM(money), NULL, 0.00, SUM(money)) money
    INTO v_f1
    FROM (SELECT decode(t.finance_type, 23, -t.money, t.money) money
            FROM user_accounts t
           WHERE t.finance_date >= p_start
             AND t.finance_date <= p_end
             AND t.status = 1
             AND t.finance_type IN (0, 1, 10, 15, 9, 23, 32, 42));
  --modify by liu.jing 20120803 添加汇款取消23，财务要求汇款作为负流水入账。
  --32 财付通支付存入  即 财付通充值    42:支付宝充值/存入

  --F2(结算) 前面已算出

  --F3(竟拍返拥)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f3
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 18; --18:返还委托方结算单服务费

  --F4(积分兑现)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f4
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 20; --20:委托积分转现金

  --F6_1(结算前)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f6_1
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type IN (12, 35); --12:结算前退货存款 35:结算前收藏证书退款

  --F6(结算前)
  v_f6 := v_f6_1 + v_g2_3;

  --F7(结算后)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f7
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type IN (14, 36); --14:结算后退货存款 36:结算后收藏证书退款

  --F5(退货)
  v_f5 := v_f6 + v_f7;

  --F8(保证金转)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f8
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 2; --2:保证金转入余额

  --F9:(退款)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f9
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type IN (3, 28); --3:银行转出
  -- 2013-12-31   把 泓盛转账 并入退款     28： 泓盛转账

  --F10:(支付)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f10_1
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type IN (11, 24, 25, 19, 27, 33, 34, 43); --11:交易单支付  24: 余额+IPS支付  25: 余额+SDO支付 19:商城订单合并支付
  -- 27:仓储费扣除--33:财付通+余额支付 34:收藏证书 43:支付宝支付
  --v_f10 := v_f10_1 + v_h1_3;

  v_f10 := v_f10_1; -- 前台商城合并支付类型 为 11 ，导致商城数据重复计算，修改 2012-11-06  liujing

  --F11:(运费)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f11
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type IN (7, 6, 16, 17); --6:邮资补收,16:保管费, 17:保险费 7:收取物流保价费 modify by mkl 20120704 add 7

  --F12:(转保证金)
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f12
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 4; --4:余额转入保证金

  --F14:(预订资金罚扣)
  --add by cyf  20130219 商城投资理财扣除客户订金
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_f14
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 26; --26:预订资金罚扣

  --F13:(竟拍保证金罚扣)

  IF p_start < to_date('2012-06-30 23:59:59', 'yyyy-mm-dd hh24:mi:ss') THEN

    SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
      INTO v_f13
      FROM user_accounts t
     WHERE t.finance_date >= p_start
       AND t.finance_date <= p_end
       AND t.status = 1
       AND t.finance_type = 5; --5:坏账扣除
  ELSE

    SELECT decode(SUM(um.amount), NULL, 0.00, SUM(um.amount)) money
      INTO v_f13
      FROM user_margins um
     WHERE um.direction = '1'
       AND um.margin_type = '4'
       AND um.status = '1'
       AND um.created_at >= p_start
       AND um.created_at <= p_end;

  END IF;

  ----------------------------F 期度余额保证金信息(结束)-----------------------

  ---------------------A概要信息(开始)-------------------------
  --A6_1(流入余额 )
  SELECT decode(round(SUM(money), 2), NULL, 0.00, round(SUM(money), 2)) money
    INTO v_a6_1
    FROM user_accounts
   WHERE finance_date >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND finance_date <= p_start
     AND status = 1
     AND direction = 0; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A6_2(流出余额)
  SELECT decode(round(SUM(money), 2), NULL, 0.00, round(SUM(money), 2)) money
    INTO v_a6_2
    FROM user_accounts
   WHERE finance_date >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND finance_date <= p_start
     AND status = 1
     AND direction = 1; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A6
  v_a6 := v_a6_1 - v_a6_2;

  --A11_1(流入保证金)
  SELECT decode(round(SUM(amount), 2), NULL, 0.00, round(SUM(amount), 2)) amount
    INTO v_a11_1
    FROM user_margins t
   WHERE t.created_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND t.created_at <= p_start
     AND t.status = 1
     AND t.direction = 0; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A11_2(流出保证金)
  SELECT decode(round(SUM(amount), 2), NULL, 0.00, round(SUM(amount), 2)) amount
    INTO v_a11_2
    FROM user_margins t
   WHERE t.created_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND t.created_at <= p_start
     AND t.status = 1
     AND t.direction = 1; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A11
  v_a11 := v_a11_1 - v_a11_2;

  /*
  --A16_1(支付未生成结算单) v_a16 = v_a16_1 + v_a16_2
  select decode(sum(t.end_price), null, 0.00, sum(t.end_price)) end_price
    into v_a16_1
    from user_orders t
    join auctions a on (a.id = t.auction_id)
    left join comeback_goods c on (c.auction_id = t.auction_id)
   where a.issettlement = 0
     and t.status = 1   -- 0:查核中, 1:通过, 2:拒绝
     and t.pay_date >= to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     and t.pay_date <= p_start
     and (c.id is null or c.comeback_date >= p_start);

  --A16_2(支付生成结算单但未财务确认)
  select decode(sum(t.end_price), null, 0.00, sum(t.end_price)) end_price
    into v_a16_2
    from user_orders t
    join settlement_details d on (d.auction_id = t.auction_id)
    join settlements s on (s.id = d.settlement_id)
    left join comeback_goods c on (c.auction_id = t.auction_id)
   where t.pay_date >= to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     and t.pay_date <= p_start
     and t.status = 1   -- 0:查核中, 1:通过, 2:拒绝
     and ((s.status != 2)
     --or (s.f_check_date >= p_start and s.status = 2)
     )
     and (c.id is null or c.comeback_date >= p_start);

  --A16
  v_a16 := v_a16_1 + v_a16_2;*/

  --A16_1 (已支付)
  SELECT SUM((SELECT decode(SUM(t.end_price), NULL, 0.00, SUM(t.end_price)) end_price
                FROM user_orders t
               WHERE status = 1 -- 0:未支付, 1:已支付, 2:不支付
                 AND t.pay_date >=
                     to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                 AND t.pay_date <= p_start) +
             (SELECT decode(SUM(goods_number * order_price),
                            NULL,
                            0.00,
                            SUM(goods_number * order_price))
                FROM ec_order_goods e
               WHERE e.order_status = '1' -- 订单状态:'0', '待支付', '1', '已支付', '2', '不支付'
                 AND e.pay_date >=
                     to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                 AND e.pay_date <= p_start))
    INTO v_a16_1
    FROM dual;

  --A16_2 （已结算）
  SELECT SUM((SELECT decode(SUM(t.amount + t.orther_fee + t.service_fee),
                            NULL,
                            0.00,
                            SUM(t.amount + t.orther_fee + t.service_fee)) amount
                FROM settlements t
               WHERE status IN (2) -- 0：待转账 1：转账 2：已经完成 3：不通过
                 AND f_check_date >=
                     to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                 AND f_check_date <= p_start) +
             (SELECT decode(SUM(t.amount + t.others_fee + t.total_charge_fee +
                                t.total_load_fee),
                            NULL,
                            0.00,
                            SUM(t.amount + t.others_fee + t.total_charge_fee +
                                t.total_load_fee)) amount
                FROM ec_settlements t
               WHERE status = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
                 AND t.f_check_date >=
                     to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                 AND t.f_check_date <= p_start) +
             (SELECT decode(SUM(o.end_price), NULL, 0.00, SUM(o.end_price)) end_price
                FROM user_refunds t
                JOIN user_orders o ON (o.id = t.user_order_id)
               WHERE t.settlement_status = 0 -- 1:结算后, 0:结算前
                 AND t.status = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                    -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                    -- 8：退货失败 9：退货成功
                 AND t.complete_at >=
                     to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                 AND t.complete_at <= p_start) +
             (SELECT decode(SUM(back_total_price),
                            NULL,
                            0.00,
                            SUM(back_total_price)) back_total_price
                FROM comeback_ec_goods c
               WHERE back_status = 1 -- 0:查核中, 1:通过, 2:拒绝
                 AND c.apply_date >=
                     to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                 AND c.apply_date <= p_start
                 AND balance_status = 0 -- 0:结算后, 1:结算前
              ))
    INTO v_a16_2
    FROM dual;

  --A16
  v_a16 := v_a16_1 - v_a16_2;

  --A1
  v_a1 := v_a6 + v_a11 + v_a16;

  --A8
  --select decode(round(sum(money),2), null, 0.00, round(sum(money),2)) money
  --  into v_a8
  --  from user_accounts
  --where finance_date >= p_start
  --  and finance_date <= p_end
  --  and status = 1
  --  and direction = 0; --资金流转类型：0:checkin(流入),  1:checkout（流出）

  SELECT decode(SUM(money), NULL, 0.00, SUM(money)) money
    INTO v_a8
    FROM (SELECT decode(finance_type, 23, -money, money) money
            FROM user_accounts
           WHERE finance_date >= p_start
             AND finance_date <= p_end
             AND status = 1
             AND (direction = 0 OR (direction = 1 AND finance_type = 23)));
  --modify by liu.jing 20120803 添加汇款取消23，财务要求汇款作为负流水入账。

  --A13
  SELECT decode(round(SUM(amount), 2), NULL, 0.00, round(SUM(amount), 2)) amount
    INTO v_a13
    FROM user_margins t
   WHERE t.created_at >= p_start
     AND t.created_at <= p_end
     AND t.status = 1
     AND t.direction = 0; -- 资金流转类型：0:checkin(流入),  1:checkout（流出）

  --A18
  v_a18 := v_h3_1;

  --A3 = A8+A13+A18
  v_a3 := v_a8 + v_a13 + v_a18;

  --A9_1
  SELECT decode(SUM(money), NULL, 0.00, SUM(money)) money
    INTO v_a9_1
    FROM user_accounts
   WHERE finance_date >= p_start
     AND finance_date <= p_end
     AND status = 1
     AND finance_type != 23 --modify by liu.jing  20120803 财务要求汇款取消作为 入账 负流水
     AND direction = 1; -- 资金流转类型：0:checkin(流入),  1:checkout（流出）

  --A9
  --2012-12-03 liujing修改  保证金罚扣规则变化
  IF p_start < to_date('2012-06-30 23:59:59', 'yyyy-mm-dd hh24:mi:ss') THEN
    v_a9 := v_a9_1 - v_f13;
  ELSE
    v_a9 := v_a9_1;
  END IF;

  --A14_1
  SELECT decode(SUM(amount), NULL, 0.00, SUM(amount)) amount
    INTO v_a14_1
    FROM user_margins t
   WHERE t.created_at >= p_start
     AND t.created_at <= p_end
     AND t.status = 1
     AND t.direction = 1; -- 资金流转类型：0:checkin(流入),  1:checkout（流出）

  --A14
  IF p_start < to_date('2012-06-30 23:59:59', 'yyyy-mm-dd hh24:mi:ss') THEN
    v_a14 := v_a14_1 + v_f13;
  ELSE
    v_a14 := v_a14_1;
  END IF;

  --A19
  v_a19 := v_g4_1 + v_h4_1;

  --A4
  v_a4 := v_a9 + v_a14 + v_a19;

  --A7
  v_a7 := v_a8 - v_a9;

  --A12
  v_a12 := v_a13 - v_a14;

  --A17
  v_a17 := v_a18 - v_a19;

  --A2
  v_a2 := v_a3 - v_a4;

  --A10
  --A10_1(流入余额 )
  SELECT decode(round(SUM(money), 2), NULL, 0.00, round(SUM(money), 2)) money
    INTO v_a10_1
    FROM user_accounts
   WHERE finance_date >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND finance_date <= p_end
     AND status = 1
     AND direction = 0; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A10_2(流出余额)
  SELECT decode(round(SUM(money), 2), NULL, 0.00, round(SUM(money), 2)) money
    INTO v_a10_2
    FROM user_accounts
   WHERE finance_date >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND finance_date <= p_end
     AND status = 1
     AND direction = 1; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  v_a10 := v_a7 + v_a6;
  --v_a10 := v_a10_1 - v_a10_2;

  --A15_1(流入保证金)
  SELECT decode(round(SUM(amount), 2), NULL, 0.00, round(SUM(amount), 2)) amount
    INTO v_a15_1
    FROM user_margins t
   WHERE t.created_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND t.created_at <= p_end
     AND t.status = 1
     AND t.direction = 0; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A15_2(流出保证金)
  SELECT decode(round(SUM(amount), 2), NULL, 0.00, round(SUM(amount), 2)) amount
    INTO v_a15_2
    FROM user_margins t
   WHERE t.created_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND t.created_at <= p_end
     AND t.status = 1
     AND t.direction = 1; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）

  --A15
  v_a15 := v_a12 + v_a11;
  --v_a15 := v_a15_1 - v_a15_2;

  --A20
  v_a20 := v_a17 + v_a16;

  --A5
  v_a5 := v_a2 + v_a1;

  /** user_scores :score_state
        0:预存积分, 1:有效积分, 2:无效积分, 3:拍品退货, 4:超期支付, 5:超期不支付
       6:委托转竞买, 7：委托提现, 8：积分消费, 9：过期积分
  */
  --A21
  SELECT SUM(a.scores)
    INTO v_a21
    FROM scores a
   WHERE a.score_status = '1' --1：有效积分
     AND a.score_type IN ('0', '1') -- 0竞买积分，1：委托积分, 2:赠送积分, 3:活动积分, 4:委托转入
     AND a.effected_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND a.effected_at <= p_start;

  --A26
  SELECT SUM(a.scores)
    INTO v_a26
    FROM scores a
   WHERE a.score_status = '1' -- 1：有效积分
     AND a.score_type = '0' -- 0竞买积分，1：委托积分, 2:赠送积分, 3:活动积分, 4:委托转入
     AND a.effected_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND a.effected_at <= p_start;

  --A31
  SELECT SUM(a.scores)
    INTO v_a31
    FROM scores a
   WHERE a.score_status = '1' --  1：有效积分
     AND a.score_type IN ('1') -- 0竞买积分，1：委托积分, 2:赠送积分, 3:活动积分, 4:委托转入
     AND a.effected_at >=
         to_date('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND a.effected_at <= p_start;

  --A23
  SELECT SUM(scores)
    INTO v_a23
    FROM scores s
   WHERE score_status = 1 -- 1：有效积分
     AND score_type IN ('0', '1') -- 0竞买积分，1：委托积分, 2:赠送积分, 3:活动积分, 4:委托转入
     AND effected_at >= p_start
     AND effected_at <= p_end
     AND user_id IN (SELECT id FROM users WHERE islock != 1);

  --A28
  SELECT SUM(scores)
    INTO v_a28
    FROM scores s
   WHERE score_status = 1 -- 1：有效积分
     AND score_type = 0 -- 0竞买积分，1：委托积分, 2:赠送积分, 3:活动积分, 4:委托转入
     AND effected_at >= p_start
     AND effected_at <= p_end
     AND user_id IN (SELECT id FROM users WHERE islock != 1);

  --A33
  SELECT SUM(scores)
    INTO v_a33
    FROM scores s
   WHERE score_status = 1 -- 1：有效积分
     AND score_type = 1 -- 0竞买积分，1：委托积分, 2:赠送积分, 3:活动积分, 4:委托转入
     AND effected_at >= p_start
     AND effected_at <= p_end
     AND user_id IN (SELECT id FROM users WHERE islock != 1);

  --A29
  SELECT SUM(consume_scores * goods_number)
    INTO v_a29
    FROM ec_order_goods t
   WHERE t.created_at >= p_start
     AND t.created_at <= p_end;

  --A34
  SELECT SUM(t.money) * 20
    INTO v_a34
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 20; -- 20:委托积分转现金

  --A24
  v_a24 := v_a29 + v_a34;

  --A22
  v_a22 := v_a23 - v_a24;

  --A27
  v_a27 := v_a28 - v_a29;

  --A32
  v_a32 := v_a33 - v_a34;

  --A25
  v_a25 := v_a21 + v_a22;

  --A30
  v_a30 := v_a26 + v_a27;

  --A35
  v_a35 := v_a31 + v_a32;

  -----------------------------A概要信息(结束)------------------------------

  -----------------------------B 期度营业信息(开始)-------------------------

  --B5(竟拍收益) B5=F13+H2(2)+H6(2)
  v_b5 := v_h6_2 + v_h2_2 + v_f13;

  --B8(竟拍抵充) B8=G3(2)+G6(2)+G8(2)+G(9)2+F3
  v_b8 := v_g3_2 + v_g6_2 + v_g8_2 + v_g9_2 + v_f3;

  --B2(竟拍盈利)
  v_b2 := v_b5 - v_b8;

  --B6(商城收益)
  --v_f14  add by cyf 商城投资理财扣除客户订金
  v_b6 := v_h2_3 + v_h6_3 + v_f14;

  --B9(商城抵充)
  v_b9 := v_g3_3 + v_g6_3 + v_g7_3;

  --B3(商城盈利)
  v_b3 := v_b6 - v_b9;

  --B1(盈利)
  v_b1 := v_b2 + v_b3;

  --B4(收益)
  v_b4 := v_b5 + v_b6;

  --B7(抵充)
  v_b7 := v_b8 + v_b9;

  ----------------------------B 期度营业信息(结束)-----------------------------

  --------------------------D 期度积分信息(开始)-------------------------------
  --D1
  v_d1 := v_a23 / 20;

  --D3
  v_d3 := v_f4;
  --D4
  v_d4 := 0;

  --D2
  v_d2 := v_d3 + v_d4;

  ------------------------D 期度积分信息(结束)-----------------------------------

  ------------------------C 预提信息(开始)---------------------------------------

  --C1
  v_c1 := (v_h4_2 * 2) / 100;

  --C2
  v_c2 := v_d2 + v_f3;

  --C3
  SELECT ((decode(SUM(t.auction_fee), NULL, 0.00, SUM(t.auction_fee))) * 2 / 100)
    INTO v_c3
    FROM settlements t
   WHERE status = 2 -- 0：待转账 1:转账中，2:已经完成, 3：不通过
     AND f_check_date >=
         to_date('2010-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
     AND f_check_date <= p_end;

  --C4_1
  SELECT (decode(SUM(t.money), NULL, 0.00, SUM(t.money))) / 20
    INTO v_c4_1
    FROM user_accounts t
   WHERE finance_type = 20 -- 20:委托积分转现金
     AND t.status = 1
     AND finance_date <= p_end;

  --C4_2
  SELECT SUM(money)
    INTO v_c4_2
    FROM user_accounts t
   WHERE finance_type = 18 --18:返还委托方结算单服务费
     AND t.status = 1
     AND finance_date <= p_end;

  --C4
  v_c4 := v_c4_1 + v_c4_2;

  ----------------------------C 预提信息(结束)-------------------------------

  ---------------------------E 期度资金流信息(开始)---------------------------
  /** user_accounts:f_type
     收支方式:
       0 :银行存入, 1:现金存入, 2:保证金转入余额, 3:银行转出, 4:余额转入保证金,
       5:坏账扣除, 6:邮资补收, 10:IPS支付, 11:交易单支付, 12:结算前退货存款, 13:结算转余额 ,
       14:结算后退货存款, 15:Paypal支付, 16:保管费, 17:保险费, 18:返还委托方结算单服务费,
       19:商城订单合并支付, 20:委托积分转现金, 21:商城退货金额
  **/
  --E1
  --select decode(sum(t.money), null, 0.00, sum(t.money))money
  --  into v_e1
  --  from user_accounts t
  -- where t.finance_date >= p_start
  --   and t.finance_date <= p_end
  --   and t.status = 1
  --    and t.finance_type in (0, 1, 10, 15,9); --0 :银行存入,1:现金存入,10:IPS支付,15:Paypal支付
  --modify by mkl 20120704 add 9

  SELECT decode(SUM(money), NULL, 0.00, SUM(money)) money
    INTO v_e1
    FROM (SELECT decode(t.finance_type, 23, -t.money, t.money) money
            FROM user_accounts t
           WHERE t.finance_date >= p_start
             AND t.finance_date <= p_end
             AND t.status = 1
             AND t.finance_type IN (0, 1, 10, 15, 9, 23, 32, 42));
  --modify by liu.jing 20120803 添加汇款取消23，财务要求汇款作为负流水入账。
  --32 财付通支付存入  即 财付通充值   42:支付宝充值

  --E3
  SELECT decode(SUM(t.money), NULL, 0.00, SUM(t.money)) money
    INTO v_e3
    FROM user_accounts t
   WHERE t.finance_date >= p_start
     AND t.finance_date <= p_end
     AND t.status = 1
     AND t.finance_type = 3; -- 3:银行转出

  --E4
  SELECT decode(SUM(d.amount), NULL, 0.00, SUM(d.amount)) amount
    INTO v_e4_1
    FROM settlement_despatches d
   WHERE d.f_check_status = 1 -- 0:未转入, 1:已完成, 2:不通过
     AND d.f_check_date >= p_start
     AND d.f_check_date <= p_end
     AND d.checkout_type IN (0, 1, 3, 4, 5, 6, 7, 8, 9); -- 0:现金支出, 1:邮政转款, 2:转余额, 3:银行转账,
  --4:现金支出--台湾, 5:IPS转账, 6:转帐(公), 7:汇丰, 8:Paypal 9 盛付通

  SELECT decode(SUM(d.amount), NULL, 0.00, SUM(d.amount)) amount
    INTO v_e4_2
    FROM ec_settlement_despatches d
   WHERE d.f_check_status = 1 -- 0:未转入, 1:已完成, 2:不通过
     AND d.f_check_date >= p_start
     AND d.f_check_date <= p_end
     AND d.checkout_type IN (0, 1, 3, 4, 5, 6, 7, 8, 9);

  v_e4 := v_e4_1 + v_e4_2;
  --E2
  v_e2 := v_e3 + v_e4;

  -----------------------------E 期度资金流信息(结束)-------------------------------

  --财务统计表一验证
  status := '0';

  --验证公式：A1 = A6+ A11 +A16
  BEGIN
    IF v_a1 != (v_a6 + v_a11 + v_a16) THEN
      status := '生成数据时，验证公式A1=A6+A11+A16失败！'; --1
    END IF;
  END;

  --验证公式：A2 = A7 +A12 +A17 = A3 +A4
  BEGIN
    IF v_a2 != (v_a7 + v_a12 + v_a17) THEN
      status := '生成数据时，验证公式A2=A7+A12+A17=A3+A4失败！'; --2
    END IF;
  END;

  --验证公式：A3 = A8 +A13 +A18

  BEGIN
    IF v_a3 != (v_a8 + v_a13 + v_a18) THEN
      status := '生成数据时，验证公式A3=A8+A13+A18失败！'; --3
    END IF;
  END;

  --验证公式：A4 = A9 +A14 +A19
  BEGIN
    IF v_a4 != (v_a9 + v_a14 + v_a19) THEN
      status := '生成数据时，验证公式A4=A9+A14+A19失败！'; --4
    END IF;
  END;

  --验证公式：A5 = A1 + A2 = A10 +A15 +A20
  BEGIN
    IF v_a5 != (v_a10 + v_a15 + v_a20) THEN
      status := '生成数据时，验证公式A5=A10+A15+A20失败！'; --5
    END IF;
  END;

  --验证公式：A7 = A1 +A2
  BEGIN
    IF v_a5 != (v_a1 + v_a2) THEN
      status := '生成数据时，验证公式A5=A1+A2失败！'; --101
    END IF;
  END;

  --验证公式： A8 = F1 +F2 + F3 + F5 +F8
  BEGIN
    IF v_a8 != (v_f1 + v_f2 + v_f3 + v_f4 + v_f5 + v_f8) THEN
      status := '生成数据时，验证公式A8=F1+F2+F3+F4+F5+F8失败！'; --7
    END IF;
  END;

  --验证公式：A9 = F9 + F10 +F11 + F12
  BEGIN
    IF v_a9 != (v_f9 + v_f10 + v_f11 + v_f12) THEN
      status := '生成数据时，验证公式A9=F9+F10+F11+F12失败！'; --8
    END IF;
  END;

  --验证公式：A10 = A6 + A7
  BEGIN
    IF v_a10 != (v_a6 + v_a7) THEN
      status := '生成数据时，验证公式A10=A6+A7失败！'; --9
    END IF;
  END;

  --验证公式：A15 = A11 + A12
  BEGIN
    IF v_a13 != v_f12 THEN
      status := '生成数据时，验证公式A15=A11+A12失败！'; --13
    END IF;
  END;

  --验证公式：A18 = AH31
  BEGIN
    IF v_a18 != v_h3_1 THEN
      status := '生成数据时，验证公式A18 = H31失败！'; --15
    END IF;
  END;

  --验证公式： A19 = H41 + G41
  BEGIN
    IF v_a19 != (v_g4_1 + v_h4_1) THEN
      status := '生成数据时，验证公式A19 = H41 + G41失败！'; --16
    END IF;
  END;

  --验证公式：A20 = A16 + A17
  BEGIN
    IF v_a20 != (v_a16 + v_a17) THEN
      status := '生成数据时，验证公式A20=A16+A17失败！'; --17
    END IF;
  END;

  --验证公式：A21 = A26+ A31
  BEGIN
    IF v_a21 != (v_a26 + v_a31) THEN
      status := '生成数据时，验证公式A21=A26+A31失败！'; --18
    END IF;
  END;

  --验证公式：A22 = A27 + A32
  BEGIN
    IF v_a22 != (v_a27 + v_a32) THEN
      status := '生成数据时，验证公式A22=A27+A32=A23+A24失败！'; --19
    END IF;
  END;

  --验证公式：A22 = A23 - A24
  BEGIN
    IF v_a22 != (v_a23 - v_a24) THEN
      status := '生成数据时，验证公式A22 = A23 - A24失败！'; --103
    END IF;
  END;

  --验证公式：A27 = A28 - A29
  BEGIN
    IF v_a27 != (v_a28 - v_a29) THEN
      status := '生成数据时，验证公式A27 = A28 - A29失败！'; --104
    END IF;
  END;

  --验证公式：A32 = A23 - A34
  BEGIN
    IF v_a32 != (v_a33 - v_a34) THEN
      status := '生成数据时，验证公式A32 = A23 - A34失败！'; --105
    END IF;
  END;

  --验证公式：A23 = A28 + A33
  BEGIN
    IF v_a23 != (v_a28 + v_a33) THEN
      status := '生成数据时，验证公式A23=A28+A33=I21+I31失败！'; --20
    END IF;
  END;

  --验证公式： A24 = A29 + A34
  BEGIN
    IF v_a24 != (v_a29 + v_a34) THEN
      status := '生成数据时，验证公式A24=A29+A34失败！'; --21
    END IF;
  END;

  --验证公式：A25 = A21 + A22
  BEGIN
    IF v_a25 != (v_a21 + v_a22) THEN
      status := '生成数据时，验证公式A25=A21+A22失败！'; --22
    END IF;
  END;

  --验证公式：A25 = A30 + A25
  BEGIN
    IF v_a25 != (v_a30 + v_a35) THEN
      status := '生成数据时，验证公式A25= A30+A35失败！'; --102
    END IF;
  END;

  --验证公式：A30 = A26 + A27
  BEGIN
    IF v_a30 != (v_a26 + v_a27) THEN
      status := '生成数据时，验证公式A30=A26+A27失败！'; --24
    END IF;
  END;

  --验证公式：A35 = A31+ A32
  BEGIN
    IF v_a35 != (v_a31 + v_a32) THEN
      status := '生成数据时，验证公式A35=A31+A32失败！'; --26
    END IF;
  END;

  --验证公式：B1 = B4 - B7
  BEGIN
    IF v_b1 != (v_b4 - v_b7) THEN
      status := '生成数据时，验证公式B1=B2+B3=B4+(-B7)失败！'; --31
    END IF;
  END;

  --验证公式：B2 = B5 - B8
  BEGIN
    IF v_b2 != (v_b5 - v_b8) THEN
      status := '生成数据时，验证公式B2=B5+(-B8)失败！'; --32
    END IF;
  END;

  --验证公式： B3 = B6 - B9
  BEGIN
    IF v_b3 != (v_b6 - v_b9) THEN
      status := '生成数据时，验证公式B3=B6+(-B9)失败！'; --33
    END IF;
  END;

  --验证公式：B4 = H21 + H61 + F13
  BEGIN
    IF v_b4 != (v_h2_1 + v_h6_1 + v_f13) THEN
      status := '生成数据时，验证公式B4=B5+B6=H21+H61+F13失败！'; --34
    END IF;
  END;

  --验证公式：B5 = H22 + H62 + F13
  BEGIN
    IF v_b5 != (v_h2_2 + v_h6_2 + v_f13) THEN
      status := '生成数据时，验证公式B5= H22+H62+F13失败！'; --35
    END IF;
  END;

  --验证公式： B6 = H33 + H63
  BEGIN
    IF v_b6 != (v_h2_3 + v_h6_3) THEN
      status := '生成数据时，验证公式B6= H33+H63失败！'; --36
    END IF;
  END;

  --验证公式：B7 = G31 + G61 + G81 + G91 +F13
  BEGIN
    IF v_b7 != (v_g3_1 + v_g6_1 + v_g8_1 + v_g9_1 + v_f3) THEN
      status := '生成数据时，验证公式B7 =(G31+G61+G81)+G91+F3失败！'; --37
    END IF;
  END;

  --验证公式：B8 = G31+ G62 + G82 +G92 +F3
  BEGIN
    IF v_b8 != (v_g3_2 + v_g6_2 + v_g8_2 + v_g9_2 + v_f3) THEN
      status := '生成数据时，验证公式B8=(G32+G62+G82)+G92+F3失败！'; --38
    END IF;
  END;

  --验证公式：B9 = G33 + G63 + G83 +G93
  BEGIN
    IF v_b9 != (v_g3_3 + v_g6_3 + v_g8_3 + v_g9_3) THEN
      status := '生成数据时，验证公式B9=(G33+G63+G83)+G93失败！'; --39
    END IF;
  END;

  --验证公式：C2 = D2 + F3
  BEGIN
    IF v_c2 != (v_d2 + v_f3) THEN
      status := '生成数据时，验证公式C2=D2+F3失败！'; --41
    END IF;
  END;

  --验证公式：D1 = A23/20
  BEGIN
    IF v_d1 != (v_a23 / 20) THEN
      status := '生成数据时，验证公式D1=A23/20失败！'; --44
    END IF;
  END;

  --验证公式：D3 = F4
  BEGIN
    IF v_d3 != v_f4 THEN
      status := '生成数据时，验证公式D3=F4失败！'; --46
    END IF;
  END;

  --验证公式：D4 = H54
  BEGIN
    IF v_d4 != v_h5_4 THEN
      status := '生成数据时，验证公式D4=H54失败！'; --47
    END IF;
  END;

  --验证公式：E1 = F1
  BEGIN
    IF v_e1 != v_f1 THEN
      status := '生成数据时，验证公式E1=F1失败！'; --48
    END IF;
  END;

  --验证公式：F1 = E1
  BEGIN
    IF v_f1 != v_e1 THEN
      status := '生成数据时，验证公式F1=E1失败！'; --51
    END IF;
  END;

  --验证公式：F6 = G21
  BEGIN
    IF v_f6 != v_g2_1 THEN
      status := '生成数据时，验证公式F6=G21失败！'; --53
    END IF;
  END;

  --验证公式：F7 = G51
  BEGIN
    IF v_f7 != v_g5_1 THEN
      status := '生成数据时，验证公式F7=G51失败！'; --54
    END IF;
  END;

  --验证公式：F10 = H11
  BEGIN
    IF v_f10 != v_h1_1 THEN
      status := '生成数据时，验证公式F10=H11失败！'; --55
    END IF;
  END;

  --验证公式：F12 = A13
  BEGIN
    IF v_f12 != v_a13 THEN
      status := '生成数据时，验证公式F12=A13失败！'; --56
    END IF;
  END;

  --验证公式：
  BEGIN
    IF v_h6_2_service_fee != v_h7_2 + v_h8_2 + v_h9_2 + v_ha_2 THEN
      status := '生成数据时，验证公式H6*=ΣH7*:HB*失败！';
    END IF;
  END;

  --将查询结果值插入表：t_financial_statements_two 中
  DELETE FROM temp_financial_statements_twos;

  INSERT INTO temp_financial_statements_twos
  VALUES
    (1,
     p_start,
     p_end,
     v_g1_1,
     v_g2_1,
     v_g3_1,
     v_g4_1,
     v_g5_1,
     v_g6_1,
     v_g7_1,
     v_g8_1,
     v_g9_1,
     v_h1_1,
     v_h2_1,
     v_h3_1,
     v_h4_1,
     v_h5_1,
     v_h6_1,
     v_h7_1,
     v_h8_1,
     v_h9_1,
     v_ha_1,
     v_hb_1,
     v_hc_1,
     v_hd_1,
     v_he_1,
     v_hf_1,
     v_g1_2,
     v_g2_2,
     v_g3_2,
     v_g4_2,
     v_g5_2,
     v_g6_2,
     v_g7_2,
     v_g8_2,
     v_g9_2,
     v_h1_2,
     v_h2_2,
     v_h3_2,
     v_h4_2,
     v_h5_2,
     v_h6_2,
     v_h7_2,
     v_h8_2,
     v_h9_2,
     v_ha_2,
     v_hb_2,
     v_hc_2,
     v_hd_2,
     v_he_2,
     v_hf_2,
     v_g1_3,
     v_g2_3,
     v_g3_3,
     v_g4_3,
     v_g5_3,
     v_g6_3,
     v_g7_3,
     v_g8_3,
     v_g9_3,
     v_h1_3,
     v_h2_3,
     v_h3_3,
     v_h4_3,
     v_h5_3,
     v_h6_3,
     v_h7_3,
     v_h8_3,
     v_h9_3,
     v_ha_3,
     v_hb_3,
     v_hc_3,
     v_hd_3,
     v_he_3,
     v_hf_3,
     v_h1_4,
     v_h3_4,
     v_h5_4,
     v_hc_4,
     v_hd_4,
     v_he_4,
     v_hf_4,
     v_hg_1,
     v_hg_2,
     v_hg_3,
     v_g10_1,
     v_g11_3,
     v_g10_3,
     v_g11_2,
     v_g10_2,
     v_g11_1,
     v_g12_1,
     v_g13_1);
  --提交
  COMMIT;

  --将查询结果值插入表：t_financial_statements_one 中

  DELETE FROM temp_financial_statements_ones;

  INSERT INTO temp_financial_statements_ones
  VALUES
    (1,
     p_start,
     p_end,
     v_a1,
     v_a6,
     v_a11,
     v_a16,
     v_a21,
     v_a26,
     v_a31,
     v_a2,
     v_a7,
     v_a12,
     v_a17,
     v_a22,
     v_a27,
     v_a32,
     v_a3,
     v_a8,
     v_a13,
     v_a18,
     v_a23,
     v_a28,
     v_a33,
     v_a4,
     v_a9,
     v_a14,
     v_a19,
     v_a24,
     v_a29,
     v_a34,
     v_a5,
     v_a10,
     v_a15,
     v_a20,
     v_a25,
     v_a30,
     v_a35,
     v_b1,
     v_b4,
     v_b7,
     v_b2,
     v_b5,
     v_b8,
     v_b3,
     v_b6,
     v_b9,
     v_c1,
     v_c3,
     v_c2,
     v_c4,
     v_d1,
     v_d2,
     v_d3,
     v_d4,
     v_e1,
     v_e2,
     v_e3,
     v_e4,
     v_f1,
     v_f2,
     v_f3,
     v_f4,
     v_f5,
     v_f6,
     v_f7,
     v_f8,
     v_f9,
     v_f10,
     v_f11,
     v_f12,
     v_f13,
     v_f14);

  --提交
  COMMIT;

END P_FINANCE_REPORT;

  /**
  number = 0 ，则验证成功！

  number = 1 :  A1=A6+A11+A16 则验证失败！
  number = 2 :  A2=A7+A12+A17=A3+A4 则验证失败！
  number = 3 :  A3=A8+A13+A18 则验证失败！
  number = 4 :  A4=A9+A14+A19 则验证失败！
  number = 101 :  A5=A1+A2 则验证失败！
  number = 5 :  A5=A10+A15+A20 则验证失败！

  number = 6 :  A7=A8+A9 则验证失败！
  number = 7 :  A8=F1+F2+F3+F4+F5+F8 则验证失败！
  number = 8 :  A9=F9+F10+F11+F12 则验证失败！
  number = 9 :  A10=A6+A7 则验证失败！

  number = 10 : A12=A13+A14 则验证失败！
  number = 11 : A13=F12 则验证失败！
  number = 12 : A14=F8 则验证失败！
  number = 13 : A15=A11+A12 则验证失败！

  number = 14 : A17=A18+A19 则验证失败！
  number = 15 : A18 = H31 则验证失败！
  number = 16 : A19 = H41 + G41 则验证失败！

  number = 103 ：A22 = A23 - A24 则验证失败！
  number = 104 ：A27 = A28 - A29 则验证失败！
  number = 105 ：A32 = A23 - A34  则验证失败！

  number = 17 : A20=A16+A17 则验证失败！
  number = 18 : A21=A26+A31 则验证失败！
  number = 19 : A22=A27+A32=A23+A24 则验证失败！
  number = 20 : A23=A28+A33=I21+I31 则验证失败！
  number = 21 : A24=A29+A34 则验证失败！
  number = 22 : A25=A21+A22 则验证失败！
  number = 102 : A25= A30+A35 则验证失败！

  number = 23 : A27=A28+A29 则验证失败！
  number = 24 : A30=A26+A27 则验证失败！
  number = 25 : A32=A33+A34 则验证失败！
  number = 26 : A35=A31+A32 则验证失败！

  number = 31 : B1=B2+B3=B4+(-B7) 则验证失败！
  number = 32 : B2=B5+(-B8) 则验证失败！
  number = 33 : B3=B6+(-B9) 则验证失败！
  number = 34 : B4=B5+B6=H31+H61+F13 则验证失败！
  number = 35 : B5= H22+H62+F13 则验证失败！
  number = 36 : B6= H33+H63 则验证失败！
  number = 37 : B7 =(G31+G61+G81)+G91+F3 则验证失败！
  number = 38 : B8=(G32+G62+G82)+G92+F3 则验证失败！
  number = 39 : B9=(G33+G63+G83)+G93 则验证失败！

  number = 40 ：C1=H42(出去金银币)×2% 则验证失败！
  number = 41 ：C2=D2+F3 则验证失败！
  number = 42 ：C3=ΣC12010.01.01起  则验证失败！
  number = 43 ：C4=ΣC2 则验证失败！

  number = 44 ：D1=A23/20 则验证失败！
  number = 45 ：D2=D3+D4 则验证失败！
  number = 46 ：D3=F4 则验证失败！
  number = 47 ：D4=H54 则验证失败！

  number = 48 ：E1=F1 则验证失败！
  number = 49 ：E2=E3+E4 则验证失败！
  number = 50 ：E3=F9 则验证失败！

  number = 51 ：F1=E1 则验证失败！
  number = 52 ：F5=F6+F7 则验证失败！
  number = 53 ：F6=G21 则验证失败！
  number = 54 ：F7=G51 则验证失败！
  number = 55 ：F10=H11 则验证失败！
  number = 56 ：F12=A13  则验证失败！
  **/
/

-- ----------------------------
-- Procedure structure for P_IMAGE_CREATE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_IMAGE_CREATE" (p_user_id in number, /*user id*/
                                                    p_SCORES    in number) as

 v_user_id           number;
                 V_USER_LEVEL_ID  integer;
  V_SCORE_TIME_SETTINGS_ID   integer;
  v_SCORE_IMAGES_RATIO_SELLER  number :=1;   /* 委托方积分形象值比例  默认值为1 */
  v_image number :=0; /* 委托方积分形象值*/
   v_now  DATE := SYSDATE; /*当前时间*/
V_SCORES number;
v_image_t integer;
 type cur_type is ref cursor;
  cur_sett cur_type;
  v_sql    varchar2(10000);

begin
v_user_id :=2040653;
V_SCORES :=p_SCORES;
 
v_image :=V_SCORES;
 open cur_sett for 
 SELECT sts.id  
  from  SCORE_TIME_SETTINGS STS
  where sts.start_at<= v_now and sts.end_at>=v_now
  order by sts.created_at desc;
  
  fetch cur_sett
  into V_SCORE_TIME_SETTINGS_ID;

if V_SCORE_TIME_SETTINGS_ID>0 then
  select u.sell_level
  into V_USER_LEVEL_ID
  from users u
  where u.id = v_user_id;

  SELECT SS.SCORE_IMAGES_RATIO_FOR_SELLER
        into v_SCORE_IMAGES_RATIO_SELLER
        FROM score_settings SS
        WHERE SS.SCORE_TYPE=1
        AND SS.USER_LEVEL_ID=V_USER_LEVEL_ID
        AND SS.RESOURCE_ID=V_SCORE_TIME_SETTINGS_ID
        AND SS.RESOURCE_TYPE='SCORE_TIME_SETTINGS';

 
 
  IF v_SCORE_IMAGES_RATIO_SELLER > 0 THEN
  v_image :=V_SCORES*v_SCORE_IMAGES_RATIO_SELLER;
  v_image:=trunc(v_image,0);
   END IF;
 end if;  
  
  UPDATE users u
  set u.sell_score_amount=v_image
  where u.id = v_user_id;
COMMIT;
--p_output:=v_image;


END;

 
/

-- ----------------------------
-- Procedure structure for P_INSERT_VIP_REMIND
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_INSERT_VIP_REMIND" is
       cursor cur_vip is
       select user_id, (select o.true_name from zhao.users o where o.id = s.user_id) user_name,
       created_at
        from zhao.vipusers s
       where is_vip = 1;    
begin
       for rs_vip in cur_vip loop
           insert into remind_user_setting
            (id,
             system_remind_set_id,
             user_id,
             user_name,
             service_op_id,
             service_op_name,
             is_remind,
             remind_day,
             remind_money,
             created_at,
             admin_id,
             admin_name)
            select remind_user_setting_seq.nextval,
                   id,
                   rs_vip.user_id,
                   rs_vip.user_name,
                   60042,
                   '尹佳慧',
                   is_remind,
                   remind_day,
                   remind_money,
                   rs_vip.created_at,
                   60039,
                   '陈佩'
              from remind_system_setting;       
       end loop;
       commit;
end p_insert_vip_remind;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_IP
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_IP" as
  v_name VARCHAR2(255);
  cursor c_choose is
  /*    select a.name
        from user_provinces a, user_cities b
       where a.country_id = 40
         and a.id = b.province_id;*/
    select b.name
      from user_provinces a, user_cities b
     where a.country_id = 40
       and a.id = b.province_id;
begin
  /*
  计算ip国家和省
  作者:马磊
  */
  --补足每一天成交数据
  for c_row in c_choose loop
    begin
      update ip a
         set a.country = '中国', a.city = c_row.name
       where a.area1 like '%' || c_row.name || '%';

      dbms_output.put_line(c_row.name);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        --没有找到下一条 插入新数据
        dbms_output.put_line('nodata');
    end;
  end loop;
  commit;
end p_ip;
/

-- ----------------------------
-- Procedure structure for P_LIZHENG_COPY_PICTURE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_LIZHENG_COPY_PICTURE"
(
	P_AUCTION_ID  NUMBER,
	P_CONTRACT_ID NUMBER,
	p_category_id NUMBER
) IS
	/*
    测试用图片复制,勿删
  */
BEGIN
	IF P_AUCTION_ID IS NOT NULL THEN
		INSERT INTO AUCTION_PICTURES
			(ID,
			 AUCTION_ID,
			 PATH,
			 NAME,
			 PIC_ORDER,
			 PIC_FILE_SIZE,
			 PIC_FILE_SPEC,
			 CREATED_AT)
			SELECT AUCTION_PICTURES_seq.NEXTVAL,
						 t2.auction_id,
						 t2.path,
						 t2.NAME,
						 t2.pic_order,
						 t2.pic_file_size,
						 t2.PIC_FILE_SPEC,
						 t2.created_at
				FROM (SELECT T.*, ROWNUM r_
								FROM (SELECT p_auction_id AS auction_id,
														 path,
														 NAME,
														 pic_order,
														 pic_file_size,
														 PIC_FILE_SPEC,
														 SYSDATE AS created_at
												FROM auction_pictures
											 WHERE pic_order = 'A'
												 AND ROWNUM < 100
											 ORDER BY pic_order, dbms_random.random) t) t2
			 WHERE t2.r_ = 1;

		UPDATE AUCTIONS
			 SET PIC_PATH = (SELECT PATH || NAME
												 FROM AUCTION_PICTURES
												WHERE AUCTION_ID = P_AUCTION_ID
													AND ROWNUM = 1)
		 WHERE ID = P_AUCTION_ID;
	END IF;

	IF P_CONTRACT_ID IS NOT NULL THEN
		IF p_category_id IS NULL THEN
			INSERT INTO AUCTION_PICTURES
				(ID,
				 AUCTION_ID,
				 PATH,
				 NAME,
				 PIC_ORDER,
				 PIC_FILE_SIZE,
				 PIC_FILE_SPEC,
				 CREATED_AT)
				SELECT AUCTION_PICTURES_SEQ.NEXTVAL,
							 T.ID,
							 path,
							 NAME,
							 pic_order,
							 pic_file_size,
							 PIC_FILE_SPEC,
							 SYSDATE
					FROM (SELECT A.ID, ROWNUM AS R_
									FROM AUCTIONS A
								 WHERE CONTRACT_ID = P_CONTRACT_ID) T
					JOIN (SELECT path,
											 ap.NAME,
											 pic_order,
											 pic_file_size,
											 PIC_FILE_SPEC,
											 ROWNUM AS R_
									FROM auction_pictures AP
								 WHERE rownum < 10000
								 ORDER BY pic_order, dbms_random.random) T2 ON T.R_ = T2.R_;
		ELSE
			INSERT INTO AUCTION_PICTURES
				(ID,
				 AUCTION_ID,
				 PATH,
				 NAME,
				 PIC_ORDER,
				 PIC_FILE_SIZE,
				 PIC_FILE_SPEC,
				 CREATED_AT)
				SELECT AUCTION_PICTURES_SEQ.NEXTVAL,
							 T.ID,
							 path,
							 NAME,
							 pic_order,
							 pic_file_size,
							 PIC_FILE_SPEC,
							 SYSDATE
					FROM (SELECT A.ID, ROWNUM AS R_
									FROM AUCTIONS A
								 WHERE CONTRACT_ID = P_CONTRACT_ID) T
					JOIN (SELECT path,
											 ap.NAME,
											 pic_order,
											 pic_file_size,
											 PIC_FILE_SPEC,
											 ROWNUM AS R_
									FROM auction_pictures AP
									JOIN auctions a ON a.id = ap.auction_id
								 WHERE rownum < 10000
									 AND a.AUCTION_CATEGORY_ID = p_category_id
								 ORDER BY pic_order, dbms_random.random) T2 ON T.R_ = T2.R_;
		END IF;

		UPDATE AUCTIONS A
			 SET PIC_PATH = (SELECT PATH || NAME
												 FROM AUCTION_PICTURES
												WHERE AUCTION_ID = A.ID
													AND ROWNUM = 1)
		 WHERE a.contract_id = p_contract_id;
	END IF;

END P_LIZHENG_COPY_PICTURE;


 
/

-- ----------------------------
-- Procedure structure for P_LOGISTIC_APPOINTMENT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_LOGISTIC_APPOINTMENT" (
                                                      p_userId in number,
                                                      p_auction_ids in varchar2,
                                                      p_userName in varchar2,
                                                      p_auctions_count in number,
                                                      p_card_type in varchar2,
                                                      p_card_id in varchar2,
                                                      p_booking_at in date,
                                                      p_remarks in varchar2,
                                                      p_status in varchar2,
                                                      p_lend_type in varchar2,
                                                      p_adminId in number,
                                                      p_adminName in varchar2,
                                                      p_lend_id out number,
                                                      p_book_id out number
                                                   ) is
           /**
             作者:成玉芬
             日期:2011.08.08
             描述：申请上门预约取拍品
          */
      v_split          VARCHAR2(2) := ','; --定义逗号分隔符
      v_user_name      varchar2(225);
      v_now            date := sysdate;
      v_lend_app       varchar2(2) := '1';  /**0:前台申请   1:后台申请*/

     cursor cus_auctions is
     select id,auction_no,name,auction_category_id,auction_character_id,descr
            from auctions where instr(v_split ||p_auction_ids || v_split, v_split || id || v_split) > 0;
begin
       select lends_seq.nextval into p_lend_id from dual;
       select true_name into v_user_name from users where id=p_userId;
       insert into lends (id,lend_type,user_id,user_name,auctions_count,booking_at,
                         admin_id,admin_name,status,remarks,created_at,updated_at,created_man,lend_app)
        values (p_lend_id,p_lend_type,p_userId,v_user_name,p_auctions_count,p_booking_at,
        p_adminId,p_adminName,p_status,p_remarks,v_now,v_now,p_adminName,v_lend_app);

        for result_auc in cus_auctions loop
            insert into lend_details(id,lend_id,auction_id,auction_no,auction_name,category_id,character_id,
                                          auction_descr,remarks,created_at) values
               (lend_details_seq.nextval,p_lend_id,result_auc.id,result_auc.auction_no,result_auc.name,result_auc.auction_category_id,
               result_auc.auction_character_id,result_auc.descr,p_remarks,v_now);
        end loop;
      select bookings_seq.nextval into p_book_id from dual;
       insert into bookings(id,source_id,source_type,user_name,card_type,card_id,bookint_at,status,remarks,created_at)
           values(p_book_id,p_lend_id,'LENDS',p_userName,p_card_type,p_card_id,p_booking_at,p_status,p_remarks,v_now);

end p_logistic_appointment;


 
/

-- ----------------------------
-- Procedure structure for P_LOGISTIC_AUCTION_APPLY
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_LOGISTIC_AUCTION_APPLY"(
                                                p_user_id          in number,   --客户编号
                                                p_auction_ids      in varchar,  --暂缓发货的拍品
                                                p_region_id        in number,   --发货地区
                                                p_logistic_type_id in number,   --发货方式
                                                p_address_id       in number,   --收货地址
                                                p_keepPrice        in number,   --保价额
                                                p_keepFee          in number,   --保价费
                                                p_is_keep          in number,   --是否暂缓发货
                                                p_deliver_type     in varchar,   --发货类型
                                                p_remarks          in varchar,  --备注
                                                p_itmes_count      in number,  --发货数量
                                                p_is_free          in number,   --是否免邮资
                                                p_admin_id         in number,   --操作人ID
                                                p_admin_name       in varchar,  --操作人名称

                                                p_recevice_name    in varchar,  --收货姓名
                                                p_cert_type        in varchar, --证件类型
                                                p_card_id          in varchar,   --证件号
                                                p_booking_at       in date,     --预约时间

                                                v_logistic_id out number,
                                                result_status        out number      --0.发货成功  1.暂缓成功
                                                ) is

  /**
     作者:成玉芬
     日期:2011.08.08
     描述：拍品发委托方 （后台调用）
  */
  v_sql        varchar2(2000);
  v_user_name  varchar2(225);
  v_is_merged  number:=0;         /*是否被合并*/
  v_recevice_name varchar2(225);
  v_user_address varchar2(225);   /*用户地址*/
  v_postcode  varchar2(225);      /*邮编*/
  v_tel       varchar2(225);      /*电话*/
  v_mobileTel varchar2(225);      /*手机*/
  v_logistic_status varchar2(225); /*0：待处理 1:已暂缓*/
  v_logistic_detail_id number;
  v_send_num   number(10);      --是否申请发货
  v_delivery_num   number(10);  --是否申请发货
  v_now  DATE := sysdate;

begin
  select logistics_seq.nextval into v_logistic_id from dual;
  select logistic_details_seq.nextval into v_logistic_detail_id from dual;

 if p_user_id is not null then
     select case when true_name is null then nickname else true_name end true_name into v_user_name from users where id=p_user_id;
  end if;

  if p_address_id is not null and p_address_id!=0 then
     select ud.receive_name, ud.address, ud.postcode, ud.tel, ud.mobile_tel
       into v_recevice_name,v_user_address, v_postcode, v_tel, v_mobileTel
     from user_addresses ud where ud.id=p_address_id;
  else
     v_recevice_name :=p_recevice_name;
  end if;

  if p_is_keep=1 then
        v_logistic_status:='1';
  else
        v_logistic_status:='0';
  end if;

  if p_auction_ids is not null then
      /**已申请发货的拍品个数*/
      v_sql := 'select count(1)
                from auctions a
                left join logistic_details d on a.logistic_detail_id=d.id
                left join v_wms_log_order_status_info g on d.logistic_id=g.logisticId
               where a.id in (' || p_auction_ids || ')
                 and a.logistic_detail_id>0
                 and g.logisticStatus!=6';
      EXECUTE IMMEDIATE v_sql
        INTO v_send_num;

      /**已申请发货的拍品个数*/
      v_sql := 'select count(1)
                from logistic_lading_details d
                left join v_wms_log_order_status_info g on d.logistic_lading_id = g.logisticId
               where d.auction_id in (' || p_auction_ids || ')
                 and d.logistic_lading_id>0
                 and g.logisticStatus!=6';
      EXECUTE IMMEDIATE v_sql
        INTO v_delivery_num;
  end if;

  if p_auction_ids is not null then
     if  v_send_num>0 or v_delivery_num>0 then
         result_status:=2;
         return;
     else
--如果交易单个数不为0，则生成一条发货单记录
  if p_auction_ids is not null then
    insert into logistics
      (id,user_id,user_name,logistic_type_id,user_address_id,address,postcode,tel,mobile_tel,
      keep_price,keep_fee,is_keep,region_id,is_merged,status,remarks,items_count,is_free,admin_id,admin_name,created_at)
    values
      (v_logistic_id,p_user_id,v_recevice_name,p_logistic_type_id,p_address_id,v_user_address,v_postcode,v_tel,v_mobileTel,
      p_keepPrice,p_keepFee,p_is_keep,p_region_id,v_is_merged,v_logistic_status,p_remarks,p_itmes_count,p_is_free,p_admin_id,p_admin_name,v_now);

    insert into logistic_details (id,logistic_id,old_logistic_id,user_id,keep_price,keep_fee,delivery_type,remarks,admin_id,admin_name,created_at)
     values (v_logistic_detail_id,v_logistic_id,v_logistic_id,p_user_id,p_keepPrice,p_keepFee,p_deliver_type,p_remarks,p_admin_id,p_admin_name,v_now);

     /**上门自取*/
    if p_address_id=0 then
      insert into bookings
            (id,source_id,source_type,user_name,card_type,card_id,bookint_at,status,created_at)
          values
            (bookings_seq.nextval,v_logistic_id,'LOGISTICS',p_recevice_name,p_cert_type,p_card_id,p_booking_at,'1',v_now);
    end if;
  end if;

  if p_auction_ids is not null then
     v_sql := 'update auctions a set a.logistic_detail_id = ' || v_logistic_detail_id || ' where a.id in ('||p_auction_ids||')';
     execute immediate v_sql;
  end if;
  end if;
 end if;
  commit;

  if p_is_keep =0 then
     result_status := 0;
  end if;
  if p_is_keep =1 then
      result_status := 1;
  end if;
  return;
end p_logistic_auction_apply;


 
/

-- ----------------------------
-- Procedure structure for P_LOGISTIC_AUCTION_APPLY_2
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_LOGISTIC_AUCTION_APPLY_2"(
                                                p_user_id          in number,   --客户编号
                                                p_auction_ids      in varchar,  --暂缓发货的拍品
                                                p_region_id        in number,   --发货地区
                                                p_logistic_type_id in number,   --发货方式
                                                p_address_id       in number,   --收货地址
                                                p_keepPrice        in number,   --保价额
                                                p_keepFee          in number,   --保价费
                                                p_is_keep          in number,   --是否暂缓发货
                                                p_deliver_type     in varchar,   --发货类型
                                                p_remarks          in varchar,  --备注
                                                p_itmes_count      in number,  --发货数量
                                                p_is_free          in number,   --是否免邮资
                                                p_admin_id         in number,   --操作人ID
                                                p_admin_name       in varchar,  --操作人名称

                                                p_recevice_name    in varchar,  --收货姓名
                                                p_cert_type        in varchar, --证件类型
                                                p_card_id          in varchar,   --证件号
                                                p_booking_at       in date,     --预约时间

                                                v_logistic_id out number,
                                                result_status        out number      --0.发货成功  1.暂缓成功
                                                ) is

  /**
     作者:成玉芬
     日期:2011.08.08
     描述：拍品发委托方 （后台调用）
  */
  v_sql        varchar2(2000);
  v_user_name  varchar2(225);
  v_is_merged  number:=0;         /*是否被合并*/
  v_recevice_name varchar2(225);
  v_user_address varchar2(225);   /*用户地址*/
  v_postcode  varchar2(225);      /*邮编*/
  v_tel       varchar2(225);      /*电话*/
  v_mobileTel varchar2(225);      /*手机*/
  v_logistic_status varchar2(225); /*0：待处理 1:已暂缓*/
  v_logistic_detail_id number;
  v_send_num   number(10);      --是否申请发货
  v_delivery_num   number(10);  --是否申请发货
  v_now  DATE := sysdate;

begin
  select logistics_seq.nextval into v_logistic_id from dual;
  select logistic_details_seq.nextval into v_logistic_detail_id from dual;

 if p_user_id is not null then
     select case when true_name is null then nickname else true_name end true_name into v_user_name from users where id=p_user_id;
  end if;

  if p_address_id is not null and p_address_id!=0 then
     select ud.receive_name, ud.address, ud.postcode, ud.tel, ud.mobile_tel
       into v_recevice_name,v_user_address, v_postcode, v_tel, v_mobileTel
     from user_addresses ud where ud.id=p_address_id;
  end if;

  if p_is_keep=1 then
        v_logistic_status:='1';
  else
        v_logistic_status:='0';
  end if;

  if p_auction_ids is not null then
      /**已申请发货的拍品个数*/
      v_sql := 'select count(1)
                from auctions a
                left join logistic_details d on a.logistic_detail_id=d.id
                left join v_wms_log_order_status_info g on d.logistic_id=g.logisticId
               where a.id in (' || p_auction_ids || ')
                 and a.logistic_detail_id>0
                 and g.logisticStatus!=6';
      EXECUTE IMMEDIATE v_sql
        INTO v_send_num;

      /**已申请发货的拍品个数*/
      v_sql := 'select count(1)
                from logistic_lading_details d
                left join v_wms_log_order_status_info g on d.logistic_lading_id = g.logisticId
               where d.auction_id in (' || p_auction_ids || ')
                 and d.logistic_lading_id>0
                 and g.logisticStatus!=6';
      EXECUTE IMMEDIATE v_sql
        INTO v_delivery_num;
  end if;

  if p_auction_ids is not null then
     if  v_send_num>0 or v_delivery_num>0 then
         result_status:=2;
         return;
     else
--如果交易单个数不为0，则生成一条发货单记录
  if p_auction_ids is not null then
    insert into logistics
      (id,user_id,user_name,logistic_type_id,user_address_id,address,postcode,tel,mobile_tel,
      keep_price,keep_fee,is_keep,region_id,is_merged,status,remarks,items_count,is_free,admin_id,admin_name,created_at)
    values
      (v_logistic_id,p_user_id,v_recevice_name,p_logistic_type_id,p_address_id,v_user_address,v_postcode,v_tel,v_mobileTel,
      p_keepPrice,p_keepFee,p_is_keep,p_region_id,v_is_merged,v_logistic_status,p_remarks,p_itmes_count,p_is_free,p_admin_id,p_admin_name,v_now);

    insert into logistic_details (id,logistic_id,old_logistic_id,user_id,keep_price,keep_fee,delivery_type,remarks,admin_id,admin_name,created_at)
     values (v_logistic_detail_id,v_logistic_id,v_logistic_id,p_user_id,p_keepPrice,p_keepFee,p_deliver_type,p_remarks,p_admin_id,p_admin_name,v_now);

     /**上门自取*/
    if p_address_id=0 then
      insert into bookings
            (id,source_id,source_type,user_name,card_type,card_id,bookint_at,status,created_at)
          values
            (bookings_seq.nextval,v_logistic_id,'LOGISTICS',p_recevice_name,p_cert_type,p_card_id,p_booking_at,'1',v_now);
    end if;
  end if;

  if p_auction_ids is not null then
     v_sql := 'update auctions a set a.logistic_detail_id = ' || v_logistic_detail_id || ' where a.id in ('||p_auction_ids||')';
     execute immediate v_sql;
  end if;
  end if;
 end if;
  commit;

  if p_is_keep =0 then
     result_status := 0;
  end if;
  if p_is_keep =1 then
      result_status := 1;
  end if;
  return;
end p_logistic_auction_apply_2;


 
/

-- ----------------------------
-- Procedure structure for P_LOGISTIC_COMBINE_DELIVER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_LOGISTIC_COMBINE_DELIVER"(P_USER_ID             IN NUMBER, --客户编号
                                                         P_OLD_LOGISTIC_ID     IN NUMBER, --原发货单号
                                                         P_ORDER_IDS           IN VARCHAR2, --选择发货的交易单号
                                                         P_COMBINE_LOGISTIC_ID IN VARCHAR, --合并发货单号
                                                         P_REFUND_IDS          IN VARCHAR, --退货单号
                                                         P_REGION_ID           IN NUMBER, --发货地区
                                                         P_LOGISTIC_TYPE_ID    IN NUMBER, --发货方式
                                                         P_RECEIVE_NAME        IN VARCHAR2, --收货人姓名
                                                         P_ADDRESS_ID          IN NUMBER, --收货地址
                                                         P_KEEPPRICE           IN NUMBER, --保价额
                                                         P_KEEPFEE             IN NUMBER, --保价费
                                                         P_ITMES_COUNT         IN NUMBER, --发货数量
                                                         P_IS_FREE             IN NUMBER, --是否免邮资
                                                         P_DELIVER_TYPE        IN VARCHAR, --发货类型
                                                         P_REMARKS             IN VARCHAR, --备注
                                                         P_ADMIN_ID            IN NUMBER,
                                                         P_ADMIN_NAME          IN VARCHAR,
                                                         V_LOGISTIC_ID         OUT NUMBER,
                                                         RESULT_STATUS         OUT NUMBER --0.发货成功  1.暂缓成功  2.交易单状态已发生改变
                                                         ) IS

  /**
     作者:成玉芬
     日期:2011.08.08
     描述：交易单申请发货和合并发货 （后台调用）
  */
  V_SQL                  VARCHAR2(10000);
  V_USER_NAME            VARCHAR2(225);
  V_IS_MERGED            NUMBER := 0; /*是否被合并*/
  V_LOGISTIC_STATUS      VARCHAR2(225) := '0'; /*0：待处理 1:已暂缓*/
  V_RECEVICE_NAME        VARCHAR2(225);
  V_USER_ADDRESS         VARCHAR2(1000); /*用户地址*/
  V_POSTCODE             VARCHAR2(225); /*邮编*/
  V_TEL                  VARCHAR2(225); /*电话*/
  V_MOBILETEL            VARCHAR2(225); /*手机*/
  V_LOGISTIC_DETAIL_ID   NUMBER;
  V_FREEZE_NUM           NUMBER(10); --是否冻结
  V_REFUND_NUM           NUMBER(10); --是否申请退货
  V_SEND_NUM             NUMBER(10); --是否申请发货
  V_DELIVERY_NUM         NUMBER(10); --是否申请提货
  V_NOW                  DATE := SYSDATE;
  V_TEMP                 VARCHAR2(4000);
  V_SPLIT                VARCHAR2(2) := ',';
  V_ISMERGED_LOGISTIC_ID VARCHAR2(4000);
BEGIN
  IF P_USER_ID IS NOT NULL THEN
    SELECT CASE
             WHEN TRUE_NAME IS NULL THEN
              NICKNAME
             ELSE
              TRUE_NAME
           END TRUE_NAME
      INTO V_USER_NAME
      FROM USERS
     WHERE ID = P_USER_ID;
  END IF;
  IF P_ADDRESS_ID IS NOT NULL AND P_ADDRESS_ID != 0 THEN
    SELECT UD.RECEIVE_NAME, UD.ADDRESS, UD.POSTCODE, UD.TEL, UD.MOBILE_TEL
      INTO V_RECEVICE_NAME, V_USER_ADDRESS, V_POSTCODE, V_TEL, V_MOBILETEL
      FROM USER_ADDRESSES UD
     WHERE UD.ID = P_ADDRESS_ID;
  ELSE
    V_RECEVICE_NAME := P_RECEIVE_NAME;
  END IF;

  IF P_ORDER_IDS IS NOT NULL AND P_REFUND_IDS IS NULL THEN
    /**交易单冻结个数*/
    V_SQL := 'select count(1)  from user_orders where is_freeze = 1 and  id in (' || P_ORDER_IDS || ')';
    EXECUTE IMMEDIATE V_SQL
      INTO V_FREEZE_NUM;
  
    /**已申请发货的交易单个数*/
    V_SQL := 'select count(1)
                from user_orders o
                join logistic_details d on o.logistic_detail_id = d.id
                join v_wms_logisticstatus_info logis on logis.auctionNo =
                                               o.auction_no
               where o.id in (' || P_ORDER_IDS || ')
                 and logis.logisticStatus not in (1, 2,10,13)';
    EXECUTE IMMEDIATE V_SQL
      INTO V_SEND_NUM;
  
    /**已申请提货的交易单个数*/
    V_SQL := 'select count(1)
                from user_orders o
                join logistic_lading_details d on o.auction_id = d.auction_id
                join v_wms_logisticstatus_info g on o.auction_no =
                                                           g.auctionNo
               where o.id in (' || P_ORDER_IDS || ')
                 and g.logisticStatus not in (1, 2,10,13)';
    EXECUTE IMMEDIATE V_SQL
      INTO V_DELIVERY_NUM;
  
    /**已申请退货且不为退货失败*/
    V_SQL := 'select count(1)  from user_orders where id in (' || P_ORDER_IDS ||
             ') and auction_id in
            (select ur.auction_id from user_refunds ur where (ur.id is not null and ur.status !=8))';
    EXECUTE IMMEDIATE V_SQL
      INTO V_REFUND_NUM;
  END IF;
  IF P_ORDER_IDS IS NOT NULL THEN
    IF V_FREEZE_NUM > 0 OR V_SEND_NUM > 0 OR V_DELIVERY_NUM > 0 OR V_REFUND_NUM > 0 THEN
      RESULT_STATUS := 2;
      RETURN;
    ELSE
      /*交易发货(不合并),如果交易单号不为空,则生成新的发货单*/
      SELECT LOGISTICS_SEQ.NEXTVAL INTO V_LOGISTIC_ID FROM DUAL;
      SELECT LOGISTIC_DETAILS_SEQ.NEXTVAL INTO V_LOGISTIC_DETAIL_ID FROM DUAL;
      INSERT INTO LOGISTICS
        (ID,
         USER_ID,
         USER_NAME,
         REGION_ID,
         LOGISTIC_TYPE_ID,
         USER_ADDRESS_ID,
         ADDRESS,
         POSTCODE,
         TEL,
         MOBILE_TEL,
         KEEP_PRICE,
         KEEP_FEE,
         IS_MERGED,
         ITEMS_COUNT,
         IS_FREE,
         STATUS,
         REMARKS,
         ADMIN_ID,
         ADMIN_NAME,
         CREATED_AT)
      VALUES
        (V_LOGISTIC_ID,
         P_USER_ID,
         V_RECEVICE_NAME,
         P_REGION_ID,
         P_LOGISTIC_TYPE_ID,
         P_ADDRESS_ID,
         V_USER_ADDRESS,
         V_POSTCODE,
         V_TEL,
         V_MOBILETEL,
         P_KEEPPRICE,
         P_KEEPFEE,
         V_IS_MERGED,
         P_ITMES_COUNT,
         P_IS_FREE,
         V_LOGISTIC_STATUS,
         P_REMARKS,
         P_ADMIN_ID,
         P_ADMIN_NAME,
         V_NOW);
    
      INSERT INTO LOGISTIC_DETAILS
        (ID,
         LOGISTIC_ID,
         OLD_LOGISTIC_ID,
         USER_ID,
         KEEP_PRICE,
         KEEP_FEE,
         DELIVERY_TYPE,
         REMARKS,
         ADMIN_ID,
         ADMIN_NAME,
         CREATED_AT)
      VALUES
        (V_LOGISTIC_DETAIL_ID,
         V_LOGISTIC_ID,
         V_LOGISTIC_ID,
         P_USER_ID,
         P_KEEPPRICE,
         P_KEEPFEE,
         P_DELIVER_TYPE,
         P_REMARKS,
         P_ADMIN_ID,
         P_ADMIN_NAME,
         V_NOW);
    
      IF P_REFUND_IDS IS NOT NULL THEN
        V_SQL := 'update user_refunds o set o.logistic_detail_id = ' || V_LOGISTIC_DETAIL_ID || ' where o.id in (' ||
                 P_REFUND_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;
      ELSIF P_REFUND_IDS IS NULL THEN
        V_SQL := 'update user_orders o set o.logistic_detail_id = ' || V_LOGISTIC_DETAIL_ID || ' where o.id in (' ||
                 P_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;
      END IF;
    
      /*
          未生成发货单之前合并暂缓发货单(交易单合并其它暂缓发货单一起发货)
      */
      IF P_COMBINE_LOGISTIC_ID IS NOT NULL THEN
        V_IS_MERGED := 1;
        /**被合并的单子改为已被合并,拍品数量归零*/
        V_SQL := 'update logistics g set g.is_merged=' || V_IS_MERGED || ',g.items_count=0 where g.id in (' ||
                 P_COMBINE_LOGISTIC_ID || ')';
        EXECUTE IMMEDIATE V_SQL;
      
        /**被合并的单子的明细外键改为主单的id*/
        V_SQL := 'update logistic_details d set d.logistic_id=' || V_LOGISTIC_ID || ' where d.logistic_id in (' ||
                 P_COMBINE_LOGISTIC_ID || ')';
        EXECUTE IMMEDIATE V_SQL;
      
        /**主单加上被合并的单子的拍品数量*/
        V_SQL := 'update logistics gs set gs.items_count=' || P_ITMES_COUNT || ' where gs.id = (' || V_LOGISTIC_ID || ')';
        EXECUTE IMMEDIATE V_SQL;
      END IF;
    END IF;
  END IF;

  /*
  * 已生成的发货单合并其它暂缓的发货单提交合并发货
  */
  IF P_COMBINE_LOGISTIC_ID IS NOT NULL AND P_ORDER_IDS IS NULL THEN
    /**添加被合并单子的发货备注*/
    V_TEMP := P_COMBINE_LOGISTIC_ID || ',';
    WHILE SUBSTR(V_TEMP, 1, INSTR(V_TEMP, V_SPLIT) - 1) IS NOT NULL LOOP
    
      V_ISMERGED_LOGISTIC_ID := SUBSTR(V_TEMP, 1, INSTR(V_TEMP, V_SPLIT) - 1);
      V_TEMP                 := SUBSTR(V_TEMP, INSTR(V_TEMP, V_SPLIT) + LENGTH(V_SPLIT), LENGTH(V_TEMP));
      INSERT INTO COMMON_REMARKS
        (ID, SOURCE_ID, SOURCE_TYPE, CUSTOM_TYPE, CONTENT, ADMIN_ID, ADMIN_NAME, CREATED_AT)
      VALUES
        (COMMON_REMARKS_SEQ.NEXTVAL,
         V_ISMERGED_LOGISTIC_ID,
         'LOGISTICS',
         '合并发货',
         '合并发货，其中' || V_ISMERGED_LOGISTIC_ID || '被' || P_OLD_LOGISTIC_ID || '合并',
         P_ADMIN_ID,
         P_ADMIN_NAME,
         V_NOW);
    END LOOP;
  
    V_LOGISTIC_ID := P_OLD_LOGISTIC_ID;
    V_IS_MERGED   := 1;
    /**被合并的单子改为已被合并,拍品数量归零*/
    V_SQL := 'update logistics g set g.is_merged=' || V_IS_MERGED || ',g.items_count=0 where g.id in (' ||
             P_COMBINE_LOGISTIC_ID || ')';
    EXECUTE IMMEDIATE V_SQL;
  
    /**被合并的单子的明细外键改为主单的id*/
    V_SQL := 'update logistic_details d set d.logistic_id=' || P_OLD_LOGISTIC_ID || ' where d.logistic_id in (' ||
             P_COMBINE_LOGISTIC_ID || ')';
    EXECUTE IMMEDIATE V_SQL;
  
    /**主单加上被合并的单子的拍品数量*/
    V_SQL := 'update logistics gs set gs.items_count=' || P_ITMES_COUNT || ' where gs.id = (' || P_OLD_LOGISTIC_ID || ')';
    EXECUTE IMMEDIATE V_SQL;
  
    IF P_ADDRESS_ID = 0 THEN
      DELETE BOOKINGS B WHERE B.SOURCE_ID = P_OLD_LOGISTIC_ID;
    END IF;
  
    /**添加主单合并发货备注*/
    INSERT INTO COMMON_REMARKS
      (ID, SOURCE_ID, SOURCE_TYPE, CUSTOM_TYPE, CONTENT, ADMIN_ID, ADMIN_NAME, CREATED_AT)
    VALUES
      (COMMON_REMARKS_SEQ.NEXTVAL,
       P_OLD_LOGISTIC_ID,
       'LOGISTICS',
       '合并发货',
       P_OLD_LOGISTIC_ID || '合并' || P_COMBINE_LOGISTIC_ID || '发货',
       P_ADMIN_ID,
       P_ADMIN_NAME,
       V_NOW);
  END IF;
  COMMIT;
  RESULT_STATUS := 0;
END P_LOGISTIC_COMBINE_DELIVER;

 
/

-- ----------------------------
-- Procedure structure for P_LOGISTIC_COMBINE_DELIVER_2
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_LOGISTIC_COMBINE_DELIVER_2" (
                                                p_user_id          in number,   --客户编号
                                                p_old_logistic_id  in number,   --原发货单号
                                                p_order_ids        in varchar2,    --选择发货的交易单号
                                                p_combine_logistic_id in varchar, --合并发货单号
                                                p_refund_ids       in varchar,   --退货单号
                                                p_region_id        in number,   --发货地区
                                                p_logistic_type_id in number,   --发货方式
                                                p_address_id       in number,   --收货地址
                                                p_keepPrice        in number,   --保价额
                                                p_keepFee          in number,   --保价费
                                                p_itmes_count      in number,  --发货数量
                                                p_is_free          in number,  --是否免邮资
                                                p_deliver_type     in varchar,   --发货类型
                                                p_remarks          in varchar,  --备注
                                                p_admin_id         in number,
                                                p_admin_name       in varchar,
                                                v_logistic_id      out number,
                                                result_status      out number      --0.发货成功  1.暂缓成功  2.交易单状态已发生改变
                                                ) is

  /**
     作者:成玉芬
     日期:2011.08.08
     描述：交易单申请发货和合并发货 （后台调用）
  */
  v_sql        varchar2(10000);
  v_user_name  varchar2(225);
  v_is_merged  number:=0;         /*是否被合并*/
  v_logistic_status varchar2(225):='0';         /*0：待处理 1:已暂缓*/
  v_recevice_name varchar2(225);
  v_user_address varchar2(1000);   /*用户地址*/
  v_postcode  varchar2(225);      /*邮编*/
  v_tel       varchar2(225);      /*电话*/
  v_mobileTel varchar2(225);      /*手机*/
  v_logistic_detail_id number;
  v_freeze_num number(10);       --是否冻结
  v_refund_num number(10);      --是否申请退货
  v_send_num   number(10);      --是否申请发货
  v_delivery_num number(10);    --是否申请提货
  v_now  DATE := sysdate;
begin

  if p_user_id is not null then
     select case when true_name is null then nickname else true_name end true_name into v_user_name from users where id=p_user_id;
  end if;
  if p_address_id is not null and p_address_id!=0 then
     select ud.receive_name,ud.address,ud.postcode,ud.tel,ud.mobile_tel into v_recevice_name,v_user_address,v_postcode,v_tel,v_mobileTel
     from user_addresses ud where ud.id=p_address_id;
  else
         v_recevice_name:=v_user_name;
  end if;

  if p_order_ids is not null and p_refund_ids is null then
      /**交易单冻结个数*/
       v_sql := 'select count(1)  from user_orders where is_freeze = 1 and  id in (' || p_order_ids || ')';
      EXECUTE IMMEDIATE v_sql
        INTO v_freeze_num;

      /**已申请发货的交易单个数*/
      v_sql := 'select count(1)
                from user_orders o
                left join logistic_details d on o.logistic_detail_id = d.id
                left join v_wms_log_order_status_info g on d.logistic_id = g.logisticId
               where o.id in (' || p_order_ids || ')
                 and o.logistic_detail_id > 0
                 and g.logisticStatus != 6';
      EXECUTE IMMEDIATE v_sql
        INTO v_send_num;

      /**已申请提货的交易单个数*/
      v_sql := 'select count(1)
                from user_orders o
                join logistic_lading_details d on o.auction_id = d.auction_id
                left join v_wms_log_order_status_info g on d.logistic_lading_id =
                                                           g.logisticId
               where o.id in (' || p_order_ids || ')
                 and d.logistic_lading_id > 0
                 and g.logisticStatus != 6';
      EXECUTE IMMEDIATE v_sql
        INTO v_delivery_num;

     /**已申请退货且不为退货失败*/
     v_sql := 'select count(1)  from user_orders where id in (' || p_order_ids || ') and auction_id in
            (select ur.auction_id from user_refunds ur where (ur.id is not null and ur.status !=8))';
      EXECUTE IMMEDIATE v_sql
        INTO v_refund_num;
  end if;
  if p_order_ids is not null then
     if  v_freeze_num>0 or v_send_num>0 or v_delivery_num>0 or v_refund_num>0 then
         result_status:=2;
         return;
     else
      /*交易发货(不合并),如果交易单号不为空,则生成新的发货单*/
        select logistics_seq.nextval into v_logistic_id from dual;
        select logistic_details_seq.nextval into v_logistic_detail_id from dual;
        insert into logistics
          (id,user_id,user_name,region_id,logistic_type_id,user_address_id,address,postcode,tel,mobile_tel,
          keep_price,keep_fee,is_merged,items_count,is_free,status,remarks,admin_id,admin_name,created_at)
        values
          (v_logistic_id,p_user_id,v_recevice_name,p_region_id,p_logistic_type_id,p_address_id,v_user_address,v_postcode,v_tel,v_mobileTel,
          p_keepPrice,p_keepFee,v_is_merged,p_itmes_count,p_is_free,v_logistic_status,p_remarks,p_admin_id,p_admin_name,v_now);

        insert into logistic_details (id,logistic_id,old_logistic_id,user_id,keep_price,keep_fee,delivery_type,remarks,admin_id,admin_name,created_at)
         values (v_logistic_detail_id,v_logistic_id,v_logistic_id,p_user_id,p_keepPrice,p_keepFee,p_deliver_type,p_remarks,p_admin_id,p_admin_name,v_now);

         if p_refund_ids is not null then
             v_sql := 'update user_refunds o set o.logistic_detail_id = ' || v_logistic_detail_id || ' where o.id in ('||p_refund_ids||')';
             execute immediate v_sql;
         elsif p_refund_ids is null then
             v_sql := 'update user_orders o set o.logistic_detail_id = ' || v_logistic_detail_id || ' where o.id in ('||p_order_ids||')';
             execute immediate v_sql;
         end if;

      /*
          未生成发货单之前合并暂缓发货单(交易单合并其它暂缓发货单一起发货)
      */
        if p_combine_logistic_id is not null then
           v_is_merged:=1;
           /**被合并的单子改为已被合并,拍品数量归零*/
            v_sql := 'update logistics g set g.is_merged='||v_is_merged||',g.items_count=0 where g.id in ('||p_combine_logistic_id||')';
            EXECUTE IMMEDIATE v_sql;

            /**被合并的单子的明细外键改为主单的id*/
            v_sql := 'update logistic_details d set d.logistic_id='||v_logistic_id||' where d.logistic_id in ('||p_combine_logistic_id||')';
            EXECUTE IMMEDIATE v_sql;

            /**主单加上被合并的单子的拍品数量*/
            v_sql := 'update logistics gs set gs.items_count='||p_itmes_count||' where gs.id = ('||v_logistic_id||')';
            EXECUTE IMMEDIATE v_sql;
         end if;
     end if;
 end if;

  /*
  * 已生成的发货单合并其它暂缓的发货单提交合并发货
  */
  if p_combine_logistic_id is not null and p_order_ids is null then
     v_logistic_id := p_old_logistic_id;
     v_is_merged:=1;
     /**被合并的单子改为已被合并,拍品数量归零*/
     v_sql := 'update logistics g set g.is_merged='||v_is_merged||',g.items_count=0 where g.id in ('||p_combine_logistic_id||')';
     EXECUTE IMMEDIATE v_sql;

     /**被合并的单子的明细外键改为主单的id*/
     v_sql := 'update logistic_details d set d.logistic_id='||p_old_logistic_id||' where d.logistic_id in ('||p_combine_logistic_id||')';
     EXECUTE IMMEDIATE v_sql;

     /**主单加上被合并的单子的拍品数量*/
     v_sql := 'update logistics gs set gs.items_count='||p_itmes_count||' where gs.id = ('||p_old_logistic_id||')';
     EXECUTE IMMEDIATE v_sql;

     if p_address_id = 0 then
         delete bookings b where b.source_id=p_old_logistic_id;
     end if;
     /**添加合并发货备注*/
     insert into common_remarks
       (id,
        source_id,
        source_type,
        custom_type,
        content,
        admin_id,
        admin_name,
        created_at)
     values
       (common_remarks_seq.nextval,
        p_old_logistic_id,
        'LOGISTICS',
        '合并发货',
        p_old_logistic_id||'合并'||p_combine_logistic_id||'发货',
        p_admin_id,
        p_admin_name,
        v_now);
  end if;
  commit;
 result_status := 0;
end p_logistic_combine_deliver_2;


 
/

-- ----------------------------
-- Procedure structure for P_MARKETINDEX
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MARKETINDEX" as
begin
  /*
  行情指数数据统计
  作者:马磊
  */
  --指数
  insert into index_auction
    select *
      from (with aa as (
                        --每天每个志号的指数
                        select a.chi_no,
                                to_char(a.end_at, 'YYYY-MM-DD') end_at,
                                avg(a.bid * a.pre_month) index_,
                                decode(sum(a.auction_no), 0, 0, avg(a.bid)) bid,
                                decode(sum(a.auction_no), 0, 0, count(*)) cn
                          from stamp_data a, index_forum b
                         where a.chi_no = b.chi_no
                           and b.IS_INDEX_SAMPLE = 1
                           and b.forum_id in (1, 2, 3,4)
                           and a.end_at >=
                               (select max(a.index_time) + 1
                                  from index_auction a
                                 where a.forum_id = 'all')
                         group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD')),
           --每天所有志号指数
           bb as (select aa.end_at,
                         sum(aa.index_) index_all,
                         sum(aa.bid) bid_all,
                         sum(aa.cn) amount
                    from aa
                   group by aa.end_at),
           --统计贡献度超出10% 需要去除的部分
           cc as (select aaa.end_at, sum(aaa.index_sub) index_sub
                    from (select bb.end_at,
                                 aa.chi_no,
                                 aa.index_,
                                 bb.index_all,
                                 aa.index_ / bb.index_all index_per,
                                 aa.index_ - bb.index_all * 0.1 index_sub
                            from aa, bb
                           where aa.end_at = bb.end_at
                             and aa.index_ / bb.index_all > 0.1) aaa
                   group by aaa.end_at),
             dd as (
              --第一天的所有志号指数
              select to_char(a.end_at, 'YYYY-MM-DD') end_at,
                      avg(a.bid * a.pre_month) index_
                from stamp_data a, index_forum b
               where a.chi_no = b.chi_no
                 and b.is_sample = 1
                 and b.forum_id in (1, 2, 3)
                 and to_char(a.end_at, 'YYYY-MM-DD')='2008-01-01'
               group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD'))
               
             select to_date(bb.end_at, 'YYYY-MM-DD'),
                    (bb.index_all - nvl(cc.index_sub, 0)) * 100 /
                    (select sum(dd.index_) index_all
                       from dd) AUCTION_INDEX,
                    100 CATEGORIES,
                    'all' FORUM_ID,
                    bb.bid_all BID_AMOUNT,
                    bb.amount CN_AMOUNT
               from cc, bb
              where bb.end_at = cc.end_at(+)
              order by bb.end_at);


  insert into index_auction
    select *
      from (with aa as (
                        --每天每个志号的指数
                        select a.chi_no,
                                to_char(a.end_at, 'YYYY-MM-DD') end_at,
                                avg(a.bid * a.pre_month) index_,
                                decode(sum(a.auction_no), 0, 0, avg(a.bid)) bid,
                                decode(sum(a.auction_no), 0, 0, count(*)) cn
                          from stamp_data a, index_forum b
                         where a.chi_no = b.chi_no
                           and b.is_sample = 1
                           and b.forum_id in (1)
                           and a.end_at >=
                               (select max(a.index_time) + 1
                                  from index_auction a
                                 where a.forum_id = '1')
                         group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD')),
           --每天所有志号指数
           bb as (select aa.end_at,
                         sum(aa.index_) index_all,
                         sum(aa.bid) bid_all,
                         sum(aa.cn) amount
                    from aa
                   group by aa.end_at),
           --统计贡献度超出10% 需要去除的部分
           cc as (select aaa.end_at, sum(aaa.index_sub) index_sub
                    from (select bb.end_at,
                                 aa.chi_no,
                                 aa.index_,
                                 bb.index_all,
                                 aa.index_ / bb.index_all index_per,
                                 aa.index_ - bb.index_all * 0.1 index_sub
                            from aa, bb
                           where aa.end_at = bb.end_at
                             and aa.index_ / bb.index_all > 0.1) aaa
                   group by aaa.end_at),
             dd as (
              --第一天的所有志号指数
              select to_char(a.end_at, 'YYYY-MM-DD') end_at,
                      avg(a.bid * a.pre_month) index_
                from stamp_data a, index_forum b
               where a.chi_no = b.chi_no
                 and b.is_sample = 1
                 and b.forum_id in (1, 2, 3)
                 and to_char(a.end_at, 'YYYY-MM-DD')='2008-01-01'
               group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD'))
               
             select to_date(bb.end_at, 'YYYY-MM-DD'),
                    (bb.index_all - nvl(cc.index_sub, 0)) * 100 /
                    (select sum(dd.index_) index_all
                       from dd) AUCTION_INDEX,
                    100 CATEGORIES,
                    1 FORUM_ID,
                    bb.bid_all BID_AMOUNT,
                    bb.amount CN_AMOUNT
               from cc, bb
              where bb.end_at = cc.end_at(+)
              order by bb.end_at);


  insert into index_auction
    select *
      from (with aa as (
                        --每天每个志号的指数
                        select a.chi_no,
                                to_char(a.end_at, 'YYYY-MM-DD') end_at,
                                avg(a.bid * a.pre_month) index_,
                                decode(sum(a.auction_no), 0, 0, avg(a.bid)) bid,
                                decode(sum(a.auction_no), 0, 0, count(*)) cn
                          from stamp_data a, index_forum b
                         where a.chi_no = b.chi_no
                           and b.is_sample = 1
                           and b.forum_id in (2)
                           and a.end_at >=
                               (select max(a.index_time) + 1
                                  from index_auction a
                                 where a.forum_id = '2')
                         group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD')),
           --每天所有志号指数
           bb as (select aa.end_at,
                         sum(aa.index_) index_all,
                         sum(aa.bid) bid_all,
                         sum(aa.cn) amount
                    from aa
                   group by aa.end_at),
           --统计贡献度超出10% 需要去除的部分
           cc as (select aaa.end_at, sum(aaa.index_sub) index_sub
                    from (select bb.end_at,
                                 aa.chi_no,
                                 aa.index_,
                                 bb.index_all,
                                 aa.index_ / bb.index_all index_per,
                                 aa.index_ - bb.index_all * 0.1 index_sub
                            from aa, bb
                           where aa.end_at = bb.end_at
                             and aa.index_ / bb.index_all > 0.1) aaa
                   group by aaa.end_at),
             dd as (
              --第一天的所有志号指数
              select to_char(a.end_at, 'YYYY-MM-DD') end_at,
                      avg(a.bid * a.pre_month) index_
                from stamp_data a, index_forum b
               where a.chi_no = b.chi_no
                 and b.is_sample = 1
                 and b.forum_id in (1, 2, 3)
                 and to_char(a.end_at, 'YYYY-MM-DD')='2008-01-01'
               group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD'))
             select to_date(bb.end_at, 'YYYY-MM-DD'),
                    (bb.index_all - nvl(cc.index_sub, 0)) * 100 /
                    (select sum(dd.index_) index_all
                       from dd) AUCTION_INDEX,
                    100 CATEGORIES,
                    2 FORUM_ID,
                    bb.bid_all BID_AMOUNT,
                    bb.amount CN_AMOUNT
               from cc, bb
              where bb.end_at = cc.end_at(+)
              order by bb.end_at);


  insert into index_auction
    select *
      from (with aa as (
                        --每天每个志号的指数
                        select a.chi_no,
                                to_char(a.end_at, 'YYYY-MM-DD') end_at,
                                avg(a.bid * a.pre_month) index_,
                                decode(sum(a.auction_no), 0, 0, avg(a.bid)) bid,
                                decode(sum(a.auction_no), 0, 0, count(*)) cn
                          from stamp_data a, index_forum b
                         where a.chi_no = b.chi_no
                           and b.is_sample = 1
                           and b.forum_id in (3)
                           and a.end_at >=
                               (select max(a.index_time) + 1
                                  from index_auction a
                                 where a.forum_id = '3')
                         group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD')),
           --每天所有志号指数
           bb as (select aa.end_at,
                         sum(aa.index_) index_all,
                         sum(aa.bid) bid_all,
                         sum(aa.cn) amount
                    from aa
                   group by aa.end_at),
           --统计贡献度超出10% 需要去除的部分
           cc as (select aaa.end_at, sum(aaa.index_sub) index_sub
                    from (select bb.end_at,
                                 aa.chi_no,
                                 aa.index_,
                                 bb.index_all,
                                 aa.index_ / bb.index_all index_per,
                                 aa.index_ - bb.index_all * 0.1 index_sub
                            from aa, bb
                           where aa.end_at = bb.end_at
                             and aa.index_ / bb.index_all > 0.1) aaa
                   group by aaa.end_at),
             dd as (
              --第一天的所有志号指数
              select to_char(a.end_at, 'YYYY-MM-DD') end_at,
                      avg(a.bid * a.pre_month) index_
                from stamp_data a, index_forum b
               where a.chi_no = b.chi_no
                 and b.is_sample = 1
                 and b.forum_id in (1, 2, 3)
                 and to_char(a.end_at, 'YYYY-MM-DD')='2008-01-01'
               group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD'))
               
             select to_date(bb.end_at, 'YYYY-MM-DD'),
                    (bb.index_all - nvl(cc.index_sub, 0)) * 100 /
                    (select sum(dd.index_) index_all
                       from dd) AUCTION_INDEX,
                    100 CATEGORIES,
                    3 FORUM_ID,
                    bb.bid_all BID_AMOUNT,
                    bb.amount CN_AMOUNT
               from cc, bb
              where bb.end_at = cc.end_at(+)
              order by bb.end_at);

insert into index_auction
    select *
      from (with aa as (
                        --每天每个志号的指数
                        select a.chi_no,
                                to_char(a.end_at, 'YYYY-MM-DD') end_at,
                                avg(a.bid * a.pre_month) index_,
                                decode(sum(a.auction_no), 0, 0, avg(a.bid)) bid,
                                decode(sum(a.auction_no), 0, 0, count(*)) cn
                          from stamp_data a, index_forum b
                         where a.chi_no = b.chi_no
                           and b.is_sample = 1
                           and b.forum_id in (4)
                           and a.end_at >=
                               (select max(a.index_time) + 1
                                  from index_auction a
                                 where a.forum_id = '4')
                         group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD')),
           --每天所有志号指数
           bb as (select aa.end_at,
                         sum(aa.index_) index_all,
                         sum(aa.bid) bid_all,
                         sum(aa.cn) amount
                    from aa
                   group by aa.end_at),
           --统计贡献度超出10% 需要去除的部分
           cc as (select aaa.end_at, sum(aaa.index_sub) index_sub
                    from (select bb.end_at,
                                 aa.chi_no,
                                 aa.index_,
                                 bb.index_all,
                                 aa.index_ / bb.index_all index_per,
                                 aa.index_ - bb.index_all * 0.1 index_sub
                            from aa, bb
                           where aa.end_at = bb.end_at
                             and aa.index_ / bb.index_all > 0.1) aaa
                   group by aaa.end_at),
             dd as (
              --第一天的所有志号指数
              select to_char(a.end_at, 'YYYY-MM-DD') end_at,
                      avg(a.bid * a.pre_month) index_
                from stamp_data a, index_forum b
               where a.chi_no = b.chi_no
                 and b.is_sample = 1
                 and b.forum_id in (1, 2, 3)
                 and to_char(a.end_at, 'YYYY-MM-DD')='2008-01-01'
               group by a.chi_no, to_char(a.end_at, 'YYYY-MM-DD'))
               
             select to_date(bb.end_at, 'YYYY-MM-DD'),
                    (bb.index_all - nvl(cc.index_sub, 0)) * 100 /
                    (select sum(dd.index_) index_all
                       from dd) AUCTION_INDEX,
                    100 CATEGORIES,
                    4 FORUM_ID,
                    bb.bid_all BID_AMOUNT,
                    bb.amount CN_AMOUNT
               from cc, bb
              where bb.end_at = cc.end_at(+)
              order by bb.end_at);

  commit;

  --行情
  insert into quotations_auction
    (quotation_time, chi_no, avg_bid, amount, max_bid, min_bid)
    select to_date(to_char(a.end_at, 'YYYY-MM-DD'), 'YYYY-MM-DD'),
           a.chi_no,
           avg(a.bid) avg_bid,
           decode(sum(a.auction_no), 0, 0, count(*)) amount,
           max(a.bid) avg_bid,
           min(a.bid) avg_bid
      from stamp_data a
     where a.end_at >=
           (select max(a.QUOTATION_TIME) + 1 from quotations_auction a)
     group by to_char(a.end_at, 'YYYY-MM-DD'), a.chi_no
     order by to_char(a.end_at, 'YYYY-MM-DD'), a.chi_no;

  --增加冗余字段 志号id
  update quotations_auction a
     set a.classes_id =
         (select max(b.id)
            from classes b
           where a.chi_no = b.chi_no
           group by b.chi_no
          having count(*) = 1)
   where exists (select 1 from classes b where a.chi_no = b.chi_no)
     and a.classes_id is null;
  commit;

end p_marketindex;

 
/

-- ----------------------------
-- Procedure structure for P_MARKETINDEX_EVERYDAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MARKETINDEX_EVERYDAY" as
  v_bid         NUMBER(38) := 0;
  v_keyProperty NUMBER(38);
  v_pre_month   VARCHAR2(255);
  v_pre_6month  VARCHAR2(255);
  cursor c_choose is
    select a.bid,
           a.end_at,
           a.chi_no,
           floor(sysdate - a.end_at) interval_date
      from stamp_data_everyday a
     where (a.chi_no, a.end_at) in
           (select b.chi_no, min(b.end_at)
              from stamp_data_everyday b
             group by b.chi_no);
begin
  /*
  行情指数基数数据补足
  作者:马磊
  */

  --计算前一天的前12个月的成交
  update stamp_data_everyday d
     set d.pre_month =
         (select nvl((select count(*)
                       from stamp_data_everyday a
                      where a.end_at >= sysdate - 365
                        and a.end_at <= sysdate
                        and a.chi_no = c.chi_no
                        and a.auction_no != 0
                      GROUP BY a.chi_no),
                     0) cn
            from stamp_data_everyday c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
   where exists (select 1
            from stamp_data_everyday c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
     and d.end_at = trunc(sysdate - 1, 'dd');
  commit;
  --计算前一天的前6个月的成交
  update stamp_data_everyday d
     set d.pre_6month =
         (select nvl((select count(*)
                       from stamp_data_everyday a
                      where a.end_at >= sysdate - 182
                        and a.end_at <= sysdate
                        and a.chi_no = c.chi_no
                        and a.auction_no != 0
                      GROUP BY a.chi_no),
                     0) cn
            from stamp_data_everyday c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
   where exists (select 1
            from stamp_data_everyday c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
     and d.end_at = trunc(sysdate - 1, 'dd');
  commit;
  --补足每一天成交数据
  for c_row in c_choose loop
        /*dbms_output.put_line(c_row.bid || '-' || c_row.end_at || '-' ||
    c_row.chi_no || '-' || c_row.interval_date);*/
    for i in 0 .. c_row.interval_date - 1 loop
      begin
        select avg(bid) bid,
               max(keyProperty),
               max(pre_month),
               max(pre_6month)
          into v_bid, v_keyProperty, v_pre_month, v_pre_6month
          from stamp_data_everyday
         where chi_no = c_row.chi_no
           and TRUNC(end_at) = TRUNC(c_row.end_at + i)
         group by to_char(end_at, 'YYYY-MM-DD'), CHI_NO;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          --没有找到下一条 插入新数据
          insert into stamp_data_everyday
            (END_AT, BID, CHI_NO, keyProperty, pre_month, pre_6month)
          values
            (TRUNC(c_row.end_at + i),
             v_bid,
             c_row.chi_no,
             v_keyProperty,
             v_pre_month,
             v_pre_6month);
          commit;
      end;
    end loop;
  end loop;
end p_marketindex_everyday;

 
/

-- ----------------------------
-- Procedure structure for P_MARKETINDEX_HIS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MARKETINDEX_HIS" as
  v_bid         NUMBER(38) := 0;
  v_keyProperty NUMBER(38);
  v_pre_month   VARCHAR2(255);
  v_pre_6month  VARCHAR2(255);
  cursor c_choose is
    select a.bid,
           a.end_at,
           a.chi_no,
           floor(sysdate - a.end_at) interval_date
      from stamp_data a
     where (a.chi_no, a.end_at) in
           (select b.chi_no, max(b.end_at)
              from stamp_data b
             group by b.chi_no);
begin
  /*
  行情指数基数数据补足
  作者:马磊
  */

  --计算前一天的前12个月的成交
  update stamp_data d
     set d.pre_month =
         (select nvl((select count(*)
                       from stamp_data a
                      where a.end_at >= sysdate - 365
                        and a.end_at <= sysdate
                        and a.chi_no = c.chi_no
                        and a.auction_no != 0
                      GROUP BY a.chi_no),
                     0) cn
            from stamp_data c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
   where exists (select 1
            from stamp_data c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
     and d.end_at = trunc(sysdate - 1, 'dd');
  commit;
  --计算前一天的前6个月的成交
  update stamp_data d
     set d.pre_6month =
         (select nvl((select count(*)
                       from stamp_data a
                      where a.end_at >= sysdate - 182
                        and a.end_at <= sysdate
                        and a.chi_no = c.chi_no
                        and a.auction_no != 0
                      GROUP BY a.chi_no),
                     0) cn
            from stamp_data c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
   where exists (select 1
            from stamp_data c
           where c.auction_no != 0
             and d.auction_no = c.auction_no)
     and d.end_at = trunc(sysdate - 1, 'dd');
  commit;
  --补足每一天成交数据
  for c_row in c_choose loop
    /*    dbms_output.put_line(c_row.bid || '-' || c_row.end_at || '-' ||
    c_row.chi_no || '-' || c_row.interval_date);*/
    for i in 0 .. c_row.interval_date - 1 loop
      begin
        select avg(bid) bid,
               max(keyProperty),
               max(pre_month),
               max(pre_6month)
          into v_bid, v_keyProperty, v_pre_month, v_pre_6month
          from stamp_data
         where chi_no = c_row.chi_no
           and TRUNC(end_at) = TRUNC(c_row.end_at + i)
         group by to_char(end_at, 'YYYY-MM-DD'), CHI_NO;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          --没有找到下一条 插入新数据
          insert into stamp_data
            (END_AT, BID, CHI_NO, keyProperty, pre_month, pre_6month)
          values
            (TRUNC(c_row.end_at + i),
             v_bid,
             c_row.chi_no,
             v_keyProperty,
             v_pre_month,
             v_pre_6month);
          commit;
      end;
    end loop;
  end loop;
end p_marketindex_his;

 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_MOBILE_ALL
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_MESSAGE_MOBILE_ALL"(p_content      in varchar2, --内容
                                                 p_gateway      in varchar2, --短信网关
                                                 p_sentAt       in date, --发送时间
                                                 p_op           in varchar2, --发送人
                                                 p_status       in varchar2, --状态
                                                 p_userLang     in varchar2, --用户语言
                                                 p_departmentId in number --部门ID
                                                 ) is
  /**
     作者:魏涛
     日期:2012.3.10
     描述：发送所有用户手机短信(后台调用)
  */
  --定义查询多个客户ID的游标
  cursor message_customer_id is
    select distinct min(us.id) as id, us.true_name, ud.mobile_tel
      from users us
      join user_details ud
        on us.id = ud.user_id
       and us.user_lang = p_userLang
     where ud.mobile_tel is not null
     group by ud.mobile_tel, us.true_name;

begin
  for result_row in message_customer_id loop
    insert into sms
      (ID,
       PHONE_NUMBER,
       CONTENT,
       GATEWAY,
       USER_ID,
       USER_NAME,
       MESSAGE_TYPE,
       SEND_TYPE,
       SENT_AT,
       OP,
       STATUS,
       DEPARTMENT_ID,
       CREATED_AT)
    values
      (SMS_SEQ.nextval,
       result_row.mobile_tel,
       p_content,
       p_gateway,
       result_row.id,
       result_row.true_name,
       '1',
       '1',
       p_sentAt,
       p_op,
       p_status,
       p_departmentId,
       sysdate);
  end loop;
end p_message_mobile_all;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_MOBILE_BY_CATEGORY
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_MESSAGE_MOBILE_BY_CATEGORY"(p_content      in varchar2, --内容
                                                         p_gateway      in varchar2, --短信网关
                                                         p_sentAt       in date, --发送时间
                                                         p_op           in varchar2, --发送人
                                                         p_status       in varchar2, --状态
                                                         p_categoryId   in number, --分类Id
                                                         p_userLang     in varchar2, --用户语言
                                                         p_departmentId in number --部门ID
                                                         ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：手机发短信中按分类发送用户手机短信(后台调用)
  */
  --定义查询多个客户的信息游标
  cursor message_user_id_by_category is
    select distinct min(us.id) as id, us.true_name, ud.mobile_tel
      from (select id
              from auction_categories
             start with id = p_categoryId
            connect by prior id = parent_id) ac
      join auctions au
        on au.auction_category_id = ac.id
      join auction_prices ap
        on au.id = ap.auction_id
      join users us
        on us.id = ap.user_id
       and us.user_lang = p_userLang
      join user_details ud
        on ud.user_id = us.id
     where ud.mobile_tel is not null
     group by ud.mobile_tel, us.true_name;

begin
  for result_row in message_user_id_by_category loop
    insert into sms
      (ID,
       PHONE_NUMBER,
       CONTENT,
       GATEWAY,
       USER_ID,
       USER_NAME,
       MESSAGE_TYPE,
       SEND_TYPE,
       SENT_AT,
       OP,
       STATUS,
       DEPARTMENT_ID,
       CREATED_AT)
    values
      (SMS_SEQ.nextval,
       result_row.mobile_tel,
       p_content,
       p_gateway,
       result_row.id,
       result_row.true_name,
       '1',
       '1',
       p_sentAt,
       p_op,
       p_status,
       p_departmentId,
       sysdate);
  end loop;
end p_message_mobile_by_category;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_MOBILE_BY_LEVEL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MESSAGE_MOBILE_BY_LEVEL"(p_content      in varchar2, --内容
                                                        p_gateway      in varchar2, --短信网关
                                                        p_sentAt       in date, --发送时间
                                                        p_op           in varchar2, --发送人
                                                        p_buyLevel     in number, --竞买等级
                                                        p_sellLevel    in number, --委托等级
                                                        p_overLevel    in number, --及以上等级
                                                        p_departmentId in number --部门ID
                                                        ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：手机短信按等级条件发送所有用户(后台调用)
     下面游标中出现的0和20是传进来的默认值（当页面上没有选择的时候的值）
  */
  --定义查询多个客户的信息游标
  cursor message_user_id_by_level is
    select distinct min(us.id) as id, us.true_name, ud.mobile_tel
      from users us
      join user_details ud
        on us.id = ud.user_id
       and ud.mobile_tel is not null
     where (p_overLevel = 0 and p_sellLevel = 20 and p_buyLevel <> 20 and
           us.buy_level = p_buyLevel)
        or (p_overLevel = 0 and p_buyLevel = 20 and p_sellLevel <> 20 and
           us.sell_level = p_sellLevel)
        or (p_overLevel = 0 and p_buyLevel <> 20 and p_sellLevel <> 20 and
           us.sell_level = p_sellLevel and us.buy_level = p_buyLevel)
        or (p_overLevel <> 0 and p_sellLevel <> 20 and p_buyLevel <> 20 and
           us.buy_level >= p_buyLevel and us.sell_level >= p_sellLevel)
        or (p_overLevel <> 0 and p_sellLevel <> 20 and p_buyLevel = 20 and
           us.sell_level >= p_sellLevel)
        or (p_overLevel <> 0 and p_sellLevel = 20 and p_buyLevel <> 20 and
           us.buy_level >= p_buyLevel)
     group by ud.mobile_tel, us.true_name;

begin
  for result_row in message_user_id_by_level loop
    insert into sms
      (ID,
       PHONE_NUMBER,
       CONTENT,
       GATEWAY,
       USER_ID,
       USER_NAME,
       MESSAGE_TYPE,
       SEND_TYPE,
       SENT_AT,
       OP,
       STATUS,
       DEPARTMENT_ID,
       CREATED_AT)
    values
      (SMS_SEQ.nextval,
       result_row.mobile_tel,
       p_content,
       p_gateway,
       result_row.id,
       result_row.true_name,
       '1',
       '1',
       p_sentAt,
       p_op,
       '1',
       p_departmentId,
       sysdate);
  end loop;
end p_message_mobile_by_level;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_MOBILE_BY_SPECIAL
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_MESSAGE_MOBILE_BY_SPECIAL"(p_content      in varchar2, --内容
                                                        p_gateway      in varchar2, --短信网关
                                                        p_sentAt       in date, --发送时间
                                                        p_op           in varchar2, --发送人
                                                        p_status       in varchar2, --状态
                                                        p_specialId    in number, --专场Id
                                                        p_userLang     in varchar2, --用户语言
                                                        p_departmentId in number --部门ID
                                                        ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：按专场发送用户手机短信(后台调用)
  */
  --定义查询多个客户的信息游标
  cursor message_user_id_by_special is
    select distinct min(us.id) as id, us.true_name, ud.mobile_tel
      from auction_prices ap
      join auctions au
        on ap.auction_id = au.id
      join auction_special_topics ast
        on au.auction_special_topic_id = ast.id
       and ast.id = p_specialId
      join users us
        on ap.user_id = us.id
       and us.user_lang = p_userLang
      join user_details ud
        on ud.user_id = us.id
     where ud.mobile_tel is not null
     group by ud.mobile_tel, us.true_name;

begin
  for result_row in message_user_id_by_special loop
    insert into sms
      (ID,
       PHONE_NUMBER,
       CONTENT,
       GATEWAY,
       USER_ID,
       USER_NAME,
       MESSAGE_TYPE,
       SEND_TYPE,
       SENT_AT,
       OP,
       STATUS,
       DEPARTMENT_ID,
       CREATED_AT)
    values
      (SMS_SEQ.nextval,
       result_row.mobile_tel,
       p_content,
       p_gateway,
       result_row.id,
       result_row.true_name,
       '1',
       '1',
       p_sentAt,
       p_op,
       p_status,
       p_departmentId,
       sysdate);
  end loop;
end p_message_mobile_by_special;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_SEND_ALL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MESSAGE_SEND_ALL" (p_subject_id in number,  --主题id
                                               p_msgFrom  in varchar2, --发件人
                                               p_fromId   in number, --发件人ID
                                               p_userLang in varchar2, --用户语言
                                               p_createdAt in date --发送时间
                                               ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：发送所有用户  (后台调用)
  */
  v_split          VARCHAR2(2) := ','; --定义逗号分隔符
  --定义查询多个客户ID的游标
  cursor message_customer_id is
      select id from users
            where instr(v_split ||p_userLang || v_split, v_split || user_lang || v_split) > 0;
begin
  for result_row in message_customer_id loop
     insert into message_market_userdetails(id,subject_id,to_userid,msg_status,msg_type,is_receive_del,op,created_at)
      values (message_market_userdetails_seq.nextval,p_subject_id,result_row.id,'0','0','0',p_msgFrom,p_createdAt);
    /*insert into messages
      (ID,
       SUBJECT,
       CONTENT,
       PARENT_ID,
       MSG_FROM,
       FROM_ID,
       TO_ID,
       MSG_STATUS,
       MSG_TYPE,
       IS_SEND_DEL,
       IS_RECEIVE_DEL,
       TRANSACT_STATUS,
       APP_ID,
       CREATED_AT)
    values
      (MESSAGES_SEQ.nextval,
       p_subject,
       p_content,
       0,
       p_msgFrom,
       P_fromId,
       result_row.id,
       '0',
       '0',
       0,
       0,
       '0',
       '0',
       p_createdAt);*/
  end loop;
end p_message_send_all;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_SEND_ALL_TEST
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_MESSAGE_SEND_ALL_TEST"(p_subject  in varchar2, --主题
                                               p_content  in varchar2, --内容
                                               p_msgFrom  in varchar2, --发件人
                                               p_fromId   in number, --发件人ID
                                               p_userLang in varchar2, --用户语言
                                               p_createdAt in date --发送时间
                                               ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：发送所有用户  (后台调用)
  */
  --定义查询多个客户ID的游标
  cursor message_customer_id is
    select id from users where user_lang = p_userLang;
begin
  for result_row in message_customer_id loop
    insert into messages
      (ID,
       SUBJECT,
       CONTENT,
       PARENT_ID,
       MSG_FROM,
       FROM_ID,
       TO_ID,
       MSG_STATUS,
       MSG_TYPE,
       IS_SEND_DEL,
       IS_RECEIVE_DEL,
       TRANSACT_STATUS,
       APP_ID,
       CREATED_AT)
    values
      (MESSAGES_SEQ.nextval,
       p_subject,
       p_content,
       0,
       p_msgFrom,
       P_fromId,
       result_row.id,
       '0',
       '0',
       0,
       0,
       '0',
       '0',
       p_createdAt);
  end loop;
end p_message_send_all_test;

 
 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_SEND_BY_CATEGORY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MESSAGE_SEND_BY_CATEGORY" (p_subject_id    in number, --主题
                                                       /*p_content    in varchar2, --内容*/
                                                       p_msgFrom    in varchar2, --收件人
                                                       p_fromId     in number, --收件人ID
                                                       p_categoryId in number, --分类ID
                                                       p_userLang   in varchar2, --用户语言
                                                       p_createdAt  in date --发送时间
                                                       ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：按分类的客户发送所有用户(后台调用)
  */
  --定义查询多个客户ID的游标
  cursor message_user_id_by_category is
    select distinct us.id
      from (select id
              from auction_categories
             start with id = p_categoryId
            connect by prior id = parent_id) ac
      join auctions au
        on au.auction_category_id = ac.id
      join auction_prices ap
        on au.id = ap.auction_id
      join users us
        on us.id = ap.user_id
       and us.user_lang = p_userLang;

begin
  for result_row in message_user_id_by_category loop
      insert into message_market_userdetails(id,subject_id,to_userid,msg_status,msg_type,is_receive_del,op,created_at)
      values (message_market_userdetails_seq.nextval,p_subject_id,result_row.id,'0','0','0',p_msgFrom,p_createdAt);
    /*insert into messages
      (ID,
       SUBJECT,
       CONTENT,
       PARENT_ID,
       MSG_FROM,
       FROM_ID,
       TO_ID,
       MSG_STATUS,
       MSG_TYPE,
       IS_SEND_DEL,
       IS_RECEIVE_DEL,
       TRANSACT_STATUS,
       APP_ID,
       CREATED_AT)
    values
      (MESSAGES_SEQ.nextval,
       p_subject,
       p_content,
       0,
       p_msgFrom,
       P_fromId,
       result_row.id,
       '0',
       '0',
       0,
       0,
       '0',
       '0',
       p_createdAt);*/
  end loop;
end p_message_send_by_category;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_SEND_BY_LEVEL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MESSAGE_SEND_BY_LEVEL" (p_subject_id   in number, --主题
                                                      /*p_content   in varchar2, --内容*/
                                                      p_msgFrom   in varchar2, --收件人
                                                      p_fromId    in number, --收件人ID
                                                      p_buyLevel  in number, --竞买方
                                                      p_sellLevel in number, --委托方
                                                      p_overLevel in number, --以上全部等级
                                                      p_createdAt in date --发送时间
                                                      ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：按等级条件发送所有用户(后台调用)
  */
  --定义查询多个客户ID的游标
  cursor message_user_id_by_level is
    select id
      from users us
     where (p_overLevel = 0 and p_sellLevel = 20 and p_buyLevel <> 20 and
           us.buy_level = p_buyLevel)
        or (p_overLevel = 0 and p_buyLevel = 20 and p_sellLevel <> 20 and
           us.sell_level = p_sellLevel)
        or (p_overLevel = 0 and p_buyLevel <> 20 and p_sellLevel <> 20 and
           us.sell_level = p_sellLevel and us.buy_level = p_buyLevel)
        or (p_overLevel <> 0 and p_sellLevel <> 20 and p_buyLevel <> 20 and
           us.buy_level >= p_buyLevel and us.sell_level >= p_sellLevel)
        or (p_overLevel <> 0 and p_sellLevel <> 20 and p_buyLevel = 20 and
           us.sell_level >= p_sellLevel)
        or (p_overLevel <> 0 and p_sellLevel = 20 and p_buyLevel <> 20 and
           us.buy_level >= p_buyLevel);

begin
  for result_row in message_user_id_by_level loop
      insert into message_market_userdetails(id,subject_id,to_userid,msg_status,msg_type,is_receive_del,op,created_at)
      values (message_market_userdetails_seq.nextval,p_subject_id,result_row.id,'0','0','0',p_msgFrom,p_createdAt);
    /*insert into messages
      (ID,
       SUBJECT,
       CONTENT,
       PARENT_ID,
       MSG_FROM,
       FROM_ID,
       TO_ID,
       MSG_STATUS,
       MSG_TYPE,
       IS_SEND_DEL,
       IS_RECEIVE_DEL,
       TRANSACT_STATUS,
       APP_ID,
       CREATED_AT)
    values
      (MESSAGES_SEQ.nextval,
       p_subject,
       p_content,
       0,
       p_msgFrom,
       P_fromId,
       result_row.id,
       '0',
       '0',
       0,
       0,
       '0',
       '0',
       p_createdAt);*/
  end loop;
end p_message_send_by_level;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_SEND_BY_SPECIAL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MESSAGE_SEND_BY_SPECIAL" (p_subject_id   in number, --主题
                                                     /* p_content   in varchar2, --内容*/
                                                      p_msgFrom   in varchar2, --收件人
                                                      p_fromId    in number, --收件人ID
                                                      p_specialId in number, --专场ID
                                                      p_userLang  in varchar2, --用户语言
                                                      p_createdAt in date --发送时间
                                                      ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：按专场发送所有用户(后台调用)
  */
  --定义查询多个客户ID的游标
  cursor message_user_id_by_special is
    select distinct us.id
      from auction_prices ap
      join auctions au
        on ap.auction_id = au.id
      join auction_special_topics ast
        on au.auction_special_topic_id = ast.id
       and ast.id = p_specialId
      join users us
        on ap.user_id = us.id
       and us.user_lang = p_userLang;
begin
  for result_row in message_user_id_by_special loop
      insert into message_market_userdetails(id,subject_id,to_userid,msg_status,msg_type,is_receive_del,op,created_at)
      values (message_market_userdetails_seq.nextval,p_subject_id,result_row.id,'0','0','0',p_msgFrom,p_createdAt);
    /*insert into messages
      (ID,
       SUBJECT,
       CONTENT,
       PARENT_ID,
       MSG_FROM,
       FROM_ID,
       TO_ID,
       MSG_STATUS,
       MSG_TYPE,
       IS_SEND_DEL,
       IS_RECEIVE_DEL,
       TRANSACT_STATUS,
       APP_ID,
       CREATED_AT)
    values
      (MESSAGES_SEQ.nextval,
       p_subject,
       p_content,
       0,
       p_msgFrom,
       P_fromId,
       result_row.id,
       '0',
       '0',
       0,
       0,
       '0',
       '0',
       p_createdAt);*/
  end loop;
end p_message_send_by_special;


 
/

-- ----------------------------
-- Procedure structure for P_MESSAGE_UPLOAD_ATTACHMENTS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_MESSAGE_UPLOAD_ATTACHMENTS" (p_filePath     in varchar2, --附件路径
                                                         p_fileSize     in varchar2, --附件大小
                                                         p_originalName in varchar2, --附件名称
                                                         p_url  in varchar2, --URL
                                                         p_createdAt    in date --发送时间
                                                         ) is
  /**
     作者:魏涛
     日期:2012.3.8
     描述：发送站内信的附件(后台调用)
  */

  --定义查询站内信ID的游标
  cursor message_id is
    select me.id from messages me where me.created_at = p_createdAt;
begin
  for result_row in message_id loop
    insert into ATTACHMENTS
      (ID, MESSAGE_ID, FILE_PATH, FILE_SIZE, ORIGINAL_NAME,URL, CREATED_AT)
    values
      (ATTACHMENTS_SEQ.nextval,
       result_row.id,
       p_filePath,
       p_fileSize,
       p_originalName,
       p_url,
       p_createdAt);
  end loop;
end P_MESSAGE_UPLOAD_ATTACHMENTS;


 
/

-- ----------------------------
-- Procedure structure for P_PAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PAY"
(
	p_user_id              NUMBER,
	p_pay_password         VARCHAR,
	p_goods_id             NUMBER,
  p_goods_price          NUMBER,
	RESULT_STATUS          OUT NUMBER
	/*
                       作者：  Dwen
                       日期：  2013-09-26
                       描述：  支付
                       参数说明：
                       p_user_id : 当前用户ID
                       p_pay_password :支付密码
                       p_goods_id      :商品id
                       
                  */
) IS
	v_account NUMBER;
	v_total_account NUMBER;
  v_pay_password  VARCHAR(1000);
  v_user_name     VARCHAR(1000);
  v_goods_no      NUMBER;
	v_goods_name    VARCHAR(1000);
	v_market_price  NUMBER;
	v_goods_price   NUMBER;
  v_goods_num     NUMBER;
BEGIN
  BEGIN
  /* 判断用户账户金额*/
  SELECT ACCOUNT,TOTAL_ACCOUNT,USER_NAME,PAY_PASSWORD INTO v_account,v_total_account,v_user_name,v_pay_password 
  FROM USER WHERE ID=p_user_id;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 1;
      RETURN;
  END;
  
  /* 检查用户支付密码*/
  IF v_pay_password != p_pay_password THEN
      RESULT_STATUS := 2;
      RETURN;
  END IF;
  
  /* 检查用户余额是否足够 */
  IF v_account < p_goods_price THEN
    RESULT_STATUS := 3;
    RETURN;
  END IF;
  
  /* 用户余额支付商品 */
  IF v_account >= p_goods_price THEN
  BEGIN
    UPDATE USER SET ACCOUNT=ACCOUNT-p_goods_price,TOTAL_ACCOUNT=TOTAL_ACCOUNT-p_goods_price 
    WHERE ID=p_user_id;
  EXCEPTION 
    WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS := 4;
    RETURN;
  END;
  END IF;
  
  /* 查询购物车*/
  BEGIN
  SELECT GOODS_NO,GOODS_NAME,MARKET_PRICE,GOODS_PRICE,GOODS_NUM 
  INTO v_goods_no,v_goods_name,v_market_price,v_goods_price,v_goods_num 
  FROM GOODS_CART WHERE USER_ID=p_user_id AND GOODS_ID=p_goods_id;
  EXCEPTION 
    WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS := 5;
    RETURN;
  END;
  
  /* 支付单*/
  BEGIN
    INSERT INTO PAYMENTS(USER_ID,USER_NAME,PAY_MONEY,GOODS_NUM,PAY_TYPE,PAY_DATE,PAY_STATUS,CREATE_AT) 
    VALUES(p_user_id,v_user_name,p_goods_price,v_goods_num,'1',now(),'1',now());
  EXCEPTION 
    WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS := 6;
    RETURN;
  END;
  
  /* 生成订单*/
  BEGIN
    INSERT INTO ORDER_GOODS(GOODS_NAME,GOODS_ID,GOODS_NO,MARKET_PRICE,ORDER_PRICE,SHIPPING_NUM,USER_ID,USER_NAME,PAYMENT_ID,ORDER_STATUS,CREATE_AT) 
    VALUES(v_goods_name,p_goods_id,v_goods_no,v_market_price,v_goods_price,v_goods_num,p_user_id,v_user_name,1,'1',now());
  EXCEPTION 
    WHEN OTHERS THEN
    ROLLBACK;
    RESULT_STATUS := 7;
    RETURN;
  END;
  
END P_PAY;
 
/

-- ----------------------------
-- Procedure structure for P_PAYPAL_PAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PAYPAL_PAY"
(
	p_ipspay_id        IN NUMBER,
	p_ipsbillno        IN VARCHAR,
	p_user_id          IN NUMBER,
	p_order_ids        IN VARCHAR,
	p_country_id       IN NUMBER,
	p_deliver_type_id  IN NUMBER,
	p_unite_consign_id IN NUMBER,
	p_receive_name     IN VARCHAR,
	p_address          IN VARCHAR,
	p_postcode         IN VARCHAR,
	p_tel              IN VARCHAR,
	p_mobile_tel       IN VARCHAR,
	p_first_name       IN VARCHAR,
	p_last_name        IN VARCHAR,
	p_remark           IN VARCHAR,
	p_keep_orders      IN CHAR,
	p_mc_gross         IN VARCHAR,
	p_mc_fee           IN NUMBER,
	p_currency         IN CHAR,
	p_payment_date     IN TIMESTAMP,
	p_payment_status   IN VARCHAR,
	p_pending_reason   IN VARCHAR,
	p_txn_id           IN VARCHAR,
	p_payer_id         IN VARCHAR,
	p_user_address_id  IN NUMBER,
	UNITE_PAYMENT_ID   OUT NUMBER,
	UNITE_CONSIGN_ID   OUT NUMBER,
	RESULT_STATUS      OUT NUMBER
	/*
                                              * 注意：该过程正在修改中，请勿动。。。。。。
                                              * 修改：Dwen
                                              * 日期：2012-07-30
                                              * 描述：paypal充值和支付
                                              * 1: NO IPS MONEY FOR THIS p_ipspay_id
                                              * 2: NO USER
                                              * 3: NO LEGAL ORDERS
                                              * 4: NO ENOUGH MONEY
                                              * 5: DEPOSIT TRANSFER ERROR
                                              * 6: DELIVER COUNTRY NOT AVAILABLE
                                              */
) IS
	v_total_amount             NUMBER := 0;
	v_total_end_price          NUMBER := 0;
	v_total_used_quota         NUMBER := 0;
	v_orders_count             NUMBER := 0;
	v_user_money               NUMBER := 0;
	v_now                      DATE := SYSDATE;
	v_pay_type                 CHAR := '1'; /*default account pay*/
	v_user_id                  NUMBER := p_user_id;
	v_username                 VARCHAR(500);
	v_order_ids                VARCHAR2(4000) := p_order_ids;
	v_sql                      VARCHAR(4000);
	v_deposit                  NUMBER := 0;
	v_status                   CHAR(1);
	orders_count               NUMBER := 0;
	v_receive_name             VARCHAR2(100) := p_receive_name;
	v_address                  VARCHAR2(1000) := p_address;
	v_postcode                 VARCHAR2(100) := p_postcode;
	v_tel                      VARCHAR2(100) := p_tel;
	v_mobile_tel               VARCHAR2(100) := p_mobile_tel;
	v_remark                   VARCHAR2(2000) := p_remark;
	v_country_id               NUMBER := p_country_id;
	v_deliver_type_id          NUMBER := p_deliver_type_id;
	v_first_name               VARCHAR2(100) := p_first_name;
	v_last_name                VARCHAR2(100) := p_last_name;
	v_unite_consign_id         NUMBER := p_unite_consign_id;
	v_primary_unite_consign_id NUMBER;
	v_transmit_fee             NUMBER := 0;
	v_charged_transmit_fee     NUMBER := 0;
	v_custody_fee              NUMBER := 0;
	v_keep_orders              CHAR(1) := p_keep_orders;
	v_logistic_id              NUMBER := 0;
	v_country_name             VARCHAR2(200);
	v_deliver_type_name        VARCHAR2(1000);
	v_insurance_fee            NUMBER := 0;
	v_user_address_id          NUMBER := p_user_address_id;

	--20120830
	TYPE cur_type IS REF CURSOR;
	cur_auction_fee     cur_type;
	v_auction_id        NUMBER;
	V_AUCTIO_FEE_RESULT NUMBER;

	--20120905
	V_USER_ACCOUNT NUMBER;
  --20130226
  v_item_count number;
BEGIN

	/*---------START--------p_ipspay_id IS NOT NULL----------------------- */
	/*IPS MONEY OK*/
	IF p_ipspay_id IS NOT NULL THEN
		BEGIN
			/*此处应无ips支付，核对后看是否删除 */
			IF p_ipsbillno IS NOT NULL THEN
				BEGIN
					SELECT USER_ID, AMOUNT, ORDER_IDS, DEPOSIT
						INTO v_user_id, v_total_amount, v_order_ids, v_deposit
						FROM USER_IPS_PAYMENTS
					 WHERE ID = p_ipspay_id
						 AND STATUS = '0'
						 FOR UPDATE;
					/*IPS OK*/
					UPDATE USER_IPS_PAYMENTS
						 SET STATUS = 1, UPDATED_AT = v_now, IPS_BILL_NO = p_ipsbillno
					 WHERE ID = p_ipspay_id;
					v_pay_type := '2'; /*ips pay*/
					/*ADD MONEY*/
					INSERT INTO USER_ACCOUNTS
						(ID,
						 USER_ID,
						 MONEY,
						 FINANCE_TYPE,
						 FINANCE_DATE,
						 DIRECTION,
						 SOURCE_ID,
						 SOURCE_TYPE,
						 CREATED_AT)
					VALUES
						(USER_ACCOUNTS_SEQ.NEXTVAL,
						 v_user_id,
						 v_total_amount,
						 10,
						 v_now,
						 '0',
						 p_ipspay_id,
						 'USER_IPS_PAYMENTS',
						 SYSDATE);
				END;
			END IF;

			/*---------START--------p_txn_id IS NOT NULL----------------------- */
			IF p_txn_id IS NOT NULL THEN
				BEGIN
					SELECT UP.USER_ID,
								 UP.AMOUNT,
								 UP.ORDER_IDS,
								 UP.DEPOSIT,
								 UP.STATUS,
								 UP.RECEIVE_NAME,
								 UP.ADDRESS,
								 UP.POSTCODE,
								 UP.TEL,
								 UP.MOBILE_TEL,
								 UP.REMARK,
								 UP.COUNTRY_ID,
								 UP.LOGISTIC_TYPE_ID,
								 UP.FIRST_NAME,
								 UP.LAST_NAME,
								 UP.LOGISTIC_DETAIL_ID,
								 UP.KEEP_ORDERS,
								 U.ACCOUNT
						INTO v_user_id,
								 v_total_amount,
								 v_order_ids,
								 v_deposit,
								 v_status,
								 v_receive_name,
								 v_address,
								 v_postcode,
								 v_tel,
								 v_mobile_tel,
								 v_remark,
								 v_country_id,
								 v_deliver_type_id,
								 v_first_name,
								 v_last_name,
								 v_unite_consign_id,
								 v_keep_orders,
								 v_user_money
						FROM USER_IPS_PAYMENTS UP, USERS U
					 WHERE UP.USER_ID = U.ID
						 AND UP.ID = p_ipspay_id
						 AND abs(MC_GROSS - p_mc_gross) < 0.005
						 AND CURRENCY = p_currency
						 FOR UPDATE;

					/*!IMPORTANT:*/
					IF p_payment_status = 'Completed' AND v_status = '0' THEN
						BEGIN
							UPDATE USER_IPS_PAYMENTS
								 SET STATUS         = 1,
										 UPDATED_AT     = v_now,
										 PAYMENT_DATE   = p_payment_date,
										 PAYMENT_STATUS = p_payment_status,
										 PENDING_REASON = p_pending_reason,
										 TXN_ID         = p_txn_id,
										 PAYER_ID       = p_payer_id,
										 mc_fee         = p_mc_fee
							 WHERE ID = p_ipspay_id;
							v_pay_type := '3'; /*PAYPAL pay*/
							/*ADD MONEY*/
							INSERT INTO USER_ACCOUNTS
								(ID,
								 USER_ID,
								 MONEY,
								 FINANCE_TYPE,
								 FINANCE_DATE,
								 DIRECTION,
								 SOURCE_ID,
								 SOURCE_TYPE,
								 CREATED_AT,
								 ACCOUNT_OLD,
								 ACCOUNT_NEW)
							VALUES
								(USER_ACCOUNTS_SEQ.NEXTVAL,
								 v_user_id,
								 v_total_amount,
								 15,
								 v_now,
								 '0',
								 p_ipspay_id,
								 'USER_IPS_PAYMENTS',
								 SYSDATE,
								 v_user_money,
								 v_user_money + v_total_amount);
						END;
					ELSE
						BEGIN
							UPDATE USER_IPS_PAYMENTS
								 SET UPDATED_AT     = v_now,
										 PAYMENT_DATE   = p_payment_date,
										 PAYMENT_STATUS = p_payment_status,
										 PENDING_REASON = p_pending_reason,
										 TXN_ID         = p_txn_id,
										 PAYER_ID       = p_payer_id
							 WHERE ID = p_ipspay_id
								 AND STATUS = '0';
							COMMIT;
							RESULT_STATUS := 0;
							RETURN;
						END;
					END IF;
				END;
			END IF;
			/*---------END--------p_txn_id IS NOT NULL----------------------- */

			UPDATE USERS
				 SET ACCOUNT       = ACCOUNT + v_total_amount,
						 TOTAL_ACCOUNT = TOTAL_ACCOUNT + v_total_amount
			 WHERE ID = v_user_id;

			/*OK*/
			COMMIT;

			IF v_deposit > 0 THEN
				BEGIN
					/* 余额转保证金 */
					P_USER_ACCOUNT_BAILS_TRANSFER(v_user_id,
																				v_deposit,
																				50,
																				0,
																				RESULT_STATUS);
				END;
			END IF;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				RESULT_STATUS := 1;
				RETURN;
		END;
	END IF;
	/*---------END--------p_ipspay_id IS NOT NULL----------------------- */

	/*---------START--------v_order_ids IS NOT NULL----------------------- */
	/* 订单不为空情况 */
	IF v_order_ids IS NOT NULL THEN
		BEGIN
			/*create USER_PAYMENTS*/
			SELECT USER_PAYMENTS_SEQ.NEXTVAL, LOGISTIC_DETAILS_SEQ.NEXTVAL
				INTO UNITE_PAYMENT_ID, v_primary_unite_consign_id
				FROM DUAL;

			/*FIND USER AND ITS TOTAL MONEY*/
			/* 查询用户名和用户账户金额 */
			BEGIN
				SELECT TRUE_NAME, ACCOUNT, ACCOUNT
					INTO v_username, v_user_money, V_USER_ACCOUNT
					FROM USERS
				 WHERE ID = v_user_id;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					ROLLBACK;
					RESULT_STATUS := 2;
					RETURN;
			END;

			/*查询订单数量、订单总金额、结标价 */
			v_sql := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT),SUM(END_PRICE) FROM USER_ORDERS WHERE USER_ID=' ||
							 v_user_id || ' AND STATUS=0 AND ID IN (' || v_order_ids || ')';
			EXECUTE IMMEDIATE v_sql
				INTO v_orders_count, v_total_amount, v_total_end_price;

			/*根据国家id查询该运费*/
			IF v_country_id > 0 THEN
				BEGIN
					BEGIN
						SELECT F.FEE
							INTO v_transmit_fee
							FROM FOREIGN_DELIVER_TYPES T
							JOIN DELIVER_REGIONS R ON (T.ID = R.FOREIGN_DELIVER_ID)
							JOIN DELIVER_FEE F ON (T.ID = F.FOREIGN_DELIVER_ID AND
																		R.DELIVER_REGION = F.DELIVER_REGION)
						 WHERE T.ID = v_deliver_type_id
							 AND R.COUNTRY_ID = v_country_id;
						v_charged_transmit_fee := v_transmit_fee;
					EXCEPTION
						WHEN NO_DATA_FOUND THEN
							RESULT_STATUS := 6;
							ROLLBACK;
							RETURN;
					END;
				END;
			END IF;

			/* 邮资补收 */
			IF v_unite_consign_id > 0 THEN
				BEGIN
					SELECT ID, LOGISTIC_ID
						INTO v_unite_consign_id, v_logistic_id
						FROM LOGISTIC_DETAILS
					 WHERE ID = v_unite_consign_id
						 AND STATUS < 2;
					SELECT SUM(MONEY)
						INTO v_charged_transmit_fee
						FROM USER_ACCOUNTS
					 WHERE SOURCE_ID = v_unite_consign_id
						 AND FINANCE_TYPE = '6';
					v_transmit_fee := 0;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						v_unite_consign_id := 0;
				END;
			END IF;

			/* 非中国保险费按结标价的0.015收取*/
			IF v_country_id <> '40' THEN
				BEGIN
					/*v_insurance_fee:= v_total_amount*0.015;*/
					v_insurance_fee := v_total_end_price * 0.015;
				END;
			END IF;
			/*v_total_amount :=v_total_amount+v_insurance_fee;*/

			/*NO LEGAL ORDERS*/
			/* 无订单 */
			IF v_orders_count = 0 THEN
				BEGIN
					ROLLBACK;
					UNITE_PAYMENT_ID := 0;
					RESULT_STATUS    := 3;
					RETURN;
				END;
			END IF;

			/* 用户账户金额不够 订单总金额+保险金额+运输金额*/
			IF v_user_money < v_total_amount + v_insurance_fee + v_transmit_fee THEN
				BEGIN
					ROLLBACK;
					RESULT_STATUS := 4;
					RETURN;
				END;
			END IF;

			/* 交易单支付流水 */
			INSERT INTO USER_ACCOUNTS
				(ID,
				 USER_ID,
				 MONEY,
				 FINANCE_TYPE,
				 FINANCE_DATE,
				 FINANCE_NAME,
				 DIRECTION,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 CREATED_AT,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW)
			VALUES
				(USER_ACCOUNTS_SEQ.NEXTVAL,
				 v_user_id,
				 v_total_amount,
				 11,
				 v_now,
				 v_username,
				 '1',
				 UNITE_PAYMENT_ID,
				 'USER_PAYMENTS',
				 SYSDATE,
				 V_USER_ACCOUNT,
				 V_USER_ACCOUNT - v_total_amount);

			--ADD BY LZ 20120905
			V_USER_ACCOUNT := V_USER_ACCOUNT - v_total_amount;

			IF v_insurance_fee > 0 THEN
				BEGIN
					/* 保险费支付流水 */
					INSERT INTO USER_ACCOUNTS
						(ID,
						 USER_ID,
						 MONEY,
						 FINANCE_TYPE,
						 FINANCE_DATE,
						 FINANCE_NAME,
						 DIRECTION,
						 SOURCE_ID,
						 SOURCE_TYPE,
						 CREATED_AT,
						 ACCOUNT_OLD,
						 ACCOUNT_NEW)
					VALUES
						(USER_ACCOUNTS_SEQ.NEXTVAL,
						 v_user_id,
						 v_insurance_fee,
						 17,
						 v_now,
						 v_username,
						 '1',
						 UNITE_PAYMENT_ID,
						 'USER_PAYMENTS',
						 SYSDATE,
						 V_USER_ACCOUNT,
						 V_USER_ACCOUNT - v_insurance_fee);
					--ADD BY LZ 20120905
					V_USER_ACCOUNT := V_USER_ACCOUNT - v_insurance_fee;
				END;
			END IF;

			/* 用户账户金额减去订单需付金额*/
			UPDATE USERS
				 SET ACCOUNT       = ACCOUNT - v_total_amount - v_insurance_fee -
														 v_transmit_fee,
						 TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_total_amount -
														 v_insurance_fee - v_transmit_fee
			 WHERE ID = v_user_id;

			/* 支付成功后插入用户支付单表记录 */
			INSERT INTO USER_PAYMENTS
				(ID,
				 USER_ID,
				 USERNAME,
				 PAY_STATUS,
				 AC_AMOUNT,
				 TOTAL_AMOUNT,
				 CREATED_AT,
				 PAY_TYPE,
				 PAY_DATE,
				 REMARK,
				 TRANSMIT_FEE,
				 INSURANCE_FEE)
			VALUES
				(UNITE_PAYMENT_ID,
				 v_user_id,
				 v_username,
				 1,
				 v_orders_count,
				 v_total_amount,
				 v_now,
				 v_pay_type,
				 v_now,
				 p_remark,
				 v_transmit_fee,
				 v_insurance_fee);

			/* 更新末支付到已支付状态 */
			v_sql := 'UPDATE USER_ORDERS SET STATUS=1, USER_PAYMENT_ID = ' ||
							 UNITE_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
							 to_char(v_now, 'YYYY-MM-DD HH24:MI:SS') ||
							 ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || v_user_id ||
							 ' AND STATUS=0 AND ID IN (' || v_order_ids || ')';
			EXECUTE IMMEDIATE v_sql;

			/* 计算已支付订单所占竞拍总额度*/
			v_sql := 'SELECT SUM(USE_QUOTA) FROM USER_QUOTA_USAGES WHERE USER_ID=' ||
							 v_user_id ||
							 ' AND STATUS=1 AND EXISTS (SELECT ID FROM USER_ORDERS WHERE USER_ID=' ||
							 v_user_id || ' AND STATUS=1 AND USER_PAYMENT_ID=' ||
							 UNITE_PAYMENT_ID ||
							 ' AND USER_ORDERS.AUCTION_ID=USER_QUOTA_USAGES.AUCTION_ID)';
			EXECUTE IMMEDIATE v_sql
				INTO v_total_used_quota;

			/*更新拍品结算状态 20120928*/
			V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (' ||
							 'SELECT AUCTION_ID FROM USER_ORDERS WHERE USER_ID=' ||
							 V_USER_ID || ' AND ID IN (' || v_order_ids || '))';
			EXECUTE IMMEDIATE V_SQL;

			/*释放额度*/
			v_sql := 'UPDATE USER_QUOTA_USAGES SET STATUS=0 WHERE USER_ID=' ||
							 v_user_id ||
							 ' AND STATUS=1 AND EXISTS (SELECT ID FROM USER_ORDERS WHERE USER_ID=' ||
							 v_user_id || ' AND STATUS=1 AND USER_PAYMENT_ID=' ||
							 UNITE_PAYMENT_ID ||
							 ' AND USER_ORDERS.AUCTION_ID=USER_QUOTA_USAGES.AUCTION_ID)';
			EXECUTE IMMEDIATE v_sql;
			UPDATE USERS
				 SET QUOTA = QUOTA + v_total_used_quota
			 WHERE ID = v_user_id;

			/*UPDATE IPS_PAY*/
			IF p_ipspay_id IS NOT NULL THEN
				BEGIN
					UPDATE USER_IPS_PAYMENTS
						 SET USER_PAYMENT_ID = UNITE_PAYMENT_ID, UPDATED_AT = v_now
					 WHERE ID = p_ipspay_id;
					/* 支出流水
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_total_amount,
             15,
             v_now,
             '1',
             p_ipspay_id,
             'USER_IPS_PAYMENTS',
             SYSDATE); */
				END;
			END IF;

			/* 超期末支付订单的用户进行冻结账号*/
			UPDATE USERS
				 SET ISLOCK = 0
			 WHERE NOT EXISTS (SELECT ID
								FROM USER_ORDERS
							 WHERE STATUS = 0
								 AND LIMIT_PAY_DATE < v_now
								 AND user_id = v_user_id)
				 AND ID = v_user_id;

			/*COUNT*/
			SELECT COUNT(*)
				INTO orders_count
				FROM USER_ORDERS
			 WHERE USER_ID = v_user_id
				 AND STATUS = 1
				 AND LOGISTIC_DETAIL_ID IS NULL
				 AND USER_PAYMENT_ID = UNITE_PAYMENT_ID;

			/*country*/
			SELECT NAME_EN
				INTO v_country_name
				FROM USER_COUNTRIES
			 WHERE ID = v_country_id;

			/*DELIVER_TYPE_NAME*/
			SELECT NAME_EN
				INTO v_deliver_type_name
				FROM FOREIGN_DELIVER_TYPES
			 WHERE ID = v_deliver_type_id;

			/*NO LEGAL ORDERS*/
			IF orders_count = 0 THEN
				BEGIN
					UNITE_CONSIGN_ID := 0;
					RETURN;
				END;
			END IF;

			/*备份
      INSERT INTO LOGISTIC_DETAILS
      (ID,USER_ID,STATUS,CREATED_AT,RECEIVE_NAME,ADDRESS,POSTCODE,TEL,MOBILE_TEL,REMARK,COUNTRY_ID,DELIVER_TYPE_ID,FIRST_NAME,LAST_NAME,KEEP_ORDERS)
      VALUES
      (v_primary_unite_consign_id,v_user_id,0,SYSDATE,v_receive_name,v_country_name||' '||v_address,v_postcode,v_tel,v_mobile_tel,v_remark||v_deliver_type_name||' Paid: '||v_charged_transmit_fee,v_country_id,v_deliver_type_id,v_first_name,v_last_name,v_keep_orders);
      */
			INSERT INTO LOGISTIC_DETAILS
				(ID,
				 USER_ID,
				 STATUS,
				 CREATED_AT,
				 REMARKS,
				 DELIVERY_TYPE,
				 LOGISTIC_TYPE_ID,
				 USER_ADDRESS_ID,
				 COUNTRY_ID)
			VALUES
				(v_primary_unite_consign_id,
				 v_user_id,
				 5,
				 SYSDATE,
				 v_remark || v_deliver_type_name || ' Paid: ' ||
				 v_charged_transmit_fee,
				 '1',
				 v_deliver_type_id,
				 v_user_address_id,
				 v_country_id);

			/*UPDATE*/
			UPDATE USER_ORDERS
				 SET LOGISTIC_DETAIL_ID = v_primary_unite_consign_id
			 WHERE USER_ID = v_user_id
				 AND STATUS = 1
				 AND LOGISTIC_DETAIL_ID IS NULL
				 AND USER_PAYMENT_ID = UNITE_PAYMENT_ID;

			IF v_transmit_fee > 0 THEN
				/* 物流邮资流水 */
				INSERT INTO USER_ACCOUNTS
					(ID,
					 USER_ID,
					 MONEY,
					 FINANCE_TYPE,
					 FINANCE_DATE,
					 FINANCE_NAME,
					 DIRECTION,
					 SOURCE_ID,
					 SOURCE_TYPE,
					 CREATED_AT,
					 ACCOUNT_OLD,
					 ACCOUNT_NEW)
				VALUES
					(USER_ACCOUNTS_SEQ.NEXTVAL,
					 v_user_id,
					 v_transmit_fee,
					 6,
					 v_now,
					 v_username,
					 '1',
					 v_primary_unite_consign_id,
					 'LOGISTIC_DETAILS',
					 SYSDATE,
					 V_USER_ACCOUNT,
					 V_USER_ACCOUNT - v_transmit_fee);

				V_USER_ACCOUNT := V_USER_ACCOUNT - v_transmit_fee;
			END IF;

			/*合并发货*/
			IF v_unite_consign_id > 0 THEN
				UPDATE USER_ORDERS
					 SET LOGISTIC_DETAIL_ID = v_primary_unite_consign_id
				 WHERE LOGISTIC_DETAIL_ID = v_unite_consign_id
					 AND EXISTS (SELECT ID
									FROM LOGISTIC_DETAILS
								 WHERE ID = v_unite_consign_id
									 AND STATUS < 2);

				UPDATE USER_ACCOUNTS
					 SET SOURCE_ID = v_primary_unite_consign_id
				 WHERE SOURCE_ID = v_unite_consign_id
					 AND USER_ID = v_user_id;

				/* 合并发货后删除物流信息 */
				DELETE FROM LOGISTICS WHERE ID = v_logistic_id;
				DELETE FROM LOGISTIC_DETAILS WHERE ID = v_unite_consign_id;
			END IF;
			UNITE_CONSIGN_ID := v_primary_unite_consign_id;
			IF v_keep_orders = '0' THEN
				BEGIN
					SELECT SUM(CEIL(SYSDATE - END_DATE - 30) * 0.1)
						INTO v_custody_fee
						FROM USER_ORDERS
					 WHERE LOGISTIC_DETAIL_ID = v_primary_unite_consign_id;

					IF v_custody_fee > 0 THEN
						BEGIN
							IF v_user_money < v_total_amount + v_custody_fee THEN
								BEGIN
									ROLLBACK;
									RESULT_STATUS := 4;
									RETURN;
								END;
							END IF;
							/* 保管费流水 */
							INSERT INTO USER_ACCOUNTS
								(ID,
								 USER_ID,
								 MONEY,
								 FINANCE_TYPE,
								 FINANCE_DATE,
								 FINANCE_NAME,
								 DIRECTION,
								 SOURCE_ID,
								 SOURCE_TYPE,
								 CREATED_AT,
								 ACCOUNT_OLD,
								 ACCOUNT_NEW)
							VALUES
								(USER_ACCOUNTS_SEQ.NEXTVAL,
								 v_user_id,
								 v_custody_fee,
								 16,
								 v_now,
								 v_username,
								 '1',
								 v_primary_unite_consign_id,
								 'LOGISTIC_DETAILS',
								 SYSDATE,
								 V_USER_ACCOUNT,
								 V_USER_ACCOUNT - v_custody_fee);
							UPDATE USERS
								 SET ACCOUNT       = ACCOUNT - v_custody_fee,
										 TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_custody_fee
							 WHERE ID = v_user_id;
						END;
					END IF;

					SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM DUAL;

					/* 已去掉need_insure字段。如果有保价，需插keep_price保价金额 add by dwen*/
					INSERT INTO LOGISTICS
						(ID,
						 USER_ID,
						 USER_NAME,
						 ADDRESS,
						 POSTCODE,
						 TEL,
						 MOBILE_TEL,
						 STATUS,
						 REGION_ID,
						 LOGISTIC_TYPE_ID,
						 POSTAGE,
						 TOTAL_FEE,
						 USER_ADDRESS_ID,
						 ITEMS_COUNT,
						 CREATED_AT)
					VALUES
						(v_logistic_id,
						 v_user_id,
						 v_receive_name,
						 v_address,
						 v_postcode,
						 v_tel,
						 v_mobile_tel,
						 '5',
						 '3',
						 v_deliver_type_id,
						 v_transmit_fee,
						 v_transmit_fee,
						 v_user_address_id,
						 v_orders_count,
						 SYSDATE);
					/*备份
          UPDATE LOGISTIC_DETAILS
          SET LOGISTIC_ID = v_logistic_id,status='1'
          WHERE ID=v_primary_unite_consign_id;*/
					UPDATE LOGISTIC_DETAILS
						 SET LOGISTIC_ID = v_logistic_id
					 WHERE ID = v_primary_unite_consign_id;
					UPDATE USER_ACCOUNTS
						 SET SOURCE_ID = v_logistic_id
					 WHERE SOURCE_ID = v_primary_unite_consign_id
						 AND USER_ID = v_user_id;
				END;
			END IF;
			COMMIT;
		END;
	END IF;
	/*---------END--------v_order_ids IS NOT NULL----------------------- */

	/*---------START--------v_order_ids IS NULL----------------------- */
	IF v_order_ids IS NULL AND v_unite_consign_id > 0 THEN
		SELECT SUM(CEIL(SYSDATE - O.END_DATE - 30) * 0.1)
			INTO v_custody_fee
			FROM USER_ORDERS O
			JOIN LOGISTIC_DETAILS C ON (O.LOGISTIC_DETAIL_ID = C.ID)
		 WHERE O.LOGISTIC_DETAIL_ID = v_unite_consign_id;

		IF v_custody_fee > 0 THEN
			BEGIN
				/*FIND USER AND ITS TOTAL MONEY*/
				BEGIN
					SELECT TRUE_NAME, ACCOUNT, ACCOUNT
						INTO v_username, v_user_money, V_USER_ACCOUNT
						FROM USERS
					 WHERE ID = v_user_id;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						ROLLBACK;
						RESULT_STATUS := 2;
						RETURN;
				END;
				IF v_user_money < v_custody_fee THEN
					BEGIN
						ROLLBACK;
						RESULT_STATUS := 4;
						RETURN;
					END;
				END IF;

				/*paypal支付保管费支出流水*/
				IF p_txn_id IS NOT NULL THEN
					BEGIN
						INSERT INTO USER_ACCOUNTS
							(ID,
							 USER_ID,
							 MONEY,
							 FINANCE_TYPE,
							 FINANCE_DATE,
							 FINANCE_NAME,
							 DIRECTION,
							 SOURCE_ID,
							 SOURCE_TYPE,
							 CREATED_AT,
							 ACCOUNT_OLD,
							 ACCOUNT_NEW)
						VALUES
							(USER_ACCOUNTS_SEQ.NEXTVAL,
							 v_user_id,
							 v_custody_fee,
							 16,
							 v_now,
							 v_username,
							 '1',
							 v_unite_consign_id,
							 'LOGISTIC_DETAILS',
							 SYSDATE,
							 V_USER_ACCOUNT,
							 V_USER_ACCOUNT - v_custody_fee);

						V_USER_ACCOUNT := V_USER_ACCOUNT - v_custody_fee;
					END;
				END IF;
				/* 余额支付保管费支出流水*/
				IF p_txn_id IS NULL THEN
					BEGIN
						INSERT INTO USER_ACCOUNTS
							(ID,
							 USER_ID,
							 MONEY,
							 FINANCE_TYPE,
							 FINANCE_DATE,
							 FINANCE_NAME,
							 DIRECTION,
							 SOURCE_ID,
							 SOURCE_TYPE,
							 CREATED_AT,
							 ACCOUNT_OLD,
							 ACCOUNT_NEW)
						VALUES
							(USER_ACCOUNTS_SEQ.NEXTVAL,
							 v_user_id,
							 v_custody_fee,
							 16,
							 v_now,
							 v_username,
							 '1',
							 v_unite_consign_id,
							 'LOGISTIC_DETAILS',
							 SYSDATE,
							 V_USER_ACCOUNT,
							 V_USER_ACCOUNT - v_custody_fee);

						V_USER_ACCOUNT := V_USER_ACCOUNT - v_custody_fee;
					END;
				END IF;
				UPDATE USERS
					 SET ACCOUNT       = ACCOUNT - v_custody_fee,
							 TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_custody_fee
				 WHERE ID = v_user_id;
				COMMIT;
			END;
		END IF;

		UPDATE LOGISTIC_DETAILS
			 SET KEEP_ORDERS = '0'
		 WHERE ID = v_unite_consign_id
			 AND KEEP_ORDERS = '1';

		/*备份
    SELECT RECEIVE_NAME,ADDRESS,POSTCODE,TEL,MOBILE_TEL,DELIVER_TYPE_ID
    INTO v_receive_name,v_address,v_postcode,v_tel,v_mobile_tel,v_deliver_type_id
    FROM LOGISTIC_DETAILS
    WHERE ID=v_unite_consign_id;
    */
		/* modify by dwen */
		SELECT L.USER_NAME,
					 L.ADDRESS,
					 L.POSTCODE,
					 L.TEL,
					 L.MOBILE_TEL,
					 L.LOGISTIC_TYPE_ID,
           l.ITEMS_COUNT
			INTO v_receive_name,
					 v_address,
					 v_postcode,
					 v_tel,
					 v_mobile_tel,
					 v_deliver_type_id,
           v_item_count
			FROM LOGISTIC_DETAILS D
			JOIN LOGISTICS L ON (D.LOGISTIC_ID = L.ID)
		 WHERE D.ID = v_unite_consign_id;
		/* 邮资补收 */
		SELECT SUM(MONEY)
			INTO v_transmit_fee
			FROM USER_ACCOUNTS
		 WHERE SOURCE_ID = v_unite_consign_id
			 AND FINANCE_TYPE = '6';

		SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM DUAL;
		INSERT INTO LOGISTICS
			(ID,
			 USER_ID,
			 USER_NAME,
			 ADDRESS,
			 POSTCODE,
			 TEL,
			 MOBILE_TEL,
			 IS_KEEP,
			 STATUS,
			 REGION_ID,
			 LOGISTIC_TYPE_ID,
			 POSTAGE,
			 TOTAL_FEE,
			 USER_ADDRESS_ID,
       ITEMS_COUNT,
			 CREATED_AT)
		VALUES
			(v_logistic_id,
			 v_user_id,
			 v_receive_name,
			 v_address,
			 v_postcode,
			 v_tel,
			 v_mobile_tel,
			 '0',
			 '2',
			 '3',
			 v_deliver_type_id,
			 v_transmit_fee,
			 v_transmit_fee,
			 v_user_address_id,
       v_item_count,
			 SYSDATE);

		UPDATE LOGISTIC_DETAILS
			 SET LOGISTIC_ID = v_logistic_id, status = '5'
		 WHERE ID = v_unite_consign_id;

		UPDATE USER_ACCOUNTS
			 SET SOURCE_ID = v_logistic_id
		 WHERE SOURCE_ID = v_unite_consign_id
			 AND USER_ID = v_user_id;
		COMMIT;
	END IF;
	/*---------END--------v_order_ids IS NULL----------------------- */

	IF v_order_ids IS NOT NULL THEN
		--20120830
		-----
		v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
						 ' and o.id in (' || v_order_ids || ')';

		OPEN cur_auction_fee FOR v_sql;
		LOOP
			FETCH cur_auction_fee
				INTO v_auction_id;
			EXIT WHEN cur_auction_fee%NOTFOUND;

			p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
		END LOOP;

	END IF;
	RESULT_STATUS := 0;
	RETURN;

END P_PAYPAL_PAY;


 
/

-- ----------------------------
-- Procedure structure for P_PAYPALEN_PAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PAYPALEN_PAY"
(
  p_ipspay_id        IN NUMBER,
  p_ipsbillno        IN VARCHAR,
  p_user_id          IN NUMBER,
  p_order_ids        IN VARCHAR,
  p_country_id       IN NUMBER,
  p_deliver_type_id  IN NUMBER,
  p_unite_consign_id IN NUMBER,
  p_receive_name     IN VARCHAR,
  p_address          IN VARCHAR,
  p_postcode         IN VARCHAR,
  p_tel              IN VARCHAR,
  p_mobile_tel       IN VARCHAR,
  p_first_name       IN VARCHAR,
  p_last_name        IN VARCHAR,
  p_remark           IN VARCHAR,
  p_keep_orders      IN CHAR,
  p_mc_gross         IN VARCHAR,
  p_mc_fee           IN NUMBER,
  p_currency         IN CHAR,
  p_payment_date     IN TIMESTAMP,
  p_payment_status   IN VARCHAR,
  p_pending_reason   IN VARCHAR,
  p_txn_id           IN VARCHAR,
  p_payer_id         IN VARCHAR,
  p_user_address_id  IN NUMBER,
  p_admin_id       IN NUMBER, /**操作人员ID*/
  p_admin_name     IN VARCHAR, /**操作人员姓名*/
  UNITE_PAYMENT_ID   OUT NUMBER,
  UNITE_CONSIGN_ID   OUT NUMBER,
  RESULT_STATUS      OUT NUMBER
  /*
                                              * 修改：Dwen
                                              * 日期：2012-07-30
                                              * 描述：paypal充值和支付
                                              * 0: 在线支付末完成(NO IPS MONEY FOR THIS p_ipspay_id)
                                              * 1: 余额转保证金错误
                                              * 2: 无该用户(NO USER)
                                              * 3: 非法订单或无订单(NO LEGAL ORDERS)
                                              * 4: 账户余额不足(NO ENOUGH MONEY)
                                              * 6: 没有可用的发货国家(DELIVER COUNTRY NOT AVAILABLE)
                                              */
) IS
  v_total_amount             NUMBER := 0;
  v_total_end_price          NUMBER := 0;
  v_total_used_quota         NUMBER := 0;
  v_orders_count             NUMBER := 0;
  v_user_money               NUMBER := 0;
  v_now                      DATE := SYSDATE;
  v_pay_type                 CHAR := '1'; /*default account pay*/
  v_user_id                  NUMBER := p_user_id;
  v_username                 VARCHAR(500);
  v_order_ids                VARCHAR2(4000) := p_order_ids;
  v_sql                      VARCHAR(4000);
  v_deposit                  NUMBER := 0;
  v_status                   CHAR(1);
  orders_count               NUMBER := 0;
  v_receive_name             VARCHAR2(100) := p_receive_name;
  v_address                  VARCHAR2(1000) := p_address;
  v_postcode                 VARCHAR2(100) := p_postcode;
  v_tel                      VARCHAR2(100) := p_tel;
  v_mobile_tel               VARCHAR2(100) := p_mobile_tel;
  v_remark                   VARCHAR2(2000) := p_remark;
  v_country_id               NUMBER := p_country_id;
  v_deliver_type_id          NUMBER := p_deliver_type_id;
  v_first_name               VARCHAR2(100) := p_first_name;
  v_last_name                VARCHAR2(100) := p_last_name;
  v_unite_consign_id         NUMBER := p_unite_consign_id;
  v_primary_unite_consign_id NUMBER;
  v_transmit_fee             NUMBER := 0;
  v_charged_transmit_fee     NUMBER := 0;
  v_custody_fee              NUMBER := 0;
  v_keep_orders              CHAR(1) := p_keep_orders;
  v_logistic_id              NUMBER := 0;
  v_country_name             VARCHAR2(200);
  v_deliver_type_name        VARCHAR2(1000);
  v_insurance_fee            NUMBER := 0;
  v_user_address_id          NUMBER := p_user_address_id;

  --20120830
  TYPE cur_type IS REF CURSOR;
  cur_auction_fee     cur_type;
  v_auction_id        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;

  --20120905
  V_USER_ACCOUNT NUMBER;
BEGIN

  /*---------START--------p_ipspay_id IS NOT NULL----------------------- */
  /*IPS MONEY OK*/
  IF p_ipspay_id IS NOT NULL THEN
    BEGIN
      /*此处应无ips支付，核对后看是否删除 */
      IF p_ipsbillno IS NOT NULL THEN
        BEGIN
          SELECT USER_ID, AMOUNT, ORDER_IDS, DEPOSIT
            INTO v_user_id, v_total_amount, v_order_ids, v_deposit
            FROM USER_IPS_PAYMENTS
           WHERE ID = p_ipspay_id
             AND STATUS = '0'
             FOR UPDATE;
          /*IPS OK*/
          UPDATE USER_IPS_PAYMENTS
             SET STATUS = 1, UPDATED_AT = v_now, IPS_BILL_NO = p_ipsbillno
           WHERE ID = p_ipspay_id;
          v_pay_type := '2'; /*ips pay*/
          /*ADD MONEY*/
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_total_amount,
             10,
             v_now,
             '0',
             p_ipspay_id,
             'USER_IPS_PAYMENTS',
             SYSDATE);
        END;
      END IF;

      /*---------START--------p_txn_id IS NOT NULL----------------------- */
      IF p_txn_id IS NOT NULL THEN
        BEGIN
          SELECT UP.USER_ID,
                 UP.AMOUNT,
                 UP.ORDER_IDS,
                 UP.DEPOSIT,
                 UP.STATUS,
                 UP.RECEIVE_NAME,
                 UP.ADDRESS,
                 UP.POSTCODE,
                 UP.TEL,
                 UP.MOBILE_TEL,
                 UP.REMARK,
                 UP.COUNTRY_ID,
                 UP.LOGISTIC_TYPE_ID,
                 UP.FIRST_NAME,
                 UP.LAST_NAME,
                 UP.LOGISTIC_DETAIL_ID,
                 UP.KEEP_ORDERS,
                 U.ACCOUNT
            INTO v_user_id,
                 v_total_amount,
                 v_order_ids,
                 v_deposit,
                 v_status,
                 v_receive_name,
                 v_address,
                 v_postcode,
                 v_tel,
                 v_mobile_tel,
                 v_remark,
                 v_country_id,
                 v_deliver_type_id,
                 v_first_name,
                 v_last_name,
                 v_unite_consign_id,
                 v_keep_orders,
                 v_user_money
            FROM USER_IPS_PAYMENTS UP, USERS U
           WHERE UP.USER_ID = U.ID
             AND UP.ID = p_ipspay_id
             AND abs(MC_GROSS - p_mc_gross) < 0.005
             AND CURRENCY = p_currency
             FOR UPDATE;

          /*!IMPORTANT:*/
          IF p_payment_status = 'Completed' AND v_status = '0' THEN
            BEGIN
              UPDATE USER_IPS_PAYMENTS
                 SET STATUS         = 1,
                     UPDATED_AT     = v_now,
                     PAYMENT_DATE   = p_payment_date,
                     PAYMENT_STATUS = p_payment_status,
                     PENDING_REASON = p_pending_reason,
                     TXN_ID         = p_txn_id,
                     PAYER_ID       = p_payer_id,
                     mc_fee         = p_mc_fee
               WHERE ID = p_ipspay_id;
              v_pay_type := '3'; /*PAYPAL pay*/
              /*ADD MONEY*/
              INSERT INTO USER_ACCOUNTS
                (ID,
                 USER_ID,
                 MONEY,
                 FINANCE_TYPE,
                 FINANCE_DATE,
                 DIRECTION,
                 SOURCE_ID,
                 SOURCE_TYPE,
                 CREATED_AT,
                 ACCOUNT_OLD,
                 ACCOUNT_NEW,
                 FINANCE_ID,
                 FINANCE_NAME
                 )
              VALUES
                (USER_ACCOUNTS_SEQ.NEXTVAL,
                 v_user_id,
                 v_total_amount,
                 15,
                 v_now,
                 '0',
                 p_ipspay_id,
                 'USER_IPS_PAYMENTS',
                 SYSDATE,
                 v_user_money,
                 v_user_money + v_total_amount,
                 p_admin_id,
                 p_admin_name);
            END;
          ELSE
            BEGIN
              UPDATE USER_IPS_PAYMENTS
                 SET UPDATED_AT     = v_now,
                     PAYMENT_DATE   = p_payment_date,
                     PAYMENT_STATUS = p_payment_status,
                     PENDING_REASON = p_pending_reason,
                     TXN_ID         = p_txn_id,
                     PAYER_ID       = p_payer_id
               WHERE ID = p_ipspay_id
                 AND STATUS = '0';
              RESULT_STATUS := 0;
              RETURN;
            END;
          END IF;
        END;
      END IF;
      /*---------END--------p_txn_id IS NOT NULL----------------------- */

      UPDATE USERS
         SET ACCOUNT       = ACCOUNT + v_total_amount,
             TOTAL_ACCOUNT = TOTAL_ACCOUNT + v_total_amount
       WHERE ID = v_user_id;

      /*OK*/

      IF v_deposit > 0 THEN
        BEGIN
          /* 余额转保证金 */
          P_USER_ACCOUNT_BAILS_TRANSFER(v_user_id,
                                        v_deposit,
                                        50,
                                        0,
                                        RESULT_STATUS);
        END;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS := 1;
        RETURN;
    END;
  END IF;
  /*---------END--------p_ipspay_id IS NOT NULL----------------------- */

  /*---------START--------v_order_ids IS NOT NULL----------------------- */
  /* 订单不为空情况 */
  IF v_order_ids IS NOT NULL THEN
    BEGIN
      /*create USER_PAYMENTS*/
      SELECT USER_PAYMENTS_SEQ.NEXTVAL, LOGISTIC_DETAILS_SEQ.NEXTVAL
        INTO UNITE_PAYMENT_ID, v_primary_unite_consign_id
        FROM DUAL;

      /*FIND USER AND ITS TOTAL MONEY*/
      /* 查询用户名和用户账户金额 */
      BEGIN
        SELECT TRUE_NAME, ACCOUNT, ACCOUNT
          INTO v_username, v_user_money, V_USER_ACCOUNT
          FROM USERS
         WHERE ID = v_user_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ROLLBACK;
          RESULT_STATUS := 2;
          RETURN;
      END;

      /*查询订单数量、订单总金额、结标价 */
      v_sql := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT),SUM(END_PRICE) FROM USER_ORDERS WHERE USER_ID=' ||
               v_user_id || ' AND STATUS=0 AND ID IN (' || v_order_ids || ')';
      EXECUTE IMMEDIATE v_sql
        INTO v_orders_count, v_total_amount, v_total_end_price;

      /*根据国家id查询该运费*/
      IF v_country_id > 0 THEN
        BEGIN
        /* 国外航空运费收取45元*/
        IF v_deliver_type_id = 21 THEN
            BEGIN
              v_transmit_fee :=45;
              v_charged_transmit_fee := v_transmit_fee;
            END;
        ELSE
            BEGIN
              SELECT F.FEE
                INTO v_transmit_fee
                FROM FOREIGN_DELIVER_TYPES T
                JOIN DELIVER_REGIONS R ON (T.ID = R.FOREIGN_DELIVER_ID)
                JOIN DELIVER_FEE F ON (T.ID = F.FOREIGN_DELIVER_ID AND
                                    R.DELIVER_REGION = F.DELIVER_REGION)
              WHERE T.ID = v_deliver_type_id
               AND R.COUNTRY_ID = v_country_id;
              v_charged_transmit_fee := v_transmit_fee;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RESULT_STATUS := 6;
              ROLLBACK;
              RETURN;
            END;
          END IF;
        END;
      END IF;

      /* 邮资补收 */
      IF v_unite_consign_id > 0 THEN
        BEGIN
          SELECT ID, LOGISTIC_ID
            INTO v_unite_consign_id, v_logistic_id
            FROM LOGISTIC_DETAILS
           WHERE ID = v_unite_consign_id
             AND STATUS < 2;
          SELECT SUM(MONEY)
            INTO v_charged_transmit_fee
            FROM USER_ACCOUNTS
           WHERE SOURCE_ID = v_unite_consign_id
             AND FINANCE_TYPE = '6';
          v_transmit_fee := 0;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            v_unite_consign_id := 0;
        END;
      END IF;

      /* 非中国保险费按结标价的0.015收取*/
      IF v_country_id <> '40' THEN
        BEGIN
          /*v_insurance_fee:= v_total_amount*0.015;*/
          v_insurance_fee := v_total_end_price * 0.015;
        END;
      END IF;
      /*v_total_amount :=v_total_amount+v_insurance_fee;*/

      /*NO LEGAL ORDERS*/
      /* 无订单 */
      IF v_orders_count = 0 THEN
        BEGIN
          ROLLBACK;
          UNITE_PAYMENT_ID := 0;
          RESULT_STATUS    := 3;
          RETURN;
        END;
      END IF;

      /* 用户账户金额不够 订单总金额+保险金额+运输金额*/
      IF v_user_money < v_total_amount + v_insurance_fee + v_transmit_fee THEN
        BEGIN
          ROLLBACK;
          RESULT_STATUS := 4;
          RETURN;
        END;
      END IF;

      /* 交易单支付流水 */
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         DIRECTION,
         SOURCE_ID,
         SOURCE_TYPE,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         FINANCE_ID,
         FINANCE_NAME
         )
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         v_user_id,
         v_total_amount,
         11,
         v_now,
         '1',
         UNITE_PAYMENT_ID,
         'USER_PAYMENTS',
         SYSDATE,
         V_USER_ACCOUNT,
         V_USER_ACCOUNT - v_total_amount,
         p_admin_id,
         p_admin_name);

      --ADD BY LZ 20120905
      V_USER_ACCOUNT := V_USER_ACCOUNT - v_total_amount;

      IF v_insurance_fee > 0 THEN
        BEGIN
          /* 保险费支付流水 */
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT,
             ACCOUNT_OLD,
             ACCOUNT_NEW,
             FINANCE_ID,
             FINANCE_NAME)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_insurance_fee,
             17,
             v_now,
             '1',
             UNITE_PAYMENT_ID,
             'USER_PAYMENTS',
             SYSDATE,
             V_USER_ACCOUNT,
             V_USER_ACCOUNT - v_insurance_fee,
             p_admin_id,
             p_admin_name);
          --ADD BY LZ 20120905
          V_USER_ACCOUNT := V_USER_ACCOUNT - v_insurance_fee;
        END;
      END IF;

      /* 用户账户金额减去订单需付金额*/
      UPDATE USERS
         SET ACCOUNT       = ACCOUNT - v_total_amount - v_insurance_fee -
                             v_transmit_fee,
             TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_total_amount -
                             v_insurance_fee - v_transmit_fee
       WHERE ID = v_user_id;

      /* 支付成功后插入用户支付单表记录 */
      INSERT INTO USER_PAYMENTS
        (ID,
         USER_ID,
         USERNAME,
         PAY_STATUS,
         AC_AMOUNT,
         TOTAL_AMOUNT,
         CREATED_AT,
         PAY_TYPE,
         PAY_DATE,
         REMARK,
         TRANSMIT_FEE,
         INSURANCE_FEE,
         FINANCE)
      VALUES
        (UNITE_PAYMENT_ID,
         v_user_id,
         v_username,
         1,
         v_orders_count,
         v_total_amount,
         v_now,
         v_pay_type,
         v_now,
         p_remark,
         v_transmit_fee,
         v_insurance_fee,
         p_admin_name);

      /* 更新末支付到已支付状态 */
      v_sql := 'UPDATE USER_ORDERS SET STATUS=1, admin_id = '||p_admin_id||
              ', admin_name = '''||p_admin_name||''', USER_PAYMENT_ID = ' ||
               UNITE_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
               to_char(v_now, 'YYYY-MM-DD HH24:MI:SS') ||
               ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || v_user_id ||
               ' AND STATUS=0 AND ID IN (' || v_order_ids || ')';
      EXECUTE IMMEDIATE v_sql;

      /* 计算已支付订单所占竞拍总额度*/
      v_sql := 'SELECT SUM(USE_QUOTA) FROM USER_QUOTA_USAGES WHERE USER_ID=' ||
               v_user_id ||
               ' AND STATUS=1 AND EXISTS (SELECT ID FROM USER_ORDERS WHERE USER_ID=' ||
               v_user_id || ' AND STATUS=1 AND USER_PAYMENT_ID=' ||
               UNITE_PAYMENT_ID ||
               ' AND USER_ORDERS.AUCTION_ID=USER_QUOTA_USAGES.AUCTION_ID)';
      EXECUTE IMMEDIATE v_sql
        INTO v_total_used_quota;

      /*更新拍品结算状态 20120928*/
      V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (' ||
               'SELECT AUCTION_ID FROM USER_ORDERS WHERE USER_ID=' ||
               V_USER_ID || ' AND ID IN (' || v_order_ids || '))';
      EXECUTE IMMEDIATE V_SQL;

      /*释放额度*/
      v_sql := 'UPDATE USER_QUOTA_USAGES SET STATUS=0 WHERE USER_ID=' ||
               v_user_id ||
               ' AND STATUS=1 AND EXISTS (SELECT ID FROM USER_ORDERS WHERE USER_ID=' ||
               v_user_id || ' AND STATUS=1 AND USER_PAYMENT_ID=' ||
               UNITE_PAYMENT_ID ||
               ' AND USER_ORDERS.AUCTION_ID=USER_QUOTA_USAGES.AUCTION_ID)';
      EXECUTE IMMEDIATE v_sql;
      UPDATE USERS
         SET QUOTA = QUOTA + v_total_used_quota
       WHERE ID = v_user_id;

      /*UPDATE IPS_PAY*/
      IF p_ipspay_id IS NOT NULL THEN
        BEGIN
          UPDATE USER_IPS_PAYMENTS
             SET USER_PAYMENT_ID = UNITE_PAYMENT_ID, UPDATED_AT = v_now
           WHERE ID = p_ipspay_id;
          /* 支出流水
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_total_amount,
             15,
             v_now,
             '1',
             p_ipspay_id,
             'USER_IPS_PAYMENTS',
             SYSDATE); */
        END;
      END IF;

      /* 超期末支付订单的用户进行冻结账号*/
      UPDATE USERS
         SET ISLOCK = 0
       WHERE NOT EXISTS (SELECT ID
                FROM USER_ORDERS
               WHERE STATUS = 0
                 AND LIMIT_PAY_DATE < v_now
                 AND user_id = v_user_id)
         AND ID = v_user_id;

      /*COUNT*/
      SELECT COUNT(*)
        INTO orders_count
        FROM USER_ORDERS
       WHERE USER_ID = v_user_id
         AND STATUS = 1
         AND LOGISTIC_DETAIL_ID IS NULL
         AND USER_PAYMENT_ID = UNITE_PAYMENT_ID;

      /*country*/
      SELECT NAME_EN
        INTO v_country_name
        FROM USER_COUNTRIES
       WHERE ID = v_country_id;

      /*DELIVER_TYPE_NAME*/
      SELECT NAME_EN
        INTO v_deliver_type_name
        FROM FOREIGN_DELIVER_TYPES
       WHERE ID = v_deliver_type_id;

      /*NO LEGAL ORDERS*/
      IF orders_count = 0 THEN
        BEGIN
          UNITE_CONSIGN_ID := 0;
          RETURN;
        END;
      END IF;

      /*备份
      INSERT INTO LOGISTIC_DETAILS
      (ID,USER_ID,STATUS,CREATED_AT,RECEIVE_NAME,ADDRESS,POSTCODE,TEL,MOBILE_TEL,REMARK,COUNTRY_ID,DELIVER_TYPE_ID,FIRST_NAME,LAST_NAME,KEEP_ORDERS)
      VALUES
      (v_primary_unite_consign_id,v_user_id,0,SYSDATE,v_receive_name,v_country_name||' '||v_address,v_postcode,v_tel,v_mobile_tel,v_remark||v_deliver_type_name||' Paid: '||v_charged_transmit_fee,v_country_id,v_deliver_type_id,v_first_name,v_last_name,v_keep_orders);
      */
      INSERT INTO LOGISTIC_DETAILS
        (ID,
         USER_ID,
         STATUS,
         CREATED_AT,
         REMARKS,
         DELIVERY_TYPE,
         LOGISTIC_TYPE_ID,
         USER_ADDRESS_ID,
         COUNTRY_ID)
      VALUES
        (v_primary_unite_consign_id,
         v_user_id,
         5,
         SYSDATE,
         v_remark || v_deliver_type_name || ' Paid: ' ||
         v_charged_transmit_fee,
         '1',
         v_deliver_type_id,
         v_user_address_id,
         v_country_id);

      /*UPDATE*/
      UPDATE USER_ORDERS
         SET LOGISTIC_DETAIL_ID = v_primary_unite_consign_id
       WHERE USER_ID = v_user_id
         AND STATUS = 1
         AND LOGISTIC_DETAIL_ID IS NULL
         AND USER_PAYMENT_ID = UNITE_PAYMENT_ID;

      IF v_transmit_fee > 0 THEN
        /* 物流邮资流水 */
        INSERT INTO USER_ACCOUNTS
          (ID,
           USER_ID,
           MONEY,
           FINANCE_TYPE,
           FINANCE_DATE,
           DIRECTION,
           SOURCE_ID,
           SOURCE_TYPE,
           CREATED_AT,
           ACCOUNT_OLD,
           ACCOUNT_NEW,
           FINANCE_ID,
           FINANCE_NAME
           )
        VALUES
          (USER_ACCOUNTS_SEQ.NEXTVAL,
           v_user_id,
           v_transmit_fee,
           6,
           v_now,
           '1',
           v_primary_unite_consign_id,
           'LOGISTIC_DETAILS',
           SYSDATE,
           V_USER_ACCOUNT,
           V_USER_ACCOUNT - v_transmit_fee,
           p_admin_id,
           p_admin_name
           );

        V_USER_ACCOUNT := V_USER_ACCOUNT - v_transmit_fee;
      END IF;

      /*合并发货*/
      IF v_unite_consign_id > 0 THEN
        UPDATE USER_ORDERS
           SET LOGISTIC_DETAIL_ID = v_primary_unite_consign_id
         WHERE LOGISTIC_DETAIL_ID = v_unite_consign_id
           AND EXISTS (SELECT ID
                  FROM LOGISTIC_DETAILS
                 WHERE ID = v_unite_consign_id
                   AND STATUS < 2);

        UPDATE USER_ACCOUNTS
           SET SOURCE_ID = v_primary_unite_consign_id
         WHERE SOURCE_ID = v_unite_consign_id
           AND USER_ID = v_user_id;

        /* 合并发货后删除物流信息 */
        DELETE FROM LOGISTICS WHERE ID = v_logistic_id;
        DELETE FROM LOGISTIC_DETAILS WHERE ID = v_unite_consign_id;
      END IF;
      UNITE_CONSIGN_ID := v_primary_unite_consign_id;
      IF v_keep_orders = '0' THEN
        BEGIN
          SELECT SUM(CEIL(SYSDATE - END_DATE - 30) * 0.1)
            INTO v_custody_fee
            FROM USER_ORDERS
           WHERE LOGISTIC_DETAIL_ID = v_primary_unite_consign_id;

          IF v_custody_fee > 0 THEN
            BEGIN
              IF v_user_money < v_total_amount + v_custody_fee THEN
                BEGIN
                  ROLLBACK;
                  RESULT_STATUS := 4;
                  RETURN;
                END;
              END IF;
              /* 保管费流水 */
              INSERT INTO USER_ACCOUNTS
                (ID,
                 USER_ID,
                 MONEY,
                 FINANCE_TYPE,
                 FINANCE_DATE,
                 DIRECTION,
                 SOURCE_ID,
                 SOURCE_TYPE,
                 CREATED_AT,
                 ACCOUNT_OLD,
                 ACCOUNT_NEW,
                 FINANCE_ID,
                 FINANCE_NAME
                 )
              VALUES
                (USER_ACCOUNTS_SEQ.NEXTVAL,
                 v_user_id,
                 v_custody_fee,
                 16,
                 v_now,
                 '1',
                 v_primary_unite_consign_id,
                 'LOGISTIC_DETAILS',
                 SYSDATE,
                 V_USER_ACCOUNT,
                 V_USER_ACCOUNT - v_custody_fee,
                 p_admin_id,
                 p_admin_name
                 );
              UPDATE USERS
                 SET ACCOUNT       = ACCOUNT - v_custody_fee,
                     TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_custody_fee
               WHERE ID = v_user_id;
            END;
          END IF;

          SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM DUAL;

          /* 已去掉need_insure字段。如果有保价，需插keep_price保价金额 add by dwen*/
          INSERT INTO LOGISTICS
            (ID,
             USER_ID,
             USER_NAME,
             ADDRESS,
             POSTCODE,
             TEL,
             MOBILE_TEL,
             STATUS,
             REGION_ID,
             LOGISTIC_TYPE_ID,
             POSTAGE,
             TOTAL_FEE,
             USER_ADDRESS_ID,
             ITEMS_COUNT,
             CREATED_AT,
             admin_id,
             admin_name)
          VALUES
            (v_logistic_id,
             v_user_id,
             v_receive_name,
             v_address,
             v_postcode,
             v_tel,
             v_mobile_tel,
             '5',
             '3',
             v_deliver_type_id,
             v_transmit_fee,
             v_transmit_fee,
             v_user_address_id,
             v_orders_count,
             SYSDATE,
             p_admin_id,
             p_admin_name);
          /*备份
          UPDATE LOGISTIC_DETAILS
          SET LOGISTIC_ID = v_logistic_id,status='1'
          WHERE ID=v_primary_unite_consign_id;*/
          UPDATE LOGISTIC_DETAILS
             SET LOGISTIC_ID = v_logistic_id
           WHERE ID = v_primary_unite_consign_id;
          /*UPDATE USER_ACCOUNTS
             SET SOURCE_ID = v_logistic_id
           WHERE SOURCE_ID = v_primary_unite_consign_id
             AND USER_ID = v_user_id;*/
        END;
      END IF;
    END;
  END IF;
  /*---------END--------v_order_ids IS NOT NULL----------------------- */

  /*---------START--------v_order_ids IS NULL----------------------- */
  IF v_order_ids IS NULL AND v_unite_consign_id > 0 THEN
    SELECT SUM(CEIL(SYSDATE - O.END_DATE - 30) * 0.1)
      INTO v_custody_fee
      FROM USER_ORDERS O
      JOIN LOGISTIC_DETAILS C ON (O.LOGISTIC_DETAIL_ID = C.ID)
     WHERE O.LOGISTIC_DETAIL_ID = v_unite_consign_id;

    IF v_custody_fee > 0 THEN
      BEGIN
        /*FIND USER AND ITS TOTAL MONEY*/
        BEGIN
          SELECT TRUE_NAME, ACCOUNT, ACCOUNT
            INTO v_username, v_user_money, V_USER_ACCOUNT
            FROM USERS
           WHERE ID = v_user_id;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            RESULT_STATUS := 2;
            RETURN;
        END;
        IF v_user_money < v_custody_fee THEN
          BEGIN
            ROLLBACK;
            RESULT_STATUS := 4;
            RETURN;
          END;
        END IF;

        /*paypal支付保管费支出流水*/
        IF p_txn_id IS NOT NULL THEN
          BEGIN
            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               FINANCE_NAME,
               DIRECTION,
               SOURCE_ID,
               SOURCE_TYPE,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               v_user_id,
               v_custody_fee,
               16,
               v_now,
               v_username,
               '1',
               v_unite_consign_id,
               'LOGISTIC_DETAILS',
               SYSDATE,
               V_USER_ACCOUNT,
               V_USER_ACCOUNT - v_custody_fee);

            V_USER_ACCOUNT := V_USER_ACCOUNT - v_custody_fee;
          END;
        END IF;
        /* 余额支付保管费支出流水*/
        IF p_txn_id IS NULL THEN
          BEGIN
            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               FINANCE_NAME,
               DIRECTION,
               SOURCE_ID,
               SOURCE_TYPE,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               v_user_id,
               v_custody_fee,
               16,
               v_now,
               v_username,
               '1',
               v_unite_consign_id,
               'LOGISTIC_DETAILS',
               SYSDATE,
               V_USER_ACCOUNT,
               V_USER_ACCOUNT - v_custody_fee);

            V_USER_ACCOUNT := V_USER_ACCOUNT - v_custody_fee;
          END;
        END IF;
        UPDATE USERS
           SET ACCOUNT       = ACCOUNT - v_custody_fee,
               TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_custody_fee
         WHERE ID = v_user_id;
      END;
    END IF;

    UPDATE LOGISTIC_DETAILS
       SET KEEP_ORDERS = '0'
     WHERE ID = v_unite_consign_id
       AND KEEP_ORDERS = '1';

    /*备份
    SELECT RECEIVE_NAME,ADDRESS,POSTCODE,TEL,MOBILE_TEL,DELIVER_TYPE_ID
    INTO v_receive_name,v_address,v_postcode,v_tel,v_mobile_tel,v_deliver_type_id
    FROM LOGISTIC_DETAILS
    WHERE ID=v_unite_consign_id;
    */
    /* modify by dwen */
    SELECT L.USER_NAME,
           L.ADDRESS,
           L.POSTCODE,
           L.TEL,
           L.MOBILE_TEL,
           L.LOGISTIC_TYPE_ID
      INTO v_receive_name,
           v_address,
           v_postcode,
           v_tel,
           v_mobile_tel,
           v_deliver_type_id
      FROM LOGISTIC_DETAILS D
      JOIN LOGISTICS L ON (D.LOGISTIC_ID = L.ID)
     WHERE D.ID = v_unite_consign_id;
    /* 邮资补收 */
    SELECT SUM(MONEY)
      INTO v_transmit_fee
      FROM USER_ACCOUNTS
     WHERE SOURCE_ID = v_unite_consign_id
       AND FINANCE_TYPE = '6';

    SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM DUAL;
    INSERT INTO LOGISTICS
      (ID,
       USER_ID,
       USER_NAME,
       ADDRESS,
       POSTCODE,
       TEL,
       MOBILE_TEL,
       IS_KEEP,
       STATUS,
       REGION_ID,
       LOGISTIC_TYPE_ID,
       POSTAGE,
       TOTAL_FEE,
       USER_ADDRESS_ID,
       CREATED_AT)
    VALUES
      (v_logistic_id,
       v_user_id,
       v_receive_name,
       v_address,
       v_postcode,
       v_tel,
       v_mobile_tel,
       '0',
       '5',
       '3',
       v_deliver_type_id,
       v_transmit_fee,
       v_transmit_fee,
       v_user_address_id,
       SYSDATE);

    UPDATE LOGISTIC_DETAILS
       SET LOGISTIC_ID = v_logistic_id, status = '5'
     WHERE ID = v_unite_consign_id;

    UPDATE USER_ACCOUNTS
       SET SOURCE_ID = v_logistic_id
     WHERE SOURCE_ID = v_unite_consign_id
       AND USER_ID = v_user_id;
  END IF;
  /*---------END--------v_order_ids IS NULL----------------------- */

  IF v_order_ids IS NOT NULL THEN
    --20120830
    -----
    v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
             ' and o.id in (' || v_order_ids || ')';

    OPEN cur_auction_fee FOR v_sql;
    LOOP
      FETCH cur_auction_fee
        INTO v_auction_id;
      EXIT WHEN cur_auction_fee%NOTFOUND;

      p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
    END LOOP;

  END IF;
  RESULT_STATUS := 0;
  RETURN;

END P_PAYPALEN_PAY;


 
/

-- ----------------------------
-- Procedure structure for P_PAYPALEN_PAY_OLD
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PAYPALEN_PAY_OLD"
(
	p_ipspay_id        IN NUMBER,
	p_ipsbillno        IN VARCHAR,
	p_user_id          IN NUMBER,
	p_order_ids        IN VARCHAR,
	p_country_id       IN NUMBER,
	p_deliver_type_id  IN NUMBER,
	p_unite_consign_id IN NUMBER,
	p_receive_name     IN VARCHAR,
	p_address          IN VARCHAR,
	p_postcode         IN VARCHAR,
	p_tel              IN VARCHAR,
	p_mobile_tel       IN VARCHAR,
	p_first_name       IN VARCHAR,
  p_last_name        IN VARCHAR,
  p_remark           IN VARCHAR,
  p_keep_orders      IN CHAR,
  p_mc_gross         IN VARCHAR,
  p_mc_fee           IN NUMBER,
  p_currency         IN CHAR,
  p_payment_date     IN TIMESTAMP,
  p_payment_status   IN VARCHAR,
  p_pending_reason   IN VARCHAR,
  p_txn_id           IN VARCHAR,
  p_payer_id         IN VARCHAR,
  p_user_address_id  IN NUMBER,
  UNITE_PAYMENT_ID   OUT NUMBER,
  UNITE_CONSIGN_ID   OUT NUMBER,
  RESULT_STATUS      OUT NUMBER
  /*
                                              * 修改：Dwen
                                              * 日期：2012-07-30
                                              * 描述：paypal充值和支付
                                              * 0: 在线支付末完成(NO IPS MONEY FOR THIS p_ipspay_id)
                                              * 1: 余额转保证金错误
                                              * 2: 无该用户(NO USER)
                                              * 3: 非法订单或无订单(NO LEGAL ORDERS)
                                              * 4: 账户余额不足(NO ENOUGH MONEY)
                                              * 6: 没有可用的发货国家(DELIVER COUNTRY NOT AVAILABLE)
                                              */
) IS
  v_total_amount             NUMBER := 0;
  v_total_end_price          NUMBER := 0;
  v_total_used_quota         NUMBER := 0;
  v_orders_count             NUMBER := 0;
  v_user_money               NUMBER := 0;
  v_now                      DATE := SYSDATE;
  v_pay_type                 CHAR := '1'; /*default account pay*/
  v_user_id                  NUMBER := p_user_id;
  v_username                 VARCHAR(500);
  v_order_ids                VARCHAR2(4000) := p_order_ids;
  v_sql                      VARCHAR(4000);
  v_deposit                  NUMBER := 0;
  v_status                   CHAR(1);
  orders_count               NUMBER := 0;
  v_receive_name             VARCHAR2(100) := p_receive_name;
  v_address                  VARCHAR2(1000) := p_address;
  v_postcode                 VARCHAR2(100) := p_postcode;
  v_tel                      VARCHAR2(100) := p_tel;
  v_mobile_tel               VARCHAR2(100) := p_mobile_tel;
  v_remark                   VARCHAR2(2000) := p_remark;
  v_country_id               NUMBER := p_country_id;
  v_deliver_type_id          NUMBER := p_deliver_type_id;
  v_first_name               VARCHAR2(100) := p_first_name;
  v_last_name                VARCHAR2(100) := p_last_name;
  v_unite_consign_id         NUMBER := p_unite_consign_id;
  v_primary_unite_consign_id NUMBER;
  v_transmit_fee             NUMBER := 0;
  v_charged_transmit_fee     NUMBER := 0;
  v_custody_fee              NUMBER := 0;
  v_keep_orders              CHAR(1) := p_keep_orders;
  v_logistic_id              NUMBER := 0;
  v_country_name             VARCHAR2(200);
  v_deliver_type_name        VARCHAR2(1000);
  v_insurance_fee            NUMBER := 0;
  v_user_address_id          NUMBER := p_user_address_id;

  --20120830
  TYPE cur_type IS REF CURSOR;
  cur_auction_fee     cur_type;
  v_auction_id        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;

  --20120905
  V_USER_ACCOUNT NUMBER;
BEGIN

  /*---------START--------p_ipspay_id IS NOT NULL----------------------- */
  /*IPS MONEY OK*/
  IF p_ipspay_id IS NOT NULL THEN
    BEGIN
      /*此处应无ips支付，核对后看是否删除 */
      IF p_ipsbillno IS NOT NULL THEN
        BEGIN
          SELECT USER_ID, AMOUNT, ORDER_IDS, DEPOSIT
            INTO v_user_id, v_total_amount, v_order_ids, v_deposit
            FROM USER_IPS_PAYMENTS
           WHERE ID = p_ipspay_id
             AND STATUS = '0'
             FOR UPDATE;
          /*IPS OK*/
          UPDATE USER_IPS_PAYMENTS
             SET STATUS = 1, UPDATED_AT = v_now, IPS_BILL_NO = p_ipsbillno
           WHERE ID = p_ipspay_id;
          v_pay_type := '2'; /*ips pay*/
          /*ADD MONEY*/
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_total_amount,
             10,
             v_now,
             '0',
             p_ipspay_id,
             'USER_IPS_PAYMENTS',
             SYSDATE);
        END;
      END IF;

      /*---------START--------p_txn_id IS NOT NULL----------------------- */
      IF p_txn_id IS NOT NULL THEN
        BEGIN
          SELECT UP.USER_ID,
                 UP.AMOUNT,
                 UP.ORDER_IDS,
                 UP.DEPOSIT,
                 UP.STATUS,
                 UP.RECEIVE_NAME,
                 UP.ADDRESS,
                 UP.POSTCODE,
                 UP.TEL,
                 UP.MOBILE_TEL,
                 UP.REMARK,
                 UP.COUNTRY_ID,
                 UP.LOGISTIC_TYPE_ID,
                 UP.FIRST_NAME,
                 UP.LAST_NAME,
                 UP.LOGISTIC_DETAIL_ID,
                 UP.KEEP_ORDERS,
                 U.ACCOUNT
            INTO v_user_id,
                 v_total_amount,
                 v_order_ids,
                 v_deposit,
                 v_status,
                 v_receive_name,
                 v_address,
                 v_postcode,
                 v_tel,
                 v_mobile_tel,
                 v_remark,
                 v_country_id,
                 v_deliver_type_id,
                 v_first_name,
                 v_last_name,
                 v_unite_consign_id,
                 v_keep_orders,
                 v_user_money
            FROM USER_IPS_PAYMENTS UP, USERS U
           WHERE UP.USER_ID = U.ID
             AND UP.ID = p_ipspay_id
             AND abs(MC_GROSS - p_mc_gross) < 0.005
             AND CURRENCY = p_currency
             FOR UPDATE;

          /*!IMPORTANT:*/
          IF p_payment_status = 'Completed' AND v_status = '0' THEN
            BEGIN
              UPDATE USER_IPS_PAYMENTS
                 SET STATUS         = 1,
                     UPDATED_AT     = v_now,
                     PAYMENT_DATE   = p_payment_date,
                     PAYMENT_STATUS = p_payment_status,
                     PENDING_REASON = p_pending_reason,
                     TXN_ID         = p_txn_id,
                     PAYER_ID       = p_payer_id,
                     mc_fee         = p_mc_fee
               WHERE ID = p_ipspay_id;
              v_pay_type := '3'; /*PAYPAL pay*/
              /*ADD MONEY*/
              INSERT INTO USER_ACCOUNTS
                (ID,
                 USER_ID,
                 MONEY,
                 FINANCE_TYPE,
                 FINANCE_DATE,
                 DIRECTION,
                 SOURCE_ID,
                 SOURCE_TYPE,
                 CREATED_AT,
                 ACCOUNT_OLD,
                 ACCOUNT_NEW)
              VALUES
                (USER_ACCOUNTS_SEQ.NEXTVAL,
                 v_user_id,
                 v_total_amount,
                 15,
                 v_now,
                 '0',
                 p_ipspay_id,
                 'USER_IPS_PAYMENTS',
                 SYSDATE,
                 v_user_money,
                 v_user_money + v_total_amount);
            END;
          ELSE
            BEGIN
              UPDATE USER_IPS_PAYMENTS
                 SET UPDATED_AT     = v_now,
                     PAYMENT_DATE   = p_payment_date,
                     PAYMENT_STATUS = p_payment_status,
                     PENDING_REASON = p_pending_reason,
                     TXN_ID         = p_txn_id,
                     PAYER_ID       = p_payer_id
               WHERE ID = p_ipspay_id
                 AND STATUS = '0';
              RESULT_STATUS := 0;
              RETURN;
            END;
          END IF;
        END;
      END IF;
      /*---------END--------p_txn_id IS NOT NULL----------------------- */

      UPDATE USERS
         SET ACCOUNT       = ACCOUNT + v_total_amount,
             TOTAL_ACCOUNT = TOTAL_ACCOUNT + v_total_amount
       WHERE ID = v_user_id;

      /*OK*/

      IF v_deposit > 0 THEN
        BEGIN
          /* 余额转保证金 */
          P_USER_ACCOUNT_BAILS_TRANSFER(v_user_id,
                                        v_deposit,
                                        50,
                                        0,
                                        RESULT_STATUS);
        END;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS := 1;
        RETURN;
    END;
  END IF;
  /*---------END--------p_ipspay_id IS NOT NULL----------------------- */

  /*---------START--------v_order_ids IS NOT NULL----------------------- */
  /* 订单不为空情况 */
  IF v_order_ids IS NOT NULL THEN
    BEGIN
      /*create USER_PAYMENTS*/
      SELECT USER_PAYMENTS_SEQ.NEXTVAL, LOGISTIC_DETAILS_SEQ.NEXTVAL
        INTO UNITE_PAYMENT_ID, v_primary_unite_consign_id
        FROM DUAL;

      /*FIND USER AND ITS TOTAL MONEY*/
      /* 查询用户名和用户账户金额 */
      BEGIN
        SELECT TRUE_NAME, ACCOUNT, ACCOUNT
          INTO v_username, v_user_money, V_USER_ACCOUNT
          FROM USERS
         WHERE ID = v_user_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ROLLBACK;
          RESULT_STATUS := 2;
          RETURN;
      END;

      /*查询订单数量、订单总金额、结标价 */
      v_sql := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT),SUM(END_PRICE) FROM USER_ORDERS WHERE USER_ID=' ||
               v_user_id || ' AND STATUS=0 AND ID IN (' || v_order_ids || ')';
      EXECUTE IMMEDIATE v_sql
        INTO v_orders_count, v_total_amount, v_total_end_price;

      /*根据国家id查询该运费*/
      IF v_country_id > 0 THEN
        BEGIN
        /* 国外航空运费收取45元*/  
        IF v_deliver_type_id = 21 THEN
            BEGIN
              v_transmit_fee :=45;
              v_charged_transmit_fee := v_transmit_fee;
            END;
        ELSE
            BEGIN
              SELECT F.FEE
                INTO v_transmit_fee
                FROM FOREIGN_DELIVER_TYPES T
                JOIN DELIVER_REGIONS R ON (T.ID = R.FOREIGN_DELIVER_ID)
                JOIN DELIVER_FEE F ON (T.ID = F.FOREIGN_DELIVER_ID AND
																		R.DELIVER_REGION = F.DELIVER_REGION)
              WHERE T.ID = v_deliver_type_id
							 AND R.COUNTRY_ID = v_country_id;
              v_charged_transmit_fee := v_transmit_fee;
            EXCEPTION
						WHEN NO_DATA_FOUND THEN
							RESULT_STATUS := 6;
							ROLLBACK;
							RETURN;
            END;
          END IF;
				END;
      END IF;

      /* 邮资补收 */
      IF v_unite_consign_id > 0 THEN
        BEGIN
          SELECT ID, LOGISTIC_ID
            INTO v_unite_consign_id, v_logistic_id
            FROM LOGISTIC_DETAILS
           WHERE ID = v_unite_consign_id
             AND STATUS < 2;
          SELECT SUM(MONEY)
            INTO v_charged_transmit_fee
            FROM USER_ACCOUNTS
           WHERE SOURCE_ID = v_unite_consign_id
             AND FINANCE_TYPE = '6';
          v_transmit_fee := 0;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            v_unite_consign_id := 0;
        END;
      END IF;

      /* 非中国保险费按结标价的0.015收取*/
      IF v_country_id <> '40' THEN
        BEGIN
          /*v_insurance_fee:= v_total_amount*0.015;*/
          v_insurance_fee := v_total_end_price * 0.015;
        END;
      END IF;
      /*v_total_amount :=v_total_amount+v_insurance_fee;*/

      /*NO LEGAL ORDERS*/
      /* 无订单 */
      IF v_orders_count = 0 THEN
        BEGIN
          ROLLBACK;
          UNITE_PAYMENT_ID := 0;
          RESULT_STATUS    := 3;
          RETURN;
        END;
      END IF;

      /* 用户账户金额不够 订单总金额+保险金额+运输金额*/
      IF v_user_money < v_total_amount + v_insurance_fee + v_transmit_fee THEN
        BEGIN
          ROLLBACK;
          RESULT_STATUS := 4;
          RETURN;
        END;
      END IF;

      /* 交易单支付流水 */
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         DIRECTION,
         SOURCE_ID,
         SOURCE_TYPE,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         v_user_id,
         v_total_amount,
         11,
         v_now,
         v_username,
         '1',
         UNITE_PAYMENT_ID,
         'USER_PAYMENTS',
         SYSDATE,
         V_USER_ACCOUNT,
         V_USER_ACCOUNT - v_total_amount);

      --ADD BY LZ 20120905
      V_USER_ACCOUNT := V_USER_ACCOUNT - v_total_amount;

      IF v_insurance_fee > 0 THEN
        BEGIN
          /* 保险费支付流水 */
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             FINANCE_NAME,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT,
             ACCOUNT_OLD,
             ACCOUNT_NEW)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_insurance_fee,
             17,
             v_now,
             v_username,
             '1',
             UNITE_PAYMENT_ID,
             'USER_PAYMENTS',
             SYSDATE,
             V_USER_ACCOUNT,
             V_USER_ACCOUNT - v_insurance_fee);
          --ADD BY LZ 20120905
          V_USER_ACCOUNT := V_USER_ACCOUNT - v_insurance_fee;
        END;
      END IF;

      /* 用户账户金额减去订单需付金额*/
      UPDATE USERS
         SET ACCOUNT       = ACCOUNT - v_total_amount - v_insurance_fee -
                             v_transmit_fee,
             TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_total_amount -
                             v_insurance_fee - v_transmit_fee
       WHERE ID = v_user_id;

      /* 支付成功后插入用户支付单表记录 */
      INSERT INTO USER_PAYMENTS
        (ID,
         USER_ID,
         USERNAME,
         PAY_STATUS,
         AC_AMOUNT,
         TOTAL_AMOUNT,
         CREATED_AT,
         PAY_TYPE,
         PAY_DATE,
         REMARK,
         TRANSMIT_FEE,
         INSURANCE_FEE)
      VALUES
        (UNITE_PAYMENT_ID,
         v_user_id,
         v_username,
         1,
         v_orders_count,
         v_total_amount,
         v_now,
         v_pay_type,
         v_now,
         p_remark,
         v_transmit_fee,
         v_insurance_fee);

      /* 更新末支付到已支付状态 */
      v_sql := 'UPDATE USER_ORDERS SET STATUS=1, USER_PAYMENT_ID = ' ||
               UNITE_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
               to_char(v_now, 'YYYY-MM-DD HH24:MI:SS') ||
               ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || v_user_id ||
               ' AND STATUS=0 AND ID IN (' || v_order_ids || ')';
      EXECUTE IMMEDIATE v_sql;

      /* 计算已支付订单所占竞拍总额度*/
      v_sql := 'SELECT SUM(USE_QUOTA) FROM USER_QUOTA_USAGES WHERE USER_ID=' ||
               v_user_id ||
               ' AND STATUS=1 AND EXISTS (SELECT ID FROM USER_ORDERS WHERE USER_ID=' ||
               v_user_id || ' AND STATUS=1 AND USER_PAYMENT_ID=' ||
               UNITE_PAYMENT_ID ||
               ' AND USER_ORDERS.AUCTION_ID=USER_QUOTA_USAGES.AUCTION_ID)';
      EXECUTE IMMEDIATE v_sql
        INTO v_total_used_quota;

      /*更新拍品结算状态 20120928*/
      V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (' ||
               'SELECT AUCTION_ID FROM USER_ORDERS WHERE USER_ID=' ||
               V_USER_ID || ' AND ID IN (' || v_order_ids || '))';
      EXECUTE IMMEDIATE V_SQL;

      /*释放额度*/
      v_sql := 'UPDATE USER_QUOTA_USAGES SET STATUS=0 WHERE USER_ID=' ||
               v_user_id ||
               ' AND STATUS=1 AND EXISTS (SELECT ID FROM USER_ORDERS WHERE USER_ID=' ||
               v_user_id || ' AND STATUS=1 AND USER_PAYMENT_ID=' ||
               UNITE_PAYMENT_ID ||
               ' AND USER_ORDERS.AUCTION_ID=USER_QUOTA_USAGES.AUCTION_ID)';
      EXECUTE IMMEDIATE v_sql;
      UPDATE USERS
         SET QUOTA = QUOTA + v_total_used_quota
       WHERE ID = v_user_id;

      /*UPDATE IPS_PAY*/
      IF p_ipspay_id IS NOT NULL THEN
        BEGIN
          UPDATE USER_IPS_PAYMENTS
             SET USER_PAYMENT_ID = UNITE_PAYMENT_ID, UPDATED_AT = v_now
           WHERE ID = p_ipspay_id;
          /* 支出流水
          INSERT INTO USER_ACCOUNTS
            (ID,
             USER_ID,
             MONEY,
             FINANCE_TYPE,
             FINANCE_DATE,
             DIRECTION,
             SOURCE_ID,
             SOURCE_TYPE,
             CREATED_AT)
          VALUES
            (USER_ACCOUNTS_SEQ.NEXTVAL,
             v_user_id,
             v_total_amount,
             15,
             v_now,
             '1',
             p_ipspay_id,
             'USER_IPS_PAYMENTS',
             SYSDATE); */
        END;
      END IF;

      /* 超期末支付订单的用户进行冻结账号*/
      UPDATE USERS
         SET ISLOCK = 0
       WHERE NOT EXISTS (SELECT ID
                FROM USER_ORDERS
               WHERE STATUS = 0
                 AND LIMIT_PAY_DATE < v_now
                 AND user_id = v_user_id)
         AND ID = v_user_id;

      /*COUNT*/
      SELECT COUNT(*)
        INTO orders_count
        FROM USER_ORDERS
       WHERE USER_ID = v_user_id
         AND STATUS = 1
         AND LOGISTIC_DETAIL_ID IS NULL
         AND USER_PAYMENT_ID = UNITE_PAYMENT_ID;

      /*country*/
      SELECT NAME_EN
        INTO v_country_name
        FROM USER_COUNTRIES
       WHERE ID = v_country_id;

      /*DELIVER_TYPE_NAME*/
      SELECT NAME_EN
        INTO v_deliver_type_name
        FROM FOREIGN_DELIVER_TYPES
       WHERE ID = v_deliver_type_id;

      /*NO LEGAL ORDERS*/
      IF orders_count = 0 THEN
        BEGIN
          UNITE_CONSIGN_ID := 0;
          RETURN;
        END;
      END IF;

      /*备份
      INSERT INTO LOGISTIC_DETAILS
      (ID,USER_ID,STATUS,CREATED_AT,RECEIVE_NAME,ADDRESS,POSTCODE,TEL,MOBILE_TEL,REMARK,COUNTRY_ID,DELIVER_TYPE_ID,FIRST_NAME,LAST_NAME,KEEP_ORDERS)
      VALUES
      (v_primary_unite_consign_id,v_user_id,0,SYSDATE,v_receive_name,v_country_name||' '||v_address,v_postcode,v_tel,v_mobile_tel,v_remark||v_deliver_type_name||' Paid: '||v_charged_transmit_fee,v_country_id,v_deliver_type_id,v_first_name,v_last_name,v_keep_orders);
      */
      INSERT INTO LOGISTIC_DETAILS
        (ID,
         USER_ID,
         STATUS,
         CREATED_AT,
         REMARKS,
         DELIVERY_TYPE,
         LOGISTIC_TYPE_ID,
         USER_ADDRESS_ID,
         COUNTRY_ID)
      VALUES
        (v_primary_unite_consign_id,
         v_user_id,
         5,
         SYSDATE,
         v_remark || v_deliver_type_name || ' Paid: ' ||
         v_charged_transmit_fee,
         '1',
         v_deliver_type_id,
         v_user_address_id,
         v_country_id);

      /*UPDATE*/
      UPDATE USER_ORDERS
         SET LOGISTIC_DETAIL_ID = v_primary_unite_consign_id
       WHERE USER_ID = v_user_id
         AND STATUS = 1
         AND LOGISTIC_DETAIL_ID IS NULL
         AND USER_PAYMENT_ID = UNITE_PAYMENT_ID;

      IF v_transmit_fee > 0 THEN
        /* 物流邮资流水 */
        INSERT INTO USER_ACCOUNTS
          (ID,
           USER_ID,
           MONEY,
           FINANCE_TYPE,
           FINANCE_DATE,
           FINANCE_NAME,
           DIRECTION,
           SOURCE_ID,
           SOURCE_TYPE,
           CREATED_AT,
           ACCOUNT_OLD,
           ACCOUNT_NEW)
        VALUES
          (USER_ACCOUNTS_SEQ.NEXTVAL,
           v_user_id,
           v_transmit_fee,
           6,
           v_now,
           v_username,
           '1',
           v_primary_unite_consign_id,
           'LOGISTIC_DETAILS',
           SYSDATE,
           V_USER_ACCOUNT,
           V_USER_ACCOUNT - v_transmit_fee);

        V_USER_ACCOUNT := V_USER_ACCOUNT - v_transmit_fee;
      END IF;

      /*合并发货*/
      IF v_unite_consign_id > 0 THEN
        UPDATE USER_ORDERS
           SET LOGISTIC_DETAIL_ID = v_primary_unite_consign_id
         WHERE LOGISTIC_DETAIL_ID = v_unite_consign_id
           AND EXISTS (SELECT ID
                  FROM LOGISTIC_DETAILS
                 WHERE ID = v_unite_consign_id
                   AND STATUS < 2);

        UPDATE USER_ACCOUNTS
           SET SOURCE_ID = v_primary_unite_consign_id
         WHERE SOURCE_ID = v_unite_consign_id
           AND USER_ID = v_user_id;

        /* 合并发货后删除物流信息 */
        DELETE FROM LOGISTICS WHERE ID = v_logistic_id;
        DELETE FROM LOGISTIC_DETAILS WHERE ID = v_unite_consign_id;
      END IF;
      UNITE_CONSIGN_ID := v_primary_unite_consign_id;
      IF v_keep_orders = '0' THEN
        BEGIN
          SELECT SUM(CEIL(SYSDATE - END_DATE - 30) * 0.1)
            INTO v_custody_fee
            FROM USER_ORDERS
           WHERE LOGISTIC_DETAIL_ID = v_primary_unite_consign_id;

          IF v_custody_fee > 0 THEN
            BEGIN
              IF v_user_money < v_total_amount + v_custody_fee THEN
                BEGIN
                  ROLLBACK;
                  RESULT_STATUS := 4;
                  RETURN;
                END;
              END IF;
              /* 保管费流水 */
              INSERT INTO USER_ACCOUNTS
                (ID,
                 USER_ID,
                 MONEY,
                 FINANCE_TYPE,
                 FINANCE_DATE,
                 FINANCE_NAME,
                 DIRECTION,
                 SOURCE_ID,
                 SOURCE_TYPE,
                 CREATED_AT,
                 ACCOUNT_OLD,
                 ACCOUNT_NEW)
              VALUES
                (USER_ACCOUNTS_SEQ.NEXTVAL,
                 v_user_id,
                 v_custody_fee,
                 16,
                 v_now,
                 v_username,
                 '1',
                 v_primary_unite_consign_id,
                 'LOGISTIC_DETAILS',
                 SYSDATE,
                 V_USER_ACCOUNT,
                 V_USER_ACCOUNT - v_custody_fee);
              UPDATE USERS
                 SET ACCOUNT       = ACCOUNT - v_custody_fee,
                     TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_custody_fee
               WHERE ID = v_user_id;
            END;
          END IF;

          SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM DUAL;

          /* 已去掉need_insure字段。如果有保价，需插keep_price保价金额 add by dwen*/
          INSERT INTO LOGISTICS
            (ID,
             USER_ID,
             USER_NAME,
             ADDRESS,
             POSTCODE,
             TEL,
             MOBILE_TEL,
             STATUS,
             REGION_ID,
             LOGISTIC_TYPE_ID,
             POSTAGE,
             TOTAL_FEE,
             USER_ADDRESS_ID,
             ITEMS_COUNT,
             CREATED_AT)
          VALUES
            (v_logistic_id,
             v_user_id,
             v_receive_name,
             v_address,
             v_postcode,
             v_tel,
             v_mobile_tel,
             '5',
             '3',
             v_deliver_type_id,
             v_transmit_fee,
             v_transmit_fee,
             v_user_address_id,
             v_orders_count,
             SYSDATE);
          /*备份
          UPDATE LOGISTIC_DETAILS
          SET LOGISTIC_ID = v_logistic_id,status='1'
          WHERE ID=v_primary_unite_consign_id;*/
          UPDATE LOGISTIC_DETAILS
             SET LOGISTIC_ID = v_logistic_id
           WHERE ID = v_primary_unite_consign_id;
          UPDATE USER_ACCOUNTS
             SET SOURCE_ID = v_logistic_id
           WHERE SOURCE_ID = v_primary_unite_consign_id
             AND USER_ID = v_user_id;
        END;
      END IF;
    END;
  END IF;
  /*---------END--------v_order_ids IS NOT NULL----------------------- */

  /*---------START--------v_order_ids IS NULL----------------------- */
  IF v_order_ids IS NULL AND v_unite_consign_id > 0 THEN
    SELECT SUM(CEIL(SYSDATE - O.END_DATE - 30) * 0.1)
      INTO v_custody_fee
      FROM USER_ORDERS O
      JOIN LOGISTIC_DETAILS C ON (O.LOGISTIC_DETAIL_ID = C.ID)
     WHERE O.LOGISTIC_DETAIL_ID = v_unite_consign_id;

    IF v_custody_fee > 0 THEN
      BEGIN
        /*FIND USER AND ITS TOTAL MONEY*/
        BEGIN
          SELECT TRUE_NAME, ACCOUNT, ACCOUNT
            INTO v_username, v_user_money, V_USER_ACCOUNT
            FROM USERS
           WHERE ID = v_user_id;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            RESULT_STATUS := 2;
            RETURN;
        END;
        IF v_user_money < v_custody_fee THEN
          BEGIN
            ROLLBACK;
            RESULT_STATUS := 4;
            RETURN;
          END;
        END IF;

        /*paypal支付保管费支出流水*/
        IF p_txn_id IS NOT NULL THEN
          BEGIN
            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               FINANCE_NAME,
               DIRECTION,
               SOURCE_ID,
               SOURCE_TYPE,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               v_user_id,
               v_custody_fee,
               16,
               v_now,
               v_username,
               '1',
               v_unite_consign_id,
               'LOGISTIC_DETAILS',
               SYSDATE,
               V_USER_ACCOUNT,
               V_USER_ACCOUNT - v_custody_fee);

            V_USER_ACCOUNT := V_USER_ACCOUNT - v_custody_fee;
          END;
        END IF;
        /* 余额支付保管费支出流水*/
        IF p_txn_id IS NULL THEN
          BEGIN
            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               FINANCE_NAME,
               DIRECTION,
               SOURCE_ID,
               SOURCE_TYPE,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               v_user_id,
               v_custody_fee,
               16,
               v_now,
               v_username,
               '1',
               v_unite_consign_id,
               'LOGISTIC_DETAILS',
               SYSDATE,
               V_USER_ACCOUNT,
               V_USER_ACCOUNT - v_custody_fee);

            V_USER_ACCOUNT := V_USER_ACCOUNT - v_custody_fee;
          END;
        END IF;
        UPDATE USERS
           SET ACCOUNT       = ACCOUNT - v_custody_fee,
               TOTAL_ACCOUNT = TOTAL_ACCOUNT - v_custody_fee
         WHERE ID = v_user_id;
      END;
    END IF;

    UPDATE LOGISTIC_DETAILS
       SET KEEP_ORDERS = '0'
     WHERE ID = v_unite_consign_id
       AND KEEP_ORDERS = '1';

    /*备份
    SELECT RECEIVE_NAME,ADDRESS,POSTCODE,TEL,MOBILE_TEL,DELIVER_TYPE_ID
    INTO v_receive_name,v_address,v_postcode,v_tel,v_mobile_tel,v_deliver_type_id
    FROM LOGISTIC_DETAILS
    WHERE ID=v_unite_consign_id;
    */
    /* modify by dwen */
    SELECT L.USER_NAME,
           L.ADDRESS,
           L.POSTCODE,
           L.TEL,
           L.MOBILE_TEL,
           L.LOGISTIC_TYPE_ID
      INTO v_receive_name,
           v_address,
           v_postcode,
           v_tel,
           v_mobile_tel,
           v_deliver_type_id
      FROM LOGISTIC_DETAILS D
      JOIN LOGISTICS L ON (D.LOGISTIC_ID = L.ID)
     WHERE D.ID = v_unite_consign_id;
    /* 邮资补收 */
    SELECT SUM(MONEY)
      INTO v_transmit_fee
      FROM USER_ACCOUNTS
     WHERE SOURCE_ID = v_unite_consign_id
       AND FINANCE_TYPE = '6';

    SELECT LOGISTICS_SEQ.NEXTVAL INTO v_logistic_id FROM DUAL;
    INSERT INTO LOGISTICS
      (ID,
       USER_ID,
       USER_NAME,
       ADDRESS,
       POSTCODE,
       TEL,
       MOBILE_TEL,
       IS_KEEP,
       STATUS,
       REGION_ID,
       LOGISTIC_TYPE_ID,
       POSTAGE,
       TOTAL_FEE,
       USER_ADDRESS_ID,
       CREATED_AT)
    VALUES
      (v_logistic_id,
       v_user_id,
       v_receive_name,
       v_address,
       v_postcode,
       v_tel,
       v_mobile_tel,
       '0',
       '5',
       '3',
       v_deliver_type_id,
       v_transmit_fee,
       v_transmit_fee,
       v_user_address_id,
       SYSDATE);

    UPDATE LOGISTIC_DETAILS
       SET LOGISTIC_ID = v_logistic_id, status = '5'
     WHERE ID = v_unite_consign_id;

    UPDATE USER_ACCOUNTS
       SET SOURCE_ID = v_logistic_id
     WHERE SOURCE_ID = v_unite_consign_id
       AND USER_ID = v_user_id;
  END IF;
  /*---------END--------v_order_ids IS NULL----------------------- */

  IF v_order_ids IS NOT NULL THEN
    --20120830
    -----
    v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
             ' and o.id in (' || v_order_ids || ')';

    OPEN cur_auction_fee FOR v_sql;
    LOOP
      FETCH cur_auction_fee
        INTO v_auction_id;
      EXIT WHEN cur_auction_fee%NOTFOUND;

      p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
    END LOOP;

  END IF;
  RESULT_STATUS := 0;
  RETURN;

END P_PAYPALEN_PAY_OLD;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_PERIOD_COST_COUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PERIOD_COST_COUNT" (p_start in date,
                                                   p_end   in date,
                                                   p_account_type in varchar2) is

/**
       @author chengyufen
       date 2012.08.06
       @discrible 期度收入/期度成本
  */

  v_per_date                 date := p_start; --期度
  v_per_balance_start        number := 0; --期初余额
  v_per_balance_end          number := 0; --期末余额
  v_per_cost_start_account   number := 0; --期初余额(期度成本)
  v_per_cost_end_account     number := 0; --期末余额 (期度成本)
  v_per_inc_start_account    number := 0; --期初余额(期度收入)
  v_per_inc_end_account      number := 0; --期末余额(期度收入)


  v_per_buy_service          number := 0; --本期竞买服务费
  v_per_post_fee             number := 0; --本期邮资
  v_per_keep_fee             number := 0; --本期保价费
  v_buy_custody_fee          number := 0; --竞买方保管费
  v_buy_insure_fee           number := 0; --竞买方保险费

  v_per_sell_service   number := 0; --委托方服务费
  v_per_onload_fee     number := 0; --本期制作费
  v_per_insure_fee     number := 0; --本期保险费
  v_per_custody_fee    number := 0; --本期保管费
  v_per_other_fee      number := 0; --本期其他费用

  v_per_sell_return    number := 0; --本期委托返点
  v_per_partner_return number := 0; --本期合作方返点
  v_per_sell_score_cash      number := 0; --委托积分提现
  v_per_margin_forfeit number := 0; --本期保证金罚扣
  v_per_book_reduce    number := 0; --本期订金罚扣
  v_per_storage_charge number := 0;  --本期仓储费

  v_init_sell_service    number := 0; --期初服务费(委托方)
  v_init_buy_service     number := 0; --期初服务费(竞买方)
  v_init_onload_fee      number := 0; --期初制作费
  v_init_custody_fee     number := 0; --期初保管费
  v_init_insure_fee      number := 0; --期初保险费
  v_init_other_fee       number := 0; --期初其它费用
  v_init_partner_return  number := 0; --期初合作方返点
  v_init_sell_return     number := 0; --期初委托返点
  v_init_sell_score_cash number := 0;      --期初委托积分提现
  v_init_post_fee             number := 0; --期初邮资
  v_init_keep_fee             number := 0; --期初保价费
  v_init_buy_custody_fee      number := 0;
  v_init_buy_insure_fee       number := 0;
  v_init_margin_forfeit       number := 0; --期初保证金罚扣
  v_init_book_reduce          number := 0; --期初预订资金罚扣
  v_init_storage_charge       number := 0; --期初仓储费

  v_count                     number := 0;
 begin
    /**查询期度小于当前系统月份的记录*/
    select count(1)
      into v_count
      from temp_period_cost t
     where t.period_type = p_account_type
       and t.per_date >= p_start
       and t.per_date <= p_end
       and t.per_date < to_date(to_char(add_months(sysdate,-1),'yyyy-mm'),'yyyy-mm');

    /**如果统计期度大于或等于当前系统的月份，则实时统计，否则只让查历史数据*/
    if to_char(p_start,'yyyy-mm')>=to_char(add_months(sysdate,-1),'yyyy-mm') then
       execute immediate 'delete temp_period_cost where period_type='||p_account_type||'
               and per_date=to_date(''' || to_char(v_per_date, 'YYYY-MM') || ''',''YYYY-MM'')';
    end if;

   --统计期度小于当前系统月份，且在期度表中无历史记录则重新查询，已存在记录则查历史记录
   if v_count=0 then
    if  p_account_type = 3 then       /**期度收入所需字段*/
     /**期初竞买方服务费*/
    select decode(sum(o.actual_charge), null, 0, sum(o.actual_charge))
      into v_init_buy_service
      from user_orders o
     where o.status=1 and o.pay_date < p_start;

     /**期初保险费,制作费,保管费,其它费用,委托方服务费*/
    select decode(sum(tt.insure_fee), null, 0.00, sum(tt.insure_fee)) insure_fee,
           decode(sum(tt.onload_fee), null, 0.00, sum(tt.onload_fee)) onload_fee,
           decode(sum(tt.custody_fee), null, 0.00, sum(tt.custody_fee)) custody_fee,
           decode(sum(tt.orther_fee), null, 0.00, sum(tt.orther_fee)) orther_fee,
           decode(sum(tt.charge_fee), null, 0.00, sum(tt.charge_fee)) charge_fee
      into v_init_insure_fee, v_init_onload_fee,
           v_init_custody_fee, v_init_other_fee,
           v_init_sell_service
     from(
        select decode(t.insure_fee,null,0,t.insure_fee) insure_fee,
               decode(t.onload_fee,null,0,t.onload_fee) onload_fee,
               decode(t.custody_fee,null,0,t.custody_fee) custody_fee,
               decode(t.orther_fee,null,0,t.orther_fee) orther_fee,
               decode(t.charge_fee,null,0,t.charge_fee) charge_fee,
               t.f_check_date
        from settlements t
         where t.status = 2
       union all
        select 0 insure_fee,decode(total_load_fee,null,0,total_load_fee),
               0 custody_fee,decode(others_fee,null,0,others_fee),
               decode(total_charge_fee,null,0,total_charge_fee),f_check_date
          from ec_settlements t
         where status = 2
     ) tt where
           tt.f_check_date >= to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
           and tt.f_check_date < p_start;

    /**期初保证金罚扣*/
    if p_start < to_date('2012-06-30 23:59:59','yyyy-mm-dd hh24:mi:ss') then
    select decode(sum(t.money), null, 0.00, sum(t.money)) money
      into v_init_margin_forfeit
      from user_accounts t
     where t.status = 1
       and t.finance_type = 5
       and t.finance_date < p_start;  --5:坏账扣除
   else
    select decode(sum(um.amount), null, 0.00, sum(um.amount)) money
    into v_init_margin_forfeit
    from user_margins um
   where um.direction = '1'
     and um.margin_type = '4'
     and um.status = '1'
     and um.created_at < p_start;
   end if;

   /**本期竞买方服务费*/
    select decode(sum(o.actual_charge), null, 0, sum(o.actual_charge))
      into v_per_buy_service
      from user_orders o
     where o.status=1 and o.pay_date >= p_start and o.pay_date<=p_end;

    /**本期保险费,制作费,保管费,其它费用,委托方服务费*/
    select decode(sum(tt.insure_fee), null, 0.00, sum(tt.insure_fee)) insure_fee,
           decode(sum(tt.onload_fee), null, 0.00, sum(tt.onload_fee)) onload_fee,
           decode(sum(tt.custody_fee), null, 0.00, sum(tt.custody_fee)) custody_fee,
           decode(sum(tt.orther_fee), null, 0.00, sum(tt.orther_fee)) orther_fee,
           decode(sum(tt.charge_fee), null, 0.00, sum(tt.charge_fee)) charge_fee
      into v_per_insure_fee,v_per_onload_fee,v_per_custody_fee,v_per_other_fee,v_per_sell_service
     from(
        select decode(t.insure_fee,null,0,t.insure_fee) insure_fee,
               decode(t.onload_fee,null,0,t.onload_fee) onload_fee,
               decode(t.custody_fee,null,0,t.custody_fee) custody_fee,
               decode(t.orther_fee,null,0,t.orther_fee) orther_fee,
               decode(t.charge_fee,null,0,t.charge_fee) charge_fee,
               t.f_check_date
        from settlements t
         where t.status = 2
       union all
        select 0 insure_fee,decode(total_load_fee,null,0,total_load_fee),
               0 custody_fee,decode(others_fee,null,0,others_fee),
               decode(total_charge_fee,null,0,total_charge_fee),f_check_date
          from ec_settlements t
         where status = 2
     ) tt where tt.f_check_date >= p_start and tt.f_check_date<=p_end;

     /**本期保证金罚扣*/
    if p_start < to_date('2012-06-30 23:59:59','yyyy-mm-dd hh24:mi:ss') then
      select decode(sum(t.money), null, 0.00, sum(t.money)) money
        into v_per_margin_forfeit
        from user_accounts t
       where t.status = 1
         and t.finance_type = 5
         and t.finance_date>= p_start and t.finance_date<=p_end;  --5:坏账扣除
    else
      select decode(sum(um.amount), null, 0.00, sum(um.amount)) money
      into v_per_margin_forfeit
      from user_margins um
     where um.direction = '1'
       and um.margin_type = '4'
       and um.status = '1'
       and um.created_at>= p_start and um.created_at<=p_end;
     end if;

   end if;

    /**期初邮资保价费*/
    select sum(decode(ua.finance_type, '6', ua.money, 0)) postage,
           sum(decode(ua.finance_type, '7', ua.money, 0)) keepFee,
           sum(decode(ua.finance_type, '8', ua.money, 0)) partner_return,
           sum(decode(ua.finance_type, '16', ua.money, 0)) buyCustodyFee,
           sum(decode(ua.finance_type, '17', ua.money, 0)) buyInsureFee,
           sum(decode(ua.finance_type, '18', ua.money, 0)) sell_return,
           sum(decode(ua.finance_type, '20', ua.money, 0)) sell_cash,
           sum(decode(ua.finance_type, '26', ua.money, 0)) book_reduce,
           sum(decode(ua.finance_type, '27', ua.money, 0)) storage_charge
      into v_init_post_fee,v_init_keep_fee,v_init_partner_return,v_init_buy_custody_fee,
           v_init_buy_insure_fee,v_init_sell_return,v_init_sell_score_cash,
           v_init_book_reduce,v_init_storage_charge
      from user_accounts ua
     where ua.finance_type in (6, 7,8, 16, 17,18,20,26,27)
       and ua.status = 1
       and ua.finance_date < p_start;

    /**本期邮资保价费*/
    select sum(decode(ua.finance_type, '6', ua.money, 0)) postage,
           sum(decode(ua.finance_type, '7', ua.money, 0)) keepFee,
           sum(decode(ua.finance_type, '8', ua.money, 0)) partner_return,
           sum(decode(ua.finance_type, '16', ua.money, 0)) buyCustodyFee,
           sum(decode(ua.finance_type, '17', ua.money, 0)) buyInsureFee,
           sum(decode(ua.finance_type, '18', ua.money, 0)) sell_return,
           sum(decode(ua.finance_type, '20', ua.money, 0)) sell_cash,
           sum(decode(ua.finance_type, '26', ua.money, 0)) book_reduce,
           sum(decode(ua.finance_type, '27', ua.money, 0)) storage_charge
      into v_per_post_fee,v_per_keep_fee,v_per_partner_return,v_buy_custody_fee,v_buy_insure_fee,
           v_per_sell_return,v_per_sell_score_cash,v_per_book_reduce,v_per_storage_charge
      from user_accounts ua
     where ua.finance_type in (6, 7,8, 16, 17,18,20,26,27)
       and ua.status = 1
       and ua.finance_date >= p_start and ua.finance_date<=p_end;

  /**期初余额(期度收入)*/
    v_per_inc_start_account := v_init_buy_service + v_init_post_fee + v_init_keep_fee +
                               v_init_buy_custody_fee + v_init_buy_insure_fee +
                               v_init_margin_forfeit + v_init_sell_service + v_init_onload_fee +
                               v_init_custody_fee + v_init_insure_fee +
                               v_init_other_fee + v_init_book_reduce +  --2013-01-31改动  增加了预订资金罚扣
                               v_init_storage_charge;    --2013-03-26改动  增加了仓储费
    /**期末余额(期度收入)*/
    v_per_inc_end_account := v_per_inc_start_account + v_per_buy_service +
                             v_per_post_fee + v_per_keep_fee + v_buy_custody_fee + v_buy_insure_fee+
                             v_per_sell_service +  v_per_onload_fee + v_per_custody_fee +
                             v_per_insure_fee + v_per_other_fee + v_per_margin_forfeit +
                             v_per_book_reduce + v_per_storage_charge;
    /**期初余额(期度成本)*/
    v_per_cost_start_account := v_init_sell_return + v_init_partner_return +
                                v_init_sell_score_cash;
    /**期末余额(期度成本)*/
    v_per_cost_end_account := v_per_cost_start_account + v_per_sell_return +
                              v_per_partner_return + v_per_sell_score_cash;

    if p_account_type = 3 then
      /**期度收入*/
      v_per_balance_start := v_per_inc_start_account;
      v_per_balance_end   := v_per_inc_end_account;
    elsif p_account_type = 4 then
      /**期度成本*/
      v_per_balance_start := v_per_cost_start_account;
      v_per_balance_end   := v_per_cost_end_account;
    end if;

     insert into temp_period_cost t
      (t.id,
       t.per_date,
       t.per_start_account,
       t.per_end_account,
       t.per_buy_service,
       t.per_post_fee,
       t.per_kee_fee,
       t.per_margin_bucker,
       t.per_sell_fee,
       t.per_onload_fee,
       t.per_insure_fee,
       t.per_custody_fee,
       t.per_other_fee,
       t.per_sell_return,
       t.per_partner_ret,
       t.per_sell_cash,
       t.buy_custody_fee,
       t.buy_insure_fee,
       t.per_book_reduce,
       t.per_storage_charge,
       t.period_type,t.created_at)
    values
      (temp_period_cost_seq.nextval,
       v_per_date,
       v_per_balance_start,
       v_per_balance_end,
       v_per_buy_service,
       v_per_post_fee,
       v_per_keep_fee,
       v_per_margin_forfeit,
       v_per_sell_service,
       v_per_onload_fee,
       v_per_insure_fee,
       v_per_custody_fee,
       v_per_other_fee,
       v_per_sell_return,
       v_per_partner_return,
       v_per_sell_score_cash,
       v_buy_custody_fee,
       v_buy_insure_fee,
       v_per_book_reduce,
       v_per_storage_charge,
       p_account_type,sysdate);
       end if;
end p_period_cost_count;


 
/

-- ----------------------------
-- Procedure structure for P_PERIOD_PAY_ACCOUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PERIOD_PAY_ACCOUNT"(P_START IN DATE, P_END IN DATE, P_ACCOUNT_TYPE IN VARCHAR2) IS
  /**
       @author chengyufen
       date 2012.08.06
       @discrible 期度应付账款/期度收入/期度成本
  */
  V_PER_DATE               DATE := SYSDATE; --期度
  V_PER_PAY_START_ACCOUNT  NUMBER := 0; --期初余额(期度应付账款)
  V_PER_PAY_END_ACCOUNT    NUMBER := 0; --期末余额(期度应付账款)
  V_PER_COST_START_ACCOUNT NUMBER := 0; --期初余额(期度成本)
  V_PER_COST_END_ACCOUNT   NUMBER := 0; --期末余额 (期度成本)
  V_PER_INC_START_ACCOUNT  NUMBER := 0; --期初余额(期度收入)
  V_PER_INC_END_ACCOUNT    NUMBER := 0; --期末余额(期度收入)
  V_PER_BALANCE_START      NUMBER := 0; --期初余额
  V_PER_BALANCE_END        NUMBER := 0; --期末余额
  V_PER_END_PRICE          NUMBER := 0; --本期结标价
  V_PER_BUY_SERVICE        NUMBER := 0; --本期服务费 (竞买方)
  V_PER_SELL_SERVICE       NUMBER := 0; --本期服务费 (委托方)
  V_PER_ONLOAD_FEE         NUMBER := 0; --本期制作费
  V_PER_CUSTODY_FEE        NUMBER := 0; --本期保管费
  V_PER_INSURE_FEE         NUMBER := 0; --本期保险费
  V_PER_OTHER_FEE          NUMBER := 0; --本期其它费用

  V_PER_SHOP_CHARGE_FEE NUMBER := 0; --本期商城手续费
  V_PER_SHOP_ONLOAD_FEE NUMBER := 0; --本期商城制作费
  V_PER_SHOP_ORTHER_FEE NUMBER := 0; --本期商城其它费用
  V_PER_SHOP_AMOUNT     NUMBER := 0; --本期商城结算价
  V_PER_EC_REFUND       NUMBER := 0; --本期商城结算前退货落槌价

  V_PER_CHARGE_FEE_SUM NUMBER := 0; --本期手续费(总计)
  V_PER_ONLOAD_FEE_SUM NUMBER := 0; --本期制作费(总计)
  V_PER_ORTHER_FEE_SUM NUMBER := 0; --本期其它费用(总计)

  V_PER_PARTNER_RETURN NUMBER := 0; --本期合作方返点
  V_PER_SELL_RETURN    NUMBER := 0; --本期委托返点

  V_PER_BID_REFUND_ACCOUNT NUMBER := 0; --本期竞退货转余额
  V_PER_REFUND_ACCOUNT     NUMBER := 0; --本期退货转余额

  V_PER_SELL_SCORE_CASH       NUMBER := 0; --本期委托积分提现
  V_PER_SETTLE_BANK           NUMBER := 0; --本期结算银行转账
  V_PER_SETTLE_CASH           NUMBER := 0; --本期结算现金支付
  V_PER_SETTLE_ACCOUNT        NUMBER := 0; --本期结算转余额
  V_PER_ACTUAL_SETTLE_ACCOUNT NUMBER := 0; --本期实际结算转余额
  V_PER_ACTUAL_SETTLE_BANK    NUMBER := 0; --本期实际结算银行转账
  V_PER_ACTUAL_SETTLE_CASH    NUMBER := 0; --本期实际结算现金支付
  V_PER_PARTNER_BANK          NUMBER := 0; --本期合作方返点银行转账
  V_PER_CUSTOME_REMIT         NUMBER := 0; --本期客户存入
  V_PER_BALANCE_REFUND        NUMBER := 0; --本期余额退款
  V_PER_BALANCE_PAY           NUMBER := 0; --本期余额支付
  V_PER_POST_FEE              NUMBER := 0; --本期邮资
  V_PER_KEEP_FEE              NUMBER := 0; --本期保价费
  V_BUY_CUSTODY_FEE           NUMBER := 0; --竞买方保管费
  V_BUY_INSURE_FEE            NUMBER := 0; --竞买方保险费
  V_PER_MARGIN_FORFEIT        NUMBER := 0; --本期保证金罚扣
  V_ACC_TRANSFER_MARGIN       NUMBER := 0; --本期余额转保证金
  V_MARGIN_TRANSFER_ACC       NUMBER := 0; --本期保证金转余额
  V_PER_MARGINS_ADD           NUMBER := 0; --本期保证金增加
  V_PER_MARGINS_REDUCE        NUMBER := 0; --本期保证金减少
  V_PER_BID_SETTLE_REFUND     NUMBER := 0; --本期结算前退货落槌价(竞拍)
  V_PER_BEFORE_SETTLE_REFUND  NUMBER := 0; --本期结算前退货落槌价(总和)
  V_PER_BOOK_REDUCE           NUMBER := 0; --本期订金罚扣
  V_PER_STORAGE_CHARGE        NUMBER := 0; --本期仓储费

  V_INIT_PAY     NUMBER := 0; --期初支付
  V_INIT_SETTLED NUMBER := 0; --期初已结算

  V_INIT_SELL_SERVICE    NUMBER := 0; --期初服务费(委托方)
  V_INIT_BUY_SERVICE     NUMBER := 0; --期初服务费(竞买方)
  V_INIT_ONLOAD_FEE      NUMBER := 0; --期初制作费
  V_INIT_CUSTODY_FEE     NUMBER := 0; --期初保管费
  V_INIT_INSURE_FEE      NUMBER := 0; --期初保险费
  V_INIT_OTHER_FEE       NUMBER := 0; --期初其它费用
  V_INIT_PARTNER_RETURN  NUMBER := 0; --期初合作方返点
  V_INIT_SELL_RETURN     NUMBER := 0; --期初委托返点
  V_INIT_REFUND_ACCOUNT  NUMBER := 0; --期初退货转余额
  V_INIT_SELL_SCORE_CASH NUMBER := 0; --期初委托积分提现
  V_INIT_PARTNER_BANK    NUMBER := 0; --期初合作方返点银行转账
  V_INIT_CUSTOM_REMIT    NUMBER := 0; --期初客户存入
  V_INIT_BALANCE_REFUND  NUMBER := 0; --期初余额退款
  V_INIT_BALANCE_PAY     NUMBER := 0; --期初余额支付

  V_INIT_POST_FEE        NUMBER := 0; --期初邮资
  V_INIT_KEEP_FEE        NUMBER := 0; --期初保价费
  V_INIT_BUY_CUSTODY_FEE NUMBER := 0;
  V_INIT_BUY_INSURE_FEE  NUMBER := 0;
  V_INIT_MARGIN_FORFEIT  NUMBER := 0; --期初保证金罚扣
  V_INIT_ACCOUNT_IN      NUMBER := 0; --期初余额流入
  V_INIT_ACCOUNT_OUT     NUMBER := 0; --期初余额流出
  V_INIT_MARGINS_IN      NUMBER := 0; --期初保证金流入
  V_INIT_MARGINS_OUT     NUMBER := 0; --期初保证金流出
  V_INIT_BOOK_REDUCE     NUMBER := 0; --期初预订资金罚扣
  V_INIT_STORAGE_CHARGE  NUMBER := 0; --期初仓储费

  V_COUNT NUMBER := 0;

  CURSOR CUR_PERIOD_COST IS
    SELECT TO_CHAR(A.FINANCE_DATE, 'yyyy-mm') FINANCE_DATE
      FROM USER_ACCOUNTS A
     WHERE A.FINANCE_DATE >= P_START
       AND A.FINANCE_DATE <= P_END
     GROUP BY TO_CHAR(A.FINANCE_DATE, 'yyyy-mm')
     ORDER BY FINANCE_DATE;

BEGIN

  FOR RES_PER_COST IN CUR_PERIOD_COST LOOP
    V_PER_DATE := TO_DATE(RES_PER_COST.FINANCE_DATE, 'yyyy-mm');
    /**查询期度小于当前系统月份的记录数*/
    SELECT COUNT(1)
      INTO V_COUNT
      FROM TEMP_PERIOD_COST T
     WHERE T.PERIOD_TYPE = P_ACCOUNT_TYPE
       AND T.PER_DATE = V_PER_DATE
       AND T.PER_DATE < TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'yyyy-mm'), 'yyyy-mm');
    /*and t.per_date < to_date(to_char(trunc(sysdate),'yyyy-mm') , 'yyyy-mm');*/
  
    /**如果统计期度大于或等于当前系统的月份，则实时统计，否则只让查历史数据*/
    IF V_PER_DATE >= TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'yyyy-mm'), 'yyyy-mm') THEN
      EXECUTE IMMEDIATE 'delete temp_period_cost where period_type=' || P_ACCOUNT_TYPE || '
               and per_date=to_date(''' || TO_CHAR(V_PER_DATE, 'YYYY-MM') || ''',''YYYY-MM'')';
    END IF;
  
    --统计期度小于当前系统月份，且在期度表中无历史记录则重新查询，已存在记录则查历史记录
    IF V_COUNT = 0 THEN
      /**期初支付*/
      SELECT SUM((SELECT DECODE(SUM(O.END_PRICE), NULL, 0, SUM(O.END_PRICE))
                    FROM USER_ORDERS O
                   WHERE O.STATUS = 1
                     AND TO_CHAR(O.PAY_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
                     AND O.PAY_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')) +
                 (SELECT DECODE(SUM(GOODS_NUMBER * ORDER_PRICE), NULL, 0.00, SUM(GOODS_NUMBER * ORDER_PRICE))
                    FROM EC_ORDER_GOODS E
                   WHERE E.ORDER_STATUS = '1' -- 订单状态:1:已支付, 2:不支付, 0:待支付
                     AND E.PAY_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                     AND TO_CHAR(E.PAY_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE)
                 
                 /* +
                                                                                                        (select decode(sum(money), null, 0, sum(money))    --add 2013-03-26 仓储费
                                                                                                             from user_accounts
                                                                                                             where status='1' and finance_type=27
                                                                                                          and to_char(finance_date, 'yyyy-mm') < res_per_cost.finance_date
                                                                                                        )*/)
        INTO V_INIT_PAY
        FROM DUAL;
    
      /**期初已结算*/
      SELECT SUM((SELECT DECODE(SUM(T.AMOUNT + T.ORTHER_FEE + T.SERVICE_FEE),
                                NULL,
                                0.00,
                                SUM(T.AMOUNT + T.ORTHER_FEE + T.SERVICE_FEE)) AMOUNT
                    FROM SETTLEMENTS T
                   WHERE STATUS = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
                     AND F_CHECK_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                     AND TO_CHAR(F_CHECK_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(ES.AMOUNT + ES.OTHERS_FEE + ES.TOTAL_CHARGE_FEE + ES.TOTAL_LOAD_FEE),
                                NULL,
                                0.00,
                                SUM(ES.AMOUNT + ES.OTHERS_FEE + ES.TOTAL_CHARGE_FEE + ES.TOTAL_LOAD_FEE)) AMOUNT
                    FROM EC_SETTLEMENTS ES
                   WHERE STATUS = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
                     AND ES.F_CHECK_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                     AND TO_CHAR(ES.F_CHECK_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(O.END_PRICE), NULL, 0.00, SUM(O.END_PRICE)) END_PRICE
                    FROM USER_REFUNDS T
                    JOIN USER_ORDERS O ON (O.ID = T.USER_ORDER_ID)
                   WHERE T.SETTLEMENT_STATUS = 0 -- 1:结算后, 0:结算前
                     AND T.STATUS = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                        -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                        -- 8：退货失败 9：退货成功
                     AND T.COMPLETE_AT >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                     AND TO_CHAR(T.COMPLETE_AT, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(BACK_TOTAL_PRICE), NULL, 0.00, SUM(BACK_TOTAL_PRICE)) BACK_TOTAL_PRICE
                    FROM COMEBACK_EC_GOODS C
                   WHERE C.APPLY_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                     AND TO_CHAR(C.APPLY_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
                     AND BACK_STATUS = 1 -- 0:查核中, 1:通过, 2:拒绝
                     AND BALANCE_STATUS = 0 -- 0:结算后, 1:结算前
                  ))
        INTO V_INIT_SETTLED
        FROM DUAL;
    
      /**期初竞买方服务费*/
      SELECT DECODE(SUM(O.ACTUAL_CHARGE), NULL, 0, SUM(O.ACTUAL_CHARGE))
        INTO V_INIT_BUY_SERVICE
        FROM USER_ORDERS O
       WHERE O.STATUS = 1
         AND TO_CHAR(O.PAY_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      /**期初邮资保价费*/
      SELECT DECODE(SUM(KB.POSTAGE), NULL, 0, SUM(KB.POSTAGE)) POSTAGE,
             DECODE(SUM(KA.KEEPFEE), NULL, 0, SUM(KA.KEEPFEE)) KEEPFEE,
             DECODE(SUM(KC.CUSTODYFEE), NULL, 0, SUM(KC.CUSTODYFEE)) BUYCUSTODYFEE,
             DECODE(SUM(KD.INSUREFEE), NULL, 0, SUM(KD.INSUREFEE)) BUYINSUREFEE
        INTO V_INIT_POST_FEE, V_INIT_KEEP_FEE, V_INIT_BUY_CUSTODY_FEE, V_INIT_BUY_INSURE_FEE
        FROM USER_ACCOUNTS UA
        LEFT JOIN (SELECT B.MONEY POSTAGE, B.ID
                     FROM USER_ACCOUNTS B
                    WHERE B.FINANCE_TYPE = 6
                      AND B.STATUS = 1) KB ON KB.ID = UA.ID
        LEFT JOIN (SELECT A.MONEY KEEPFEE, A.ID
                     FROM USER_ACCOUNTS A
                    WHERE A.FINANCE_TYPE = 7
                      AND A.STATUS = 1) KA ON KA.ID = UA.ID
        LEFT JOIN (SELECT A.MONEY CUSTODYFEE, A.ID
                     FROM USER_ACCOUNTS A
                    WHERE A.FINANCE_TYPE = 16
                      AND A.STATUS = 1) KC ON KC.ID = UA.ID
        LEFT JOIN (SELECT A.MONEY INSUREFEE, A.ID
                     FROM USER_ACCOUNTS A
                    WHERE A.FINANCE_TYPE = 17
                      AND A.STATUS = 1) KD ON KD.ID = UA.ID
       WHERE UA.FINANCE_TYPE IN (6, 7, 16, 17)
         AND UA.STATUS = 1
         AND TO_CHAR(UA.FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      /**期初保证金罚扣*/
      IF V_PER_DATE < TO_DATE('2012-07', 'yyyy-mm') THEN
        SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
          INTO V_INIT_MARGIN_FORFEIT
          FROM USER_ACCOUNTS T
         WHERE T.STATUS = 1
           AND T.FINANCE_TYPE = 5
           AND TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE; --5:坏账扣除
      ELSE
        SELECT DECODE(SUM(UM.AMOUNT), NULL, 0.00, SUM(UM.AMOUNT)) MONEY
          INTO V_INIT_MARGIN_FORFEIT
          FROM USER_MARGINS UM
         WHERE UM.DIRECTION = '1'
           AND UM.MARGIN_TYPE = '4'
           AND UM.STATUS = '1'
           AND TO_CHAR(UM.CREATED_AT, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
      END IF;
    
      /**期初保险费,制作费,保管费,其它费用,委托方服务费*/
      /*select decode(sum(t.insure_fee), null, 0.00, sum(t.insure_fee)) insure_fee,
            decode(sum(t.onload_fee), null, 0.00, sum(t.onload_fee)) onload_fee,
            decode(sum(t.custody_fee), null, 0.00, sum(t.custody_fee)) custody_fee,
            decode(sum(t.orther_fee), null, 0.00, sum(t.orther_fee)) orther_fee,
            decode(sum(t.charge_fee), null, 0.00, sum(t.charge_fee)) charge_fee
       into v_init_insure_fee,
            v_init_onload_fee,
            v_init_custody_fee,
            v_init_other_fee,
            v_init_sell_service
       from settlements t
      where t.status = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
        and t.f_check_date >=
            to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
        and to_char(t.f_check_date, 'yyyy-mm') < res_per_cost.finance_date;*/
    
      SELECT DECODE(SUM(TT.INSURE_FEE), NULL, 0.00, SUM(TT.INSURE_FEE)) INSURE_FEE,
             DECODE(SUM(TT.ONLOAD_FEE), NULL, 0.00, SUM(TT.ONLOAD_FEE)) ONLOAD_FEE,
             DECODE(SUM(TT.CUSTODY_FEE), NULL, 0.00, SUM(TT.CUSTODY_FEE)) CUSTODY_FEE,
             DECODE(SUM(TT.ORTHER_FEE), NULL, 0.00, SUM(TT.ORTHER_FEE)) ORTHER_FEE,
             DECODE(SUM(TT.CHARGE_FEE), NULL, 0.00, SUM(TT.CHARGE_FEE)) CHARGE_FEE
        INTO V_INIT_INSURE_FEE, V_INIT_ONLOAD_FEE, V_INIT_CUSTODY_FEE, V_INIT_OTHER_FEE, V_INIT_SELL_SERVICE
        FROM (SELECT DECODE(T.INSURE_FEE, NULL, 0, T.INSURE_FEE) INSURE_FEE,
                     DECODE(T.ONLOAD_FEE, NULL, 0, T.ONLOAD_FEE) ONLOAD_FEE,
                     DECODE(T.CUSTODY_FEE, NULL, 0, T.CUSTODY_FEE) CUSTODY_FEE,
                     DECODE(T.ORTHER_FEE, NULL, 0, T.ORTHER_FEE) ORTHER_FEE,
                     DECODE(T.CHARGE_FEE, NULL, 0, T.CHARGE_FEE) CHARGE_FEE,
                     T.F_CHECK_DATE
                FROM SETTLEMENTS T
               WHERE T.STATUS = 2
              UNION ALL
              SELECT 0 INSURE_FEE,
                     DECODE(TOTAL_LOAD_FEE, NULL, 0, TOTAL_LOAD_FEE),
                     0 CUSTODY_FEE,
                     DECODE(OTHERS_FEE, NULL, 0, OTHERS_FEE),
                     DECODE(TOTAL_CHARGE_FEE, NULL, 0, TOTAL_CHARGE_FEE),
                     F_CHECK_DATE
                FROM EC_SETTLEMENTS T
               WHERE STATUS = 2) TT
       WHERE TT.F_CHECK_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         AND TO_CHAR(TT.F_CHECK_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      /**期初委托返点*/
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_INIT_SELL_RETURN
        FROM USER_ACCOUNTS
       WHERE TO_CHAR(FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND FINANCE_TYPE = 18
         AND STATUS = 1;
    
      /**期初委托积分提现*/
      SELECT DECODE(SUM(M.MONEY), NULL, 0, SUM(M.MONEY))
        INTO V_INIT_SELL_SCORE_CASH
        FROM USER_ACCOUNTS M
       WHERE M.STATUS = 1
         AND M.FINANCE_TYPE = 20
         AND TO_CHAR(M.FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      /**期初合作方返点*/
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_INIT_PARTNER_RETURN
        FROM USER_ACCOUNTS
       WHERE TO_CHAR(FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND FINANCE_TYPE = 8
         AND STATUS = 1;
    
      /**期初退货转余额*/
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_INIT_REFUND_ACCOUNT
        FROM USER_ACCOUNTS
       WHERE TO_CHAR(FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND FINANCE_TYPE IN (12, 14)
         AND STATUS = 1;
    
      /**期初合作方返点银行转账*/
      SELECT DECODE(SUM(P.AGREEMENT_CHARGE_FEE), NULL, 0, SUM(P.AGREEMENT_CHARGE_FEE))
        INTO V_INIT_PARTNER_BANK
        FROM PARTNER_PAYMENTS P
       WHERE P.PAY_TYPE = 2
         AND P.STATUS = 3
         AND TO_CHAR(P.PAY_AT, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      /**期初客户存入*/
      SELECT DECODE(SUM(MONEY), NULL, 0.00, SUM(MONEY)) MONEY
        INTO V_INIT_CUSTOM_REMIT
        FROM (SELECT DECODE(T.FINANCE_TYPE, 23, -T.MONEY, T.MONEY) MONEY
                FROM USER_ACCOUNTS T
               WHERE T.STATUS = 1
                 AND T.FINANCE_TYPE IN (0, 1, 10, 15, 9, 23)
                 AND TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE);
    
      /**期初余额退款*/
      SELECT DECODE(SUM(RE.MONEY), NULL, 0, SUM(RE.MONEY))
        INTO V_INIT_BALANCE_REFUND
        FROM USER_ACCOUNTS RE
       WHERE RE.FINANCE_TYPE = 3
         AND STATUS = 1
         AND TO_CHAR(RE.FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      /**期初支付流水*/
      SELECT SUM((SELECT DECODE(SUM(MONEY), NULL, 0, SUM(MONEY))
                   FROM USER_ACCOUNTS
                  WHERE FINANCE_TYPE IN (11, 24, 25)
                    AND STATUS = 1
                    AND TO_CHAR(FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE))
        INTO V_INIT_BALANCE_PAY
        FROM DUAL;
    
      --A6_1(期初流入余额 )
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_INIT_ACCOUNT_IN
        FROM USER_ACCOUNTS
       WHERE FINANCE_DATE >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         AND TO_CHAR(FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND STATUS = 1
         AND DIRECTION = 0;
    
      --A6_2(期初流出余额)
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_INIT_ACCOUNT_OUT
        FROM USER_ACCOUNTS
       WHERE FINANCE_DATE >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         AND TO_CHAR(FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND STATUS = 1
         AND DIRECTION = 1;
    
      --A11_1(期初流入保证金)
      SELECT DECODE(ROUND(SUM(AMOUNT), 2), NULL, 0.00, ROUND(SUM(AMOUNT), 2)) AMOUNT
        INTO V_INIT_MARGINS_IN
        FROM USER_MARGINS T
       WHERE T.CREATED_AT >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         AND TO_CHAR(T.CREATED_AT, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND T.DIRECTION = 0; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）
    
      --A11_2(期初流出保证金)
      SELECT DECODE(ROUND(SUM(AMOUNT), 2), NULL, 0.00, ROUND(SUM(AMOUNT), 2)) AMOUNT
        INTO V_INIT_MARGINS_OUT
        FROM USER_MARGINS T
       WHERE T.CREATED_AT >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         AND TO_CHAR(T.CREATED_AT, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE
         AND T.DIRECTION = 1; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）
    
      --期初订金罚扣、期初仓储费
      SELECT DECODE(SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0)),
                    NULL,
                    0,
                    SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0))) MONEY,
             DECODE(SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0)),
                    NULL,
                    0,
                    SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0))) STORAGE_CHARGE
        INTO V_INIT_BOOK_REDUCE, V_INIT_STORAGE_CHARGE
        FROM USER_ACCOUNTS B
       WHERE B.FINANCE_TYPE IN (26, 27)
         AND B.STATUS = 1
         AND TO_CHAR(B.FINANCE_DATE, 'yyyy-mm') < RES_PER_COST.FINANCE_DATE;
    
      ------------------------------------------------其他费用------------------------------------------
      /**本期结标价*/
      SELECT SUM((SELECT DECODE(SUM(O.END_PRICE), NULL, 0, SUM(O.END_PRICE))
                    FROM USER_ORDERS O
                   WHERE O.STATUS = 1
                     AND TO_CHAR(O.PAY_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(GOODS_NUMBER * ORDER_PRICE), NULL, 0.00, SUM(GOODS_NUMBER * ORDER_PRICE))
                    FROM EC_ORDER_GOODS E
                   WHERE E.ORDER_STATUS = '1' -- 订单状态:0:待支付, 1:已支付, 2:不支付
                     AND TO_CHAR(E.PAY_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_END_PRICE
        FROM DUAL;
    
      /**本期结算前退货落槌价(竞拍平台)*/
      SELECT DECODE(SUM(O.END_PRICE), NULL, 0.00, SUM(O.END_PRICE)) END_PRICE
        INTO V_PER_BID_SETTLE_REFUND
        FROM USER_REFUNDS T
        JOIN USER_ORDERS O ON (O.ID = T.USER_ORDER_ID)
       WHERE T.SETTLEMENT_STATUS = 0 -- 1:结算后, 0:结算前
         AND T.STATUS = 9
         AND TO_CHAR(T.COMPLETE_AT, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      --结算前退货落槌价——普通商品
      SELECT DECODE(SUM(BACK_TOTAL_PRICE), NULL, 0.00, SUM(BACK_TOTAL_PRICE)) BACK_TOTAL_PRICE
        INTO V_PER_EC_REFUND
        FROM COMEBACK_EC_GOODS C
       WHERE TO_CHAR(C.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE
         AND BACK_STATUS = 1 -- 0:查核中, 1:通过, 2:拒绝
         AND BALANCE_STATUS = 0; -- 0:结算前, 1:结算后
    
      /**本期竞买方服务费*/
      SELECT DECODE(SUM(O.ACTUAL_CHARGE), NULL, 0, SUM(O.ACTUAL_CHARGE))
        INTO V_PER_BUY_SERVICE
        FROM USER_ORDERS O
       WHERE O.STATUS = 1
         AND TO_CHAR(O.PAY_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      /**本期邮资,保价费、本期竞买方保管费、本期竞买方保险费*/
      SELECT DECODE(SUM(KB.POSTAGE), NULL, 0, SUM(KB.POSTAGE)) POSTAGE,
             DECODE(SUM(KA.KEEPFEE), NULL, 0, SUM(KA.KEEPFEE)) KEEPFEE,
             DECODE(SUM(KC.CUSTODYFEE), NULL, 0, SUM(KC.CUSTODYFEE)) BUYCUSTODYFEE,
             DECODE(SUM(KD.INSUREFEE), NULL, 0, SUM(KD.INSUREFEE)) BUYINSUREFEE
        INTO V_PER_POST_FEE, V_PER_KEEP_FEE, V_BUY_CUSTODY_FEE, V_BUY_INSURE_FEE
        FROM USER_ACCOUNTS UA
        LEFT JOIN (SELECT B.MONEY POSTAGE, B.ID FROM USER_ACCOUNTS B WHERE B.FINANCE_TYPE = 6) KB ON KB.ID = UA.ID
        LEFT JOIN (SELECT A.MONEY KEEPFEE, A.ID FROM USER_ACCOUNTS A WHERE A.FINANCE_TYPE = 7) KA ON KA.ID = UA.ID
        LEFT JOIN (SELECT A.MONEY CUSTODYFEE, A.ID FROM USER_ACCOUNTS A WHERE A.FINANCE_TYPE = 16) KC ON KC.ID = UA.ID
        LEFT JOIN (SELECT A.MONEY INSUREFEE, A.ID FROM USER_ACCOUNTS A WHERE A.FINANCE_TYPE = 17) KD ON KD.ID = UA.ID
       WHERE UA.FINANCE_TYPE IN (6, 7, 16, 17)
         AND UA.STATUS = 1
         AND TO_CHAR(UA.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      /**本期保证金罚扣*/
      /*  if p_start < to_date('2012-06-30 23:59:59','yyyy-mm-dd hh24:mi:ss') then    */
      IF V_PER_DATE < TO_DATE('2012-07', 'yyyy-mm') THEN
        SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
          INTO V_PER_MARGIN_FORFEIT
          FROM USER_ACCOUNTS T
         WHERE T.STATUS = 1
           AND T.FINANCE_TYPE = 5
           AND TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE; --5:坏账扣除
      ELSE
        SELECT DECODE(SUM(UM.AMOUNT), NULL, 0.00, SUM(UM.AMOUNT)) MONEY
          INTO V_PER_MARGIN_FORFEIT
          FROM USER_MARGINS UM
         WHERE UM.DIRECTION = '1'
           AND UM.MARGIN_TYPE = '4'
           AND UM.STATUS = '1'
           AND TO_CHAR(UM.CREATED_AT, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
      END IF;
    
      /**本期保险费,制作费,保管费,其它费用,委托方服务费*/
      SELECT DECODE(SUM(T.INSURE_FEE), NULL, 0.00, SUM(T.INSURE_FEE)) INSURE_FEE,
             DECODE(SUM(T.ONLOAD_FEE), NULL, 0.00, SUM(T.ONLOAD_FEE)) ONLOAD_FEE,
             DECODE(SUM(T.CUSTODY_FEE), NULL, 0.00, SUM(T.CUSTODY_FEE)) CUSTODY_FEE,
             DECODE(SUM(T.ORTHER_FEE), NULL, 0.00, SUM(T.ORTHER_FEE)) ORTHER_FEE,
             /*decode(sum(t.service_fee), null, 0.00, sum(t.service_fee)) service_fee*/
             DECODE(SUM(T.CHARGE_FEE), NULL, 0.00, SUM(T.CHARGE_FEE)) CHARGE_FEE
        INTO V_PER_INSURE_FEE, V_PER_ONLOAD_FEE, V_PER_CUSTODY_FEE, V_PER_OTHER_FEE, V_PER_SELL_SERVICE
        FROM SETTLEMENTS T
       WHERE T.STATUS = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
         AND TO_CHAR(T.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      SELECT DECODE(SUM(T.AMOUNT), NULL, 0.00, SUM(T.AMOUNT)) AMOUNT,
             DECODE(SUM(T.TOTAL_CHARGE_FEE), NULL, 0.00, SUM(T.TOTAL_CHARGE_FEE)) CHARGE_FEE,
             DECODE(SUM(T.TOTAL_LOAD_FEE), NULL, 0.00, SUM(T.TOTAL_LOAD_FEE)) ONLOAD_FEE,
             DECODE(SUM(T.OTHERS_FEE), NULL, 0.00, SUM(T.OTHERS_FEE)) ORTHER_FEE
        INTO V_PER_SHOP_AMOUNT, V_PER_SHOP_CHARGE_FEE, V_PER_SHOP_ONLOAD_FEE, V_PER_SHOP_ORTHER_FEE
        FROM EC_SETTLEMENTS T
       WHERE STATUS IN (2) -- 0：待转账 1：转账 2：已经完成 3：不通过
         AND TO_CHAR(T.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      /**本期委托返点*/
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_PER_SELL_RETURN
        FROM USER_ACCOUNTS
       WHERE TO_CHAR(FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE
         AND FINANCE_TYPE = 18
         AND STATUS = 1;
    
      /**本期合作方返点*/
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_PER_PARTNER_RETURN
        FROM USER_ACCOUNTS
       WHERE TO_CHAR(FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE
         AND FINANCE_TYPE = 8
         AND STATUS = 1;
    
      /**本期退货转余额--竞拍平台*/
      SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
        INTO V_PER_BID_REFUND_ACCOUNT
        FROM USER_ACCOUNTS
       WHERE TO_CHAR(FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE
         AND FINANCE_TYPE IN (12, 14)
         AND STATUS = 1;
    
      /**本期委托积分提现*/
      SELECT DECODE(SUM(M.MONEY), NULL, 0.00, SUM(M.MONEY))
        INTO V_PER_SELL_SCORE_CASH
        FROM USER_ACCOUNTS M
       WHERE M.STATUS = 1
         AND M.FINANCE_TYPE = 20
         AND TO_CHAR(M.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      /**本期结算银行转账*/
      SELECT SUM((SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                    FROM (SELECT D.AMOUNT,
                                 (SELECT SETT.F_CHECK_DATE FROM SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                            FROM SETTLEMENT_DESPATCHES D
                           WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                             AND D.F_CHECK_STATUS = 1) AA
                   WHERE TO_CHAR(AA.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                    FROM (SELECT D.AMOUNT,
                                 (SELECT SETT.F_CHECK_DATE FROM EC_SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                            FROM EC_SETTLEMENT_DESPATCHES D
                           WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                             AND D.F_CHECK_STATUS = 1) AA
                   WHERE TO_CHAR(AA.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_SETTLE_BANK
        FROM DUAL;
    
      /**本期结算现金支付*/
      SELECT SUM((SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                    FROM (SELECT D.AMOUNT,
                                 (SELECT SETT.F_CHECK_DATE FROM SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                            FROM SETTLEMENT_DESPATCHES D
                           WHERE D.CHECKOUT_TYPE IN (0, 4)
                             AND D.F_CHECK_STATUS = 1) AA
                   WHERE TO_CHAR(AA.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                    FROM (SELECT D.AMOUNT,
                                 (SELECT SETT.F_CHECK_DATE FROM EC_SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                            FROM EC_SETTLEMENT_DESPATCHES D
                           WHERE D.CHECKOUT_TYPE IN (0, 4)
                             AND D.F_CHECK_STATUS = 1) AA
                   WHERE TO_CHAR(AA.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_SETTLE_CASH
        FROM DUAL;
    
      /**本期结算转余额*/
      SELECT SUM((SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                    FROM (SELECT D.AMOUNT,
                                 (SELECT SETT.F_CHECK_DATE FROM SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                            FROM SETTLEMENT_DESPATCHES D
                           WHERE D.CHECKOUT_TYPE = '2'
                             AND D.F_CHECK_STATUS = 1) AA
                   WHERE TO_CHAR(AA.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                    FROM (SELECT D.AMOUNT,
                                 (SELECT SETT.F_CHECK_DATE FROM EC_SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                            FROM EC_SETTLEMENT_DESPATCHES D
                           WHERE D.CHECKOUT_TYPE = 2
                             AND D.F_CHECK_STATUS = 1) AA
                   WHERE TO_CHAR(AA.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_SETTLE_ACCOUNT
        FROM DUAL;
    
      /**本期实际结算转余额*/
      SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
        INTO V_PER_ACTUAL_SETTLE_ACCOUNT
        FROM USER_ACCOUNTS T
       WHERE TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE
         AND T.STATUS = 1
         AND T.FINANCE_TYPE = 13; --13:结算转余额 （由于2011-01分配项29825缺对应的流水故按流水统计）
    
      /*     select sum((
            select decode(sum(t.money),null,0.00,sum(t.money)) money
            from user_accounts t
           where to_char(t.finance_date, 'yyyy-mm') = res_per_cost.finance_date
             and t.status = 1
             and t.finance_type = 13  --13:结算转余额 （由于2011-01分配项29825缺对应的流水故按流水统计）
         ) +
          (select decode(sum(d.amount), null, 0, sum(d.amount))
                from ec_settlement_despatches d
                where d.checkout_type = 2 and d.f_check_status = 1
                  and to_char(d.f_check_date, 'yyyy-mm') = res_per_cost.finance_date))
         into v_per_actual_settle_account
      from dual; */
    
      /**本期实际结算银行转账*/
      SELECT SUM((SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                    FROM SETTLEMENT_DESPATCHES D
                   WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                     AND D.F_CHECK_STATUS = 1
                     AND TO_CHAR(D.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                    FROM EC_SETTLEMENT_DESPATCHES D
                   WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                     AND D.F_CHECK_STATUS = 1
                     AND TO_CHAR(D.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_ACTUAL_SETTLE_BANK
        FROM DUAL;
    
      /**本期实际结算现金支付*/
      SELECT SUM((SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                    FROM SETTLEMENT_DESPATCHES D
                   WHERE D.CHECKOUT_TYPE IN (0, 4)
                     AND D.F_CHECK_STATUS = 1
                     AND TO_CHAR(D.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE) +
                 (SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                    FROM EC_SETTLEMENT_DESPATCHES D
                   WHERE D.CHECKOUT_TYPE IN (0, 4)
                     AND D.F_CHECK_STATUS = 1
                     AND TO_CHAR(D.F_CHECK_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_ACTUAL_SETTLE_CASH
        FROM DUAL;
    
      /**本期合作方返点银行转账*/
      SELECT DECODE(SUM(P.AGREEMENT_CHARGE_FEE), NULL, 0, SUM(P.AGREEMENT_CHARGE_FEE))
        INTO V_PER_PARTNER_BANK
        FROM PARTNER_PAYMENTS P
       WHERE P.PAY_TYPE = 2
         AND P.STATUS = 3
         AND TO_CHAR(P.PAY_AT, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      /**本期客户存入*/
      SELECT DECODE(SUM(MONEY), NULL, 0.00, SUM(MONEY)) MONEY
        INTO V_PER_CUSTOME_REMIT
        FROM (SELECT DECODE(T.FINANCE_TYPE, 23, -T.MONEY, T.MONEY) MONEY
                FROM USER_ACCOUNTS T
               WHERE T.STATUS = 1
                 AND T.FINANCE_TYPE IN (0, 1, 10, 15, 9, 23, 32, 42)--42 支付宝支付存入  即支付宝充值
                 AND TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE);
    
      /**本期余额退款*/
      SELECT DECODE(SUM(RE.MONEY), NULL, 0, SUM(RE.MONEY))
        INTO V_PER_BALANCE_REFUND
        FROM USER_ACCOUNTS RE
       WHERE RE.FINANCE_TYPE = 3
         AND STATUS = 1
         AND TO_CHAR(RE.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      /**本期支付*/
      SELECT SUM((SELECT DECODE(SUM(MONEY), NULL, 0, SUM(MONEY))
                   FROM USER_ACCOUNTS
                  WHERE FINANCE_TYPE IN (11, 24, 25, 19, 27, 33, 43) --add 2013-03-26 新增仓储费
                    AND STATUS = 1
                    AND TO_CHAR(FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE))
        INTO V_PER_BALANCE_PAY
        FROM DUAL; --11:交易单支付  24: 余额+IPS支付  25: 余额+SDO支付 19:商城订单合并支付 27:仓储费 33tenpay+余额 43 alipay+余额
    
      --F12:(余额转入保证金)
      SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
        INTO V_ACC_TRANSFER_MARGIN
        FROM USER_ACCOUNTS T
       WHERE T.STATUS = 1
         AND T.FINANCE_TYPE = 4
         AND TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE; --4:余额转入保证金
    
      --F12:(保证金转余额)
      SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
        INTO V_MARGIN_TRANSFER_ACC
        FROM USER_ACCOUNTS T
       WHERE T.STATUS = 1
         AND T.FINANCE_TYPE = 2
         AND TO_CHAR(T.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE; --2:保证金转余额
    
      --v_a13:保证金流入
      SELECT DECODE(ROUND(SUM(AMOUNT), 2), NULL, 0.00, ROUND(SUM(AMOUNT), 2)) AMOUNT
        INTO V_PER_MARGINS_ADD
        FROM USER_MARGINS T
       WHERE T.DIRECTION = 0
         AND TO_CHAR(T.CREATED_AT, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      --本期预订资金罚扣、本期仓储费
      SELECT DECODE(SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0)),
                    NULL,
                    0,
                    SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0))) MONEY,
             DECODE(SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0)),
                    NULL,
                    0,
                    SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0))) STORAGE_CHARGE
        INTO V_PER_BOOK_REDUCE, V_PER_STORAGE_CHARGE
        FROM USER_ACCOUNTS B
       WHERE B.FINANCE_TYPE IN (26, 27)
         AND B.STATUS = 1
         AND TO_CHAR(B.FINANCE_DATE, 'yyyy-mm') = RES_PER_COST.FINANCE_DATE;
    
      --本期保证金流出
      V_PER_MARGINS_REDUCE := V_MARGIN_TRANSFER_ACC + V_PER_MARGIN_FORFEIT;
    
      --本期退货转余额
      V_PER_REFUND_ACCOUNT := V_PER_BID_REFUND_ACCOUNT + V_PER_EC_REFUND;
    
      --本期结算前退货落槌价
      V_PER_BEFORE_SETTLE_REFUND := V_PER_BID_SETTLE_REFUND + V_PER_EC_REFUND;
    
      V_PER_CHARGE_FEE_SUM := V_PER_SELL_SERVICE + V_PER_SHOP_CHARGE_FEE;
      V_PER_ONLOAD_FEE_SUM := V_PER_ONLOAD_FEE + V_PER_SHOP_ONLOAD_FEE;
      V_PER_ORTHER_FEE_SUM := V_PER_OTHER_FEE + V_PER_SHOP_ORTHER_FEE;
    
      /**期初余额(应付账款)*/ --2013-01-31改动  增加了预订资金罚扣  2013-03-26期初支付（v_init_pay）增加仓储费
      V_PER_PAY_START_ACCOUNT := (V_INIT_PAY - V_INIT_SETTLED) + (V_INIT_ACCOUNT_IN - V_INIT_ACCOUNT_OUT) +
                                 (V_INIT_MARGINS_IN - V_INIT_MARGINS_OUT) - V_INIT_BOOK_REDUCE;
      /**期末余额(应付账款)*/ --2013-03-26 本期支付（v_per_balance_pay）增加仓储费
      V_PER_PAY_END_ACCOUNT := V_PER_PAY_START_ACCOUNT +
                               ((V_PER_END_PRICE -
                               (V_PER_INSURE_FEE + V_PER_ONLOAD_FEE_SUM + V_PER_CUSTODY_FEE + V_PER_CHARGE_FEE_SUM +
                               V_PER_ORTHER_FEE_SUM + V_PER_SETTLE_BANK + V_PER_SETTLE_CASH + V_PER_SETTLE_ACCOUNT +
                               V_PER_BEFORE_SETTLE_REFUND)) +
                               (V_PER_CUSTOME_REMIT + V_PER_ACTUAL_SETTLE_ACCOUNT + V_PER_REFUND_ACCOUNT +
                               V_PER_SELL_RETURN + V_PER_SELL_SCORE_CASH + V_MARGIN_TRANSFER_ACC -
                               V_PER_BALANCE_REFUND - V_PER_BALANCE_PAY - V_PER_POST_FEE - V_PER_KEEP_FEE -
                               V_BUY_CUSTODY_FEE - V_BUY_INSURE_FEE - V_ACC_TRANSFER_MARGIN) +
                               (V_PER_MARGINS_ADD - V_PER_MARGINS_REDUCE)) - V_PER_BOOK_REDUCE;
      /**期初余额(期度收入)*/
      V_PER_INC_START_ACCOUNT := V_INIT_BUY_SERVICE + V_INIT_POST_FEE + V_INIT_KEEP_FEE + V_INIT_BUY_CUSTODY_FEE +
                                 V_INIT_BUY_INSURE_FEE + V_INIT_MARGIN_FORFEIT + V_INIT_SELL_SERVICE +
                                 V_INIT_ONLOAD_FEE + V_INIT_CUSTODY_FEE + V_INIT_INSURE_FEE + V_INIT_OTHER_FEE +
                                 V_INIT_BOOK_REDUCE + --2013-01-31改动  增加了预订资金罚扣
                                 V_INIT_STORAGE_CHARGE; --2013-03-26改动  增加了仓储费
      /**期末余额(期度收入)*/
      V_PER_INC_END_ACCOUNT := V_PER_INC_START_ACCOUNT + V_PER_BUY_SERVICE + V_PER_POST_FEE + V_PER_KEEP_FEE +
                               V_BUY_CUSTODY_FEE + V_BUY_INSURE_FEE + V_PER_MARGIN_FORFEIT + V_PER_CHARGE_FEE_SUM +
                               V_PER_ONLOAD_FEE_SUM + V_PER_CUSTODY_FEE + V_PER_INSURE_FEE + V_PER_ORTHER_FEE_SUM +
                               V_PER_BOOK_REDUCE + V_PER_STORAGE_CHARGE;
      /**期初余额(期度成本)*/
      V_PER_COST_START_ACCOUNT := V_INIT_SELL_RETURN + V_INIT_PARTNER_RETURN + V_INIT_SELL_SCORE_CASH;
      /**期末余额(期度成本)*/
      V_PER_COST_END_ACCOUNT := V_PER_COST_START_ACCOUNT + V_PER_SELL_RETURN + V_PER_PARTNER_RETURN +
                                V_PER_SELL_SCORE_CASH;
    
      IF P_ACCOUNT_TYPE = 2 THEN
        /**期度应付账款*/
        V_PER_BALANCE_START := V_PER_PAY_START_ACCOUNT;
        V_PER_BALANCE_END   := V_PER_PAY_END_ACCOUNT;
      ELSIF P_ACCOUNT_TYPE = 3 THEN
        /**期度收入*/
        V_PER_BALANCE_START := V_PER_INC_START_ACCOUNT;
        V_PER_BALANCE_END   := V_PER_INC_END_ACCOUNT;
      ELSIF P_ACCOUNT_TYPE = 4 THEN
        /**期度成本*/
        V_PER_BALANCE_START := V_PER_COST_START_ACCOUNT;
        V_PER_BALANCE_END   := V_PER_COST_END_ACCOUNT;
      END IF;
    
      INSERT INTO TEMP_PERIOD_COST T
        (T.ID,
         T.PER_DATE,
         T.PER_START_ACCOUNT,
         T.PER_END_ACCOUNT,
         T.PER_BUY_SERVICE,
         T.PER_POST_FEE,
         T.PER_KEE_FEE,
         T.PER_MARGIN_BUCKER,
         T.PER_SELL_FEE,
         T.PER_ONLOAD_FEE,
         T.PER_INSURE_FEE,
         T.PER_CUSTODY_FEE,
         T.PER_OTHER_FEE,
         T.PER_SELL_RETURN,
         T.PER_PARTNER_RET,
         T.PER_SELL_CASH,
         T.PER_END_PRICE,
         T.PER_REFUND_ACCOUNT,
         T.PER_SETTLE_BANK_TRANSFER,
         T.PER_SETTLE_CASH_PAY,
         T.PER_SETTLE_TRANSFER_ACCOUNT,
         T.PER_PARTNER_BANK_TRANSFER,
         T.PER_CUSTOM_REMIT,
         T.PER_BALANCE_REFUND,
         T.PER_BALANCE_PAY,
         T.BUY_CUSTODY_FEE,
         T.BUY_INSURE_FEE,
         T.ACC_TRANSFER_MARGIN,
         T.MARGIN_TRANSFER_ACC,
         T.PER_MARGINS_ADD,
         T.PER_MARGINS_REDUCE,
         T.BEFORE_SETTLE_REFUND,
         T.PER_ACTUAL_SETTLE_ACCOUNT,
         T.PER_ACTUAL_SETTLE_BANK,
         T.PER_ACTUAL_SETTLE_CASH,
         T.PER_BOOK_REDUCE,
         T.PER_STORAGE_CHARGE,
         T.PERIOD_TYPE,
         T.CREATED_AT)
      VALUES
        (TEMP_PERIOD_COST_SEQ.NEXTVAL,
         V_PER_DATE,
         V_PER_BALANCE_START,
         V_PER_BALANCE_END,
         V_PER_BUY_SERVICE,
         V_PER_POST_FEE,
         V_PER_KEEP_FEE,
         V_PER_MARGIN_FORFEIT,
         V_PER_CHARGE_FEE_SUM,
         V_PER_ONLOAD_FEE_SUM,
         V_PER_INSURE_FEE,
         V_PER_CUSTODY_FEE,
         V_PER_ORTHER_FEE_SUM,
         V_PER_SELL_RETURN,
         V_PER_PARTNER_RETURN,
         V_PER_SELL_SCORE_CASH,
         V_PER_END_PRICE,
         V_PER_REFUND_ACCOUNT,
         V_PER_SETTLE_BANK,
         V_PER_SETTLE_CASH,
         V_PER_SETTLE_ACCOUNT,
         V_PER_PARTNER_BANK,
         V_PER_CUSTOME_REMIT,
         V_PER_BALANCE_REFUND,
         V_PER_BALANCE_PAY,
         V_BUY_CUSTODY_FEE,
         V_BUY_INSURE_FEE,
         V_ACC_TRANSFER_MARGIN,
         V_MARGIN_TRANSFER_ACC,
         V_PER_MARGINS_ADD,
         V_PER_MARGINS_REDUCE,
         V_PER_BEFORE_SETTLE_REFUND,
         V_PER_ACTUAL_SETTLE_ACCOUNT,
         V_PER_ACTUAL_SETTLE_BANK,
         V_PER_ACTUAL_SETTLE_CASH,
         V_PER_BOOK_REDUCE,
         V_PER_STORAGE_CHARGE,
         P_ACCOUNT_TYPE,
         SYSDATE);
    END IF;
  END LOOP;
END P_PERIOD_PAY_ACCOUNT;

 
/

-- ----------------------------
-- Procedure structure for P_PERIOD_PAY_ACCOUNT_ONE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PERIOD_PAY_ACCOUNT_ONE"(P_START IN DATE, P_END IN DATE, P_ACCOUNT_TYPE IN VARCHAR2) IS
  /**
       @author chengyufen
       date 2012.08.06
       @discrible 期度应付账款
  */
  V_PER_DATE              DATE := P_START; --期度
  V_PER_PAY_START_ACCOUNT NUMBER := 0; --期初余额(期度应付账款)
  V_PER_PAY_END_ACCOUNT   NUMBER := 0; --期末余额(期度应付账款)
  V_PER_BALANCE_START     NUMBER := 0; --期初余额
  V_PER_BALANCE_END       NUMBER := 0; --期末余额
  V_PER_END_PRICE         NUMBER := 0; --本期结标价
  V_PER_BUY_SERVICE       NUMBER := 0; --本期服务费 (竞买方)
  V_PER_SELL_SERVICE      NUMBER := 0; --本期服务费 (委托方)
  V_PER_ONLOAD_FEE        NUMBER := 0; --本期制作费
  V_PER_CUSTODY_FEE       NUMBER := 0; --本期保管费
  V_PER_INSURE_FEE        NUMBER := 0; --本期保险费
  V_PER_OTHER_FEE         NUMBER := 0; --本期其它费用

  V_PER_SHOP_CHARGE_FEE NUMBER := 0; --本期商城手续费
  V_PER_SHOP_ONLOAD_FEE NUMBER := 0; --本期商城制作费
  V_PER_SHOP_ORTHER_FEE NUMBER := 0; --本期商城其它费用
  V_PER_SHOP_AMOUNT     NUMBER := 0; --本期商城结算价
  V_PER_EC_REFUND       NUMBER := 0; --本期商城结算前退货落槌价

  V_PER_CHARGE_FEE_SUM        NUMBER := 0; --本期手续费(总计)
  V_PER_ONLOAD_FEE_SUM        NUMBER := 0; --本期制作费(总计)
  V_PER_ORTHER_FEE_SUM        NUMBER := 0; --本期其它费用(总计)
  V_PER_PARTNER_RETURN        NUMBER := 0; --本期合作方返点
  V_PER_SELL_RETURN           NUMBER := 0; --本期委托返点
  V_PER_BID_REFUND_ACCOUNT    NUMBER := 0; --本期竞退货转余额
  V_PER_REFUND_ACCOUNT        NUMBER := 0; --本期退货转余额
  V_PER_SELL_SCORE_CASH       NUMBER := 0; --本期委托积分提现
  V_PER_SETTLE_BANK           NUMBER := 0; --本期结算银行转账
  V_PER_SETTLE_CASH           NUMBER := 0; --本期结算现金支付
  V_PER_SETTLE_ACCOUNT        NUMBER := 0; --本期结算转余额
  V_PER_ACTUAL_SETTLE_ACCOUNT NUMBER := 0; --本期实际结算转余额
  V_PER_ACTUAL_SETTLE_BANK    NUMBER := 0; --本期实际结算银行转账
  V_PER_ACTUAL_SETTLE_CASH    NUMBER := 0; --本期实际结算现金支付
  V_PER_PARTNER_BANK          NUMBER := 0; --本期合作方返点银行转账
  V_PER_CUSTOME_REMIT         NUMBER := 0; --本期客户存入
  V_PER_BALANCE_REFUND        NUMBER := 0; --本期余额退款
  V_PER_BALANCE_PAY           NUMBER := 0; --本期余额支付
  V_PER_POST_FEE              NUMBER := 0; --本期邮资
  V_PER_KEEP_FEE              NUMBER := 0; --本期保价费
  V_BUY_CUSTODY_FEE           NUMBER := 0; --竞买方保管费
  V_BUY_INSURE_FEE            NUMBER := 0; --竞买方保险费
  V_PER_MARGIN_FORFEIT        NUMBER := 0; --本期保证金罚扣
  V_ACC_TRANSFER_MARGIN       NUMBER := 0; --本期余额转保证金
  V_MARGIN_TRANSFER_ACC       NUMBER := 0; --本期保证金转余额
  V_PER_MARGINS_ADD           NUMBER := 0; --本期保证金增加
  V_PER_MARGINS_REDUCE        NUMBER := 0; --本期保证金减少
  V_PER_BID_SETTLE_REFUND     NUMBER := 0; --本期结算前退货落槌价(竞拍)
  V_PER_BEFORE_SETTLE_REFUND  NUMBER := 0; --本期结算前退货落槌价(总和)
  V_PER_BOOK_REDUCE           NUMBER := 0; --本期订金罚扣
  V_PER_STORAGE_CHARGE        NUMBER := 0; --本期仓储费

  V_INIT_PAY             NUMBER := 0; --期初支付
  V_INIT_SETTLED         NUMBER := 0; --期初已结算
  V_INIT_SELL_SERVICE    NUMBER := 0; --期初服务费(委托方)
  V_INIT_BUY_SERVICE     NUMBER := 0; --期初服务费(竞买方)
  V_INIT_ONLOAD_FEE      NUMBER := 0; --期初制作费
  V_INIT_CUSTODY_FEE     NUMBER := 0; --期初保管费
  V_INIT_INSURE_FEE      NUMBER := 0; --期初保险费
  V_INIT_OTHER_FEE       NUMBER := 0; --期初其它费用
  V_INIT_PARTNER_RETURN  NUMBER := 0; --期初合作方返点
  V_INIT_SELL_RETURN     NUMBER := 0; --期初委托返点
  V_INIT_REFUND_ACCOUNT  NUMBER := 0; --期初退货转余额
  V_INIT_SELL_SCORE_CASH NUMBER := 0; --期初委托积分提现
  V_INIT_PARTNER_BANK    NUMBER := 0; --期初合作方返点银行转账
  V_INIT_CUSTOM_REMIT    NUMBER := 0; --期初客户存入
  V_INIT_BALANCE_REFUND  NUMBER := 0; --期初余额退款
  V_INIT_BALANCE_PAY     NUMBER := 0; --期初余额支付

  V_INIT_POST_FEE        NUMBER := 0; --期初邮资
  V_INIT_KEEP_FEE        NUMBER := 0; --期初保价费
  V_INIT_BUY_CUSTODY_FEE NUMBER := 0;
  V_INIT_BUY_INSURE_FEE  NUMBER := 0;
  V_INIT_MARGIN_FORFEIT  NUMBER := 0; --期初保证金罚扣
  V_INIT_ACCOUNT_IN      NUMBER := 0; --期初余额流入
  V_INIT_ACCOUNT_OUT     NUMBER := 0; --期初余额流出
  V_INIT_MARGINS_IN      NUMBER := 0; --期初保证金流入
  V_INIT_MARGINS_OUT     NUMBER := 0; --期初保证金流出
  V_INIT_BOOK_REDUCE     NUMBER := 0; --期初预订资金罚扣
  V_INIT_STORAGE_CHARGE  NUMBER := 0; --期初仓储费
  V_COUNT                NUMBER := 0;

BEGIN

  /**查询期度小于当前系统月份的记录数*/
  SELECT COUNT(1)
    INTO V_COUNT
    FROM TEMP_PERIOD_COST T
   WHERE T.PERIOD_TYPE = 2
     AND T.PER_DATE >= P_START
     AND T.PER_DATE <= P_END
     AND T.PER_DATE < TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'yyyy-mm'), 'yyyy-mm');
  /*and t.per_date < to_date(to_char(trunc(sysdate),'yyyy-mm'), 'yyyy-mm');  */

  /**如果统计期度大于或等于当前系统的月份，则实时统计，否则只让查历史数据*/
  IF P_ACCOUNT_TYPE = 2 AND TO_CHAR(P_START, 'yyyy-mm') >= TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'yyyy-mm') THEN
    EXECUTE IMMEDIATE 'delete temp_period_cost where period_type=2
               and per_date>=to_date(''' || TO_CHAR(V_PER_DATE, 'YYYY-MM') || ''',''YYYY-MM'')';
    --and per_date=to_date(''' || to_char(v_per_date, 'YYYY-MM') || ''',''YYYY-MM'')';
  END IF;

  --统计期度小于当前系统月份，且在期度表中无历史记录则重新查询，已存在记录则查历史记录
  IF P_ACCOUNT_TYPE = 2 AND V_COUNT = 0 THEN
    /**期初支付*/
    SELECT SUM((SELECT DECODE(SUM(O.END_PRICE), NULL, 0, SUM(O.END_PRICE))
                  FROM USER_ORDERS O
                 WHERE O.STATUS = 1
                   AND O.PAY_DATE < P_START
                   AND O.PAY_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')) +
               (SELECT DECODE(SUM(GOODS_NUMBER * ORDER_PRICE), NULL, 0.00, SUM(GOODS_NUMBER * ORDER_PRICE))
                  FROM EC_ORDER_GOODS E
                 WHERE E.ORDER_STATUS = '1' -- 订单状态:1:已支付, 2:不支付, 0:待支付
                   AND E.PAY_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                   AND E.PAY_DATE < P_START) /* +
                                                                                                                                                          (select decode(sum(money), null, 0, sum(money))    --add 2013-03-26 仓储费
                                                                                                                                                               from user_accounts
                                                                                                                                                               where status='1' and finance_type=27
                                                                                                                                                            and finance_date < p_start
                                                                                                                                                          )*/)
      INTO V_INIT_PAY
      FROM DUAL;
  
    /**期初已结算*/
    SELECT SUM((SELECT DECODE(SUM(T.AMOUNT + T.ORTHER_FEE + T.SERVICE_FEE),
                              NULL,
                              0.00,
                              SUM(T.AMOUNT + T.ORTHER_FEE + T.SERVICE_FEE)) AMOUNT
                  FROM SETTLEMENTS T
                 WHERE STATUS = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
                   AND F_CHECK_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                   AND F_CHECK_DATE < P_START) +
               (SELECT DECODE(SUM(ES.AMOUNT + ES.OTHERS_FEE + ES.TOTAL_CHARGE_FEE + ES.TOTAL_LOAD_FEE),
                              NULL,
                              0.00,
                              SUM(ES.AMOUNT + ES.OTHERS_FEE + ES.TOTAL_CHARGE_FEE + ES.TOTAL_LOAD_FEE)) AMOUNT
                  FROM EC_SETTLEMENTS ES
                 WHERE STATUS = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
                   AND ES.F_CHECK_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                   AND ES.F_CHECK_DATE < P_START) +
               (SELECT DECODE(SUM(O.END_PRICE), NULL, 0.00, SUM(O.END_PRICE)) END_PRICE
                  FROM USER_REFUNDS T
                  JOIN USER_ORDERS O ON (O.ID = T.USER_ORDER_ID)
                 WHERE T.SETTLEMENT_STATUS = 0 -- 1:结算后, 0:结算前
                   AND T.STATUS = 9 -- 0:申请退货, 1:审核组审核, 2:运营总监审核 3：业务总监审核
                      -- 4：总经办审核 5：确认是否复议 6：复议是否同意退货 7：确认退款
                      -- 8：退货失败 9：退货成功
                   AND T.COMPLETE_AT >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                   AND T.COMPLETE_AT < P_START) +
               (SELECT DECODE(SUM(BACK_TOTAL_PRICE), NULL, 0.00, SUM(BACK_TOTAL_PRICE)) BACK_TOTAL_PRICE
                  FROM COMEBACK_EC_GOODS C
                 WHERE C.APPLY_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                   AND C.APPLY_DATE < P_START
                   AND BACK_STATUS = 1 -- 0:查核中, 1:通过, 2:拒绝
                   AND BALANCE_STATUS = 0 -- 0:结算后, 1:结算前
                ))
      INTO V_INIT_SETTLED
      FROM DUAL;
  
    /**期初竞买方服务费*/
    SELECT DECODE(SUM(O.ACTUAL_CHARGE), NULL, 0, SUM(O.ACTUAL_CHARGE))
      INTO V_INIT_BUY_SERVICE
      FROM USER_ORDERS O
     WHERE O.STATUS = 1
       AND O.PAY_DATE < P_START;
  
    /**期初邮资保价费*/
    SELECT DECODE(SUM(KB.POSTAGE), NULL, 0, SUM(KB.POSTAGE)) POSTAGE,
           DECODE(SUM(KA.KEEPFEE), NULL, 0, SUM(KA.KEEPFEE)) KEEPFEE,
           DECODE(SUM(KC.CUSTODYFEE), NULL, 0, SUM(KC.CUSTODYFEE)) BUYCUSTODYFEE,
           DECODE(SUM(KD.INSUREFEE), NULL, 0, SUM(KD.INSUREFEE)) BUYINSUREFEE
      INTO V_INIT_POST_FEE, V_INIT_KEEP_FEE, V_INIT_BUY_CUSTODY_FEE, V_INIT_BUY_INSURE_FEE
      FROM USER_ACCOUNTS UA
      LEFT JOIN (SELECT B.MONEY POSTAGE, B.ID
                   FROM USER_ACCOUNTS B
                  WHERE B.FINANCE_TYPE = 6
                    AND B.STATUS = 1) KB ON KB.ID = UA.ID
      LEFT JOIN (SELECT A.MONEY KEEPFEE, A.ID
                   FROM USER_ACCOUNTS A
                  WHERE A.FINANCE_TYPE = 7
                    AND A.STATUS = 1) KA ON KA.ID = UA.ID
      LEFT JOIN (SELECT A.MONEY CUSTODYFEE, A.ID
                   FROM USER_ACCOUNTS A
                  WHERE A.FINANCE_TYPE = 16
                    AND A.STATUS = 1) KC ON KC.ID = UA.ID
      LEFT JOIN (SELECT A.MONEY INSUREFEE, A.ID
                   FROM USER_ACCOUNTS A
                  WHERE A.FINANCE_TYPE = 17
                    AND A.STATUS = 1) KD ON KD.ID = UA.ID
     WHERE UA.FINANCE_TYPE IN (6, 7, 16, 17)
       AND UA.STATUS = 1
       AND UA.FINANCE_DATE < P_START;
  
    /**期初保证金罚扣*/
    IF V_PER_DATE < TO_DATE('2012-07', 'yyyy-mm') THEN
      SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
        INTO V_INIT_MARGIN_FORFEIT
        FROM USER_ACCOUNTS T
       WHERE T.STATUS = 1
         AND T.FINANCE_TYPE = 5
         AND T.FINANCE_DATE < P_START; --5:坏账扣除
    ELSE
      SELECT DECODE(SUM(UM.AMOUNT), NULL, 0.00, SUM(UM.AMOUNT)) MONEY
        INTO V_INIT_MARGIN_FORFEIT
        FROM USER_MARGINS UM
       WHERE UM.DIRECTION = '1'
         AND UM.MARGIN_TYPE = '4'
         AND UM.STATUS = '1'
         AND UM.CREATED_AT < P_START;
    END IF;
  
    /**期初保险费,制作费,保管费,其它费用,委托方服务费*/
    /*select decode(sum(t.insure_fee), null, 0.00, sum(t.insure_fee)) insure_fee,
          decode(sum(t.onload_fee), null, 0.00, sum(t.onload_fee)) onload_fee,
          decode(sum(t.custody_fee), null, 0.00, sum(t.custody_fee)) custody_fee,
          decode(sum(t.orther_fee), null, 0.00, sum(t.orther_fee)) orther_fee,
          decode(sum(t.charge_fee), null, 0.00, sum(t.charge_fee)) charge_fee
     into v_init_insure_fee,
          v_init_onload_fee,
          v_init_custody_fee,
          v_init_other_fee,
          v_init_sell_service
     from settlements t
    where t.status = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
      and t.f_check_date >=
          to_date('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
      and t.f_check_date < p_start;*/
  
    SELECT DECODE(SUM(TT.INSURE_FEE), NULL, 0.00, SUM(TT.INSURE_FEE)) INSURE_FEE,
           DECODE(SUM(TT.ONLOAD_FEE), NULL, 0.00, SUM(TT.ONLOAD_FEE)) ONLOAD_FEE,
           DECODE(SUM(TT.CUSTODY_FEE), NULL, 0.00, SUM(TT.CUSTODY_FEE)) CUSTODY_FEE,
           DECODE(SUM(TT.ORTHER_FEE), NULL, 0.00, SUM(TT.ORTHER_FEE)) ORTHER_FEE,
           DECODE(SUM(TT.CHARGE_FEE), NULL, 0.00, SUM(TT.CHARGE_FEE)) CHARGE_FEE
      INTO V_INIT_INSURE_FEE, V_INIT_ONLOAD_FEE, V_INIT_CUSTODY_FEE, V_INIT_OTHER_FEE, V_INIT_SELL_SERVICE
      FROM (SELECT DECODE(T.INSURE_FEE, NULL, 0, T.INSURE_FEE) INSURE_FEE,
                   DECODE(T.ONLOAD_FEE, NULL, 0, T.ONLOAD_FEE) ONLOAD_FEE,
                   DECODE(T.CUSTODY_FEE, NULL, 0, T.CUSTODY_FEE) CUSTODY_FEE,
                   DECODE(T.ORTHER_FEE, NULL, 0, T.ORTHER_FEE) ORTHER_FEE,
                   DECODE(T.CHARGE_FEE, NULL, 0, T.CHARGE_FEE) CHARGE_FEE,
                   T.F_CHECK_DATE
              FROM SETTLEMENTS T
             WHERE T.STATUS = 2
            UNION ALL
            SELECT 0 INSURE_FEE,
                   DECODE(TOTAL_LOAD_FEE, NULL, 0, TOTAL_LOAD_FEE),
                   0 CUSTODY_FEE,
                   DECODE(OTHERS_FEE, NULL, 0, OTHERS_FEE),
                   DECODE(TOTAL_CHARGE_FEE, NULL, 0, TOTAL_CHARGE_FEE),
                   F_CHECK_DATE
              FROM EC_SETTLEMENTS T
             WHERE STATUS = 2) TT
     WHERE TT.F_CHECK_DATE >= TO_DATE('2007-06-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
       AND TT.F_CHECK_DATE < P_START;
  
    /**期初委托返点*/
    SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
      INTO V_INIT_SELL_RETURN
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE < P_START
       AND FINANCE_TYPE = 18
       AND STATUS = 1;
  
    /**期初委托积分提现*/
    SELECT DECODE(SUM(M.MONEY), NULL, 0, SUM(M.MONEY))
      INTO V_INIT_SELL_SCORE_CASH
      FROM USER_ACCOUNTS M
     WHERE M.STATUS = 1
       AND M.FINANCE_TYPE = 20
       AND M.FINANCE_DATE < P_START;
  
    /**期初合作方返点*/
    SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
      INTO V_INIT_PARTNER_RETURN
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE < P_START
       AND FINANCE_TYPE = 8
       AND STATUS = 1;
  
    /**期初退货转余额*/
    SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0, ROUND(SUM(MONEY), 2)) MONEY
      INTO V_INIT_REFUND_ACCOUNT
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE < P_START
       AND FINANCE_TYPE IN (12, 14)
       AND STATUS = 1;
  
    /**期初合作方返点银行转账*/
    SELECT DECODE(SUM(P.AGREEMENT_CHARGE_FEE), NULL, 0, SUM(P.AGREEMENT_CHARGE_FEE))
      INTO V_INIT_PARTNER_BANK
      FROM PARTNER_PAYMENTS P
     WHERE P.PAY_TYPE = 2
       AND P.STATUS = 3
       AND P.PAY_AT < P_START;
  
    /**期初客户存入*/
    SELECT DECODE(SUM(MONEY), NULL, 0.00, SUM(MONEY)) MONEY
      INTO V_INIT_CUSTOM_REMIT
      FROM (SELECT DECODE(T.FINANCE_TYPE, 23, -T.MONEY, T.MONEY) MONEY
              FROM USER_ACCOUNTS T
             WHERE T.STATUS = 1
               AND T.FINANCE_TYPE IN (0, 1, 10, 15, 9, 23)
               AND T.FINANCE_DATE < P_START);
  
    /**期初余额退款*/
    SELECT DECODE(SUM(RE.MONEY), NULL, 0, SUM(RE.MONEY))
      INTO V_INIT_BALANCE_REFUND
      FROM USER_ACCOUNTS RE
     WHERE RE.FINANCE_TYPE = 3
       AND STATUS = 1
       AND RE.FINANCE_DATE < P_START;
  
    /**期初支付流水*/
    SELECT SUM((SELECT DECODE(SUM(MONEY), NULL, 0, SUM(MONEY))
                 FROM USER_ACCOUNTS
                WHERE FINANCE_TYPE IN (11, 24, 25)
                  AND STATUS = 1
                  AND FINANCE_DATE < P_START))
      INTO V_INIT_BALANCE_PAY
      FROM DUAL;
  
    --A6_1(期初流入余额 )
    SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
      INTO V_INIT_ACCOUNT_IN
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
       AND FINANCE_DATE < P_START
       AND STATUS = 1
       AND DIRECTION = 0;
  
    --A6_2(期初流出余额)
    SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
      INTO V_INIT_ACCOUNT_OUT
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
       AND FINANCE_DATE < P_START
       AND STATUS = 1
       AND DIRECTION = 1;
  
    --A11_1(期初流入保证金)
    SELECT DECODE(ROUND(SUM(AMOUNT), 2), NULL, 0.00, ROUND(SUM(AMOUNT), 2)) AMOUNT
      INTO V_INIT_MARGINS_IN
      FROM USER_MARGINS T
     WHERE T.CREATED_AT >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
       AND T.CREATED_AT < P_START
       AND T.STATUS = '1'
       AND T.DIRECTION = 0; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）
  
    --A11_2(期初流出保证金)
    SELECT DECODE(ROUND(SUM(AMOUNT), 2), NULL, 0.00, ROUND(SUM(AMOUNT), 2)) AMOUNT
      INTO V_INIT_MARGINS_OUT
      FROM USER_MARGINS T
     WHERE T.CREATED_AT >= TO_DATE('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
       AND T.CREATED_AT < P_START
       AND T.STATUS = '1'
       AND T.DIRECTION = 1; -- 资金流转类型：0:checkin(流入)  1:checkout（流出）
  
    --期初订金罚扣、期初仓储费
    SELECT DECODE(SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0)), NULL, 0, SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0))) MONEY,
           DECODE(SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0)), NULL, 0, SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0))) STORAGE_CHARGE
      INTO V_INIT_BOOK_REDUCE, V_INIT_STORAGE_CHARGE
      FROM USER_ACCOUNTS B
     WHERE B.FINANCE_TYPE IN (26, 27)
       AND B.STATUS = 1
       AND B.FINANCE_DATE < P_START;
  
    ------------------------------------------------其他费用------------------------------------------
    /**本期结标价*/
    SELECT SUM((SELECT DECODE(SUM(O.END_PRICE), NULL, 0, SUM(O.END_PRICE))
                  FROM USER_ORDERS O
                 WHERE O.STATUS = 1
                   AND O.PAY_DATE >= P_START
                   AND O.PAY_DATE <= P_END) +
               (SELECT DECODE(SUM(GOODS_NUMBER * ORDER_PRICE), NULL, 0.00, SUM(GOODS_NUMBER * ORDER_PRICE))
                  FROM EC_ORDER_GOODS E
                 WHERE E.ORDER_STATUS = '1' -- 订单状态:0:待支付, 1:已支付, 2:不支付
                   AND E.PAY_DATE >= P_START
                   AND E.PAY_DATE <= P_END))
      INTO V_PER_END_PRICE
      FROM DUAL;
  
    /**本期结算前退货落槌价(竞拍平台)*/
    SELECT DECODE(SUM(O.END_PRICE), NULL, 0.00, SUM(O.END_PRICE)) END_PRICE
      INTO V_PER_BID_SETTLE_REFUND
      FROM USER_REFUNDS T
      JOIN USER_ORDERS O ON (O.ID = T.USER_ORDER_ID)
     WHERE T.SETTLEMENT_STATUS = 0 -- 1:结算后, 0:结算前
       AND T.STATUS = 9
       AND T.COMPLETE_AT >= P_START
       AND T.COMPLETE_AT <= P_END;
  
    --结算前退货落槌价——普通商品
    SELECT DECODE(SUM(BACK_TOTAL_PRICE), NULL, 0.00, SUM(BACK_TOTAL_PRICE)) BACK_TOTAL_PRICE
      INTO V_PER_EC_REFUND
      FROM COMEBACK_EC_GOODS C
     WHERE C.FINANCE_DATE >= P_START
       AND C.FINANCE_DATE <= P_END
       AND BACK_STATUS = 1 -- 0:查核中, 1:通过, 2:拒绝
       AND BALANCE_STATUS = 0; -- 0:结算前, 1:结算后
  
    /**本期竞买方服务费*/
    SELECT DECODE(SUM(O.ACTUAL_CHARGE), NULL, 0, SUM(O.ACTUAL_CHARGE))
      INTO V_PER_BUY_SERVICE
      FROM USER_ORDERS O
     WHERE O.STATUS = 1
       AND O.PAY_DATE >= P_START
       AND O.PAY_DATE <= P_END;
  
    /**本期邮资,保价费、本期竞买方保管费、本期竞买方保险费*/
    SELECT DECODE(SUM(KB.POSTAGE), NULL, 0, SUM(KB.POSTAGE)) POSTAGE,
           DECODE(SUM(KA.KEEPFEE), NULL, 0, SUM(KA.KEEPFEE)) KEEPFEE,
           DECODE(SUM(KC.CUSTODYFEE), NULL, 0, SUM(KC.CUSTODYFEE)) BUYCUSTODYFEE,
           DECODE(SUM(KD.INSUREFEE), NULL, 0, SUM(KD.INSUREFEE)) BUYINSUREFEE
      INTO V_PER_POST_FEE, V_PER_KEEP_FEE, V_BUY_CUSTODY_FEE, V_BUY_INSURE_FEE
      FROM USER_ACCOUNTS UA
      LEFT JOIN (SELECT B.MONEY POSTAGE, B.ID FROM USER_ACCOUNTS B WHERE B.FINANCE_TYPE = 6) KB ON KB.ID = UA.ID
      LEFT JOIN (SELECT A.MONEY KEEPFEE, A.ID FROM USER_ACCOUNTS A WHERE A.FINANCE_TYPE = 7) KA ON KA.ID = UA.ID
      LEFT JOIN (SELECT A.MONEY CUSTODYFEE, A.ID FROM USER_ACCOUNTS A WHERE A.FINANCE_TYPE = 16) KC ON KC.ID = UA.ID
      LEFT JOIN (SELECT A.MONEY INSUREFEE, A.ID FROM USER_ACCOUNTS A WHERE A.FINANCE_TYPE = 17) KD ON KD.ID = UA.ID
     WHERE UA.FINANCE_TYPE IN (6, 7, 16, 17)
       AND UA.STATUS = 1
       AND UA.FINANCE_DATE >= P_START
       AND UA.FINANCE_DATE <= P_END;
  
    /**本期保证金罚扣*/
    /* if p_start < to_date('2012-06-30 23:59:59','yyyy-mm-dd hh24:mi:ss') then    */
    IF V_PER_DATE < TO_DATE('2012-07', 'yyyy-mm') THEN
      SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
        INTO V_PER_MARGIN_FORFEIT
        FROM USER_ACCOUNTS T
       WHERE T.STATUS = 1
         AND T.FINANCE_TYPE = 5
         AND T.FINANCE_DATE >= P_START
         AND T.FINANCE_DATE <= P_END; --5:坏账扣除
    ELSE
      SELECT DECODE(SUM(UM.AMOUNT), NULL, 0.00, SUM(UM.AMOUNT)) MONEY
        INTO V_PER_MARGIN_FORFEIT
        FROM USER_MARGINS UM
       WHERE UM.DIRECTION = '1'
         AND UM.MARGIN_TYPE = '4'
         AND UM.STATUS = '1'
         AND UM.CREATED_AT >= P_START
         AND UM.CREATED_AT <= P_END;
    END IF;
  
    /**本期保险费,制作费,保管费,其它费用,委托方服务费*/
    SELECT DECODE(SUM(T.INSURE_FEE), NULL, 0.00, SUM(T.INSURE_FEE)) INSURE_FEE,
           DECODE(SUM(T.ONLOAD_FEE), NULL, 0.00, SUM(T.ONLOAD_FEE)) ONLOAD_FEE,
           DECODE(SUM(T.CUSTODY_FEE), NULL, 0.00, SUM(T.CUSTODY_FEE)) CUSTODY_FEE,
           DECODE(SUM(T.ORTHER_FEE), NULL, 0.00, SUM(T.ORTHER_FEE)) ORTHER_FEE,
           /*decode(sum(t.service_fee), null, 0.00, sum(t.service_fee)) service_fee*/
           DECODE(SUM(T.CHARGE_FEE), NULL, 0.00, SUM(T.CHARGE_FEE)) CHARGE_FEE
      INTO V_PER_INSURE_FEE, V_PER_ONLOAD_FEE, V_PER_CUSTODY_FEE, V_PER_OTHER_FEE, V_PER_SELL_SERVICE
      FROM SETTLEMENTS T
     WHERE T.STATUS = 2 -- 0：待转账 1：转账 2：已经完成 3：不通过
       AND T.F_CHECK_DATE <= P_END
       AND T.F_CHECK_DATE >= P_START;
  
    SELECT DECODE(SUM(T.AMOUNT), NULL, 0.00, SUM(T.AMOUNT)) AMOUNT,
           DECODE(SUM(T.TOTAL_CHARGE_FEE), NULL, 0.00, SUM(T.TOTAL_CHARGE_FEE)) CHARGE_FEE,
           DECODE(SUM(T.TOTAL_LOAD_FEE), NULL, 0.00, SUM(T.TOTAL_LOAD_FEE)) ONLOAD_FEE,
           DECODE(SUM(T.OTHERS_FEE), NULL, 0.00, SUM(T.OTHERS_FEE)) ORTHER_FEE
      INTO V_PER_SHOP_AMOUNT, V_PER_SHOP_CHARGE_FEE, V_PER_SHOP_ONLOAD_FEE, V_PER_SHOP_ORTHER_FEE
      FROM EC_SETTLEMENTS T
     WHERE STATUS IN (2) -- 0：待转账 1：转账 2：已经完成 3：不通过
       AND T.F_CHECK_DATE <= P_END
       AND T.F_CHECK_DATE >= P_START;
  
    /**本期委托返点(18)、本期合作方返点(8)*/
    SELECT DECODE(SUM(DECODE(FINANCE_TYPE, '8', MONEY, 0)), NULL, 0, SUM(DECODE(FINANCE_TYPE, '8', MONEY, 0))) PARTNERMONEY,
           DECODE(SUM(DECODE(FINANCE_TYPE, '18', MONEY, 0)), NULL, 0, SUM(DECODE(FINANCE_TYPE, '18', MONEY, 0))) SELLRETURNMONEY,
           DECODE(SUM(DECODE(FINANCE_TYPE, '20', MONEY, 0)), NULL, 0, SUM(DECODE(FINANCE_TYPE, '20', MONEY, 0))) SELLSCORECASH
      INTO V_PER_PARTNER_RETURN, V_PER_SELL_RETURN, V_PER_SELL_SCORE_CASH
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE <= P_END
       AND FINANCE_DATE >= P_START
       AND FINANCE_TYPE IN (8, 18, 20)
       AND STATUS = 1;
  
    /**本期退货转余额--竞拍平台*/
    SELECT DECODE(ROUND(SUM(MONEY), 2), NULL, 0.00, ROUND(SUM(MONEY), 2)) MONEY
      INTO V_PER_BID_REFUND_ACCOUNT
      FROM USER_ACCOUNTS
     WHERE FINANCE_DATE <= P_END
       AND FINANCE_DATE >= P_START
       AND FINANCE_TYPE IN (12, 14)
       AND STATUS = 1;
  
    /**本期结算银行转账*/
    SELECT SUM((SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                  FROM (SELECT D.AMOUNT,
                               (SELECT SETT.F_CHECK_DATE FROM SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                          FROM SETTLEMENT_DESPATCHES D
                         WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                           AND D.F_CHECK_STATUS = 1) AA
                 WHERE AA.F_CHECK_DATE >= P_START
                   AND AA.F_CHECK_DATE <= P_END) +
               (SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                  FROM (SELECT D.AMOUNT,
                               (SELECT SETT.F_CHECK_DATE FROM EC_SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                          FROM EC_SETTLEMENT_DESPATCHES D
                         WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                           AND D.F_CHECK_STATUS = 1) AA
                 WHERE AA.F_CHECK_DATE >= P_START
                   AND AA.F_CHECK_DATE <= P_END))
      INTO V_PER_SETTLE_BANK
      FROM DUAL;
  
    /**本期结算现金支付*/
    SELECT SUM((SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                  FROM (SELECT D.AMOUNT,
                               (SELECT SETT.F_CHECK_DATE FROM SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                          FROM SETTLEMENT_DESPATCHES D
                         WHERE D.CHECKOUT_TYPE IN (0, 4)
                           AND D.F_CHECK_STATUS = 1) AA
                 WHERE AA.F_CHECK_DATE >= P_START
                   AND AA.F_CHECK_DATE <= P_END) +
               (SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                  FROM (SELECT D.AMOUNT,
                               (SELECT SETT.F_CHECK_DATE FROM EC_SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                          FROM EC_SETTLEMENT_DESPATCHES D
                         WHERE D.CHECKOUT_TYPE IN (0, 4)
                           AND D.F_CHECK_STATUS = 1) AA
                 WHERE AA.F_CHECK_DATE >= P_START
                   AND AA.F_CHECK_DATE <= P_END))
      INTO V_PER_SETTLE_CASH
      FROM DUAL;
  
    /**本期结算转余额*/
    SELECT SUM((SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                  FROM (SELECT D.AMOUNT,
                               (SELECT SETT.F_CHECK_DATE FROM SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                          FROM SETTLEMENT_DESPATCHES D
                         WHERE D.CHECKOUT_TYPE = '2'
                           AND D.F_CHECK_STATUS = 1) AA
                 WHERE AA.F_CHECK_DATE >= P_START
                   AND AA.F_CHECK_DATE <= P_END) +
               (SELECT DECODE(SUM(AA.AMOUNT), NULL, 0, SUM(AA.AMOUNT))
                  FROM (SELECT D.AMOUNT,
                               (SELECT SETT.F_CHECK_DATE FROM EC_SETTLEMENTS SETT WHERE ID = D.SETTLEMENT_ID) F_CHECK_DATE
                          FROM EC_SETTLEMENT_DESPATCHES D
                         WHERE D.CHECKOUT_TYPE = 2
                           AND D.F_CHECK_STATUS = 1) AA
                 WHERE AA.F_CHECK_DATE >= P_START
                   AND AA.F_CHECK_DATE <= P_END))
      INTO V_PER_SETTLE_ACCOUNT
      FROM DUAL;
  
    /**本期实际结算转余额*/
    SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
      INTO V_PER_ACTUAL_SETTLE_ACCOUNT
      FROM USER_ACCOUNTS T
     WHERE T.FINANCE_DATE >= P_START
       AND T.FINANCE_DATE <= P_END
       AND STATUS = '1' --@2014.3.16 BY LIZHENG
       AND T.FINANCE_TYPE = 13; --13:结算转余额 （由于2011-01分配项29825缺对应的流水故按流水统计）
  
    /**本期实际结算银行转账*/
    SELECT SUM((SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                  FROM SETTLEMENT_DESPATCHES D
                 WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                   AND D.F_CHECK_STATUS = 1
                   AND D.F_CHECK_DATE >= P_START
                   AND D.F_CHECK_DATE <= P_END) + (SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                                                     FROM EC_SETTLEMENT_DESPATCHES D
                                                    WHERE D.CHECKOUT_TYPE IN (1, 3, 5, 6, 7, 8, 9)
                                                      AND D.F_CHECK_STATUS = 1
                                                      AND D.F_CHECK_DATE >= P_START
                                                      AND D.F_CHECK_DATE <= P_END))
      INTO V_PER_ACTUAL_SETTLE_BANK
      FROM DUAL;
  
    /**本期实际结算现金支付*/
    SELECT SUM((SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                  FROM SETTLEMENT_DESPATCHES D
                 WHERE D.CHECKOUT_TYPE IN (0, 4)
                   AND D.F_CHECK_STATUS = 1
                   AND D.F_CHECK_DATE >= P_START
                   AND D.F_CHECK_DATE <= P_END) + (SELECT DECODE(SUM(D.AMOUNT), NULL, 0, SUM(D.AMOUNT))
                                                     FROM EC_SETTLEMENT_DESPATCHES D
                                                    WHERE D.CHECKOUT_TYPE IN (0, 4)
                                                      AND D.F_CHECK_STATUS = 1
                                                      AND D.F_CHECK_DATE >= P_START
                                                      AND D.F_CHECK_DATE <= P_END))
      INTO V_PER_ACTUAL_SETTLE_CASH
      FROM DUAL;
  
    /**本期合作方返点银行转账*/
    SELECT DECODE(SUM(P.AGREEMENT_CHARGE_FEE), NULL, 0, SUM(P.AGREEMENT_CHARGE_FEE))
      INTO V_PER_PARTNER_BANK
      FROM PARTNER_PAYMENTS P
     WHERE P.PAY_TYPE = 2
       AND P.STATUS = 3
       AND P.PAY_AT >= P_START
       AND P.PAY_AT <= P_END;
  
    /**本期客户存入*/
    SELECT DECODE(SUM(MONEY), NULL, 0.00, SUM(MONEY)) MONEY
      INTO V_PER_CUSTOME_REMIT
      FROM (SELECT DECODE(T.FINANCE_TYPE, 23, -T.MONEY, T.MONEY) MONEY
              FROM USER_ACCOUNTS T
             WHERE T.STATUS = 1
               AND T.FINANCE_TYPE IN (0, 1, 10, 15, 9, 23, 32, 42) --32 财付通支付存入  即 财付通充值 42 支付宝支付存入  即支付宝充值
               AND T.FINANCE_DATE >= P_START
               AND T.FINANCE_DATE <= P_END);
  
    /**本期余额退款*/
    SELECT SUM(NVL(RE.MONEY, 0)) MONEY
      INTO V_PER_BALANCE_REFUND
      FROM USER_ACCOUNTS RE
     WHERE RE.FINANCE_TYPE IN ('3', '28') --2014.3.13 by lizheng 退款未包含hosane转帐
       AND STATUS = 1
       AND RE.FINANCE_DATE >= P_START
       AND RE.FINANCE_DATE <= P_END;
  
    /**本期支付*/
    SELECT SUM((SELECT DECODE(SUM(MONEY), NULL, 0, SUM(MONEY))
                 FROM USER_ACCOUNTS
                WHERE FINANCE_TYPE IN (11, 24, 25, 19, 27, 33, 43) --add 2013-03-26 仓储费
                  AND STATUS = 1
                  AND FINANCE_DATE >= P_START
                  AND FINANCE_DATE <= P_END))
      INTO V_PER_BALANCE_PAY
      FROM DUAL; --11:交易单支付  24: 余额+IPS支付  25: 余额+SDO支付 19:商城订单合并支付 27:仓储费 33tenpay+余额 43 alipay+余额
  
    --F12:(余额转入保证金)
    SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
      INTO V_ACC_TRANSFER_MARGIN
      FROM USER_ACCOUNTS T
     WHERE T.STATUS = 1
       AND T.FINANCE_TYPE = 4
       AND T.FINANCE_DATE >= P_START
       AND T.FINANCE_DATE <= P_END; --4:余额转入保证金
  
    --F12:(保证金转余额)
    SELECT DECODE(SUM(T.MONEY), NULL, 0.00, SUM(T.MONEY)) MONEY
      INTO V_MARGIN_TRANSFER_ACC
      FROM USER_ACCOUNTS T
     WHERE T.STATUS = 1
       AND T.FINANCE_TYPE = 2
       AND T.FINANCE_DATE >= P_START
       AND T.FINANCE_DATE <= P_END; --2:保证金转余额
  
    --v_a13:保证金流入
    SELECT DECODE(ROUND(SUM(AMOUNT), 2), NULL, 0.00, ROUND(SUM(AMOUNT), 2)) AMOUNT
      INTO V_PER_MARGINS_ADD
      FROM USER_MARGINS T
     WHERE T.DIRECTION = 0
       AND T.CREATED_AT >= P_START
       AND T.CREATED_AT <= P_END;
  
    --本期预订资金罚扣、本期仓储费
    SELECT DECODE(SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0)), NULL, 0, SUM(DECODE(B.FINANCE_TYPE, '26', B.MONEY, 0))) MONEY,
           DECODE(SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0)), NULL, 0, SUM(DECODE(B.FINANCE_TYPE, '27', B.MONEY, 0))) STORAGE_CHARGE
      INTO V_PER_BOOK_REDUCE, V_PER_STORAGE_CHARGE
      FROM USER_ACCOUNTS B
     WHERE B.FINANCE_TYPE IN (26, 27)
       AND B.STATUS = 1
       AND B.FINANCE_DATE >= P_START
       AND B.FINANCE_DATE <= P_END;
  
    --本期保证金流出
    V_PER_MARGINS_REDUCE := V_MARGIN_TRANSFER_ACC + V_PER_MARGIN_FORFEIT;
  
    --本期退货转余额
    V_PER_REFUND_ACCOUNT := V_PER_BID_REFUND_ACCOUNT + V_PER_EC_REFUND;
  
    --本期结算前退货落槌价
    V_PER_BEFORE_SETTLE_REFUND := V_PER_BID_SETTLE_REFUND + V_PER_EC_REFUND;
  
    V_PER_CHARGE_FEE_SUM := V_PER_SELL_SERVICE + V_PER_SHOP_CHARGE_FEE;
    V_PER_ONLOAD_FEE_SUM := V_PER_ONLOAD_FEE + V_PER_SHOP_ONLOAD_FEE;
    V_PER_ORTHER_FEE_SUM := V_PER_OTHER_FEE + V_PER_SHOP_ORTHER_FEE;
  
    /**期初余额(应付账款)*/ --2013-01-31改动  增加了预订资金罚扣  2013-03-26本期支付增加仓储费
    V_PER_PAY_START_ACCOUNT := (V_INIT_PAY - V_INIT_SETTLED) + (V_INIT_ACCOUNT_IN - V_INIT_ACCOUNT_OUT) +
                               (V_INIT_MARGINS_IN - V_INIT_MARGINS_OUT) - V_INIT_BOOK_REDUCE;
    /**期末余额(应付账款)*/
    V_PER_PAY_END_ACCOUNT := V_PER_PAY_START_ACCOUNT +
                             ((V_PER_END_PRICE - (V_PER_INSURE_FEE + V_PER_ONLOAD_FEE_SUM + V_PER_CUSTODY_FEE +
                             V_PER_CHARGE_FEE_SUM + V_PER_ORTHER_FEE_SUM + V_PER_SETTLE_BANK +
                             V_PER_SETTLE_CASH + V_PER_SETTLE_ACCOUNT + V_PER_BEFORE_SETTLE_REFUND)) +
                             (V_PER_CUSTOME_REMIT + V_PER_ACTUAL_SETTLE_ACCOUNT + V_PER_REFUND_ACCOUNT +
                             V_PER_SELL_RETURN + V_PER_SELL_SCORE_CASH + V_MARGIN_TRANSFER_ACC - V_PER_BALANCE_REFUND -
                             V_PER_BALANCE_PAY - V_PER_POST_FEE - V_PER_KEEP_FEE - V_BUY_CUSTODY_FEE -
                             V_BUY_INSURE_FEE - V_ACC_TRANSFER_MARGIN) + (V_PER_MARGINS_ADD - V_PER_MARGINS_REDUCE)) -
                             V_PER_BOOK_REDUCE;
  
    IF P_ACCOUNT_TYPE = 2 THEN
      /**期度应付账款*/
      V_PER_BALANCE_START := V_PER_PAY_START_ACCOUNT;
      V_PER_BALANCE_END   := V_PER_PAY_END_ACCOUNT;
    END IF;
  
    INSERT INTO TEMP_PERIOD_COST T
      (T.ID,
       T.PER_DATE,
       T.PER_START_ACCOUNT,
       T.PER_END_ACCOUNT,
       T.PER_BUY_SERVICE,
       T.PER_POST_FEE,
       T.PER_KEE_FEE,
       T.PER_MARGIN_BUCKER,
       T.PER_SELL_FEE,
       T.PER_ONLOAD_FEE,
       T.PER_INSURE_FEE,
       T.PER_CUSTODY_FEE,
       T.PER_OTHER_FEE,
       T.PER_SELL_RETURN,
       T.PER_PARTNER_RET,
       T.PER_SELL_CASH,
       T.PER_END_PRICE,
       T.PER_REFUND_ACCOUNT,
       T.PER_SETTLE_BANK_TRANSFER,
       T.PER_SETTLE_CASH_PAY,
       T.PER_SETTLE_TRANSFER_ACCOUNT,
       T.PER_PARTNER_BANK_TRANSFER,
       T.PER_CUSTOM_REMIT,
       T.PER_BALANCE_REFUND,
       T.PER_BALANCE_PAY,
       T.BUY_CUSTODY_FEE,
       T.BUY_INSURE_FEE,
       T.ACC_TRANSFER_MARGIN,
       T.MARGIN_TRANSFER_ACC,
       T.PER_MARGINS_ADD,
       T.PER_MARGINS_REDUCE,
       T.BEFORE_SETTLE_REFUND,
       T.PER_ACTUAL_SETTLE_ACCOUNT,
       T.PER_ACTUAL_SETTLE_BANK,
       T.PER_ACTUAL_SETTLE_CASH,
       T.PER_BOOK_REDUCE,
       T.PER_STORAGE_CHARGE,
       T.PERIOD_TYPE,
       CREATED_AT)
    VALUES
      (TEMP_PERIOD_COST_SEQ.NEXTVAL,
       V_PER_DATE,
       V_PER_BALANCE_START,
       V_PER_BALANCE_END,
       V_PER_BUY_SERVICE,
       V_PER_POST_FEE,
       V_PER_KEEP_FEE,
       V_PER_MARGIN_FORFEIT,
       V_PER_CHARGE_FEE_SUM,
       V_PER_ONLOAD_FEE_SUM,
       V_PER_INSURE_FEE,
       V_PER_CUSTODY_FEE,
       V_PER_ORTHER_FEE_SUM,
       V_PER_SELL_RETURN,
       V_PER_PARTNER_RETURN,
       V_PER_SELL_SCORE_CASH,
       V_PER_END_PRICE,
       V_PER_REFUND_ACCOUNT,
       V_PER_SETTLE_BANK,
       V_PER_SETTLE_CASH,
       V_PER_SETTLE_ACCOUNT,
       V_PER_PARTNER_BANK,
       V_PER_CUSTOME_REMIT,
       V_PER_BALANCE_REFUND,
       V_PER_BALANCE_PAY,
       V_BUY_CUSTODY_FEE,
       V_BUY_INSURE_FEE,
       V_ACC_TRANSFER_MARGIN,
       V_MARGIN_TRANSFER_ACC,
       V_PER_MARGINS_ADD,
       V_PER_MARGINS_REDUCE,
       V_PER_BEFORE_SETTLE_REFUND,
       V_PER_ACTUAL_SETTLE_ACCOUNT,
       V_PER_ACTUAL_SETTLE_BANK,
       V_PER_ACTUAL_SETTLE_CASH,
       V_PER_BOOK_REDUCE,
       V_PER_STORAGE_CHARGE,
       P_ACCOUNT_TYPE,
       SYSDATE);
  END IF;
END P_PERIOD_PAY_ACCOUNT_ONE;

 
/

-- ----------------------------
-- Procedure structure for P_PERIOD_RECEIVE_ACCOUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_PERIOD_RECEIVE_ACCOUNT" (p_start        in date,
                                                     p_end          in date,
                                                     p_account_type in varchar2) is
   /**
        @author chengyufen
        date 2012.08.06
        @discrible 期度应收账款
   */
  v_per_date          date := p_start; --期度
  v_per_start_account number := 0; --期初余额(应收)
  v_per_end_account   number := 0; --期末余额(应收)
  v_per_end_price     number := 0; --本期结标价
  v_per_buy_service   number := 0; --本期服务费
  v_per_shop_cash     number := 0; --本期商城现金购物

  v_per_account_pay   number := 0; --本期支付
  v_per_cancel_pay    number := 0; --本期取消交易单
  v_per_account_shop  number := 0; --本期商城支付
  v_per_cancel_shop   number := 0; --本期取消商城订单
  v_per_ips_shop      number := 0;
  v_per_ips_pay       number := 0;
  v_per_storage_charge number :=0; --本期仓储费

  v_init_end_price    number := 0; --期初结标价
  v_init_service      number := 0; --期初服务费
  v_init_shopCash     number := 0; --期初商城现金购物

  v_init_account_pay  number := 0; --期初支付
  v_init_cancel_pay   number := 0; --期初取消交易单
  v_init_account_shop number := 0; --期初商城支付
  v_init_cancel_shop  number := 0; --期初取消商城订单
  v_init_storage_charge number:=0; --期初仓储费
  v_count             number := 0;
  v_per_certificate_charge number := 0; --期度收藏证书销售额
  v_back_certificate_charge number := 0;  --收藏证书的退货费用
  v_certificate_charge number := 20; --单个收藏证书价格
  

 cursor cur_period_cost is
    select to_char(a.finance_date, 'yyyy-mm') finance_date
      from user_accounts a
     where a.finance_date >= p_start
       and a.finance_date <= p_end
     group by to_char(a.finance_date, 'yyyy-mm')
     order by finance_date;

begin

  for res_per_cost in cur_period_cost loop
     v_per_date := to_date(res_per_cost.finance_date, 'yyyy-mm');
     /**查询期度小于前一个月的记录数*/
     select count(1)
        into v_count
        from temp_period_cost t
       where t.period_type = p_account_type
         and t.per_date = v_per_date
         and t.per_date < to_date(to_char(add_months(sysdate,-1),'yyyy-mm'),'yyyy-mm');
        /* and t.per_date < to_date(to_char(trunc(sysdate),'yyyy-mm') , 'yyyy-mm');*/

   /**如果统计期度大于或等于前一个月，则实时统计，否则只让查历史数据*/
    if v_per_date>=to_date(to_char(add_months(sysdate,-1),'yyyy-mm'),'yyyy-mm') then
       execute immediate 'delete temp_period_cost where period_type=' || p_account_type || '
               and per_date=to_date(''' || to_char(v_per_date, 'YYYY-MM') || ''',''YYYY-MM'')';
    end if;

   --统计期度小于当前系统月份，且在期度表中无历史记录则重新查询，已存在记录则查历史记录
   if v_count = 0 then
    /**期初结标价*/
   select decode(sum(o.end_price), null, 0.00, sum(o.end_price))
      into v_init_end_price
      from user_orders o
     where to_char(o.end_date, 'yyyy-mm') < res_per_cost.finance_date;

      /**期初服务费*/
    select decode(sum(o.actual_charge), null, 0.00, sum(o.actual_charge))
      into v_init_service
      from user_orders o
     where to_char(o.end_date, 'yyyy-mm') < res_per_cost.finance_date;

    /**期初商城现金购物*/
    select decode(sum(goods_number * order_price), null, 0.00, sum(goods_number * order_price))
    into v_init_shopCash
    from ec_order_goods e
   where to_char(e.created_at, 'yyyy-mm') < res_per_cost.finance_date;

    /**期初支付*/
     select decode(sum(total_amount), null, 0, sum(total_amount))
    into v_init_account_pay
      from user_orders
     where status = 1
       and to_char(pay_date, 'yyyy-mm') < res_per_cost.finance_date;

    /**期初取消交易单*/
    select decode(sum(o.total_amount), null, 0.00, sum(o.total_amount))
      into v_init_cancel_pay
      from user_orders o
     where o.status in (2, 4, 5)
       and to_char(o.never_pay_date, 'yyyy-mm') < res_per_cost.finance_date;

    /**期初商城支付*/
    select decode(sum(goods_number * order_price),null,0.00,sum(goods_number * order_price))
            into v_init_account_shop
        from ec_order_goods e
       where e.order_status = '1'
         and to_char(e.pay_date, 'yyyy-mm')<res_per_cost.finance_date;

    /**期初取消商城订单*/
    select decode(sum(goods_number * order_price),null,0.00,sum(goods_number * order_price))
           into v_init_cancel_shop
     from ec_order_goods ec
     where ec.order_status=2
     and to_char(ec.cancel_date, 'yyyy-mm')<res_per_cost.finance_date;

    /**期初仓储费*/
     select decode(sum(money),null,0.00,sum(money))    --update at 2013-03-28 新增仓储费
     into v_init_storage_charge
     from user_accounts
     where status='1'
     and to_char(finance_date, 'yyyy-mm')<res_per_cost.finance_date
     and finance_type = '27';


    ------------------------------------------------其他费用------------------------------------------
    /**本期结标价*/
    select decode(sum(o.end_price), null, 0.00, sum(o.end_price))
      into v_per_end_price
      from user_orders o
     where to_char(o.end_date, 'yyyy-mm') = res_per_cost.finance_date;

    /**本期服务费*/
    select decode(sum(o.actual_charge), null, 0.00, sum(o.actual_charge))
      into v_per_buy_service
      from user_orders o
     where to_char(o.end_date, 'yyyy-mm') = res_per_cost.finance_date;

    /**本期支付*/
    select decode(sum(total_amount), null, 0, sum(total_amount))
    into v_per_account_pay
      from user_orders
     where status = 1
       and to_char(pay_date, 'yyyy-mm') = res_per_cost.finance_date;


    /**本期取消交易单*/
    select decode(sum(o.total_amount), null, 0.00, sum(o.total_amount))
      into v_per_cancel_pay
      from user_orders o
     where o.status in (2, 4, 5)
       and to_char(o.never_pay_date, 'yyyy-mm') = res_per_cost.finance_date;

    /**本期商城现金购物*/
    select decode(sum(goods_number * order_price), null, 0.00, sum(goods_number * order_price))
    into v_per_shop_cash
    from ec_order_goods e
   where to_char(e.created_at, 'yyyy-mm') = res_per_cost.finance_date;

    /**本期支付商城*/
     select decode(sum(goods_number * order_price), null, 0.00, sum(goods_number * order_price))
      into v_per_account_shop
      from ec_order_goods e
     where e.order_status = '1' -- 订单状态:0:待支付, 1:已支付, 2:不支付
       and to_char(e.pay_date, 'yyyy-mm') = res_per_cost.finance_date;

    /**本期取消商城订单*/
    select decode(sum(goods_number * order_price),null,0.00,sum(goods_number * order_price))
           into v_per_cancel_shop
     from ec_order_goods ec
     where ec.order_status = '2'
     and to_char(ec.cancel_date, 'yyyy-mm') = res_per_cost.finance_date;

     /**本期仓储费*/        --update at 2013-03-28 新增仓储费
     select decode(sum(money),null,0.00,sum(money))
     into v_per_storage_charge
     from user_accounts
     where status='1'
     and to_char(finance_date, 'yyyy-mm')=res_per_cost.finance_date
     and finance_type = '27';
	 
	 /** 本期收藏证书销售额*/
	 select count(t.id)*v_certificate_charge
	 into v_per_certificate_charge
  from user_orders t
 where t.has_collection_certificate = '1'
 and to_char(t.pay_date,'yyyy-mm') = res_per_cost.finance_date;
	   
	   /**收藏证书的退货费用*/
	   select count(ucc.id)*v_certificate_charge
	   into  v_back_certificate_charge
		  from user_collection_certificate ucc
		  left join user_refunds urs
			on ucc.order_id = urs.user_order_id
		 where urs.status = 9
       and urs.is_refund_certificate = 1
		   and to_char(urs.complete_at,'yyyy-mm') = res_per_cost.finance_date;

	 

    /**期初余额*/
    v_per_start_account := v_init_end_price + v_init_service + v_init_shopCash-
                           v_init_account_pay-v_init_cancel_pay -
                           v_init_account_shop -v_init_cancel_shop;
    /**期末余额*/
    v_per_end_account := v_per_start_account + v_per_end_price+v_per_buy_service+v_per_shop_cash-
                         v_per_account_pay -  v_per_cancel_pay - v_per_account_shop - v_per_cancel_shop+v_per_certificate_charge - v_back_certificate_charge;

    insert into temp_period_cost t
      (t.id,
       t.per_date,
       t.per_start_account,
       t.per_end_account,
       t.per_buy_service,
       t.per_end_price,
       t.per_shop_cash,
       t.per_ips_pay,
       t.per_account_pay,
       t.per_cancel_pay,
       t.per_ips_shop,
       t.per_account_shop,
       t.per_cancel_shop,
       t.per_storage_charge,
       t.period_type,
       t.created_at,
	   t.per_certificate_charge,
	   t.back_certificate_charge)
    values
      (temp_period_cost_seq.nextval,
       v_per_date,
       v_per_start_account,
       v_per_end_account,
       v_per_buy_service,
       v_per_end_price,
       v_per_shop_cash,
       v_per_ips_pay,
       v_per_account_pay,
       v_per_cancel_pay,
       v_per_ips_shop,
       v_per_account_shop,
       v_per_cancel_shop,
       v_per_storage_charge,
       p_account_type,
       sysdate,
	   v_per_certificate_charge,
	   v_back_certificate_charge);
       end if;
  end loop;
end p_period_receive_account;

 
/

-- ----------------------------
-- Procedure structure for P_QUOTAS_ADD_BY_ID_AUTH
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_QUOTAS_ADD_BY_ID_AUTH" (RESULT_STATUS OUT NUMBER/*0:成功;1:参数错误;*/) IS
  v_tmp_score_id            NUMBER := 0;
  uqid                      NUMBER := 0;
  quotas_count              NUMBER := 0;
  --取出停机前身份认证成功的用户
  CURSOR C_USER_AUTH_STATUS IS
     select UD.USER_ID,U.NICKNAME from user_details ud,USERS U where
     UD.USER_ID=U.ID
     AND ud.id_auth_status=2;
     AND ud.id_auth_pass_time<to_date('2012-06-20','yyyy-MM-dd');
BEGIN
  BEGIN
    FOR RESULT_ROW IN C_USER_AUTH_STATUS LOOP
      SELECT USER_QUOTAS_SEQ.NEXTVAL
INTO uqid FROM DUAL;

      --判断用户是否获得过5000额度的奖励如果没有则补送4800额度和20积分
      SELECT COUNT(1) INTO quotas_count FROM USER_QUOTAS UQ
      WHERE UQ.USER_ID=RESULT_ROW.USER_ID
            AND UQ.AMOUNT='5000'
            AND UQ.REMARKS='身份认证通过时送的额度(程序自动送)';

      IF quotas_count = 0 THEN
        --插入流水
        INSERT INTO USER_QUOTAS
          (ID,
           USER_ID,
           AMOUNT,
           QUOTA_TYPE,
           OPERATE_TYPE,
           DIRECTION,
           REMARKS,
           CREATED_AT)
        VALUES
          (uqid,
           RESULT_ROW.USER_ID,4800,0,
           '1',
           0,'身份认证通过时送的额度(程序自动补全旧额度)',
           sysdate);
        SELECT SCORES_SEQ.NEXTVAL INTO v_tmp_score_id FROM DUAL;
        /**增加竞买积分记录+20积分**/
        INSERT INTO SCORES
                (id,
                 user_id,
                 user_name,
                 score_type,
                 score_status,
                 score_source,
                 scores,
                 useable_scores,
                 source_type,
                 created_at,
                 effected_at,
                 expired_at,
                 SOURCE_ID,
                 remarks)
              VALUES
                (v_tmp_score_id,
                 RESULT_ROW.USER_ID,
                 RESULT_ROW.NICKNAME,
                 '0',
                 '1',
                 '4',
                 20,
                 20,
                 'SCORES',
                 sysdate,
                 sysdate,
                 ADD_MONTHS(SYSDATE, 12),
                 '',
                 'CretPersonalPhotos');
            /**竞买积分流水记录+20积分**/
            INSERT INTO SCORE_INCOME_EXPENSES
              (id,
               user_id,
               user_name,
               source_id,
               source_type,
               scores,
               score_type,
               direction,
               operation_type,
               created_at,
               remarks)
            VALUES
              (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
               RESULT_ROW.USER_ID,
               RESULT_ROW.NICKNAME,
               v_tmp_score_id,
               'Scores',
               20,
               '0',
               '0',
               '2',
               sysdate,
               'CretPersonalPhotos');
         --更新用户额度
         UPDATE USERS SET
         QUOTA=QUOTA+4800,
         TOTAL_QUOTA=TOTAL_QUOTA+4800,
         BUY_SCORE_USEABLE=BUY_SCORE_USEABLE + 20,
         UPDATED_AT=SYSDATE
         WHERE ID=RESULT_ROW.USER_ID;

      END IF;
    END LOOP;
    RESULT_STATUS:=0;
    RETURN;
  EXCEPTION
    WHEN OTHERS THEN
      RESULT_STATUS:=1;
      rollback;
      RETURN;
  END;
END P_QUOTAS_ADD_BY_ID_AUTH;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_REDIS_LOADDB
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_REDIS_LOADDB" (
BID_HISTORY       VARCHAR2,
AUCTION_ID        NUMBER,
USER_ID           NUMBER,
LEADER_USER_ID    NUMBER,
NICKNAME          VARCHAR2,
MAX_PRICE         NUMBER,
BID               NUMBER,
IS_PROXY          NUMBER,
IP                VARCHAR2,
APP_ID            VARCHAR2,
USE_QUOTA         NUMBER,
RELEASE_QUOTA     NUMBER,
USE_TYPE          VARCHAR2,
PROXY_PRICE       NUMBER,
AUCTION_TIME      NUMBER,
CREATED_AT        VARCHAR2
) IS
jsonObj json;
BEGIN
  BEGIN
    jsonObj := json(BID_HISTORY);
            
    EXCEPTION
		WHEN OTHERS THEN
			RETURN;
	END;
END P_REDIS_LOADDB;

 
/

-- ----------------------------
-- Procedure structure for P_REDUCE_EN_FEE
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_REDUCE_EN_FEE" is
  v_transport_fee      number(16, 2) := 0; --运费
  v_address_id         number := 0;   --发货地址id
  v_address            varchar2(225);
  v_postcode           varchar2(225);
  v_tel                varchar2(225);
  v_mobile_tel         varchar2(225);
  v_receive_name       varchar2(225); --收货人
  
  v_region_id          number := 2;   --地区id
  v_logistic_type_id   number := 21;  --发货方式id
  v_logistic_id        number;        --发货单id
  v_logistic_detail_id number;        --发货明细id
  v_user_account_id    number;        --流水id

  cursor user_payment_cur is
    select id, total_amount, user_id, username
      from user_payments
     where id in (674260);
begin
  --运费
  SELECT F.FEE
    into v_transport_fee
    FROM FOREIGN_DELIVER_TYPES T
    JOIN DELIVER_REGIONS R ON (T.ID = R.FOREIGN_DELIVER_ID)
    JOIN DELIVER_FEE F ON (T.ID = F.FOREIGN_DELIVER_ID AND
                          R.DELIVER_REGION = F.DELIVER_REGION)
   WHERE T.ID = 21
     AND R.COUNTRY_ID = 202;

  for res_pay in user_payment_cur loop
    --用户地址信息
    select id,address,postcode,tel,mobile_tel,receive_name 
           into v_address_id,v_address,v_postcode,v_tel,v_mobile_tel,v_receive_name
        from (select ud.id,
           ((select uc.name
               from user_countries uc
              where uc.id = ud.country_id) ||
           (select up.name
               from user_provinces up
              where up.id = ud.province_id) ||
           (select ut.name from user_cities ut where ut.id = ud.city_id) ||
           ud.address) address,
           ud.postcode,
           ud.tel,
           ud.mobile_tel,
           ud.receive_name      
      from user_addresses ud
     where ud.user_id = res_pay.user_id
     order by ud.id desc) 
       where rownum = 1;

    --首先补扣 保价费
    insert into user_accounts
      (id,
       user_id,
       money,
       finance_type,
       finance_date,
       direction,
       source_id,
       source_type,
       created_at,
       account_old,
       account_new)
    values
      (user_accounts_seq.nextval,
       res_pay.user_id,
       res_pay.total_amount * 0.015,
       17,
       sysdate,
       '1',
       res_pay.id,
       'USER_PAYMENTS',
       sysdate,
       (select account from users where id = res_pay.user_id),
       (select account - res_pay.total_amount * 0.015
          from users
         where id = res_pay.user_id));

    --补扣运费
    select user_accounts_seq.nextval into v_user_account_id from dual;
    insert into user_accounts
      (id,
       user_id,
       money,
       finance_type,
       finance_date,
       direction,
       source_id,
       source_type,
       created_at,
       account_old,
       account_new)
    values
      (v_user_account_id,
       res_pay.user_id,
       v_transport_fee,
       6,
       sysdate,
       '1',
       0,
       'LOGISTIC_DETAILS',
       sysdate,
       (select account from users where id = res_pay.user_id),
       (select account - v_transport_fee
          from users
         where id = res_pay.user_id));

    -- 接着更新支付表 追加 扣费信息
    update user_payments
       set transmit_fee  = v_transport_fee,
           insurance_fee = res_pay.total_amount * 0.015
     where id = res_pay.id;

    --接着新建一条物流明细表
    select logistic_details_seq.nextval
      into v_logistic_detail_id
      from dual;
      
    insert into logistic_details
      (id,
       user_id,
       status,
       created_at,
       remarks,
       delivery_type,
       logistic_type_id,
       user_address_id,
       country_id)
    values
      (v_logistic_detail_id,
       res_pay.user_id,
       5,
       sysdate,
       'Registered Airmail Paid: 46.40',
       '1',
       v_logistic_type_id,
       v_address_id,
       69);

    --再插入物流表
    select logistics_seq.nextval into v_logistic_id from dual;
    insert into logistics
      (id,
       user_id,
       user_name,
       address,
       postcode,
       tel,
       mobile_tel,
       status,
       region_id,
       logistic_type_id,
       postage,
       total_fee,
       user_address_id,
       items_count,
       created_at)
    values
      (v_logistic_id,
       res_pay.user_id,
       res_pay.username,
       v_address,
       v_postcode,
       v_tel,
       v_mobile_tel,
       '5',
       v_region_id,
       v_logistic_type_id,
       v_transport_fee,
       v_transport_fee,
       v_address_id,
       (select count(1) from user_orders where user_payment_id = res_pay.id),
       sysdate);

    --接着扣余额
    update users
       set account       = account - v_transport_fee +
                           res_pay.total_amount * 0.015,
           total_account = total_account - v_transport_fee +
                           res_pay.total_amount * 0.015
     where id = res_pay.user_id;

    --更新logistic_details表的 logistic_id和 old_logistic_id字段
    update logistic_details
       set logistic_id = v_logistic_id, old_logistic_id = v_logistic_id
     WHERE id = v_logistic_detail_id;

    --将logistic_id 更新到user_accounts表
    update user_accounts
       set source_id = v_logistic_id
     where id = v_user_account_id;

    --更新交易单表物流明细外键
    update user_orders o
       set o.logistic_detail_id = v_logistic_detail_id
     where o.user_payment_id = res_pay.id;
  end loop;
end p_reduce_en_fee;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_REMIND_EXPIRED_SCORES
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_REMIND_EXPIRED_SCORES"
/*
    作者：Dwen
    日期：2014-01-06
    描述：
    1、系统每个月1号，以站内信方式对客户未来三个月内所有即将过期的积分总数进行提醒。
    2、系统每个月1号，以站内信方式对客户未来三个月内所有即将过期的形象值进行提醒。
*/
IS 
  /* 查询未来3个月即将过期的积分 */
  CURSOR C_EXPIRED_SCORES IS
    SELECT S.USER_ID,SUM(S.SCORES) AS SUM_SCORES  
    FROM SCORES S
    JOIN USERS U ON (U.ID = S.USER_ID)
    WHERE U.USER_LANG !=2
    AND U.ISLOCK != 1
    AND S.EFFECTED_AT is not null 
    AND S.EXPIRED_AT >= SYSDATE 
    AND S.EXPIRED_AT<= add_months(SYSDATE,3)  
    and S.user_id=8038035 --#测试人员测试用,上线时删除
    group by S.USER_ID;

  
  /* 查询未来3个月即将过期的形象值 */
  CURSOR C_EXPIRED_AMOUNT IS
    SELECT D.USER_ID,SUM(D.SCORES) AS SUM_AMOUNT 
    FROM USER_LEVEL_DETAILS D 
    JOIN USERS U ON (U.ID = D.USER_ID)
    WHERE U.USER_LANG !=2
    AND U.ISLOCK != 1
    AND D.DIRECTION = '0' 
    AND D.OPERATE_TYPE = '1'
    AND D.STATUS = '1'
    AND D.CREATED_AT IS NOT NULL 
    /* 注：上线需加该条件，该条件日期根据上线日期来定 */
    --AND D.CREATED_AT >= TO_DATE('2014-02-15','yyyy-MM-dd')
    AND D.EXPIRED_AT >= SYSDATE
    AND D.EXPIRED_AT <= add_months(SYSDATE,3)   
    and D.user_id=8038035 --#测试人员测试用,上线时删除
    group by D.USER_ID;
  
BEGIN
  /* 发送积分站内信提醒 */
  FOR RESULT_ROW IN C_EXPIRED_SCORES LOOP
    BEGIN
    INSERT INTO MESSAGES
      (ID,
      MSG_FROM,
      FROM_ID,
      TO_ID,
      SUBJECT,
      CONTENT,
      PARENT_ID,
      MSG_TYPE,
      IS_SEND_DEL,
      CREATED_AT) 
    VALUES 
      (MESSAGES_SEQ.NEXTVAL,
      '赵涌客服',
      6,
      RESULT_ROW.USER_ID,
      '积分过期',
      '尊敬的客户您好：<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;您三个月内即将有'||RESULT_ROW.SUM_SCORES||'积分即将过期，建议您及时进行<a style="color:#f00" href="http://www.zhaoonline.com/user/exchange-detail.shtml">兑换</a>。<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢您一直以来对赵涌在线的支持，我们将继续为广大客户提供更高质量的服务！<br/>赵涌客服：021-23099900<br/> 客服传真：021-64865555<br/> 邮箱地址：service@zhaoonline.com<br/><br/>赵涌在线客服中心<br/>'||to_char(SYSDATE,'yyyy')||'年'||to_char(SYSDATE,'MM')||'月'||to_char(SYSDATE,'dd')||'日',
      0,
      0,
      0,
      SYSDATE);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
            ROLLBACK;
      WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
            ROLLBACK;
      WHEN OTHERS THEN              /* 其它异常 */
            ROLLBACK;
      END;
  COMMIT;
  END LOOP;
  
  /* 发送形象值站内信提醒 */
  FOR RESULT_ROW IN C_EXPIRED_AMOUNT LOOP
    BEGIN
    INSERT INTO MESSAGES
      (ID,
      MSG_FROM,
      FROM_ID,
      TO_ID,
      SUBJECT,
      CONTENT,
      PARENT_ID,
      MSG_TYPE,
      IS_SEND_DEL,
      CREATED_AT) 
    VALUES 
      (MESSAGES_SEQ.NEXTVAL,
      '赵涌客服',
      6,
      RESULT_ROW.USER_ID,
      '形象值过期',
      '尊敬的客户您好：<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;您三个月内即将有'||RESULT_ROW.SUM_AMOUNT||'形象值即将过期，可能会影响您的会员福利。形象值的具体福利请查看<a style="color:#f00" href="http://www.zhaoonline.com/help/172.htm">帮助中心</a>。<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢您一直以来对赵涌在线的支持，我们将继续为广大客户提供更高质量的服务！<br/>赵涌客服：021-23099900<br/> 客服传真：021-64865555<br/> 邮箱地址：service@zhaoonline.com<br/><br/>赵涌在线客服中心<br/>'||to_char(SYSDATE,'yyyy')||'年'||to_char(SYSDATE,'MM')||'月'||to_char(SYSDATE,'dd')||'日',
      0,
      0,
      0,
      SYSDATE);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
            ROLLBACK;
      WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
            ROLLBACK;
      WHEN OTHERS THEN              /* 其它异常 */
            ROLLBACK;
      END;
  COMMIT;
  END LOOP;
END P_REMIND_EXPIRED_SCORES;

 
/

-- ----------------------------
-- Procedure structure for P_SCORE_BUYER_EXCHANGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_BUYER_EXCHANGE"
(
	P_USER_ID         IN NUMBER,
	P_EXCHANGE_SCORES IN NUMBER,
	P_RELATED_ID      IN NUMBER,
	RESULT_STATUS     OUT NUMBER
	/**
                                                      *0:成功
                                                      *1:参数错误
                                                      *2:积分不够
                                                      *3:积分详细表数据错误
                                                      *5:未知错误
                                                      **/
) IS
	/**
  作者：黄超
  描述：竞买积分兑换
  **/
	V_TMP_BUYER_SCORES     NUMBER;
	V_TMP_NICKNAME         VARCHAR2(200);
	V_TMP_SCORE_CONSUME_ID NUMBER;
	OUT_LOOP_CUT_ERROR EXCEPTION;
	--查询出可用竞买积分记录
	CURSOR C_USER_SCORES_BUYER IS
		SELECT S.ID, S.USEABLE_SCORES
			FROM SCORES S
		 WHERE S.USER_ID = P_USER_ID
			 AND S.SCORE_TYPE != '1'
			 AND S.SCORE_STATUS = '1'
			 AND S.EXPIRED_AT > SYSDATE
		 ORDER BY S.EXPIRED_AT, S.ID;
BEGIN
	IF P_USER_ID IS NULL OR P_EXCHANGE_SCORES IS NULL THEN
		RESULT_STATUS := 1;
		RETURN;
	END IF;

	BEGIN
		SELECT U.NICKNAME
			INTO V_TMP_NICKNAME
			FROM USERS U
		 WHERE U.ID = P_USER_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 1;
			RETURN;
	END;

	--查询该账户下实际的可用积分数
	BEGIN
		SELECT U.BUY_SCORE_USEABLE
			INTO V_TMP_BUYER_SCORES
			FROM USERS U
		 WHERE U.ID = P_USER_ID
			 AND U.ISLOCK = '0';
		IF V_TMP_BUYER_SCORES < P_EXCHANGE_SCORES THEN
			RESULT_STATUS := 2;
			RETURN;
		END IF;
	END;

	BEGIN
		SELECT SCORE_CONSUMES_SEQ.NEXTVAL
			INTO V_TMP_SCORE_CONSUME_ID
			FROM DUAL;
		--新增积分消费总记录
		INSERT INTO SCORE_CONSUMES
			(ID,
			 USER_ID,
			 USER_NAME,
			 SCORE_TYPE,
			 CONSUME_TYPE,
			 CONSUME_SCORES,
			 CREATED_AT,
			 REMARKS)
		VALUES
			(V_TMP_SCORE_CONSUME_ID,
			 P_USER_ID,
			 V_TMP_NICKNAME,
			 '0',
			 '1',
			 P_EXCHANGE_SCORES,
			 SYSDATE,
			 '商城积分支付');
		--新增积分消费流水记录
		INSERT INTO SCORE_INCOME_EXPENSES
			(ID,
			 USER_ID,
			 USER_NAME,
			 SOURCE_ID,
			 SOURCE_TYPE,
			 SCORES,
			 SCORE_TYPE,
			 DIRECTION,
			 OPERATION_TYPE,
			 CREATED_AT,
			 REMARKS)
		VALUES
			(SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
			 P_USER_ID,
			 V_TMP_NICKNAME,
			 V_TMP_SCORE_CONSUME_ID,
			 'SCORE_CONSUMES',
			 P_EXCHANGE_SCORES,
			 '0',
			 '1',
			 '5',
			 SYSDATE,
			 '商城积分支付');
		V_TMP_BUYER_SCORES := P_EXCHANGE_SCORES;
		FOR RESULT_ROW IN C_USER_SCORES_BUYER LOOP
			IF RESULT_ROW.USEABLE_SCORES > V_TMP_BUYER_SCORES AND
				 V_TMP_BUYER_SCORES > 0 THEN
				--修改该笔竞买积分的可用积分
				UPDATE SCORES S
					 SET S.USEABLE_SCORES = S.USEABLE_SCORES - V_TMP_BUYER_SCORES,
							 S.UPDATED_AT     = SYSDATE
				 WHERE S.ID = RESULT_ROW.ID;
				--新增积分消费明细记录
				INSERT INTO SCORE_CONSUME_DETAILS
					(ID, SCORE_ID, SCORE_CONSUME_ID, SCORES, CREATED_AT, REMARKS)
				VALUES
					(SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
					 RESULT_ROW.ID,
					 V_TMP_SCORE_CONSUME_ID,
					 V_TMP_BUYER_SCORES,
					 SYSDATE,
					 '商城积分支付,关联id:' || P_RELATED_ID);
				V_TMP_BUYER_SCORES := 0;
			ELSIF V_TMP_BUYER_SCORES > 0 THEN
				--将该笔积分的可用积分归零，并将该笔积分改为已用积分
				UPDATE SCORES S
					 SET S.USEABLE_SCORES = 0,
							 S.SCORE_STATUS   = '3',
							 S.UPDATED_AT     = SYSDATE
				 WHERE S.ID = RESULT_ROW.ID;
				--修改积分消费明细记录
				INSERT INTO SCORE_CONSUME_DETAILS
					(ID, SCORE_ID, SCORE_CONSUME_ID, SCORES, CREATED_AT, REMARKS)
				VALUES
					(SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
					 RESULT_ROW.ID,
					 V_TMP_SCORE_CONSUME_ID,
					 RESULT_ROW.USEABLE_SCORES,
					 SYSDATE,
					 'Bidding Integral Exchange Commodity');
				V_TMP_BUYER_SCORES := V_TMP_BUYER_SCORES -
															RESULT_ROW.USEABLE_SCORES;
			END IF;
			IF V_TMP_BUYER_SCORES = 0 THEN
				/**抛出异常来退出循环**/
				RAISE OUT_LOOP_CUT_ERROR;
			END IF;
		END LOOP;
	EXCEPTION
		WHEN OUT_LOOP_CUT_ERROR THEN
			--修改用户表中的可用竞买积分
			UPDATE USERS U
				 SET U.BUY_SCORE_USEABLE = U.BUY_SCORE_USEABLE - P_EXCHANGE_SCORES,
						 U.UPDATED_AT        = SYSDATE
			 WHERE U.ID = P_USER_ID;
			RESULT_STATUS := 0;
			COMMIT;
			RETURN;
		WHEN OTHERS THEN
			RESULT_STATUS := 5;
			ROLLBACK;
			RETURN;
	END;
END P_SCORE_BUYER_EXCHANGE;


 
/

-- ----------------------------
-- Procedure structure for P_SCORE_BUYER_LOTTERY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_BUYER_LOTTERY" (P_USER_ID         IN NUMBER,
                                                  P_EXCHANGE_SCORES IN NUMBER,
                                                  P_RELATED_ID      IN NUMBER,
                                                  RESULT_STATUS     OUT NUMBER
                                                  /**
                                                  *0:成功
                                                  *1:参数错误
                                                  *2:积分不够
                                                  *3:积分详细表数据错误
                                                  *5:未知错误
                                                  *6:用户已冻结
                                                  **/) IS
  /**
  作者：黄超
  描述：竞买积分兑换
  **/
  V_TMP_BUYER_SCORES     NUMBER;
  V_TMP_NICKNAME         VARCHAR2(200);
  V_TMP_SCORE_CONSUME_ID NUMBER;
  V_TMP_USER_IS_LOCK NUMBER;
  OUT_LOOP_CUT_ERROR EXCEPTION;
  --查询出可用竞买积分记录
  CURSOR C_USER_SCORES_BUYER IS
    SELECT S.ID, S.USEABLE_SCORES
      FROM SCORES S
     WHERE S.USER_ID = P_USER_ID
       AND S.SCORE_TYPE != '1'
       AND S.SCORE_STATUS = '1'
       AND S.EXPIRED_AT > SYSDATE
     ORDER BY S.EXPIRED_AT, S.ID;
BEGIN
  IF P_USER_ID IS NULL OR P_EXCHANGE_SCORES IS NULL THEN
    RESULT_STATUS := 1;
    RETURN;
  END IF;

  BEGIN
    SELECT U.NICKNAME
      INTO V_TMP_NICKNAME
      FROM USERS U
     WHERE U.ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 1;
      RETURN;
  END;

  --查询该账户下实际的可用积分数
  BEGIN

   SELECT U.ISLOCK
      INTO V_TMP_USER_IS_LOCK
      FROM USERS U
     WHERE U.ID = P_USER_ID;
   IF V_TMP_USER_IS_LOCK > 0 THEN
      RESULT_STATUS := 6;
      RETURN;
    END IF;

    SELECT U.BUY_SCORE_USEABLE
      INTO V_TMP_BUYER_SCORES
      FROM USERS U
     WHERE U.ID = P_USER_ID
       AND U.ISLOCK = '0';
    IF V_TMP_BUYER_SCORES < P_EXCHANGE_SCORES THEN
      RESULT_STATUS := 6;
      RETURN;
    END IF;

    --open C_USER_SCORES_BUYER;

    --IF C_USER_SCORES_BUYER%notfound is null THEN
    --  RESULT_STATUS := 2;
    --  RETURN;
    --END IF;
  END;

  BEGIN
    SELECT SCORE_CONSUMES_SEQ.NEXTVAL
      INTO V_TMP_SCORE_CONSUME_ID
      FROM DUAL;
    --新增积分消费总记录
    INSERT INTO SCORE_CONSUMES
      (ID,
       USER_ID,
       USER_NAME,
       SCORE_TYPE,
       CONSUME_TYPE,
       CONSUME_SCORES,
       CREATED_AT,
       REMARKS)
    VALUES
      (V_TMP_SCORE_CONSUME_ID,
       P_USER_ID,
       V_TMP_NICKNAME,
       '0',
       '7',
       P_EXCHANGE_SCORES,
       SYSDATE,
       '抽奖积分支付');
    --新增积分消费流水记录
    INSERT INTO SCORE_INCOME_EXPENSES
      (ID,
       USER_ID,
       USER_NAME,
       SOURCE_ID,
       SOURCE_TYPE,
       SCORES,
       SCORE_TYPE,
       DIRECTION,
       OPERATION_TYPE,
       CREATED_AT,
       REMARKS)
    VALUES
      (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
       P_USER_ID,
       V_TMP_NICKNAME,
       V_TMP_SCORE_CONSUME_ID,
       'SCORE_CONSUMES',
       P_EXCHANGE_SCORES,
       '0',
       '1',
       '5',
       SYSDATE,
       '抽奖积分支付');
    V_TMP_BUYER_SCORES := P_EXCHANGE_SCORES;
    FOR RESULT_ROW IN C_USER_SCORES_BUYER LOOP
      IF RESULT_ROW.USEABLE_SCORES > V_TMP_BUYER_SCORES AND
         V_TMP_BUYER_SCORES > 0 THEN
        --修改该笔竞买积分的可用积分
        UPDATE SCORES S
           SET S.USEABLE_SCORES = S.USEABLE_SCORES - V_TMP_BUYER_SCORES,
               S.UPDATED_AT     = SYSDATE
         WHERE S.ID = RESULT_ROW.ID;
        --新增积分消费明细记录
        INSERT INTO SCORE_CONSUME_DETAILS
          (ID, SCORE_ID, SCORE_CONSUME_ID, SCORES, CREATED_AT, REMARKS)
        VALUES
          (SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           V_TMP_SCORE_CONSUME_ID,
           V_TMP_BUYER_SCORES,
           SYSDATE,
           '抽奖积分支付,积分大于抽奖积分,关联id:'||P_RELATED_ID);
        V_TMP_BUYER_SCORES := 0;
      ELSIF V_TMP_BUYER_SCORES > 0 THEN
        --将该笔积分的可用积分归零，并将该笔积分改为已用积分
        UPDATE SCORES S
           SET S.USEABLE_SCORES = 0,
               S.SCORE_STATUS   = '3',
               S.UPDATED_AT     = SYSDATE
         WHERE S.ID = RESULT_ROW.ID;
        --修改积分消费明细记录
        V_TMP_BUYER_SCORES := V_TMP_BUYER_SCORES -
                              RESULT_ROW.USEABLE_SCORES;
        INSERT INTO SCORE_CONSUME_DETAILS
          (ID, SCORE_ID, SCORE_CONSUME_ID, SCORES, CREATED_AT, REMARKS)
        VALUES
          (SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           V_TMP_SCORE_CONSUME_ID,
           RESULT_ROW.USEABLE_SCORES,
           SYSDATE,
           '竞买积分兑换商品,积分小于抽奖积分');
      END IF;
      IF V_TMP_BUYER_SCORES = 0 THEN
        /**抛出异常来退出循环**/
        RAISE OUT_LOOP_CUT_ERROR;
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OUT_LOOP_CUT_ERROR THEN
    --修改用户表中的可用竞买积分
      UPDATE USERS U
         SET U.BUY_SCORE_USEABLE = U.BUY_SCORE_USEABLE - P_EXCHANGE_SCORES,
             U.UPDATED_AT        = SYSDATE
       WHERE U.ID = P_USER_ID;
      RESULT_STATUS := 0;
      COMMIT;
      RETURN;
    WHEN OTHERS THEN
      RESULT_STATUS := 5;
      ROLLBACK;
      RETURN;
  END;
END P_SCORE_BUYER_LOTTERY;


 
/

-- ----------------------------
-- Procedure structure for P_SCORE_DUIDUILA_EXCHANGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_DUIDUILA_EXCHANGE"
(
  P_USER_ID         IN NUMBER,
  P_EXCHANGE_SCORES IN NUMBER,
  RESULT_STATUS     OUT NUMBER
  /**
  *V_TMP_SCORE_CONSUME_ID:成功
  *1:参数错误
  *2:积分不够
  *3:积分详细表数据错误
  *5:未知错误
  **/
) IS
  /**
  作者：仝玉甫
  描述：竞买积分兑换兑兑拉积分
  **/
  V_TMP_BUYER_SCORES     NUMBER;
  V_TMP_NICKNAME         VARCHAR2(200);
  V_TMP_SCORE_CONSUME_ID NUMBER;
  OUT_LOOP_CUT_ERROR EXCEPTION;
  --查询出可用竞买积分记录
  CURSOR C_USER_SCORES_BUYER IS
    SELECT S.ID, S.USEABLE_SCORES
      FROM SCORES S
     WHERE S.USER_ID = P_USER_ID
       AND S.SCORE_TYPE != '1'
       AND S.SCORE_STATUS = '1'
       AND S.EXPIRED_AT > SYSDATE
     ORDER BY S.EXPIRED_AT, S.ID;
BEGIN
  IF P_USER_ID IS NULL OR P_EXCHANGE_SCORES IS NULL THEN
    RESULT_STATUS := 1;
    RETURN;
  END IF;

  BEGIN
    SELECT U.NICKNAME
      INTO V_TMP_NICKNAME
      FROM USERS U
     WHERE U.ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 1;
      RETURN;
  END;

  --查询该账户下实际的可用积分数
  BEGIN
    SELECT U.BUY_SCORE_USEABLE
      INTO V_TMP_BUYER_SCORES
      FROM USERS U
     WHERE U.ID = P_USER_ID
       AND U.ISLOCK = '0';
    IF V_TMP_BUYER_SCORES < P_EXCHANGE_SCORES THEN
      RESULT_STATUS := 2;
      RETURN;
    END IF;
  END;

  BEGIN
    SELECT SCORE_CONSUMES_SEQ.NEXTVAL
      INTO V_TMP_SCORE_CONSUME_ID
      FROM DUAL;
    --新增积分消费总记录
    INSERT INTO SCORE_CONSUMES
      (ID,
       USER_ID,
       USER_NAME,
       SCORE_TYPE,
       CONSUME_TYPE,
       CONSUME_SCORES,
       CREATED_AT,
       REMARKS)
    VALUES
      (V_TMP_SCORE_CONSUME_ID,
       P_USER_ID,
       V_TMP_NICKNAME,
       '0',
       '8',
       P_EXCHANGE_SCORES,
       SYSDATE,
       '兑兑拉积分兑换');
    --新增积分消费流水记录
    INSERT INTO SCORE_INCOME_EXPENSES
      (ID,
       USER_ID,
       USER_NAME,
       SOURCE_ID,
       SOURCE_TYPE,
       SCORES,
       SCORE_TYPE,
       DIRECTION,
       OPERATION_TYPE,
       CREATED_AT,
       REMARKS)
    VALUES
      (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
       P_USER_ID,
       V_TMP_NICKNAME,
       V_TMP_SCORE_CONSUME_ID,
       'SCORE_CONSUMES',
       P_EXCHANGE_SCORES,
       '0',
       '1',
       '11',
       SYSDATE,
       '兑兑拉积分兑换');
    V_TMP_BUYER_SCORES := P_EXCHANGE_SCORES;
    FOR RESULT_ROW IN C_USER_SCORES_BUYER LOOP
      IF RESULT_ROW.USEABLE_SCORES > V_TMP_BUYER_SCORES AND
         V_TMP_BUYER_SCORES > 0 THEN
        --修改该笔竞买积分的可用积分
        UPDATE SCORES S
           SET S.USEABLE_SCORES = S.USEABLE_SCORES - V_TMP_BUYER_SCORES,
               S.UPDATED_AT     = SYSDATE
         WHERE S.ID = RESULT_ROW.ID;
        --新增积分消费明细记录
        INSERT INTO SCORE_CONSUME_DETAILS
          (ID, SCORE_ID, SCORE_CONSUME_ID, SCORES, CREATED_AT, REMARKS)
        VALUES
          (SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           V_TMP_SCORE_CONSUME_ID,
           V_TMP_BUYER_SCORES,
           SYSDATE,
           '兑兑拉积分兑换');
        V_TMP_BUYER_SCORES := 0;
      ELSIF V_TMP_BUYER_SCORES > 0 THEN
        --将该笔积分的可用积分归零，并将该笔积分改为已用积分
        UPDATE SCORES S
           SET S.USEABLE_SCORES = 0,
               S.SCORE_STATUS   = '3',
               S.UPDATED_AT     = SYSDATE
         WHERE S.ID = RESULT_ROW.ID;
        --修改积分消费明细记录
        INSERT INTO SCORE_CONSUME_DETAILS
          (ID, SCORE_ID, SCORE_CONSUME_ID, SCORES, CREATED_AT, REMARKS)
        VALUES
          (SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           V_TMP_SCORE_CONSUME_ID,
           RESULT_ROW.USEABLE_SCORES,
           SYSDATE,
           '兑兑拉积分兑换');
        V_TMP_BUYER_SCORES := V_TMP_BUYER_SCORES -
                              RESULT_ROW.USEABLE_SCORES;
      END IF;
      IF V_TMP_BUYER_SCORES = 0 THEN
        /**抛出异常来退出循环**/
        RAISE OUT_LOOP_CUT_ERROR;
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OUT_LOOP_CUT_ERROR THEN
      --修改用户表中的可用竞买积分
      UPDATE USERS U
         SET U.BUY_SCORE_USEABLE = U.BUY_SCORE_USEABLE - P_EXCHANGE_SCORES,
             U.UPDATED_AT        = SYSDATE
       WHERE U.ID = P_USER_ID;
      RESULT_STATUS := V_TMP_SCORE_CONSUME_ID;
      --COMMIT;
      RETURN;
    WHEN OTHERS THEN
      RESULT_STATUS := 5;
      ROLLBACK;
      RETURN;
  END;
END P_SCORE_DUIDUILA_EXCHANGE;

 
/

-- ----------------------------
-- Procedure structure for P_SCORE_GIFT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_GIFT" (p_user_id   in varchar2, --多个客户编号
                                             p_score_num in number, --积分数
                                             p_people_number in number, --赠送人数
                                             p_effect_at     in date, --生效日期
                                             p_admin_id      in number, --操作人ID
                                             p_admin_name    in varchar2, --操作人
                                             p_remark        in varchar2, --赠送理由
                                             p_sign          in varchar2, --标识日期
                                             result_status   out number /**0:成功 1:客户编号不能为空 2:客户不存在 3:未知错误*/) is
  /**
     作者:成玉芬
     日期:2011.10.27
     描述：用户赠送扣除积分历史  (后台调用)
  */
  v_score_status   number := 0; --积分状态
  v_effect_date    date := sysdate; --生效日期
  v_operation_type number := 0; --操作类型
  v_temp_id        number := 0; --临时保存赠送扣除表生成的ID
  v_temp_score_id  number :=0;
  v_split          VARCHAR2(2) := ','; --定义逗号分隔符
  loop_score_error exception;

   --定义查询多个客户ID的游标
  cursor score_customer_id is
    select id, true_name from users s
            where instr(v_split ||p_user_id || v_split, v_split || id || v_split) > 0;
/*  cursor cus_scores is select id,effected_at from scores;*/
begin
    --如果生效日期不为空，则生效日期等于传入的日期，反之生效日期等于创建日期
    if p_sign = '1' then
      v_effect_date := p_effect_at;
    end if;

    /*   如果生效日期为空，则积分立即生效，即为可用积分*/
    if p_sign = '0' then
      v_score_status   := 1;
      v_operation_type := 2;
    end if;

   /*    for res_cus_scores in cus_scores loop
        \*如果到了生效日期则此笔积分变为可用积分,操作类型变为预存积分生效*\
        if res_cus_scores.id is not null and sysdate > res_cus_scores.effected_at then
           update scores set score_status=1 where id = res_cus_scores.id;
           update score_income_expenses set operation_type = 1 where source_id = res_cus_scores.id;
        end if;
    end loop;*/

    begin
      if p_user_id is not null then
        --客户积分赠送扣除历史表 （积分总数=人数*积分数）
        insert into score_gift_deductions
          (id, people_number, user_ids, scores, total_scores, operation_type,
           effected_at, created_at, remarks, admin_id, admin_name)
        values
          (score_gift_deductions_seq.nextval, p_people_number, p_user_id, p_score_num, p_people_number * p_score_num, '0', /*0:赠送,1:扣除*/
           v_effect_date, sysdate, p_remark, p_admin_id, p_admin_name);
        --将赠送扣除历史表生成的ID插入临时变量v_temp_id中
        select max(id) into v_temp_id from score_gift_deductions;

        --循环读取游标，给每个客户赠送积分
        for result_row in score_customer_id loop
          insert into scores
            (id, user_id, user_name, score_type, score_status, score_source, scores, useable_scores, source_id,
            source_type, created_at, effected_at, expired_at, admin_id, admin_name, remarks)
          values
            (scores_seq.nextval, result_row.id, result_row.true_name, '0', v_score_status, '1', p_score_num, p_score_num, v_temp_id,
            'SCORE_GIFT_DEDUCTIONS', sysdate, v_effect_date, add_months(v_effect_date,12*2), p_admin_id, p_admin_name, p_remark);

          select max(id) into v_temp_score_id from scores;
          /*修改用户表里可用竞买积分*/
          if p_sign = '0' then
          update users
             set buy_score_useable = buy_score_useable + p_score_num
           where id = result_row.id;
          end if;

          /* 用户积水流水表*/
          if p_sign = '0' then
            insert into score_income_expenses (id, user_id, user_name, source_id, source_type, scores, score_type,
                   direction, operation_type, created_at, admin_id, admin_name, remarks)
            values
              (score_income_expenses_seq.nextval, result_row.id, result_row.true_name, v_temp_score_id, 'SCORES',  p_score_num, '0',
               '0', v_operation_type, sysdate, p_admin_id, p_admin_name, p_remark);
          end if;
        end loop;
       end if;
    end;
   result_status := 0;
end p_score_gift;


 
/

-- ----------------------------
-- Procedure structure for P_SCORE_PRESENTSUCCESS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_PRESENTSUCCESS" (
                                                    p_id in number,
                                                    result_status out number --0:成功   1:失败
                                                   ) is
 /**
     作者:成玉芬
     日期:2011.10.27
     描述：赠送成功客户查询
  */
  v_user_id varchar2(200);
  v_split   VARCHAR2(2) := ','; --定义逗号分隔符

  cursor c_present_score is
    select s.user_id, s.user_name, s.scores, s.effected_at, s.remarks
      from scores s
     where instr(v_split || v_user_id || v_split,
                 v_split || s.user_id || v_split) > 0 and s.source_id = p_id;
begin
     if p_id is not null then
        select user_ids
          into v_user_id
          from score_gift_deductions
         where id = p_id;
     end if;
    if p_id is null then
       result_status := 1;
    end if;

    execute immediate 'delete from temp_score_success';
  if p_id is not null then
    for result_row in c_present_score loop
      insert into temp_score_success
        (id, user_id, user_name, scores, effected_at, remarks)
      values
        (score_success_seq.nextval,
         result_row.user_id,
         result_row.user_name,
         result_row.scores,
         result_row.effected_at,
         result_row.remarks);
    end loop;
  end if;
  result_status :=0;
  commit;
end p_score_presentSuccess;


 
/

-- ----------------------------
-- Procedure structure for P_SCORE_SELL_EXCHANGE_BALANCE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_SELL_EXCHANGE_BALANCE"
(
	p_user_id     IN NUMBER,
	p_cut_scores  IN NUMBER, /*转换积分数*/
	RESULT_STATUS OUT NUMBER /*
            /*0:成功;1:参数错误;2:积分不够;3:积分详细表数据错误;5:未知错误*/
) IS

	/*
  作者：张yi
  描述：委托积分转现金
  20130816, lizheng 委托提现状态错误
  **/
	v_buy_score_useable    NUMBER := 0;
	v_tmp_cut_score        NUMBER := 0;
	v_tmp_score_consume_id NUMBER := 0;
	v_tmp_before_balance   NUMBER := 0;
	v_tmp_after_balance    NUMBER := 0;
	v_tmp_amount           NUMBER := 0;
	v_tmp_user_account_id  NUMBER := 0;
	v_tmp_user_name        VARCHAR2(100);
	OUT_LOOP_CUT_ERROR EXCEPTION;
	/*定义游标,用来遍历账户可用委托积分**/
	CURSOR C_USER_SCORES_SELL IS
		SELECT S.ID, S.USEABLE_SCORES
			FROM SCORES S
		 WHERE S.USER_ID = p_user_id
			 AND S.SCORE_STATUS = '1'
			 AND S.SCORE_TYPE = '1'
			 AND S.USEABLE_SCORES > 0
		 ORDER BY S.EXPIRED_AT, S.ID;
BEGIN
	/*判断是否有该用户**/
	IF p_user_id IS NULL OR p_cut_scores IS NULL THEN
		RESULT_STATUS := 1;
		RETURN;
	END IF;
	BEGIN
		SELECT U.NICKNAME
			INTO v_tmp_user_name
			FROM USERS U
		 WHERE U.ID = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 1;
			RETURN;
	END;
	BEGIN
		/*判断积分是否够用*/
		SELECT U.SELL_SCORE_USEABLE
			INTO v_buy_score_useable
			FROM USERS U
		 WHERE U.ID = p_user_id
			 AND U.STATUS NOT IN (2, 4);
		IF v_buy_score_useable < p_cut_scores THEN
			RESULT_STATUS := 2;
			RETURN;
		END IF;
		v_tmp_cut_score := p_cut_scores;
		SELECT SCORE_CONSUMES_SEQ.NEXTVAL
			INTO v_tmp_score_consume_id
			FROM DUAL;
		/*插入积分消费表*/
		INSERT INTO SCORE_CONSUMES
			(id,
			 user_id,
			 user_name,
			 score_type,
			 consume_type,
			 consume_scores,
			 created_at,
			 remarks)
		VALUES
			(v_tmp_score_consume_id,
			 p_user_id,
			 v_tmp_user_name,
			 '1',
			 '5', --20130816 4 -> 5
			 p_cut_scores,
			 SYSDATE,
			 'payec proc,sell score to account');
		/*积分流水表*/
		INSERT INTO SCORE_INCOME_EXPENSES
			(id,
			 user_id,
			 user_name,
			 source_id,
			 source_type,
			 scores,
			 score_type,
			 direction,
			 operation_type,
			 created_at,
			 remarks)
		VALUES
			(SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
			 p_user_id,
			 v_tmp_user_name,
			 v_tmp_score_consume_id,
			 'SCORE_CONSUMES',
			 v_tmp_cut_score,
			 '1',
			 '1',
			 '8',
			 SYSDATE,
			 'commissioned redeem balance');
		FOR RESULT_ROW IN C_USER_SCORES_SELL LOOP
			IF RESULT_ROW.USEABLE_SCORES > v_tmp_cut_score AND
				 v_tmp_cut_score > 0 THEN
				BEGIN
					UPDATE SCORES S
						 SET S.USEABLE_SCORES = S.USEABLE_SCORES - v_tmp_cut_score,
								 S.UPDATED_AT     = SYSDATE
					 WHERE S.ID = RESULT_ROW.ID;
					/*新增积分消费明细记录*/
					INSERT INTO SCORE_CONSUME_DETAILS
						(id, score_id, score_consume_id, scores, created_at, remarks)
					VALUES
						(SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
						 RESULT_ROW.ID,
						 v_tmp_score_consume_id,
						 v_tmp_cut_score,
						 SYSDATE,
						 'payec proc,sell score to account');
					v_tmp_cut_score := 0;
				END;
			ELSIF v_tmp_cut_score > 0 THEN
				BEGIN
					/*修改委托积分数*/
					UPDATE SCORES S
						 SET S.USEABLE_SCORES = 0,
								 S.SCORE_STATUS   = '10', --20130816 3 -> 10
								 S.UPDATED_AT     = SYSDATE
					 WHERE S.ID = RESULT_ROW.ID;
					/*新增积分消费明细记录*/
					INSERT INTO SCORE_CONSUME_DETAILS
						(id, score_id, score_consume_id, scores, created_at, remarks)
					VALUES
						(SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
						 RESULT_ROW.ID,
						 v_tmp_score_consume_id,
						 RESULT_ROW.USEABLE_SCORES,
						 SYSDATE,
						 'payec proc,sell score to account');

					v_tmp_cut_score := v_tmp_cut_score - RESULT_ROW.USEABLE_SCORES;
				END;
			END IF;
			IF v_tmp_cut_score = 0 THEN
				/*抛出异常来退出循环**/
				RAISE OUT_LOOP_CUT_ERROR;
			END IF;
		END LOOP;
	EXCEPTION
		WHEN OUT_LOOP_CUT_ERROR THEN
			IF v_tmp_cut_score <> 0 THEN
				RESULT_STATUS := 3;
				ROLLBACK;
				RETURN;
			END IF;
		WHEN OTHERS THEN
			ROLLBACK;
			RESULT_STATUS := 5;
			RETURN;
	END;
	BEGIN
		v_tmp_amount := p_cut_scores / 20;

		SELECT U.ACCOUNT
			INTO v_tmp_before_balance
			FROM USERS U
		 WHERE U.ID = p_user_id;

		v_tmp_after_balance := v_tmp_before_balance + v_tmp_amount;
		SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO v_tmp_user_account_id FROM DUAL;
		INSERT INTO USER_ACCOUNTS
			(id,
			 user_id,
			 source_id,
			 source_type,
			 money,
			 direction,
			 finance_type,
			 finance_date,
			 remarks,
			 status,
			 created_at,
			 account_old,
			 account_new)
		VALUES
			(v_tmp_user_account_id,
			 p_user_id,
			 v_tmp_score_consume_id,
			 'SCORE_CONSUMES',
			 v_tmp_amount,
			 '0',
			 '20',
			 SYSDATE,
			 'commissioned redeem balance',
			 '1',
			 SYSDATE,
			 v_tmp_before_balance,
			 v_tmp_after_balance);
		/*
    INSERT INTO USER_HISTORY_ACCOUNTS
      (id,
       user_account_id,
       user_id,
       money,
       direction,
       created_by,
       remark,
       created_at)
    VALUES
      (user_history_accounts_seq.nextval,
       v_tmp_user_account_id,
       p_user_id,
       v_tmp_amount,
       '0',
       'ADMIN',
       'commissioned redeem balance',
       SYSDATE);
    */
		UPDATE USERS U
			 SET U.TOTAL_ACCOUNT = U.TOTAL_ACCOUNT + v_tmp_amount,
					 U.ACCOUNT       = U.ACCOUNT + v_tmp_amount,
					 --U.SELL_SCORE_AMOUNT  = U.SELL_SCORE_AMOUNT - p_cut_scores,
					 U.SELL_SCORE_USEABLE = U.SELL_SCORE_USEABLE - p_cut_scores
		 WHERE U.ID = p_user_id;

		RESULT_STATUS := 0;
		RETURN;
	EXCEPTION
		WHEN OTHERS THEN
			RESULT_STATUS := 5;
			ROLLBACK;
	END;
END P_SCORE_SELL_EXCHANGE_BALANCE;


 
/

-- ----------------------------
-- Procedure structure for P_SCORE_SELL_EXCHANGE_BUYER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_SELL_EXCHANGE_BUYER"
(
	p_user_id     IN NUMBER,
	p_scores      IN NUMBER,
	result_status OUT NUMBER
	/*0:成功;1:参数错误;2:积分不够;3:积分详细表数据错误;5:未知错误*/
) IS
	/*
  作者：张yi
  描述：委托积分转竞买积分
  **/
	v_tmp_user_name           VARCHAR2(100);
	v_tmp_sell_useable_scores NUMBER := 0;
	v_tmp_sell_cut_scores     NUMBER := 0;
	v_tmp_buyer_add_scores    NUMBER := 0;
  v_tmp_score_consume_id    NUMBER := 0;
  v_tmp_buyer_scores        NUMBER := 0;
  v_tmp_score_id            NUMBER := 0;
  --edit by zhangyi@20120508
  v_tmp_source_id VARCHAR2(200);

  OUT_LOOP_CUT_ERROR EXCEPTION;
  /*定义游标,用来遍历账户可用委托积分**/
  CURSOR C_USER_SCORE_SELL IS
    SELECT S.ID, S.USEABLE_SCORES
      FROM SCORES S
     WHERE S.USER_ID = p_user_id
       AND S.SCORE_TYPE = '1'
       AND S.SCORE_STATUS = '1'
       AND S.USEABLE_SCORES > 0
     ORDER BY S.EXPIRED_AT, S.ID;
BEGIN
  IF p_user_id IS NULL OR p_scores IS NULL THEN
    result_status := 1;
    RETURN;
  END IF;
  v_tmp_sell_cut_scores  := p_scores;
  v_tmp_buyer_add_scores := p_scores;
  BEGIN
    SELECT U.NICKNAME
      INTO v_tmp_user_name
      FROM USERS U
     WHERE U.ID = p_user_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      result_status := 1;
      RETURN;
  END;
  BEGIN
    --该账户下实际可用委托积分数
    SELECT U.SELL_SCORE_USEABLE
      INTO v_tmp_sell_useable_scores
      FROM USERS U
     WHERE U.ID = p_user_id;
    --AND U.ISLOCK = '0'
    --AND U.STATUS NOT IN (2, 4);
    IF v_tmp_sell_useable_scores < p_scores THEN
      result_status := 2;
      RETURN;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      result_status := 2;
      RETURN;
  END;
  BEGIN
    --查询该账户下的可用竞买积分是否为负数,并计算转换后的竞买积分数
    SELECT U.BUY_SCORE_USEABLE
      INTO v_tmp_buyer_scores
      FROM USERS U
     WHERE U.ID = p_user_id
       AND U.ISLOCK = '0'
       AND U.STATUS NOT IN (2, 4);
    IF v_tmp_buyer_scores < 0 THEN
      v_tmp_buyer_add_scores := v_tmp_buyer_add_scores + v_tmp_buyer_scores;
    END IF;
  END;
  BEGIN
    SELECT SCORE_CONSUMES_SEQ.NEXTVAL
      INTO v_tmp_score_consume_id
      FROM DUAL;
    /*新增积分消费总记录**/
    INSERT INTO SCORE_CONSUMES
      (id,
       user_id,
       user_name,
       score_type,
       consume_type,
       consume_scores,
       created_at,
       remarks)
    VALUES
      (v_tmp_score_consume_id,
       p_user_id,
       v_tmp_user_name,
       '1',
       '3',
       p_scores,
       SYSDATE,
       'Commissioned by the integral transfer bids integral');
    /*新增竞买积分记录**/
    --edit by zhangyi @20120513
    SELECT SCORES_SEQ.NEXTVAL INTO v_tmp_score_id FROM DUAL;
    INSERT INTO SCORES
      (id,
       user_id,
       user_name,
       score_type,
       score_status,
       score_source,
       scores,
       useable_scores,
       source_type,
       created_at,
       effected_at,
       expired_at,
       SOURCE_ID,
       remarks)
    VALUES
      (v_tmp_score_id,
       p_user_id,
       v_tmp_user_name,
       '0',
       '1',
       '2',
       v_tmp_buyer_add_scores,
       v_tmp_buyer_add_scores,
       'SCORE_CONSUMES',
       SYSDATE,
       SYSDATE,
       ADD_MONTHS(SYSDATE, 12),
       v_tmp_score_consume_id,
       'Principal points to');
    /*新增积分流水消费记录**/
    INSERT INTO SCORE_INCOME_EXPENSES
      (id,
       user_id,
       user_name,
       source_id,
       source_type,
       scores,
       score_type,
       direction,
       operation_type,
       created_at,
       remarks)
    VALUES
      (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
       p_user_id,
       v_tmp_user_name,
       v_tmp_score_consume_id,
       'ScoreConsumes',
       p_scores,
       '1',
       '1',
       '7',
       SYSDATE,
       'Commissioned by the integral transfer bids integral');
    SELECT SCORES_SEQ.NEXTVAL INTO v_tmp_score_id FROM DUAL;
    /*竞买积分转入流水记录**/
    INSERT INTO SCORE_INCOME_EXPENSES
      (id,
       user_id,
       user_name,
       source_id,
       source_type,
       scores,
       score_type,
       direction,
       operation_type,
       created_at,
       remarks)
    VALUES
      (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
       p_user_id,
       v_tmp_user_name,
       v_tmp_score_id,
       'Scores',
       v_tmp_buyer_add_scores,
       '0',
       '0',
       '3',
       SYSDATE,
       'Principal points to');
    FOR RESULT_ROW IN C_USER_SCORE_SELL LOOP
      IF RESULT_ROW.USEABLE_SCORES > v_tmp_sell_cut_scores AND
         v_tmp_sell_cut_scores > 0 THEN
        BEGIN
          --修改委托积分数
          UPDATE SCORES S
             SET S.USEABLE_SCORES = S.USEABLE_SCORES - v_tmp_sell_cut_scores,
                 S.UPDATED_AT     = SYSDATE
           WHERE S.ID = RESULT_ROW.ID;
          --新增积分消费明细记录
          INSERT INTO SCORE_CONSUME_DETAILS
            (id, score_id, score_consume_id, scores, created_at, remarks)
          VALUES
            (SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
             RESULT_ROW.ID,
             v_tmp_score_consume_id,
             v_tmp_sell_cut_scores,
             SYSDATE,
             'Commissioned by the integral transfer bids integral');
          --修改转入的竞买积分关联对象ID
          --edit by zhangyi @20120508
          v_tmp_sell_cut_scores := 0;
        END;
      ELSIF v_tmp_sell_cut_scores > 0 THEN
        BEGIN
          UPDATE SCORES S
             SET S.USEABLE_SCORES = 0,
                 S.UPDATED_AT     = SYSDATE,
                 S.SCORE_STATUS   = 3
           WHERE S.ID = RESULT_ROW.ID;
          INSERT INTO SCORE_CONSUME_DETAILS
            (id, score_id, score_consume_id, scores, created_at, remarks)
          VALUES
            (SCORE_CONSUME_DETAILS_SEQ.NEXTVAL,
             RESULT_ROW.ID,
             v_tmp_score_consume_id,
             RESULT_ROW.USEABLE_SCORES,
             SYSDATE,
             'Commissioned by the integral transfer bids integral');
          --edit by zhangyi @20120619
          v_tmp_sell_cut_scores := v_tmp_sell_cut_scores -
                                   RESULT_ROW.USEABLE_SCORES;
        END;
      END IF;
      IF v_tmp_sell_cut_scores = 0 THEN
        /*抛出异常来退出循环**/
        RAISE OUT_LOOP_CUT_ERROR;
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OUT_LOOP_CUT_ERROR THEN
      UPDATE USERS U
         SET U.BUY_SCORE_USEABLE  = U.BUY_SCORE_USEABLE + p_scores,
             U.SELL_SCORE_USEABLE = U.SELL_SCORE_USEABLE - p_scores
       WHERE U.ID = p_user_id;
      result_status := 0;
      COMMIT;
      RETURN;
    WHEN OTHERS THEN
      result_status := 5;
      ROLLBACK;
      RETURN;
  END;
END P_SCORE_SELL_EXCHANGE_BUYER;
/

-- ----------------------------
-- Procedure structure for P_SCORE_SEND_LOTTERY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SCORE_SEND_LOTTERY"(
result_status out number    --返回结果
) is

CURSOR score_consumer_cur IS

--查询参与抽奖用户的所有消耗积分信息
select sc.user_id, sc.user_name, sum(sc.consume_scores) consume_scores
  from score_consumes sc
 where sc.consume_type = 7
 group by sc.user_id, consume_scores, sc.user_name;

BEGIN
  for result_row in score_consumer_cur loop
    BEGIN
        declare v_result_status number;
        BEGIN
                --赠送抽奖消耗的积分数
                p_score_gift(result_row.user_id,result_row.consume_scores,1,SYSDATE,0,'暂无','28周年庆抽奖活动积分返赠
',0,v_result_status);
        END;
    END;
    END LOOP;
result_status := 1;
END P_SCORE_SEND_LOTTERY;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_AUCTION_FEE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SETTLEMENT_AUCTION_FEE"(P_AUCTION_ID  IN NUMBER, /*拍品编号*/
                                                     RESULT_STATUS OUT NUMBER --返回操作结果信息
                                                     ) IS
  /**
    0: 成功
    1: 异常
    2：拍品编号不存在
  */
  /**
      作者:刘静
     日期:2012.03.10
     描述：拍品进入待结算状态时，更改拍品委托费用数据

     作者:李征
     日期:2014.5.16
     描述：书画分类默认服务费10%
  */
  V_IS_ONLOAD_FEE      AUCTION_FEE_SETTINGS.IS_ONLOAD_FEE%TYPE; /*是否收取制作费*/
  V_IS_CHARGE_FEE      AUCTION_FEE_SETTINGS.CHARGE_FEE_PERCENT%TYPE; /*是否收取服务费*/
  V_INSURE_FEE_TYPE    AUCTION_FEES.INSURE_FEE_TYPE%TYPE; /*保险费类型*/
  V_INSURE_FEE_PERCENT AUCTION_FEES.INSURE_FEE_PERCENT%TYPE; /*保险费百分比*/
  V_INSURE_FEE_PROPS   AUCTION_FEES.INSURE_FEE_PROPS%TYPE; /*保险费属性*/
  V_CUSTODY_DAY_FEE    AUCTION_FEES.CUSTODY_DAY_FEE%TYPE; /*每天收取的保管费*/
  V_FREE_CUSTODY_DAYS  AUCTION_FEES.FREE_CUSTODY_DAYS%TYPE; /*免收取保管费天数*/
  V_CHARGE_FEE_TYPE    AUCTION_FEES.CHARGE_FEE_TYPE%TYPE; /*服务费类型*/
  V_CHARGE_PRICE       AUCTION_FEES.CHARGE_PRICE%TYPE; /*服务费固定金额*/
  V_CHARGE_FEE_PERCENT AUCTION_FEES.CHARGE_FEE_PERCENT%TYPE; /*服务费百分比*/
  V_ONLOAD_FEE         AUCTION_FEES.ONLOAD_FEE%TYPE; /*拍品制作费*/
  V_INITIAL_PRICE      AUCTIONS.INITIAL_PRICE%TYPE; /*拍品起拍价*/
  V_END_PRICE          AUCTIONS.END_PRICE%TYPE; /*结标价*/

  V_USER_LANG    VARCHAR2(255); /*委托语言*/
  V_RESALE_STATE NUMBER(1); /*重拍状态*/
  V_AUCTION_TYPE VARCHAR2(255); /*拍品类型*/
  V_STATE        AUCTION_FEE_SETTINGS.AUCTION_STATUS%TYPE; /*拍品费用设置表状态*/

  V_AUCTION_STATUS      VARCHAR2(255); /*拍品状态*/
  V_ORDER_STATUS        VARCHAR2(255); /*交易状态*/
  V_AUCTION_CATEGORY_ID AUCTIONS.AUCTION_CATEGORY_ID%TYPE; /*拍品分类*/
  V_SIGN_DATE           TIMESTAMP;
  V_ONLOAD_FEE_TYPE     VARCHAR2(255) := '1'; /*制作费类型：1：指定收费  0：默认收费*/
  V_IS_COLLATE_DRAW     NUMBER;
  /*文献分类，600及其子类*/
  V_WENXIAN_CATEGORY_ID NUMBER;
  /*中国现代金银币分类，183及其子类*/
  V_JINYINBI_CATEGORY_ID NUMBER;

  /*是否书画类, 服务费默认10%*/
  V_IS_SHUHUA   NUMBER;
  V_IS_YISHUPIN NUMBER;

  V_IS_EXHIBITION     NUMBER;  /*展售合同: 0:否 1:是*/

  TYPE CATEGORY_ARR_TYPE IS VARRAY(100) OF NUMBER(38);
  V_IS_JINYINBI  BOOLEAN := FALSE;
  V_IS_WENXIAN   BOOLEAN := FALSE;
  V_JINYINBI_IDS CATEGORY_ARR_TYPE := CATEGORY_ARR_TYPE(183,
                                                        1831,
                                                        18311,
                                                        18312,
                                                        18313,
                                                        18314,
                                                        18315,
                                                        18316,
                                                        1832,
                                                        18321,
                                                        18322,
                                                        18323,
                                                        18324,
                                                        18325,
                                                        18326,
                                                        1833,
                                                        18331,
                                                        18332,
                                                        18333,
                                                        1834);
  /*文献分类集合*/
  V_WENXIAN_IDS CATEGORY_ARR_TYPE := CATEGORY_ARR_TYPE(600,
                                                       610,
                                                       611,
                                                       612,
                                                       613,
                                                       614,
                                                       615,
                                                       616,
                                                       617,
                                                       618,
                                                       619,
                                                       620,
                                                       621,
                                                       622,
                                                       623,
                                                       624,
                                                       630,
                                                       641,
                                                       642,
                                                       651,
                                                       652,
                                                       653,
                                                       661,
                                                       662,
                                                       663,
                                                       664,
                                                       665,
                                                       666,
                                                       667,
                                                       668,
                                                       670,
                                                       671,
                                                       672,
                                                       673,
                                                       6711,
                                                       6712,
                                                       6713,
                                                       6731,
                                                       6732,
                                                       6733,
                                                       6734);

  /*category_arr_type(600,
  610,
  611,
  612,
  613,
  614,
  615,
  641,
  642,
  616,
  617,
  651,
  652,
  653,
  618,
  661,
  662,
  663,
  664,
  665,
  666,
  667,
  668,
  619,
  620,
  621,
  622,
  623,
  624,
  630);*/

BEGIN
  IF P_AUCTION_ID IS NULL THEN
    RESULT_STATUS := 1;
    RAISE_APPLICATION_ERROR(-20000, 'p_auction_id cannot be null');
  ELSE

    BEGIN

      /*根据拍品ID查找拍品信息*/
      SELECT CON.USER_LANG,
             AU.RESALE_STATUS,
             AU.AUCTION_TYPE,
             AU.STATUS,
             UO.STATUS,
             AU.AUCTION_CATEGORY_ID,
             AF.CHARGE_FEE_TYPE,
             AF.ONLOAD_FEE,
             AU.INITIAL_PRICE,
             AU.END_PRICE,
             AF.CHARGE_FEE_PERCENT,
             AF.CHARGE_PRICE,
             CON.SIGN_DATE,
             CON.IS_COLLATE_DRAW
        INTO V_USER_LANG,
             V_RESALE_STATE,
             V_AUCTION_TYPE,
             V_AUCTION_STATUS,
             V_ORDER_STATUS,
             V_AUCTION_CATEGORY_ID,
             V_CHARGE_FEE_TYPE,
             V_ONLOAD_FEE,
             V_INITIAL_PRICE,
             V_END_PRICE,
             V_CHARGE_FEE_PERCENT,
             V_CHARGE_PRICE,
             V_SIGN_DATE,
             V_IS_COLLATE_DRAW
        FROM AUCTIONS AU
        JOIN AUCTION_FEES AF ON AF.AUCTION_ID = AU.ID
        LEFT JOIN CONTRACTS CON ON AU.CONTRACT_ID = CON.ID
        LEFT JOIN USER_ORDERS UO ON UO.AUCTION_ID = AU.ID
       WHERE AU.ID = P_AUCTION_ID;

      /*展售合同的一口价调整为和目前竞买一样*/
      IF V_AUCTION_TYPE = 0 THEN
         SELECT NVL(C.IS_EXHIBITION,0)
         INTO V_IS_EXHIBITION
         FROM CONTRACTS C
         JOIN AUCTIONS AU ON C.ID = AU.CONTRACT_ID
         WHERE AU.ID = P_AUCTION_ID;
         IF V_IS_EXHIBITION = 1 THEN
           V_AUCTION_TYPE := 1;
         END IF;
      END IF;

      FOR I IN 1 .. V_WENXIAN_IDS.COUNT LOOP
        --dbms_output.put_line(v_auction_categorys(i));
        IF V_WENXIAN_IDS(I) = V_AUCTION_CATEGORY_ID THEN
          V_IS_WENXIAN := TRUE;
        END IF;
      END LOOP;

      FOR I IN 1 .. V_JINYINBI_IDS.COUNT LOOP
        --dbms_output.put_line(v_auction_categorys(i));
        IF V_JINYINBI_IDS(I) = V_AUCTION_CATEGORY_ID THEN
          V_IS_JINYINBI := TRUE;
        END IF;
      END LOOP;

      /*是否书画类*/
      SELECT COUNT(*)
        INTO V_IS_SHUHUA
        FROM CLIENT_CATEGORY_PATH
       WHERE CATEGORY_ID = V_AUCTION_CATEGORY_ID
         AND ROOT_CATEGORY_ID = 400;

      SELECT COUNT(*)
        INTO V_IS_YISHUPIN
        FROM CLIENT_CATEGORY_PATH
       WHERE CATEGORY_ID = V_AUCTION_CATEGORY_ID
         AND ROOT_CATEGORY_ID = 520;

      /*查询当前分类是否属于中国当代金银币*/
      /*      select ac.id
        into v_jinyinbi_category_id
        from auction_categories ac
       where ac.id = v_auction_category_id
       start with id = 183
      connect by prior id = parent_id;*/

      /*查询当前分类是否属于文献*/
      /*       select ac.id
      into v_wenxian_category_id
       from auction_categories ac
       where ac.id = v_auction_category_id
       start with id  = 600
       connect by prior id = parent_id;*/

      /*拍品状态转换成委托费用设置表中的状态*/
      IF V_AUCTION_STATUS = 7 THEN
        /*7:已退货*/
        V_STATE := 'AUCTION_RETURNED';
      ELSIF V_AUCTION_STATUS = 6 THEN
        /*6:已流拍*/
        V_STATE := 'AUCTION_NOT_SOLD';
      ELSIF V_AUCTION_STATUS = 8 THEN
        /*8:已退拍*/
        V_STATE := 'AUCTION_OFF_LIST';
      ELSIF V_AUCTION_STATUS = 11 THEN
        /*11:无理由撤拍*/
        V_STATE := 'AUCTION_CANCELED';
      ELSIF V_AUCTION_STATUS = 12 THEN
        /*12:有理由撤拍*/
        V_STATE := 'AUCTION_NO_REASON_CANCELED';
      ELSIF V_AUCTION_STATUS = 3 AND V_ORDER_STATUS = 1 THEN
        /*3:已拍出 1：已支付*/
        V_STATE := 'AUCTION_PAID';
      ELSIF V_AUCTION_STATUS = 3 AND V_ORDER_STATUS = 2 THEN
        /*3:已拍出 2：不支付 （兼容老数据）*/
        V_STATE := 'AUCTION_NOT_PAID';
      ELSIF V_AUCTION_STATUS = 3 AND V_ORDER_STATUS = 4 THEN
        /*3:已拍出 4：有理由不支付*/
        V_STATE := 'AUCTION_NOT_PAID';
      ELSIF V_AUCTION_STATUS = 3 AND V_ORDER_STATUS = 5 THEN
        /*3:已拍出 5：无理由不支付*/
        V_STATE := 'AUCTION_NOT_PAID';
      END IF;

      /*判断是否是不支付重拍*/
      /*根据拍品重拍状态转换成委托费用设置表中的重拍状态*/
      IF V_RESALE_STATE = '4' THEN
        V_RESALE_STATE := 1;
      ELSE
        V_RESALE_STATE := 0;
      END IF;

      /*根据条件取出拍品费用设置表中的值*/
      SELECT AFS.IS_ONLOAD_FEE,
             AFS.CHARGE_FEE_PERCENT,
             AFS.INSURE_FEE_TYPE,
             AFS.INSURE_FEE_PERCENT,
             AFS.INSURE_FEE_PROPS,
             AFS.DAY_CUSTODY_FEE,
             AFS.FREE_CUSTODY_DAYS
        INTO V_IS_ONLOAD_FEE,
             V_IS_CHARGE_FEE,
             V_INSURE_FEE_TYPE,
             V_INSURE_FEE_PERCENT,
             V_INSURE_FEE_PROPS,
             V_CUSTODY_DAY_FEE,
             V_FREE_CUSTODY_DAYS
        FROM AUCTION_FEE_SETTINGS AFS
       WHERE AFS.LANG = V_USER_LANG /*委托语言*/
         AND AFS.AUCTION_TYPE = V_AUCTION_TYPE /*拍品类型*/
         AND AFS.IS_RESALE = V_RESALE_STATE /*重拍状态*/
         AND AFS.AUCTION_STATUS = V_STATE; /*拍品状态*/

      /*根据拍品委托费用设置表中值，判断拍品是否收取服务费。
         0：表示不论拍品是按照那种方式收费，都不收取任何费用
         其他值，表示拍品按照百分比收取的时候，以此为标准
      */

      /*如果委托费用设置中，不收服务费，则百分比、固定金额全部为零*/
      IF V_IS_CHARGE_FEE = 0 THEN
        V_CHARGE_FEE_PERCENT := 0; /*百分比*/
        V_CHARGE_PRICE       := 0; /*固定金额*/
      ELSE
        /*成交支付*/
        IF V_STATE = 'AUCTION_PAID' THEN
          IF V_CHARGE_FEE_TYPE = 0 THEN
            /*默认百分比*/
            /* 中文版合同的拍品、
              签订日期大于等于2013.01.15的合同的拍品、
              收费方式为“按照默认收费”的合同的拍品
              分类为文献（600）及其各级子分类的拍品
              竞拍、正常委托、成交支付的拍品
            */
            IF V_SIGN_DATE >= TO_DATE('2013-01-15 00:00:00', 'yyyy-mm-dd hh24:mi:ss') AND V_USER_LANG = 'CN' AND
               V_RESALE_STATE = 0 AND V_AUCTION_TYPE = 1 AND V_IS_WENXIAN = TRUE THEN
              V_CHARGE_FEE_PERCENT := 5.00;
            ELSIF V_IS_SHUHUA > 0 THEN
              V_CHARGE_FEE_PERCENT := 10.00;
            ELSIF V_IS_YISHUPIN > 0 THEN
              V_CHARGE_FEE_PERCENT := 15.00;
            ELSE
              V_CHARGE_FEE_PERCENT := V_IS_CHARGE_FEE;
            END IF;

            V_CHARGE_PRICE := 0;
          ELSIF V_CHARGE_FEE_TYPE = 1 THEN
            /*统一指定百分比*/
            V_CHARGE_PRICE := 0;
          ELSE
            /*固定金额*/
            V_CHARGE_FEE_PERCENT := 0;
          END IF;
          /*其他*/
        ELSE
          V_CHARGE_FEE_TYPE    := 0; /*不是成交支付的均按照默认百分比*/
          V_CHARGE_FEE_PERCENT := V_IS_CHARGE_FEE;
          V_CHARGE_PRICE       := 0;
        END IF;
      END IF;

      /* 2013年3月1日前，183分类的拍品收费需做特殊处理：(2013年3月1日起恢复金银币的委托佣金)
      1）不收取保管费
      2）中文合同
         0:按默认收费收取服务费的合同，不收取服务费.
         1:按指定百分比收取服务费,    收取服务费.
         2:按固定金额收取服务费的合同，收取服务费.
      */
      IF V_SIGN_DATE < TO_DATE('2013-03-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') THEN

        --update 2013-07-23
        --if v_auction_category_id = 183 then
        IF V_IS_JINYINBI = TRUE THEN
          V_CUSTODY_DAY_FEE := 0; /*不收保管费*/
          IF V_CHARGE_FEE_TYPE = 0 AND V_USER_LANG = 'CN' THEN
            /*0:按默认收费收取服务费的合同*/
            V_CHARGE_FEE_PERCENT := 0; /*百分比*/
            V_CHARGE_PRICE       := 0; /*固定金额*/
          END IF;
        END IF;

      END IF;

      /*
        在合同整理的时候，如果拍品制作费是按照默认收费来收取的，则不输入制作费
        一旦输入制作费，就表示该拍品是按照指定收费收取的

        制作费默认收费
        1、非现代金银币类
          成交：按结标价收取。 结标价>=100元，每件10元；结标价<100元，每件15元。
          未成交(流拍、撤拍)：每件15元。
        2、现代金银币类：每件15元
      */

      IF V_ONLOAD_FEE IS NULL THEN
        V_ONLOAD_FEE_TYPE := '0'; --默认收费
        IF V_SIGN_DATE > TO_DATE('2012-04-09 00:00:00', 'yyyy-mm-dd hh24:mi:ss') THEN
          IF V_IS_COLLATE_DRAW = 1 THEN
            /*合作整理*/
            V_ONLOAD_FEE := 5.00;
          ELSE
            --update 2013-07-23
            --if v_auction_category_id = 183 then
            IF V_IS_JINYINBI = TRUE THEN
              --现代金银币类：每件15元
              V_ONLOAD_FEE := 15.00;
            ELSIF V_IS_SHUHUA > 0 THEN
              --2014.06.03
              V_ONLOAD_FEE := 20.00;
            ELSIF V_IS_YISHUPIN > 0 THEN
              V_ONLOAD_FEE := 20.00;
            ELSE
              --非现代金银币类
              IF V_STATE = 'AUCTION_CANCELED' OR V_STATE = 'AUCTION_NO_REASON_CANCELED' THEN
                /*撤拍的拍品收取￥10.00*/
                V_ONLOAD_FEE := 15.00;
              ELSIF V_STATE = 'AUCTION_NOT_SOLD' THEN
                /*流拍*/
                V_ONLOAD_FEE := 15.00;
              ELSIF V_STATE = 'AUCTION_PAID' THEN
                /*成交支付*/
                IF V_END_PRICE < 100 THEN
                  /*结标价小于￥100.00的收取￥15.00制作费*/
                  V_ONLOAD_FEE := 15.00;
                ELSE
                  V_ONLOAD_FEE := 10.00; /*结标价大于等于￥100.00的收取￥10.00*/
                END IF;
              END IF;
            END IF;
          END IF;
        ELSE
          /*2012-04-09 之前签订的合同*/
          IF V_IS_COLLATE_DRAW = 1 THEN
            /*合作整理*/
            V_ONLOAD_FEE := 5.00;
          ELSE
            --update 2013-07-23
            --if v_auction_category_id = 183 then
            IF V_IS_JINYINBI = TRUE THEN
              --现代金银币类：每件15元
              V_ONLOAD_FEE := 15.00;
            ELSE
              V_ONLOAD_FEE := 10.00;
            END IF;
          END IF;
        END IF;
      END IF;

      /*制作费 根据委托费用设置表中值，判断是否收取制作费*/
      IF V_IS_ONLOAD_FEE = 0 THEN
        V_ONLOAD_FEE := 0;
      END IF;

      UPDATE AUCTION_FEES AF
         SET AF.ONLOAD_FEE         = V_ONLOAD_FEE,
             AF.CHARGE_FEE_TYPE    = V_CHARGE_FEE_TYPE,
             AF.CHARGE_FEE_PERCENT = V_CHARGE_FEE_PERCENT,
             AF.CHARGE_PRICE       = V_CHARGE_PRICE,
             AF.CUSTODY_DAY_FEE    = V_CUSTODY_DAY_FEE,
             AF.FREE_CUSTODY_DAYS  = V_FREE_CUSTODY_DAYS,
             AF.INSURE_FEE_TYPE    = V_INSURE_FEE_TYPE,
             AF.INSURE_FEE_PERCENT = V_INSURE_FEE_PERCENT,
             AF.INSURE_FEE_PROPS   = V_INSURE_FEE_PROPS,
             AF.ONLOAD_FEE_TYPE    = V_ONLOAD_FEE_TYPE
       WHERE AF.AUCTION_ID = P_AUCTION_ID;

      RESULT_STATUS := 0;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS := 2;
        DBMS_OUTPUT.PUT_LINE('拍品ID为：' || P_AUCTION_ID || '不存在!');
        RETURN;
      WHEN OTHERS THEN
        ROLLBACK;
        RESULT_STATUS := 1;
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
        RETURN;
    END;
  END IF;

END P_SETTLEMENT_AUCTION_FEE;
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_AUCTIONS_COUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SETTLEMENT_AUCTIONS_COUNT" (p_contract_id IN number) is

  /***
       作者:wangyuxin
      日期:2012-1-10
      描述：合同待结算信息汇总到临时表  (后台调用)
      update by liu.jing
  **/
  v_auctions_state_nums         number; /*总拍品数量*/
  v_temp_contract_id            number; /*合同id*/
  v_temp_customer_id            number; /*用户编号*/
  v_temp_customer_name          varchar2(50); /*用户姓名*/
  v_temp_contract_user_level    varchar2(50); /*用户合同等级*/
  v_temp_contract_user_lang     varchar2(50); /*合同语言*/
  v_temp_charge_type            varchar2(50); /*合同服务费收费方式*/
  v_temp_contract_settl_remarks varchar2(4000); /*合同结算备注*/
  v_temp_id                     number; /*临时记录id*/
  v_temp_nums                   number; /*临时的拍品记录数*/
  v_temp_price                  number(16, 2); /*临时字符串*/
  v_art_wait_settlement         NUMBER;  /* 艺术品类退拍、撤拍或流拍的拍品数量（ 2014.08 艺术分类的合同中退拍、撤拍或流拍的拍品归类为待结算拍品）*/

  /*根据合同号查找拍品，拍品按照结算状态分组统计*/
  CURSOR p_settlement_state_cus is
    select count(1) as status_num_settlement, ats.settlement_status
      from auctions ats
     where ats.contract_id = p_contract_id
     group by ats.settlement_status;

  /*根据合同号查找拍品，拍品按状态分组统计*/
  CURSOR p_auctions_state_cus is
    select count(1) as status_num_auction, ats.status
      from auctions ats
     where ats.contract_id = p_contract_id
       and ats.settlement_status in (0, 2) /**0:不可结算  2：待结算*/
     group by ats.status;

  /*根据合同号查找交易单，交易单按状态分组统计，除去冻结交易单*/
  CURSOR p_trade_state_cus is
    select count(1) as status_num_order, tde.status
      from user_orders tde
      left join auctions au on tde.auction_id = au.id
     where tde.contract_id = p_contract_id
       and au.settlement_status in (0, 2) /**0:不可结算  2：待结算*/
       and tde.is_freeze = 0
     group by tde.status;

begin
  /*判断合同编号是否为有效*/
  if p_contract_id is not null then
    /*定义当前操作的id*/
    select temp_auctions_state_nums_seq.nextval into v_temp_id from dual;

  /*2014.08 艺术分类的合同中退拍、撤拍或流拍的拍品归类为待结算拍品 */
   SELECT count(1) into v_art_wait_settlement FROM auctions au LEFT JOIN auction_categories ac ON au.auction_category_id=ac.id 
          WHERE au.settlement_status = 0 AND ac.parent_id=520 AND au.status in (6,8,11,12) and au.contract_id=p_contract_id;
      
    /*首先清除临时表数据*/
    execute immediate 'delete from temp_auctions_state_nums';

    /*查询合同以及用户相关信息插入变量*/
    select ctt2.ID,
           ctt2.USER_ID,
           ctt2.user_name,
           decode(ctt2.user_level,
                  '10',
                  '注册',
                  '11',
                  '一星',
                  '12',
                  '二星',
                  '13',
                  '三星',
                  '14',
                  '四星',
                  '15',
                  '五星'),
           decode(ctt2.charge_type,
                  '0',
                  '默认百分比',
                  '1',
                  '统一百分比 '||to_char(ctt2.charge_rate,'FM9,990.00')||'%',
                  '2',
                  '统一委托佣金 ￥'||to_char(ctt2.charge_fee,'FM9,990.00')),
           ctt2.settlement_remarks,
           ctt2.user_lang
      into v_temp_contract_id,
           v_temp_customer_id,
           v_temp_customer_name,
           v_temp_contract_user_level,
           v_temp_charge_type,
           v_temp_contract_settl_remarks,
           v_temp_contract_user_lang
      from contracts ctt2
     where ctt2.id = p_contract_id;

    /*查询拍品总数插入变量*/
    select count(ats3.id)
      into v_auctions_state_nums
      from auctions ats3
     where ats3.contract_id = p_contract_id;

    /*先插入一条临时记录*/
    insert into temp_auctions_state_nums
      (id,
       CONTRACT_ID,
       CUSTOMER_ID,
       CUSTOMER_NAME,
       CONTRACT_USER_LEVEL,
       CONTRACT_CHARGE_TYPE,
       CONTRACT_SETTLEMENT_REMARKS,
       AUCTIONS_TOTAL,
       USER_LANG)
    values
      (v_temp_id,
       v_temp_contract_id,
       v_temp_customer_id,
       v_temp_customer_name,
       v_temp_contract_user_level,
       v_temp_charge_type,
       v_temp_contract_settl_remarks,
       v_auctions_state_nums,
       v_temp_contract_user_lang);

    /*打开拍品按结算状态分组统计游标，更改数量*/
    for result_rows_four in p_settlement_state_cus loop
      if result_rows_four.settlement_status = 1 then
        /*1:已结算**/
        update temp_auctions_state_nums
           set AUCTION_SETTLEMENT_STATUS_1 = result_rows_four.status_num_settlement
         where id = v_temp_id;
      elsif result_rows_four.settlement_status = 3 then
        /*3:结算中**/
        update temp_auctions_state_nums
           set AUCTION_SETTLEMENT_STATUS_3 = result_rows_four.status_num_settlement
         where id = v_temp_id;
      elsif result_rows_four.settlement_status = 0 then
        /*0:不可结算**/
        update temp_auctions_state_nums
           set AUCTION_SETTLEMENT_STATUS_0 = result_rows_four.status_num_settlement
         where id = v_temp_id;
      elsif result_rows_four.settlement_status = 2 then
        /*2:待结算**/
        update temp_auctions_state_nums
           set AUCTION_SETTLEMENT_STATUS_2 = result_rows_four.status_num_settlement
         where id = v_temp_id;
      end if;
    end loop;

    /*打开拍品按状态分组统计游标，更改数量*/
    for result_rows_one in p_auctions_state_cus loop
      if result_rows_one.status = 0 then
        /**0：未上挂*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_0 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 1 then
        /**1:预展中*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_1 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 2 then
        /**2:竞拍中*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_2 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 3 then
        /**3:已拍出*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_3 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 4 then
        /**4:已撤拍   不用*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_4 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 5 then
        /**5:已冻结   不用*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_5 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 6 then
        /**6:已流拍*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_6 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 7 then
        /**7:已退货*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_7 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 8 then
        /**8:已退拍  */
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_8 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 9 then
        /**9:已删除   不用  */
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_9 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 10 then
        /**10:未预展*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_10 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 11 then
        /**11:有理由撤拍*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_11 = result_rows_one.status_num_auction
         where id = v_temp_id;
      elsif result_rows_one.status = 12 then
        /**11:无理由撤拍*/
        update temp_auctions_state_nums
           set AUCTIONS_STATUS_12 = result_rows_one.status_num_auction
         where id = v_temp_id;
      end if;
    end loop;

    /*打开交易单按状态分组统计，更改数量*/
    for result_rows_two in p_trade_state_cus loop
      if result_rows_two.status = 0 then
        /**0:未支付*/
        update temp_auctions_state_nums
           set TRADE_STATUS_0 = result_rows_two.status_num_order
         where id = v_temp_id;
      elsif result_rows_two.status = 1 then
        /**1:已支付*/
        update temp_auctions_state_nums
           set TRADE_STATUS_1 = result_rows_two.status_num_order
         where id = v_temp_id;
      elsif result_rows_two.status = 2 then
        /**2:不支付  不用*/
        update temp_auctions_state_nums
           set TRADE_STATUS_2 = result_rows_two.status_num_order
         where id = v_temp_id;
      elsif result_rows_two.status = 3 then
        /**3:已冻结   不用*/
        update temp_auctions_state_nums
           set TRADE_STATUS_3 = result_rows_two.status_num_order
         where id = v_temp_id;
      elsif result_rows_two.status = 4 then
        /**4:有理由不支付 */
        update temp_auctions_state_nums
           set TRADE_STATUS_4 = result_rows_two.status_num_order
         where id = v_temp_id;
      elsif result_rows_two.status = 5 then
        /**5:无理由不支付 */
        update temp_auctions_state_nums
           set TRADE_STATUS_5 = result_rows_two.status_num_order
         where id = v_temp_id;
      end if;
    end loop;

    /*冻结交易单（不可结算）*/
    select count(1)
      into v_temp_nums
      from user_orders us
     left join auctions au on us.auction_id = au.id
     where us.contract_id = p_contract_id
       and au.settlement_status = 0 /*不可结算的冻结*/
       and us.is_freeze = 1;

    /**修改交易单冻结数量*/
    update temp_auctions_state_nums
       set TRADE_STATUS_3 = v_temp_nums
     where id = v_temp_id;

    /* 查询退货单中属于退货申请状态的拍品数量*/
    select count(1)
      into v_temp_nums
      from user_refunds urf
      left join user_orders uo on uo.user_refund_id = urf.id
      left join auctions ats on uo.auction_id = ats.id
     where ats.contract_id = p_contract_id
       and ats.settlement_status = 0  /*不可结算*/
       and urf.status not in (8, 9); /*8:失败   9:成功**/

    /*修改申请退货数量*/
    update temp_auctions_state_nums
       set REFUND_STATUS_0 = v_temp_nums
     where id = v_temp_id;

    /* 查询退货失败拍品数量*/
    select count(1)
      into v_temp_nums
      from user_refunds urf
      left join user_orders uo on uo.user_refund_id = urf.id
      left join auctions ats on uo.auction_id = ats.id
     where uo.contract_id = p_contract_id
       and ats.settlement_status = 2 /*待结算*/
       and urf.status = 8; /*8:失败**/

    /*修改退货失败数量*/
    update temp_auctions_state_nums
       set REFUND_STATUS_1 = v_temp_nums
     where id = v_temp_id;

    /*交易单已支付*/
    select count(1),
           decode(sum(uo.end_price), null, 0.00, sum(uo.end_price))
      into v_temp_nums, v_temp_price
      from user_orders uo
      left join auctions au on uo.auction_id = au.id
     where uo.contract_id = p_contract_id
       and au.settlement_status = 2 /**2：待结算*/
       and uo.status = 1 /*已支付*/
       and uo.is_freeze = 0 /*未冻结*/
       and uo.user_refund_id is null;

    /*修改已支付交易单信息*/
    update temp_auctions_state_nums
       set TRADE_STATUS_1 = v_temp_nums, TRADE_STATUS_PRICE = v_temp_price
     where id = v_temp_id;
   
   /*更新不可结算拍品数量**/
  update temp_auctions_state_nums
     set AUCTION_SETTLEMENT_STATUS_0 = (select AUCTION_SETTLEMENT_STATUS_0 - v_art_wait_settlement from temp_auctions_state_nums where id = v_temp_id)
   where id = v_temp_id;
   
   /*更新待结算拍品数量**/
  update temp_auctions_state_nums
     set AUCTION_SETTLEMENT_STATUS_2 = (select AUCTION_SETTLEMENT_STATUS_2 + v_art_wait_settlement from temp_auctions_state_nums where id = v_temp_id)
   where id = v_temp_id;

  end if;
end;
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_CREATE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SETTLEMENT_CREATE"(p_contract_id in number, /*合同id*/
                                                    p_admin_id    in number, /*操作人id*/
                                                    p_admin_name  in varchar, /*操作人名称*/
                                                    p_auction_ids in varchar2, /*操作拍品编号*/
                                                    p_output      out number /*输出状态*/) is
  /**
    0:生成的结算单
    1:异常
  */
  /**
    作者：王宇昕
   日期：2012-1-0
   描述：生成结算单   （后台调用）
   update by liu.jing
  */
  /*结算表*/
  v_settlement_id              number(38); /*结算单id*/
  v_user_id                    number(38); /*用户id*/
  v_user_name                  varchar2(255); /*用户姓名*/
  v_total_nums                 number(38); /*汇总的总拍品数*/
  v_total_end_price            number(16, 2); /*汇总的结标价*/
  v_total_settlement_price     number(16, 2); /*汇总的结算价*/
  v_total_charge_fee           number(16, 2); /*汇总的服务费*/
  v_total_insure_fee           number(16, 2); /*汇总的保险费*/
  v_total_onload_fee           number(16, 2); /*汇总的制作费*/
  v_total_custody_fee          number(16, 2); /*汇总的保管费*/
  v_total_agreement_charge_fee number(16, 2); /*汇总合作方协议服务费金额*/
  v_total_return_service_fee   number(16, 2); /*汇总委托方返佣金额*/
  v_is_return_service          varchar2(255); /*委托方是否返还服务费 0：不需要  1：未生效  2：已生效*/
  v_is_free_charge             number; /**是否免汇费   0：否 1：是*/

  /**合同表**/
  v_return_service_percent number(6, 2); /*委托方返佣百分比*/
  v_is_partner             number; /**是否是合作方合同   0：否 1：是*/
  v_agreement_charge_rate  number(16, 2); /**合作方协议服务费百分比*/

  /*结算明细表*/
  v_agreement_charge_fee number(16, 2); /*合作方返回金额*/
  v_return_service_fee   number(16, 2); /**委托方返点*/

  /**拍品费用**/
  v_auction_charge_type        number(10); /**拍品服务费类型*/
  v_auction_charge_fee_percent number(16, 2); /**拍品服务费百分比*/

  V_SCORE_TIMES      NUMBER := 1; --积分倍数
  v_sell_score_param number := 40; --委托积分参数
  V_SCORE            NUMBER := 0; --每个拍品产生的委托积分
  V_SCORES           NUMBER := 0; --委托产生的总积分
  v_now              DATE := SYSDATE; /*当前时间*/

  v_temp_num number(10); /*临时统计信息*/
  v_temp_freeze_num number(10);/*冻结数量*/
  v_temp_back_num number(10);/*退货数量*/

  type cur_type is ref cursor;
  cur_sett cur_type;
  v_sql    varchar2(10000);
  ressett  temp_settlement_details%rowtype;

begin
   /*定义临时表（待结算拍品相关信息）的游标*/
  v_sql := ' select temp.auction_id,
           temp.auction_name,
           temp.ac_inital,
           temp.end_price,
           temp.ac_charge,
           temp.ac_custody,
           temp.ac_onload,
           temp.ac_insure,
           decode(temp.total_amount,null,0.0,temp.total_amount) total_amount,
           temp.return_service_fee,
           temp.remark,
           temp.charge_fee_type,
           temp.auction_status
           from temp_settlement_details temp  where temp.auction_id in (' ||
           p_auction_ids || ')';

  /*查询拍品是否已经生成结算单*/
  select count(1)
    into v_temp_num
    from settlement_details sds
    left join settlements sett on sds.settlement_id = sett.id
   where sds.auction_id in (select auction_id from temp_settlement_details)
     and sett.status != 3;  --有效

   select count(1)
      into v_temp_freeze_num
    from user_orders uo
    where uo.auction_id in (select auction_id from temp_settlement_details)
     and uo.is_freeze = 1; --冻结

   select count(1)
     into v_temp_back_num
    from user_refunds ur
    where ur.auction_id in (select auction_id from temp_settlement_details)
    and ur.status not in (8,9);

  /*如果有生成的结算单,或者交易单冻结 或者有申请退货 返回值为0*/
  if v_temp_num > 0 or v_temp_freeze_num > 0 or v_temp_back_num > 0 then

    p_output := 0;
    v_sql :='delete from TEMP_SETTLEMENT_DETAILS
     where auction_id in ('||p_auction_ids||')';
    EXECUTE IMMEDIATE v_sql;
    commit;
  else
    /*查询结算表的id赋值给变量*/
    select settlements_seq.nextval into v_settlement_id from dual;
    /*查询合同相关信息*/
    select cts.user_id, /**委托方编号*/
           cts.user_name, /**委托方姓名*/
           cts.return_service_percent, /**委托方返佣比例*/
           cts.is_partner, /**是否是合作分成合同*/
           cts.agreement_charge_rate, /**合作分成协议服务费*/
           cts.is_free_charge /**是否免汇费*/
      into v_user_id,
           v_user_name,
           v_return_service_percent,
           v_is_partner,
           v_agreement_charge_rate,
           v_is_free_charge
      from contracts cts
     where cts.id = p_contract_id;

    open cur_sett for v_sql;
    loop

      /*for ressett in custempsett loop*/
      fetch cur_sett
        into ressett.auction_id,
         ressett.auction_name,
         ressett.ac_inital,
         ressett.end_price,
         ressett.ac_charge,
         ressett.ac_custody,
         ressett.ac_onload,
         ressett.ac_insure,
         ressett.total_amount,
         ressett.return_service_fee,
         ressett.remark,
         ressett.charge_fee_type,
         ressett.auction_status
        ;
      exit when cur_sett%notfound;

      /**查找拍品收费类型,拍品收费百分比*/
      select af.charge_fee_type, af.charge_fee_percent
        into v_auction_charge_type, v_auction_charge_fee_percent
        from auction_fees af
       where auction_id = ressett.auction_id;

      /* 合作方返点条件：  合同属于合作返点合同，拍品不是收取固定金额的服务费且所收取的服务费费率大于合作方的协议服务费
          结标价 * （拍品服务费百分比 - 合作方协议百分比）
          只有拍品是按照默认收费或者按照固定百分比收费（即不是收取固定金额），
        且收取的百分比高于合作方的协议服务费，才将高出的部分返给合作方
      */
      if v_is_partner = 1 and v_auction_charge_type != 2 and
         v_auction_charge_fee_percent > v_agreement_charge_rate then
        v_agreement_charge_fee := ressett.end_price *
                                  (v_auction_charge_fee_percent -
                                  v_agreement_charge_rate) / 100;
      else
        v_agreement_charge_fee := 0;
      end if;

      /*委托方返点： 拍品不是收取固定金额的服务费 且 拍品服务费百分比大于委托方返点比例  */
      if v_auction_charge_type != 2 and
         v_auction_charge_fee_percent > v_return_service_percent then
        v_return_service_fee := ressett.end_price *
                                v_return_service_percent / 100;
      else
        v_return_service_fee := 0;
      end if;

         /*委托积分参数*/
       SELECT A.SELL_SCORE_PARAM
          into v_sell_score_param
          FROM AUCTIONS A
         WHERE A.ID = ressett.AUCTION_ID;

      /*拍品已支付,才产生委托积分*/
      if ressett.auction_status = 'AUCTION_PAID' then

        /*积分倍数(拍品积分倍数,专场积分倍数,时间段积分倍数中最大的一个)*/
        SELECT MAX(SCOPE_TIMES)
          INTO V_SCORE_TIMES
          FROM (SELECT AU.SEll_SCORE_TIMES SCOPE_TIMES --拍品积分倍数
                  FROM AUCTIONS AU
                 WHERE AU.ID = ressett.AUCTION_ID
                UNION ALL
                SELECT SS.SCORE_TIMES
                  FROM SCORE_SETTINGS SS
                 WHERE SS.SCORE_TYPE = '1' --1代表委托，0代表竞买
                   AND SS.RESOURCE_TYPE = 'AUCTION_SPECIAL_TOPICS' --专场积分倍数
                   AND SS.RESOURCE_ID =
                       (select A.AUCTION_SPECIAL_TOPIC_ID
                          from AUCTIONS A
                         where A.ID = ressett.AUCTION_ID)
                   AND SS.USER_LEVEL_ID =
                       (SELECT US.SELL_LEVEL
                          FROM USERS US
                         WHERE ID = v_user_id)
                UNION ALL
                SELECT SST.SCORE_TIMES
                  FROM SCORE_SETTINGS SST
                 WHERE SST.SCORE_TYPE = '1' --1代表委托，0代表竞买
                   AND SST.RESOURCE_TYPE = 'SCORE_TIME_SETTINGS' --时间积分倍数
                   AND SST.RESOURCE_ID IN
                       (SELECT STS.ID
                          FROM SCORE_TIME_SETTINGS STS
                         WHERE trunc(STS.START_AT, 'dd') <=
                               (select trunc(con.sign_date, 'dd')
                                  from contracts con
                                 where con.id = p_contract_id)
                           AND trunc(STS.END_AT, 'dd') >=
                               (select trunc(con.sign_date, 'dd')
                                  from contracts con
                                 where con.id = p_contract_id))
                   AND SST.USER_LEVEL_ID =
                       (SELECT US.SELL_LEVEL
                          FROM USERS US
                         WHERE ID = v_user_id));

        /*结标价除以委托积分参数,向下取整,剩以积分倍数*/
        V_SCORE  := FLOOR((ressett.end_price / v_sell_score_param) *
                          V_SCORE_TIMES);
      end if;

      /*结算明细信息录入*/
      insert into settlement_details
        (id,
         settlement_id,
         auction_id,
         auction_name,
         ac_inital,
         end_price,
         ac_charge,
         ac_custody,
         ac_onload,
         ac_insure,
         total_amount,
         return_service_fee,
         agreement_charge_fee,
         remark,
         status,
         scores,
         score_times,
         score_param,
         created_at,
         updated_at,
         auction_status)
      values
        (settlement_details_seq.nextval,
         v_settlement_id,
         ressett.auction_id,
         ressett.auction_name,
         ressett.ac_inital,
         ressett.end_price,
         ressett.ac_charge,
         ressett.ac_custody,
         ressett.ac_onload,
         ressett.ac_insure,
         ressett.total_amount,
         v_return_service_fee,
         v_agreement_charge_fee,
         ressett.remark,
         1, /**0:无效 1：有效*/
         V_SCORE,
         V_SCORE_TIMES,
         v_sell_score_param,
         v_now,
         v_now,
         ressett.auction_status);

      /*修改拍品结算状态为结算中*/
      update auctions
         set settlement_status = 3, settlement_at = v_now
       where id = ressett.AUCTION_ID;

    end loop;

    /*汇总已经执行的结算明细表金额*/
    select sum(end_price),
           sum(total_amount),
           sum(ac_charge),
           sum(ac_insure),
           sum(ac_onload),
           sum(ac_custody),
           sum(return_service_fee),
           sum(agreement_charge_fee),
           sum(scores),
           count(1)
      into v_total_end_price,
           v_total_settlement_price,
           v_total_charge_fee,
           v_total_insure_fee,
           v_total_onload_fee,
           v_total_custody_fee,
           v_total_return_service_fee,
           v_total_agreement_charge_fee,
           V_SCORES,
           v_total_nums
      from settlement_details
     where settlement_id = v_settlement_id;

    /*判断是否返回了服务费*/
    if v_total_return_service_fee > 0 then
      v_is_return_service := 1;
    else
      v_is_return_service := 0;
    end if;

    /*插入结算主表信息*/
    insert into settlements
      (id,
       user_id,
       user_name,
       contract_id,
       num,
       amount,
       auction_fee,
       service_fee,
       charge_fee,
       custody_fee,
       onload_fee,
       insure_fee,
       orther_fee,
       return_service_amount,
       is_return_service,
       agreement_charge_fee,
       is_free_charge,
       f_check,
       check_status,
       settlement_scores,
       despatch_status,
       created_at,
       updated_at)
    values
      (v_settlement_id,
       v_user_id,
       v_user_name,
       p_contract_id,
       v_total_nums,
       v_total_settlement_price,
       v_total_end_price,
       v_total_charge_fee + v_total_insure_fee + v_total_onload_fee + v_total_custody_fee,
       v_total_charge_fee,
       v_total_custody_fee,
       v_total_onload_fee,
       v_total_insure_fee,
       0, /**其他费用默认为0*/
       v_total_return_service_fee,
       v_is_return_service,
       v_total_agreement_charge_fee,
       v_is_free_charge,
       0, /*财务未处理*/
       0, /*未审核*/
       V_SCORES,
       0,
       v_now,
       v_now);

    /*记录备注信息*/
    insert into common_remarks
      (id,
       source_id,
       source_type,
       custom_type,
       content,
       admin_id,
       admin_name,
       created_at)
    values
      (common_remarks_seq.nextval,
       v_settlement_id,
       'SETTLEMENTS',
       '生成结算单',
       '结算单存储过程生成',
       p_admin_id,
       p_admin_name,
       v_now);

    p_output := v_settlement_id;

    v_sql :='delete from TEMP_SETTLEMENT_DETAILS
     where auction_id in ('||p_auction_ids||')';
    EXECUTE IMMEDIATE v_sql;
    commit;
  end if;

  EXCEPTION
  WHEN OTHERS THEN
   p_output := 1;
    v_sql :='delete from TEMP_SETTLEMENT_DETAILS
     where auction_id in ('||p_auction_ids||')';
    EXECUTE IMMEDIATE v_sql;
   commit;
   DBMS_OUTPUT.PUT_LINE('SQLCODE: '|| SQLCODE);
   RETURN;

end;


 
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_FINANCE_CONFIRM
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SETTLEMENT_FINANCE_CONFIRM"(p_settlement_despatches_id in settlement_despatches.id%type,
                                                           p_admin_id                 in number,
                                                           p_admin_name               in settlement_despatches.finance%type,
                                                           p_output                   OUT VARCHAR /*输出状态*/) as
  /*
    作者:魏涛
    时间:2012-2-7
    描述:如果是结算单分配项最后一项分配款已付完成后，改变该结算单下的拍品状态为已结算，
       判断该结算单所对应的合同下所有的拍品是否都已结算，如果都已结算合同状态改为已执行完成，
       送委托积分，更新这个分配项的状态等信息
    update by liu.jing
    
    修改人：Dwen
    修改日期：2014-01-26
    修改描述：形象值流水表USER_LEVEL_DETAILS添加可用形象值、生效日期、过期日期、可用状态字段
  */

  v_contract_id       integer; --合同号
  v_user_id           integer; --委托方ID
  v_user_name         varchar2(200); --用户名称
  v_settlement_id     integer; --结算单号
  v_settlement_status varchar2(200); --结算单的状态
  v_score_id          number;

  v_settlement_despatches_count integer; --结算单下财务没通过的分配项数量
  v_auction_count               integer; --合同拍品数
  v_auction_sett_count          integer; --合同中已完成结算的拍品数

  V_SCORES      NUMBER := 0; --委托产生的总积分
  v_user_despatch_id     integer; --分配款项用户
  v_checkout_type        varchar2(200);
  v_amount               number := 0;
  v_f_check_status       varchar2(200);
  v_now                  DATE := SYSDATE; /*当前时间*/
  v_account_old          number;
  v_despatch_account_old number; --分配用户账户的原余额
  v_score_remarks        varchar2(4000) := ''; --记录积分倍数参数
  v_is_return_service    varchar2(255); /*委托方是否返还服务费 0：不需要  1：未生效  2：已生效*/

  /*该结算单下的拍品id的游标 */
  cursor p_auction_cur is
    select auction_id
      from settlement_details
     where settlement_id =
           (select settlement_id
              from settlement_despatches
             where id = p_settlement_despatches_id);

   V_SELL_SCORE_AMOUNT_TIMES NUMBER:=1;
   V_SCORE_AMOUNT NUMBER:=0;
   V_TOTAL_SCORE_AMOUNT NUMBER:=0;

begin

  /*结算单分配款信息*/
  select sd.settlement_id,
         sd.user_id,
         sd.checkout_type,
         sd.amount,
         f_check_status,
         u.total_account
    into v_settlement_id,
         v_user_despatch_id,
         v_checkout_type,
         v_amount,
         v_f_check_status,
         v_despatch_account_old
    from settlement_despatches sd
    left join users u on sd.user_id = u.id
   where sd.id = p_settlement_despatches_id;

  /*如果分配款项已被操作*/
  if v_f_check_status <> 0 then
    p_output := '0';

  else

    /*结算单相关信息*/
    select sett.contract_id,
           sett.status,
           sett.user_name,
           sett.user_id,
           us.total_account,
           sett.is_return_service
      into v_contract_id,
           v_settlement_status,
           v_user_name,
           v_user_id,
           v_account_old,
           v_is_return_service
      from settlements sett
      left join users us on sett.user_id = us.id
     where sett.id = v_settlement_id;

    /*修改分配款为已付状态*/
    update settlement_despatches sd
       set f_check_status = '1', --已通过
           f_check_date   = v_now,
           finance        = p_admin_name,
           updated_at     = v_now
     where id = p_settlement_despatches_id;

    if v_checkout_type = '2' then
      /*如果是转余额就直接把钱转到用户的账户*/
      update users us
         set us.account       = decode(us.account, null, 0.00, us.account) +
                                v_amount,
             us.total_account = decode(us.total_account,
                                       null,
                                       0.00,
                                       us.total_account) + v_amount
       where us.id = v_user_despatch_id;
      /*创建账户流水*/
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         account_new,
         account_old,
         direction,
         finance_type,
         finance_id,
         finance_name,
         finance_date,
         created_at)
      values
        (user_accounts_seq.nextval,
         v_user_despatch_id,
         p_settlement_despatches_id,
         'SETTLEMENT_DESPATCHES',
         v_amount,
         decode(v_despatch_account_old, null, 0.00, v_despatch_account_old) +
         v_amount,
         decode(v_despatch_account_old, null, 0.00, v_despatch_account_old),
         '0', /*资金流转方式：资金流入*/
         '13', /**收支方式：结算款转余额*/
         p_admin_id,
         p_admin_name,
         v_now,
         v_now);
    end if;

    /*结算单下财务没通过的分配项数量*/
    select count(1)
      into v_settlement_despatches_count
      from settlement_despatches sd
     where sd.settlement_id = v_settlement_id
       and sd.f_check_status <> '1';

    /*结算单的分配项都已支付,改变结算单的状态*/
    if v_settlement_despatches_count = 0 then
      --结算奖励
      if v_is_return_service = '1' then
        update settlements
           set status              = '2', --已完成
               op                  = p_admin_name,
               f_check             = '1', --通过
               f_check_date        = v_now,
               return_service_date = ADD_MONTHS(v_now, 1), --结算奖励时间为结算完成时间后的30天
               updated_at          = v_now
         where id = v_settlement_id;
      else
        update settlements
           set status       = '2', --已完成
               op           = p_admin_name,
               f_check      = '1', --通过
               f_check_date = v_now,
               updated_at   = v_now
         where id = v_settlement_id;
      end if;
      --获取时间形象值倍数，如果没有配置，默认为1倍形象值
      SELECT NVL(MAX(S.SCORE_TIMES),1)
     INTO V_SELL_SCORE_AMOUNT_TIMES
     FROM SCORE_TIME_SETTINGS ST, SCORE_SETTINGS S
     WHERE ST.ID=S.RESOURCE_ID
     AND S.RESOURCE_TYPE='SCORE_TIME_RATIO_SETTINGS'
     AND S.SCORE_TYPE = '1'
     AND S.USER_LEVEL_ID =
     (SELECT U.SELL_LEVEL FROM USERS U WHERE ID=v_user_id)
     AND EXISTS (
         SELECT 1 FROM CONTRACTS C
         WHERE C.ID=v_contract_id
         AND ST.START_AT <= C.SIGN_DATE
         AND ST.END_AT >= C.SIGN_DATE
     );

      for rett in p_auction_cur loop
        /*修改拍品状态为已结算*/
        update auctions au
           set au.settlement_status = '1', au.updated_at = v_now
         where au.id = rett.AUCTION_ID;
         --重新计算形象值
         SELECT FLOOR(A.END_PRICE/A.SELL_SCORE_PARAM*V_SELL_SCORE_AMOUNT_TIMES)
         INTO V_SCORE_AMOUNT
         FROM AUCTIONS A
         WHERE A.ID = RETT.AUCTION_ID;

         V_TOTAL_SCORE_AMOUNT:=V_TOTAL_SCORE_AMOUNT+V_SCORE_AMOUNT;
      end loop;

      v_score_remarks := '委托方结算产生委托积分;结算单号' || v_settlement_id;

      select sd.settlement_scores
        into V_SCORES
        from settlements sd
       where sd.id = v_settlement_id;

      /*记录积分流水*/
      IF V_SCORES > 0 THEN

        select SCORES_SEQ.NEXTVAL into v_score_id from dual;

        INSERT INTO SCORES
          (ID,
           USER_ID,
           USER_NAME,
           SCORE_TYPE,
           SCORE_STATUS,
           SCORE_SOURCE,
           SCORES,
           USEABLE_SCORES,
           SOURCE_ID,
           SOURCE_TYPE,
           EFFECTED_AT,
           EXPIRED_AT,
           CREATED_AT,
           SCORE_PARAM,
           SCORE_TIMES,
           admin_id,
           admin_name,
           remarks)
        VALUES
          (v_score_id,
           v_user_id,
           v_user_name,
           1, --委托积分
           1, --可用积分
           3, --结算产生
           V_SCORES,
           V_SCORES,
           v_settlement_id,
           'SETTLEMENTS',
           v_now,
           ADD_MONTHS(v_now, 2 * 12),
           v_now,
           0,
           0,
           p_admin_id,
           p_admin_name,
           v_score_remarks);

        /*积分流水表中查一条数据*/
        INSERT INTO SCORE_INCOME_EXPENSES
          (ID,
           USER_ID,
           USER_NAME,
           SOURCE_ID,
           SOURCE_TYPE,
           SCORES,
           SCORE_TYPE,
           DIRECTION,
           OPERATION_TYPE,
           SCORE_PARAM,
           SCORE_TIMES,
           CREATED_AT,
           remarks)
        VALUES
          (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
           v_user_id,
           v_user_name,
           v_score_id,
           'SCORES',
           V_SCORES,
           '1', --1代表委托
           '0', --0代表产生
           '4', --4委托积分生成
           0,
           0,
           v_now,
           v_score_remarks);

        /*向形象值流水表中加入一条记录数据*/
        INSERT INTO USER_LEVEL_DETAILS
          (ID,
           USER_ID,
           USER_NAME,
           USER_TYPE,
           RESOURCE_ID,
           RESOURCE_TYPE,
           SCORES,
           DIRECTION,
           OPERATE_TYPE,
           CREATED_AT,
           STATUS,
           EFFECTED_AT,
           EXPIRED_AT,
           USABLE_SCORES
           )
        VALUES
          (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
           v_user_id,
           v_user_name,
           '1', --1代表委托
           v_score_id,
           'SCORES',
           V_TOTAL_SCORE_AMOUNT,
           '0', --0代表产生
           '1', --1积分生效
           v_now,
           '1',
           SYSDATE,
           ADD_MONTHS(SYSDATE, 1 * 12),
           V_TOTAL_SCORE_AMOUNT);

        /*把产生的积分和对应的形象值加到对应的客户上面*/
        update users us
           set us.sell_score_amount  = us.sell_score_amount + V_TOTAL_SCORE_AMOUNT,
               us.sell_score_useable = us.sell_score_useable + V_SCORES,
               us.updated_at         = v_now
         where us.id = v_user_id;

      END IF;

      /*合同中，拍品结算状态为已结算的拍品数量*/
      select count(1)
        into v_auction_sett_count
        from auctions au
       where au.settlement_status = '1' -- 已结算
         and au.contract_id = v_contract_id;

      /*合同中，总拍品数*/
      select count(1)
        into v_auction_count
        from auctions au
       where au.contract_id = v_contract_id;

      /*合同中所有的拍品都已结算后改变合同的状态*/
      if v_auction_sett_count = v_auction_count then
        update contracts con
           set con.status = '2', -- 执行完成
               updated_at = v_now
         where con.id = v_contract_id;

        update contract_details cond
           set cond.status     = '14', --结算完成
               cond.updated_at = v_now
         where cond.contract_id = v_contract_id;
      end if;

    end if;
    p_output := '1';
  end if;

  commit;

end p_settlement_finance_confirm;
 
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_RE_SETTLE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SETTLEMENT_RE_SETTLE"(p_settlement_id in number,
                                                     p_admin_id      in number,
                                                     p_admin_name    in varchar,
                                                     p_output        out number) is
  /**
       作者:魏涛
       日期:2012.2.9
       描述：可重新结算（后台调用）
       update by liu.jing
  */

begin
  if p_settlement_id is null then
    p_output := 0;
  else

    update auctions au
       set au.settlement_status = '2',
           updated_at           = sysdate,
           admin_id             = p_admin_id,
           admin_name           = p_admin_name
     where au.id in
           (select settde.auction_id
              from settlement_details settde
              left join user_orders uo on settde.auction_id = uo.auction_id
              left join user_refunds ur on uo.user_refund_id = ur.id
             where settde.settlement_id = p_settlement_id
             --未冻结可重新结算
               and (uo.is_freeze = 0  or uo.is_freeze is null)
             --没有申请退货 或者 已经申请退货且已完成
               and (uo.user_refund_id is null or (uo.user_refund_id is not null and ur.status in (8,9)))
            );

       update settlements
        set remark = '已重新结算'
        where id = p_settlement_id;

       p_output := 1;
      commit;
  end if;

end P_SETTLEMENT_RE_SETTLE;


 
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_REWARD
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_SETTLEMENT_REWARD" is
  /**
     结算奖励
     1.查询结算奖励未生效,财务确认
     2.更改用户的可用余额和总额
     3.添加可用余额的资金流水 user_account(18:委托方结算返佣)
     4.修改结算奖励的生效状态
  **/
  v_date             date := sysdate; --当前日期
  v_is_return_servic VARCHAR2(255 CHAR) := '2'; --是否返还服务费(0不需要 1未生效 2已生效)
  v_direction        VARCHAR2(255 CHAR) := '0'; --客户资金流水收支类型(0:收入 1:支出)
  v_finance_type     VARCHAR2(255 CHAR) := '18'; --资金流向类型(18:委托方结算返佣)
  v_status           VARCHAR2(255 CHAR) := '1'; --资金流水是否有效(0:无效 1:有效)
  v_remarks          VARCHAR2(255 CHAR) := '结算单奖励'; --备注预留;
  v_total_account    number(16, 2); --客户总额
  v_return_amount    number(16, 2); --本次结算奖励

  cursor sett_cur is
    select *
      from settlements sett
     where sett.is_return_service = 1 --结算奖励：未生效
       and sett.return_service_amount > 0 --可返服务费不为0
       and sett.return_service_date <= sysdate
       and sett.f_check = '1'; --财务操作状态:1已通过

begin

  for sett_result in sett_cur loop

  /*客户当前总额*/
  select nvl(total_account, 0)
    into v_total_account
    from users
   where id = sett_result.user_id;

   v_return_amount := sett_result.return_service_amount; --结算奖励金额

    /*添加客户余额资金流水*/
    insert into user_accounts
      (id,
       user_id,
       source_id,
       source_type,
       money,
       direction,
       finance_type,
       finance_date,
       remarks,
       status,
       created_at,
       account_old,
       account_new)
    values
      (user_accounts_seq.nextval,
       sett_result.user_id,
       sett_result.id,
       'SETTLEMENTS',
       sett_result.return_service_amount,
       v_direction,
       v_finance_type,
       v_date,
       v_remarks,
       v_status,
       v_date,
       v_total_account,
       v_total_account + v_return_amount);

    /*修改客户可用余额,总额*/
    update users u
       set u.account       = nvl(u.account, 0) + v_return_amount,
           u.total_account = nvl(u.total_account,0) + v_return_amount
     where u.id = sett_result.user_id;

    /*修改结算奖励生效状态*/
    update settlements s
       set s.is_return_service = v_is_return_servic
     where s.id = sett_result.id;

  end loop;
  commit;

end P_SETTLEMENT_REWARD;


 
/

-- ----------------------------
-- Procedure structure for P_SETTLEMENT_TEMP_LIUJING
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SETTLEMENT_TEMP_LIUJING" IS

	V_SUB_RESULT_STATUS NUMBER := 0;

	CURSOR p_auction_cur IS
	/*   select *
    from auction_fees af
   where af.onload_fee_type is null
     and af.auction_id in
         (select au.id
            from auctions au, user_orders uo
           where au.id = uo.auction_id
           and au.settlement_status = 2
           and uo.status = 1)
     and af.auction_id not in
         (196288, 196289, 598397, 1574086, 1616115, 1647069, 1647000);*/

		SELECT af.*
			FROM auctions au, auction_fees af, user_orders uo
		 WHERE au.id = af.auction_id
			 AND au.id = uo.auction_id
			 AND au.settlement_status = 2
			 AND uo.status = 1
			 AND af.onload_fee_type IS NULL
					--and af.auction_id not in (196288, 196289, 598397, 1574086, 1616115, 1647069, 1647000);
			 AND af.auction_id IN (2258313);

	/*   select af.*
   from auctions au, auction_fees af,contract_details con
  where au.id = af.auction_id
    and  au.contract_id = con.contract_id
    and au.status = 8
    and au.settlement_status = 2
    and con.status >= 13
    and af.onload_fee_type is null;*/

	/*      select * from auctions au,auction_fees af
  where au.id = af.auction_id
  and  au.status = 8
  and au.contract_id in (
   select contract_id from contract_details where status = 13
  )
  and au.settlement_status = 0*/

BEGIN

	FOR rett IN p_auction_cur LOOP

		P_SETTLEMENT_AUCTION_FEE(rett.auction_id, V_SUB_RESULT_STATUS);

	END LOOP;
	COMMIT;
END P_SETTLEMENT_TEMP_LIUJING;


 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_CHARGES
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_CHARGES" is

  v_order_count    NUMBER := 0; /*交易单个数*/
  v_charge_rate    NUMBER(16, 2) := 0.00; /*仓储费率*/
  v_position       NUMBER := 1; /*根据拍品体积大小设置对应拍品分类中的大小*/
  v_start_at       DATE; /*待缴仓储费开始时间*/
  v_end_at         DATE := TRUNC(SYSDATE) - 1 / 24 / 60 / 60; /*待缴仓储费结束时间（当前日期前一天 23:59:59）*/
  v_storage_charge NUMBER(16, 2);
  v_temp_date      DATE := to_date('2013-03-01 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  /*  交易单已支付、待支付
   拍品已结标超过30天(截止当前日期前一天23点59分59秒)
   未申请退货
  （未申请发货 或 发货单暂缓）
  （未申请提货 或 提货单暂缓）
   中文交易单*/
  cursor cur_user_orders is
  
    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*已支付、待支付*/
     where uo.status in ('0', '1')
          /*拍品已结标超过30天(截止当前日期前一天23点59分59秒)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*未申请退货*/
       and uo.user_refund_id is null
          /*中文交易单*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*发货单或者提货单暂缓*/
       and exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '9')
               
    union
    
    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*已支付、待支付*/
     where uo.status in ('0', '1')
          /*拍品已结标超过30天(截止当前日期前一天23点59分59秒)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*未申请退货*/
       and uo.user_refund_id is null
          /*中文交易单*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*未发货*/
       and uo.logistic_detail_id is null
          /*未提货*/
       and not exists (select ld.id
              from logistic_lading_details ld
             where ld.auction_id = uo.auction_id)
          /*排除发货完成*/
       and not exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '8')
              
        ;

begin
  BEGIN
  
    DBMS_OUTPUT.PUT_LINE('v_end_at: ' || v_end_at);
    
    for result_user_orders in cur_user_orders loop
    
      /*检查待缴仓储费表是否存在交易单对应的数据*/
      select count(1)
        into v_order_count
        from storage_wait_charges
       where user_order_id = result_user_orders.id;
        
        
      /*如果不存在，则添加数据*/
      if v_order_count = 0 then
      
        /* 1、初始化待缴仓储费开始时间*/
        /* 以一个指定日期(目前暂定为4月20号，有可能调整)为标准，
        指定日期结标及以后结标的拍品的30天后开始收仓储费，
        指定日期之前结标的从(指定日期+30天)开始收取仓储费*/
        if result_user_orders.end_date < v_temp_date then
          v_start_at := v_temp_date - 30;
        else
          v_start_at := result_user_orders.end_date - 30;
        end if;

        /*比较开始时间与结束时间，如果开始时间小于结束时间，才进行收费初始化*/
        /*只要防止指定收费日期之前结标的拍品，出现开始时间大于结束时间的拍品*/        
        if v_start_at < v_end_at then        
          
          /*2、初始化仓储费率*/
          /*根据拍品分类表中仓储费率初始化交易单仓储费率*/
          if result_user_orders.storage_charges = '0' then
            v_position := 1;
          elsif result_user_orders.storage_charges = '1' then
            v_position := 2;
          elsif result_user_orders.storage_charges = '2' then
            v_position := 3;
          end if;
        
          select to_number(regexp_substr(ac.storage_charge_rate,
                                         '[^\]+',
                                         1,
                                         v_position))
            into v_charge_rate
            from auction_categories ac
           where ac.id = result_user_orders.auction_category_id;
        
          /*3、计算仓储费*/
          /*拍品的仓储费率*(仓储费结束时间-仓储费开始时间)的天数，不满一天的部分按一天计算*/
          v_storage_charge := v_charge_rate * ceil(v_end_at - v_start_at);
        
          /*4、初始化仓储费*/
          insert into storage_wait_charges
            (id,
             user_order_id,
             user_id,
             charge_rate,
             wait_charges,
             days,
             start_at,
             end_at)
          values
            (storage_wait_charges_seq.nextval,
             result_user_orders.id,
             result_user_orders.user_id,
             v_charge_rate,
             v_storage_charge,
             ceil(v_end_at - v_start_at),
             v_start_at,
             v_end_at);
             
        end if;
      else
      
        /*否则，修改数据*/
        /*将待缴仓储费结束时间更新为：当前日期前一天的23点59分59秒
        将交易单的待缴仓储费更新为：拍品的仓储费率*(仓储费结束时间-仓储费开始时间)的天数，不满一天的部分按一天计算*/
        update storage_wait_charges awc
           set awc.end_at       = v_end_at,
               awc.wait_charges = awc.charge_rate *
                                  ceil(v_end_at - awc.start_at),
               awc.days         = ceil(v_end_at - awc.start_at)
         where awc.user_order_id = result_user_orders.id;
      
      end if;
      
    end loop;
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;
end P_STORAGE_CHARGES;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_CHARGES_LHH
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_CHARGES_LHH"(p_user_id in number) is

  v_order_count    NUMBER := 0; /*交易单个数*/
  v_charge_rate    NUMBER(16, 2) := 0.00; /*仓储费率*/
  v_position       NUMBER := 1; /*根据拍品体积大小设置对应拍品分类中的大小*/
  v_start_at       DATE; /*待缴仓储费开始时间*/
  v_end_at         DATE := TRUNC(SYSDATE) - 1 / 24 / 60 / 60; /*待缴仓储费结束时间（当前日期前一天 23:59:59）*/
  v_storage_charge NUMBER(16, 2);
  v_temp_date      DATE := to_date('2013-03-01 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  /*  交易单已支付、待支付
   拍品已结标超过30天(截止当前日期前一天23点59分59秒)
   未申请退货
  （未申请发货 或 发货单暂缓）
  （未申请提货 或 提货单暂缓）
   中文交易单*/
  cursor cur_user_orders is

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*已支付、待支付*/
     where uo.status in ('0', '1')
          /*拍品已结标超过30天(截止当前日期前一天23点59分59秒)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*未申请退货*/
       and uo.user_refund_id is null
          /*中文交易单*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*发货单或者提货单暂缓*/
       and exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '9')
       and uo.user_id=p_user_id
    union

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*已支付、待支付*/
     where uo.status in ('0', '1')
          /*拍品已结标超过30天(截止当前日期前一天23点59分59秒)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*未申请退货*/
       and uo.user_refund_id is null
          /*中文交易单*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*未发货*/
       and uo.logistic_detail_id is null
          /*未提货*/
       and not exists (select ld.id
              from logistic_lading_details ld
             where ld.auction_id = uo.auction_id)
          /*排除发货完成*/
       and not exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '8')
       and uo.user_id=p_user_id
        ;

begin
  BEGIN

    DBMS_OUTPUT.PUT_LINE('v_end_at: ' || v_end_at);

    for result_user_orders in cur_user_orders loop

      /*检查待缴仓储费表是否存在交易单对应的数据*/
      select count(1)
        into v_order_count
        from storage_wait_charges
       where user_order_id = result_user_orders.id;


      /*如果不存在，则添加数据*/
      if v_order_count = 0 then

        /* 1、初始化待缴仓储费开始时间*/
        /* 以一个指定日期(目前暂定为4月20号，有可能调整)为标准，
        指定日期结标及以后结标的拍品的30天后开始收仓储费，
        指定日期之前结标的从(指定日期+30天)开始收取仓储费*/
        if result_user_orders.end_date < v_temp_date then
          v_start_at := v_temp_date + 30;
        else
          v_start_at := result_user_orders.end_date + 30;
        end if;

        /*比较开始时间与结束时间，如果开始时间小于结束时间，才进行收费初始化*/
        /*只要防止指定收费日期之前结标的拍品，出现开始时间大于结束时间的拍品*/
        if v_start_at < v_end_at then

          /*2、初始化仓储费率*/
          /*根据拍品分类表中仓储费率初始化交易单仓储费率*/
          if result_user_orders.storage_charges = '0' then
            v_position := 1;
          elsif result_user_orders.storage_charges = '1' then
            v_position := 2;
          elsif result_user_orders.storage_charges = '2' then
            v_position := 3;
          end if;

          select to_number(regexp_substr(ac.storage_charge_rate,
                                         '[^\]+',
                                         1,
                                         v_position))
            into v_charge_rate
            from auction_categories ac
           where ac.id = result_user_orders.auction_category_id;

          /*3、计算仓储费*/
          /*拍品的仓储费率*(仓储费结束时间-仓储费开始时间)的天数，不满一天的部分按一天计算*/
          v_storage_charge := v_charge_rate * ceil(v_end_at - v_start_at);

          /*4、初始化仓储费*/
          insert into storage_wait_charges
            (id,
             user_order_id,
             user_id,
             charge_rate,
             wait_charges,
             days,
             start_at,
             end_at)
          values
            (storage_wait_charges_seq.nextval,
             result_user_orders.id,
             result_user_orders.user_id,
             v_charge_rate,
             v_storage_charge,
             ceil(v_end_at - v_start_at),
             v_start_at,
             v_end_at);

        end if;
      else

        /*否则，修改数据*/
        /*将待缴仓储费结束时间更新为：当前日期前一天的23点59分59秒
        将交易单的待缴仓储费更新为：拍品的仓储费率*(仓储费结束时间-仓储费开始时间)的天数，不满一天的部分按一天计算*/
        update storage_wait_charges awc
           set awc.end_at       = v_end_at,
               awc.wait_charges = awc.charge_rate *
                                  ceil(v_end_at - awc.start_at),
               awc.days         = ceil(v_end_at - awc.start_at)
         where awc.user_order_id = result_user_orders.id;

      end if;

    end loop;
    commit;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;
end P_STORAGE_CHARGES_LHH;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_CHARGES_SUSPEND
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_CHARGES_SUSPEND" is
/*??????????????????*/

  v_order_count    NUMBER := 0; /*??????????*/
  v_charge_rate    NUMBER(16, 2) := 0.00; /*????????*/
  v_position       NUMBER := 1; /*????????????????????????????????????????*/
  v_start_at       DATE; /*??????????????????*/
  v_end_at         DATE := TRUNC(SYSDATE) - 1 / 24 / 60 / 60; /*?????????????????????????????????? 23:59:59??*/
  v_storage_charge NUMBER(16, 2);
  v_temp_date      DATE := to_date('2013-04-15 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  v_temp_date_2    DATE := to_date('2013-07-05 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  /*  ????????????????????
   ??????????????30??(??????????????????23??59??59??)
   ??????????
  ??????????????
  ??????????????
   ??????????*/
  --update by liujing ??2013??9??9????????????????????????????????????????30??????60????
  --2013??9??9??????????????????????????????????30??
  cursor cur_user_orders is

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*??????????????*/
     where uo.status in ('0', '1')
       --update by liujing 2013-09-05
       and uo.end_date <= v_temp_date_2
          /*??????????????30??(??????????????????23??59??59??)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*??????????*/
       and uo.user_refund_id is null
          /*??????????*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*????????????????????*/
       and exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '9')

       union

       select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*??????????????*/
     where uo.status in ('0', '1')
       --update by liujing 2013-09-05
       and uo.end_date > v_temp_date_2
          /*??????????????60??(??????????????????23??59??59??)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 60
          /*??????????*/
       and uo.user_refund_id is null
          /*??????????*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*????????????????????*/
       and exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '9')
            ;

begin
  BEGIN

    for result_user_orders in cur_user_orders loop

      /*????????????????????????????????????????*/
      select count(1)
        into v_order_count
        from storage_wait_charges
       where user_order_id = result_user_orders.id;


      /*??????????????????????*/
      if v_order_count = 0 then

        /* 1??????????????????????????*/
        /* ??????????????(??????????4??20??????????????)????????
        ??????????????????????????????30??????????????????
        ????????????????????(????????+30??)??????????????*/
        if result_user_orders.end_date < v_temp_date then
          v_start_at := v_temp_date + 30;
        else
          --update by liujing 2013-09-05
          --????????????????????????????????????
          --??????????????????????????????2013-09-09 00:00:00????????????????????????????????????????????????????????30??
          --??????????????????????????2013-09-09 00:00:00????????????????????????????????????????????????????????60??
          if result_user_orders.end_date  <= v_temp_date_2 then
              v_start_at := result_user_orders.end_date + 30;
          else
              v_start_at := result_user_orders.end_date + 60;
          end if;
        end if;

        /*??????????????????????????????????????????????????????????????????*/
        /*??????????????????????????????????????????????????????????????????*/
        if v_start_at < v_end_at then

          /*2????????????????*/
          /*????????????????????????????????????????????*/
          if result_user_orders.storage_charges = '0' then
            v_position := 1;
          elsif result_user_orders.storage_charges = '1' then
            v_position := 2;
          elsif result_user_orders.storage_charges = '2' then
            v_position := 3;
          end if;

          select to_number(regexp_substr(ac.storage_charge_rate,
                                         '[^\]+',
                                         1,
                                         v_position))
            into v_charge_rate
            from auction_categories ac
           where ac.id = result_user_orders.auction_category_id;

          /*3????????????*/
          /*??????????????*(??????????????-??????????????)????????????????????????????????*/
          v_storage_charge := v_charge_rate * ceil(v_end_at - v_start_at);

          /*4??????????????*/
          insert into storage_wait_charges
            (id,
             user_order_id,
             user_id,
             charge_rate,
             wait_charges,
             days,
             start_at,
             end_at)
          values
            (storage_wait_charges_seq.nextval,
             result_user_orders.id,
             result_user_orders.user_id,
             v_charge_rate,
             v_storage_charge,
             ceil(v_end_at - v_start_at),
             v_start_at,
             v_end_at);

        end if;
      else

        /*??????????????*/
        /*????????????????????????????????????????????23??59??59??
        ??????????????????????????????????????????*(??????????????-??????????????)????????????????????????????????*/
        update storage_wait_charges awc
           set awc.end_at       = v_end_at,
               awc.wait_charges = awc.charge_rate *
                                  ceil(v_end_at - awc.start_at),
               awc.days         = ceil(v_end_at - awc.start_at)
         where awc.user_order_id = result_user_orders.id;

      end if;

    end loop;
    commit;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;
end P_STORAGE_CHARGES_SUSPEND;


 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_CHARGES_SUSPEND_Z
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_CHARGES_SUSPEND_Z" is
/*??????????????????*/

  v_order_count    NUMBER := 0; /*??????????*/
  v_charge_rate    NUMBER(16, 2) := 0.00; /*????????*/
  v_position       NUMBER := 1; /*????????????????????????????????????????*/
  v_start_at       DATE; /*??????????????????*/
  v_end_at         DATE := TRUNC(SYSDATE) - 1 / 24 / 60 / 60; /*?????????????????????????????????? 23:59:59??*/
  v_storage_charge NUMBER(16, 2);
  v_temp_date      DATE := to_date('2015-1-26 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  /*  ????????????????????
   ??????????????30??(??????????????????23??59??59??)
   ??????????
  ??????????????
  ??????????????
   ??????????*/
  cursor cur_user_orders is

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*??????????????*/
     where uo.status in ('0', '1')
          /*??????????????30??(??????????????????23??59??59??)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*??????????*/
       and uo.user_refund_id is null
          /*??????????*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*????????????????????*/
       and exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '9')
       and uo.auction_no='64215006' ;

begin
  BEGIN

    for result_user_orders in cur_user_orders loop

      /*????????????????????????????????????????*/
      select count(1)
        into v_order_count
        from storage_wait_charges
       where user_order_id = result_user_orders.id;


      /*??????????????????????*/
      if v_order_count = 0 then

        /* 1??????????????????????????*/
        /* ??????????????(??????????4??20??????????????)????????
        ??????????????????????????????30??????????????????
        ????????????????????(????????+30??)??????????????*/
        if result_user_orders.end_date < v_temp_date then
          v_start_at := v_temp_date + 30;
        else
          v_start_at := result_user_orders.end_date + 30;
        end if;

        /*??????????????????????????????????????????????????????????????????*/
        /*??????????????????????????????????????????????????????????????????*/
        if v_start_at < v_end_at then

          /*2????????????????*/
          /*????????????????????????????????????????????*/
          if result_user_orders.storage_charges = '0' then
            v_position := 1;
          elsif result_user_orders.storage_charges = '1' then
            v_position := 2;
          elsif result_user_orders.storage_charges = '2' then
            v_position := 3;
          end if;

          select to_number(regexp_substr(ac.storage_charge_rate,
                                         '[^\]+',
                                         1,
                                         v_position))
            into v_charge_rate
            from auction_categories ac
           where ac.id = result_user_orders.auction_category_id;

          /*3????????????*/
          /*??????????????*(??????????????-??????????????)????????????????????????????????*/
          v_storage_charge := v_charge_rate * ceil(v_end_at - v_start_at);

          /*4??????????????*/
          insert into storage_wait_charges
            (id,
             user_order_id,
             user_id,
             charge_rate,
             wait_charges,
             days,
             start_at,
             end_at)
          values
            (storage_wait_charges_seq.nextval,
             result_user_orders.id,
             result_user_orders.user_id,
             v_charge_rate,
             v_storage_charge,
             ceil(v_end_at - v_start_at),
             v_start_at,
             v_end_at);

        end if;
      else

        /*??????????????*/
        /*????????????????????????????????????????????23??59??59??
        ??????????????????????????????????????????*(??????????????-??????????????)????????????????????????????????*/
        update storage_wait_charges awc
           set awc.end_at       = v_end_at,
               awc.wait_charges = awc.charge_rate *
                                  ceil(v_end_at - awc.start_at),
               awc.days         = ceil(v_end_at - awc.start_at)
         where awc.user_order_id = result_user_orders.id;

      end if;

    end loop;
    commit;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;
end P_STORAGE_CHARGES_SUSPEND_z;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_CHARGES_UNSHIPPED
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_CHARGES_UNSHIPPED" is
  /*?????? ??????????????????????*/
  v_order_count    NUMBER := 0; /*??????????*/
  v_charge_rate    NUMBER(16, 2) := 0.00; /*????????*/
  v_position       NUMBER := 1; /*????????????????????????????????????????*/
  v_start_at       DATE; /*??????????????????*/
  v_end_at         DATE := TRUNC(SYSDATE) - 1 / 24 / 60 / 60; /*?????????????????????????????????? 23:59:59??*/
  v_storage_charge NUMBER(16, 2);
  v_temp_date      DATE := to_date('2013-04-15 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  v_temp_date_2    DATE := to_date('2013-09-09 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  /*  ????????????????????
   ??????????????30??(??????????????????23??59??59??)
   ??????????
  ??????????????
  ??????????????
   ??????????*/
  --update by liujing ??2013??9??9????????????????????????????????????????30??????60????
  --2013??9??9??????????????????????????????????30??
  cursor cur_user_orders is

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*??????????????*/
     where uo.status in ('0', '1')
      --update by liujing 2013-09-05
       and uo.end_date <= v_temp_date_2
          /*??????????????30??(??????????????????23??59??59??)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*??????????*/
       and uo.user_refund_id is null
          /*??????????*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*??????*/
       and uo.logistic_detail_id is null
          /*??????*/
       and not exists (select ld.id
              from logistic_lading_details ld
             where ld.auction_id = uo.auction_id)
          /*????????????*/
       and not exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '8')

     union

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*??????????????*/
     where uo.status in ('0', '1')
      --update by liujing 2013-09-05
       and uo.end_date > v_temp_date_2
          /*??????????????30??(??????????????????23??59??59??)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 60
          /*??????????*/
       and uo.user_refund_id is null
          /*??????????*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*??????*/
       and uo.logistic_detail_id is null
          /*??????*/
       and not exists (select ld.id
              from logistic_lading_details ld
             where ld.auction_id = uo.auction_id)
          /*????????????*/
       and not exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '8')
               ;

begin
  BEGIN

    for result_user_orders in cur_user_orders loop

      /*????????????????????????????????????????*/
      select count(1)
        into v_order_count
        from storage_wait_charges
       where user_order_id = result_user_orders.id;


      /*??????????????????????*/
      if v_order_count = 0 then

        /* 1??????????????????????????*/
        /* ??????????????(??????????4??20??????????????)????????
        ??????????????????????????????30??????????????????
        ????????????????????(????????+30??)??????????????*/
        if result_user_orders.end_date < v_temp_date then
          v_start_at := v_temp_date + 30;
        else
         --update by liujing 2013-09-05
          --????????????????????????????????????
          --??????????????????????????????2013-09-09 00:00:00????????????????????????????????????????????????????????30??
          --??????????????????????????2013-09-09 00:00:00????????????????????????????????????????????????????????60??
          if result_user_orders.end_date  <= v_temp_date_2 then
              v_start_at := result_user_orders.end_date + 30;
          else
              v_start_at := result_user_orders.end_date + 60;
          end if;
        end if;

        /*??????????????????????????????????????????????????????????????????*/
        /*??????????????????????????????????????????????????????????????????*/
        if v_start_at < v_end_at then

          /*2????????????????*/
          /*????????????????????????????????????????????*/
          if result_user_orders.storage_charges = '0' then
            v_position := 1;
          elsif result_user_orders.storage_charges = '1' then
            v_position := 2;
          elsif result_user_orders.storage_charges = '2' then
            v_position := 3;
          end if;

          select to_number(regexp_substr(ac.storage_charge_rate,
                                         '[^\]+',
                                         1,
                                         v_position))
            into v_charge_rate
            from auction_categories ac
           where ac.id = result_user_orders.auction_category_id;

          /*3????????????*/
          /*??????????????*(??????????????-??????????????)????????????????????????????????*/
          v_storage_charge := v_charge_rate * ceil(v_end_at - v_start_at);

          /*4??????????????*/
          insert into storage_wait_charges
            (id,
             user_order_id,
             user_id,
             charge_rate,
             wait_charges,
             days,
             start_at,
             end_at)
          values
            (storage_wait_charges_seq.nextval,
             result_user_orders.id,
             result_user_orders.user_id,
             v_charge_rate,
             v_storage_charge,
             ceil(v_end_at - v_start_at),
             v_start_at,
             v_end_at);

        end if;
      else

        /*??????????????*/
        /*????????????????????????????????????????????23??59??59??
        ??????????????????????????????????????????*(??????????????-??????????????)????????????????????????????????*/
        update storage_wait_charges awc
           set awc.end_at       = v_end_at,
               awc.wait_charges = awc.charge_rate *
                                  ceil(v_end_at - awc.start_at),
               awc.days         = ceil(v_end_at - awc.start_at)
         where awc.user_order_id = result_user_orders.id;

      end if;

    end loop;
    commit;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;
end P_STORAGE_CHARGES_UNSHIPPED;


 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_CHARGES_UNSHIPPED_Z
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_CHARGES_UNSHIPPED_Z" is
  /*?????? ??????????????????????*/
  v_order_count    NUMBER := 0; /*??????????*/
  v_charge_rate    NUMBER(16, 2) := 0.00; /*????????*/
  v_position       NUMBER := 1; /*????????????????????????????????????????*/
  v_start_at       DATE; /*??????????????????*/
  v_end_at         DATE := TRUNC(SYSDATE) - 1 / 24 / 60 / 60; /*?????????????????????????????????? 23:59:59??*/
  v_storage_charge NUMBER(16, 2);
  v_temp_date      DATE := to_date('2014-01-26 00:00:00',
                                   'yyyy-mm-dd hh24:mi:ss');
  /*  ????????????????????
   ??????????????30??(??????????????????23??59??59??)
   ??????????
  ??????????????
  ??????????????
   ??????????*/
  cursor cur_user_orders is

    select uo.id,
           uo.user_id,
           uo.user_name,
           uo.pay_date,
           uo.end_date,
           uo.auction_id,
           (select decode(au.storage_charges,null,'0',au.storage_charges)
              from auctions au
             where id = uo.auction_id) storage_charges,
           (select au.auction_category_id
              from auctions au
             where au.id = uo.auction_id) auction_category_id
      from user_orders uo
    /*??????????????*/
     where uo.status in ('0', '1')
          /*??????????????30??(??????????????????23??59??59??)*/
       and uo.end_date < TRUNC(SYSDATE) - 1 / 24 / 60 / 60 - 30
          /*??????????*/
       and uo.user_refund_id is null
          /*??????????*/
       and not exists (select id
              from users u
             where u.id = uo.user_id
               and u.user_lang = '2')
          /*??????*/
       and uo.logistic_detail_id is null
          /*??????*/
       and not exists (select ld.id
              from logistic_lading_details ld
             where ld.auction_id = uo.auction_id)
          /*????????????*/
       and not exists (select vwli.logisticStatus
              from v_wms_logisticstatus_info vwli
             where vwli.auctionNo = uo.auction_no
               and vwli.logisticStatus = '8')
        and uo.auction_no='64215006';

begin
  BEGIN

    for result_user_orders in cur_user_orders loop

      /*????????????????????????????????????????*/
      select count(1)
        into v_order_count
        from storage_wait_charges
       where user_order_id = result_user_orders.id;


      /*??????????????????????*/
      if v_order_count = 0 then

        /* 1??????????????????????????*/
        /* ??????????????(??????????4??20??????????????)????????
        ??????????????????????????????30??????????????????
        ????????????????????(????????+30??)??????????????*/
        if result_user_orders.end_date < v_temp_date then
          v_start_at := v_temp_date + 30;
        else
          v_start_at := result_user_orders.end_date + 30;
        end if;

        /*??????????????????????????????????????????????????????????????????*/
        /*??????????????????????????????????????????????????????????????????*/
        if v_start_at < v_end_at then

          /*2????????????????*/
          /*????????????????????????????????????????????*/
          if result_user_orders.storage_charges = '0' then
            v_position := 1;
          elsif result_user_orders.storage_charges = '1' then
            v_position := 2;
          elsif result_user_orders.storage_charges = '2' then
            v_position := 3;
          end if;

          select to_number(regexp_substr(ac.storage_charge_rate,
                                         '[^\]+',
                                         1,
                                         v_position))
            into v_charge_rate
            from auction_categories ac
           where ac.id = result_user_orders.auction_category_id;

          /*3????????????*/
          /*??????????????*(??????????????-??????????????)????????????????????????????????*/
          v_storage_charge := v_charge_rate * ceil(v_end_at - v_start_at);

          /*4??????????????*/
          insert into storage_wait_charges
            (id,
             user_order_id,
             user_id,
             charge_rate,
             wait_charges,
             days,
             start_at,
             end_at)
          values
            (storage_wait_charges_seq.nextval,
             result_user_orders.id,
             result_user_orders.user_id,
             v_charge_rate,
             v_storage_charge,
             ceil(v_end_at - v_start_at),
             v_start_at,
             v_end_at);

        end if;
      else

        /*??????????????*/
        /*????????????????????????????????????????????23??59??59??
        ??????????????????????????????????????????*(??????????????-??????????????)????????????????????????????????*/
        update storage_wait_charges awc
           set awc.end_at       = v_end_at,
               awc.wait_charges = awc.charge_rate *
                                  ceil(v_end_at - awc.start_at),
               awc.days         = ceil(v_end_at - awc.start_at)
         where awc.user_order_id = result_user_orders.id;

      end if;

    end loop;
    commit;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;
end P_STORAGE_CHARGES_UNSHIPPED_z;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_DEDUCTED
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_DEDUCTED" is

  v_sql                 varchar2(4000);
  v_storage_charges_id  number(38);
  v_deducted_at         date := TRUNC(SYSDATE) - 2 / 24 / 60 / 60;
  v_storage_charges     number(16, 2);
  v_charge_rate         number(16, 2) := 0.00; /*仓储费率*/
  v_auction_category_id number(16, 2);
  v_position            number := 1; /*根据拍品体积大小设置对应拍品分类中的大小*/
  v_account_old         number(16, 2);
  v_user_name           varchar2(255);

  type cur_type is ref cursor;
  cur_wait_charges cur_type;
  res_wait_charges storage_wait_charges%rowtype;

  /*按照客户汇总待缴仓储费*/
  cursor cur_wait_user_charge is
    select uo.user_id, sum(swc.wait_charges) wait_charges
      from storage_wait_charges swc, user_orders uo
     where swc.user_order_id = uo.id
          /*待缴费用大于0*/
       and swc.wait_charges > 0
          /*已支付*/
       and uo.status = '1'
     group by uo.user_id;

begin
  BEGIN

    for result_wait_user_charge in cur_wait_user_charge loop
      /*已缴仓储费汇总ID*/
      select storage_charges_seq.nextval
        into v_storage_charges_id
        from dual;
     /*查找客户姓名*/
      select u.true_name
        into v_user_name
        from users u
       where id = result_wait_user_charge.user_id;

      /*已缴仓储费汇总（按照客户汇总）*/
      insert into storage_charges
        (id, user_id, user_name, charges, deducted_at)
      values
        (v_storage_charges_id,
         result_wait_user_charge.user_id,
         v_user_name,
         result_wait_user_charge.wait_charges,
         v_deducted_at);

      /*查询客户账户余额*/
      select total_account
        into v_account_old
        from users
       where id = result_wait_user_charge.user_id;

      /*创建客户流水*/
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         account_old,
         account_new,
         direction,
         finance_type,
         finance_date,
         remarks,
         status,
         created_at)
      values
        (user_accounts_seq.nextval,
         result_wait_user_charge.user_id,
         v_storage_charges_id,
         'STORAGE_CHARGES',
         result_wait_user_charge.wait_charges,
         v_account_old,
         v_account_old - result_wait_user_charge.wait_charges,
         '1',
         '27',
         v_deducted_at,
         '待缴仓储费扣除',
         '1',
         v_deducted_at);
      /*更新用户账户余额*/
      update users us
         set us.account       = decode(us.account, null, 0.00, us.account) -
                                result_wait_user_charge.wait_charges,
             us.total_account = decode(us.total_account,
                                       null,
                                       0.00,
                                       us.total_account) -
                                result_wait_user_charge.wait_charges
       where us.id = result_wait_user_charge.user_id;

      /* 为已缴仓储费明细准备数据*/
      v_sql := 'select s.id,
                       s.user_order_id,
                       s.charge_rate,
                       s.wait_charges,
                       s.days,
                       s.start_at,
                       s.end_at,
                       s.user_id
                    from storage_wait_charges s , user_orders uo
                   where s.user_order_id = uo.id
                   and s.wait_charges > 0
                   and uo.status = ''1''
                   and s.user_id = ' || result_wait_user_charge.user_id;

      OPEN cur_wait_charges FOR v_sql;
      LOOP
        FETCH cur_wait_charges
          INTO res_wait_charges.id, res_wait_charges.user_order_id, res_wait_charges.charge_rate, res_wait_charges.wait_charges, res_wait_charges.days, res_wait_charges.start_at, res_wait_charges.end_at, res_wait_charges.user_id;

        EXIT WHEN cur_wait_charges%NOTFOUND;
        /*已缴仓储费明细（按照交易单添加）*/
        insert into storage_completed_charges
          (id,
           user_order_id,
           charge_rate,
           days,
           charges,
           start_at,
           end_at,
           deducted_at,
           storage_charges_id)
        values
          (storage_completed_charges_seq.nextval,
           res_wait_charges.user_order_id,
           res_wait_charges.charge_rate,
           res_wait_charges.days,
           res_wait_charges.wait_charges,
           res_wait_charges.start_at,
           res_wait_charges.end_at,
           v_deducted_at,
           v_storage_charges_id);

        /*查询拍品体积大小、拍品分类*/
        select au.storage_charges, au.auction_category_id
          into v_storage_charges, v_auction_category_id
          from auctions au
         where id = (select auction_id
                       from user_orders
                      where id = res_wait_charges.user_order_id);

        /*1、初始化仓储费率*/
        /*根据拍品分类表中仓储费率初始化交易单仓储费率*/
        if v_storage_charges = '0' then
          v_position := 1;
        elsif v_storage_charges = '1' then
          v_position := 2;
        elsif v_storage_charges = '2' then
          v_position := 3;
        end if;
        /*查询仓储费率*/
        select to_number(regexp_substr(ac.storage_charge_rate,
                                       '[^\]+',
                                       1,
                                       v_position))
          into v_charge_rate
          from auction_categories ac
         where ac.id = v_auction_category_id;

        /*更新待缴费用*/
        update storage_wait_charges swc
        /* 将待缴仓储费更新为0*/
           set swc.wait_charges = 0.00,
               /*将已缴仓储费更新为：当前已缴仓储费+待缴仓储费*/
               swc.completed_charges = swc.completed_charges +
                                       res_wait_charges.wait_charges,
               swc.start_at          = TRUNC(SYSDATE),
               swc.end_at            = TRUNC(SYSDATE),
               swc.days              = 0,
               swc.charge_rate       = v_charge_rate
         where swc.id = res_wait_charges.id;

      END LOOP;
    end loop;
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;

end P_STORAGE_DEDUCTED;


 
/

-- ----------------------------
-- Procedure structure for P_STORAGE_DEDUCTED_ZHUZHU
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_STORAGE_DEDUCTED_ZHUZHU" is

  v_sql                 varchar2(4000);
  v_storage_charges_id  number(38);
  v_deducted_at         date := TRUNC(SYSDATE) - 2 / 24 / 60 / 60;
  v_storage_charges     number(16, 2);
  v_charge_rate         number(16, 2) := 0.00; /*��������*/
  v_auction_category_id number(16, 2);
  v_position            number := 1; /*����������������������������������������*/
  v_account_old         number(16, 2);
  v_user_name           varchar2(255);

  type cur_type is ref cursor;
  cur_wait_charges cur_type;
  res_wait_charges storage_wait_charges%rowtype;

  /*����������������������*/
  cursor cur_wait_user_charge is
    select uo.user_id, sum(swc.wait_charges) wait_charges
      from storage_wait_charges swc, user_orders uo
     where swc.user_order_id = uo.id
          /*������������0*/
       and swc.wait_charges > 0
          /*������*/
       and uo.status = '1'
       and uo.user_id='2038346'
     group by uo.user_id;

begin
  BEGIN

    for result_wait_user_charge in cur_wait_user_charge loop
      /*��������������ID*/
      select storage_charges_seq.nextval
        into v_storage_charges_id
        from dual;
     /*������������*/
      select u.true_name
        into v_user_name
        from users u
       where id = result_wait_user_charge.user_id;

      /*������������������������������*/
      insert into storage_charges
        (id, user_id, user_name, charges, deducted_at)
      values
        (v_storage_charges_id,
         result_wait_user_charge.user_id,
         v_user_name,
         result_wait_user_charge.wait_charges,
         v_deducted_at);

      /*����������������*/
      select total_account
        into v_account_old
        from users
       where id = result_wait_user_charge.user_id;

      /*������������*/
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         account_old,
         account_new,
         direction,
         finance_type,
         finance_date,
         remarks,
         status,
         created_at)
      values
        (user_accounts_seq.nextval,
         result_wait_user_charge.user_id,
         v_storage_charges_id,
         'STORAGE_CHARGES',
         result_wait_user_charge.wait_charges,
         v_account_old,
         v_account_old - result_wait_user_charge.wait_charges,
         '1',
         '27',
         v_deducted_at,
         '��������������',
         '1',
         v_deducted_at);
      /*����������������*/
      update users us
         set us.account       = decode(us.account, null, 0.00, us.account) -
                                result_wait_user_charge.wait_charges,
             us.total_account = decode(us.total_account,
                                       null,
                                       0.00,
                                       us.total_account) -
                                result_wait_user_charge.wait_charges
       where us.id = result_wait_user_charge.user_id;

      /* ������������������������*/
      v_sql := 'select s.id,
                       s.user_order_id,
                       s.charge_rate,
                       s.wait_charges,
                       s.days,
                       s.start_at,
                       s.end_at,
                       s.user_id
                    from storage_wait_charges s , user_orders uo
                   where s.user_order_id = uo.id
                   and s.wait_charges > 0  
                   and uo.status = ''1''
                   and s.user_id = ' || result_wait_user_charge.user_id;

      OPEN cur_wait_charges FOR v_sql;
      LOOP
        FETCH cur_wait_charges
          INTO res_wait_charges.id, res_wait_charges.user_order_id, res_wait_charges.charge_rate, res_wait_charges.wait_charges, res_wait_charges.days, res_wait_charges.start_at, res_wait_charges.end_at, res_wait_charges.user_id;

        EXIT WHEN cur_wait_charges%NOTFOUND;
        /*��������������������������������*/
        insert into storage_completed_charges
          (id,
           user_order_id,
           charge_rate,
           days,
           charges,
           start_at,
           end_at,
           deducted_at,
           storage_charges_id)
        values
          (storage_completed_charges_seq.nextval,
           res_wait_charges.user_order_id,
           res_wait_charges.charge_rate,
           res_wait_charges.days,
           res_wait_charges.wait_charges,
           res_wait_charges.start_at,
           res_wait_charges.end_at,
           v_deducted_at,
           v_storage_charges_id);

        /*��������������������������*/
        select au.storage_charges, au.auction_category_id
          into v_storage_charges, v_auction_category_id
          from auctions au
         where id = (select auction_id
                       from user_orders
                      where id = res_wait_charges.user_order_id);

        /*1����������������*/
        /*��������������������������������������������*/
        if v_storage_charges = '0' then
          v_position := 1;
        elsif v_storage_charges = '1' then
          v_position := 2;
        elsif v_storage_charges = '2' then
          v_position := 3;
        end if;
        /*������������*/
        select to_number(regexp_substr(ac.storage_charge_rate,
                                       '[^\]+',
                                       1,
                                       v_position))
          into v_charge_rate
          from auction_categories ac
         where ac.id = v_auction_category_id;

        /*������������*/
        update storage_wait_charges swc
        /* ������������������0*/
           set swc.wait_charges = 0.00,
               /*����������������������������������+����������*/
               swc.completed_charges = swc.completed_charges +
                                       res_wait_charges.wait_charges,
               swc.start_at          = TRUNC(SYSDATE),
               swc.end_at            = TRUNC(SYSDATE),
               swc.days              = 0,
               swc.charge_rate       = v_charge_rate
         where swc.id = res_wait_charges.id;

      END LOOP;
    end loop;
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
      ROLLBACK;
      RETURN;
  END;

end P_STORAGE_DEDUCTED_zhuzhu;

 
 
 
/

-- ----------------------------
-- Procedure structure for P_SYNC_HOSANE_AUCTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_SYNC_HOSANE_AUCTION"(SPECIAL_CODE VARCHAR) IS
BEGIN
  BEGIN
    DELETE HOSANE_AUCTION WHERE specialcode = SPECIAL_CODE;
    INSERT INTO HOSANE_AUCTION
      SELECT * FROM auction@HOSANE a WHERE a.specialcode = SPECIAL_CODE;
    DELETE HOSANE_AUCTION_ZHAO;
    INSERT INTO HOSANE_AUCTION_ZHAO
      SELECT * FROM auction_zhao@HOSANE;
    DELETE HOSANE_AUCTION_EXPAND T WHERE T.AUCTION_CODE IN
      (SELECT A.AUCTIONCODE FROM HOSANE_AUCTION A WHERE A.SPECIALCODE = SPECIAL_CODE);
    INSERT INTO HOSANE_AUCTION_EXPAND
      SELECT * FROM AUCTION_EXPAND@HOSANE T WHERE T.AUCTION_CODE IN
      (SELECT A.AUCTIONCODE FROM HOSANE_AUCTION A WHERE A.SPECIALCODE = SPECIAL_CODE);
    DELETE HOSANE_ARTISTS WHERE ARTISTID>3851;
    INSERT INTO HOSANE_ARTISTS
      SELECT * FROM ARTISTS@HOSANE A WHERE A.ARTISTID>3851;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RETURN;
  END;
  COMMIT;
END P_SYNC_HOSANE_AUCTION;


 
/

-- ----------------------------
-- Procedure structure for P_TEST_TRANSFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TEST_TRANSFER"
(
	P_USER_ID            IN NUMBER,
	P_AMOUNT             IN NUMBER,
	P_BAIL_OF_PROPORTION IN NUMBER, --保证金比例
	P_DIRECTION          IN NUMBER,
	/*
                                      0: 余额转保证金
                                      1: 保证金转余额
                                      */
	RESULT_STATUS OUT NUMBER
  /*
                                      0:ok
                                      1:用户不存在
                                      2:金额不足
                                      3:其它
                                      4:用户被冻结
                                      */
) IS
  /*
    作者:李征
    日期:2012-06-02
    描述:金额转换,6.10号新版保证金额度转换比例1:50,勿删
  */
  V_ACCOUNT       NUMBER;
  V_ACCOUNT_TOTAL NUMBER;
  V_BAILS         NUMBER;
  V_USERNAME      VARCHAR(500);
  V_QUOTA         NUMBER;
  V_STATUS        VARCHAR2(255);
  NOW             DATE := SYSDATE;
  V_ACCOUNT_ID    NUMBER;
  V_MRGIN_ID      NUMBER;
BEGIN
  BEGIN
    SELECT ACCOUNT, TOTAL_ACCOUNT, BAILS, TRUE_NAME, QUOTA, STATUS
      INTO V_ACCOUNT,
           V_ACCOUNT_TOTAL,
           V_BAILS,
           V_USERNAME,
           V_QUOTA,
           V_STATUS
      FROM USERS
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;
  
  /*用户冻结不能操作余额保证金*/
  IF V_STATUS != 0 THEN
    ROLLBACK;
    RESULT_STATUS := 4;
    RETURN;
  END IF;
  IF V_QUOTA IS NULL THEN
    V_QUOTA := 0;
  END IF;
RESULT_STATUS := P_DIRECTION;
return;
  /*余额转保证金*/
  IF P_DIRECTION = 0 THEN
    /*余额不足*/
    IF V_ACCOUNT IS NULL OR V_ACCOUNT < P_AMOUNT THEN
      RESULT_STATUS := 2;
      RETURN;
    END IF;

 RESULT_STATUS := 51;
 return;
    BEGIN

      /*更新用户余额,保证金信息*/
      UPDATE USERS
         SET BAILS         = BAILS + P_AMOUNT,
             ACCOUNT       = ACCOUNT - P_AMOUNT,
             TOTAL_ACCOUNT = TOTAL_ACCOUNT - P_AMOUNT,
             TOTAL_QUOTA   = TOTAL_QUOTA + P_AMOUNT * P_BAIL_OF_PROPORTION,
             QUOTA         = V_QUOTA + P_AMOUNT * P_BAIL_OF_PROPORTION
       WHERE ID = P_USER_ID;

      SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO V_ACCOUNT_ID FROM DUAL;

      SELECT USER_MARGINS_SEQ.NEXTVAL INTO V_MRGIN_ID FROM DUAL;

      /*余额流水明细*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_ID,
         FINANCE_NAME,
         SOURCE_ID,
         SOURCE_TYPE,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         CREATED_AT)
      VALUES
        (V_ACCOUNT_ID,
         P_USER_ID,
         P_AMOUNT,
         4,
         NOW,
         P_USER_ID,
         V_USERNAME,
         V_MRGIN_ID,
         'USER_MARGINS',
         V_ACCOUNT_TOTAL,
         V_ACCOUNT_TOTAL - P_AMOUNT,
         '1',
         NOW);

      /*保证金流水明细*/
      INSERT INTO USER_MARGINS
        (ID,
         USER_ID,
         USER_NAME,
         AMOUNT,
         MARGIN_TYPE,
         CREATED_AT,
         ADMIN_ID,
         ADMIN_NAME,
         DIRECTION,
         RESOURCE_ID,
         RESOURCE_TYPE,
         ACCOUNT_OLD,
         ACCOUNT_NEW)
      VALUES
        (V_MRGIN_ID,
         P_USER_ID,
         V_USERNAME,
         P_AMOUNT,
         '1',
         NOW,
         P_USER_ID,
         V_USERNAME,
         '0',
         V_ACCOUNT_ID,
         'USER_ACCOUNTS',
         v_bails,
         v_bails + P_AMOUNT);

      /*额度流水*/
      INSERT INTO USER_QUOTAS
        (ID,
         USER_ID,
         ADMIN_ID,
         ADMIN_NAME,
         AMOUNT,
         QUOTA_TYPE,
         OPERATE_TYPE,
         DIRECTION,
         CREATED_AT)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL,
         P_USER_ID,
         P_USER_ID,
         V_USERNAME,
         P_AMOUNT * P_BAIL_OF_PROPORTION,
         '1',
         '0',
         '0',
         NOW);
    EXCEPTION
      WHEN OTHERS THEN
        RESULT_STATUS := 3;
        ROLLBACK;
        RETURN;
    END;
    RESULT_STATUS := 0;
    RETURN;

    /*保证金转余额*/
  ELSIF P_DIRECTION = 1 THEN
    /*保证金不足*/
    IF V_BAILS IS NULL OR V_BAILS < P_AMOUNT OR
       V_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION < 0 THEN
      RESULT_STATUS := 2;
      RETURN;
    END IF;
    BEGIN
      /*更新用户信息*/
      UPDATE USERS
         SET BAILS         = BAILS - P_AMOUNT,
             ACCOUNT       = ACCOUNT + P_AMOUNT,
             TOTAL_ACCOUNT = TOTAL_ACCOUNT + P_AMOUNT,
             TOTAL_QUOTA   = TOTAL_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION,
             QUOTA         = V_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION
       WHERE ID = P_USER_ID;

      SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO V_ACCOUNT_ID FROM DUAL;

      SELECT USER_MARGINS_SEQ.NEXTVAL INTO V_MRGIN_ID FROM DUAL;

      /*用户余额流水明细*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_ID,
         FINANCE_NAME,
         DIRECTION,
         SOURCE_ID,
         SOURCE_TYPE,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         CREATED_AT)
      VALUES
        (V_ACCOUNT_ID,
         P_USER_ID,
         P_AMOUNT,
         2,
         NOW,
         P_USER_ID,
         V_USERNAME,
         '0',
         V_MRGIN_ID,
         'USER_MARGINS',
         V_ACCOUNT_TOTAL,
         V_ACCOUNT_TOTAL + P_AMOUNT,
         NOW);

      /*用户保证金流水明细*/
      INSERT INTO USER_MARGINS
        (ID,
         USER_ID,
         USER_NAME,
         AMOUNT,
         MARGIN_TYPE,
         CREATED_AT,
         ADMIN_ID,
         ADMIN_NAME,
         DIRECTION,
         RESOURCE_ID,
         RESOURCE_TYPE,
         ACCOUNT_OLD,
         ACCOUNT_NEW)
      VALUES
        (V_MRGIN_ID,
         P_USER_ID,
         V_USERNAME,
         P_AMOUNT,
         '0',
         NOW,
         P_USER_ID,
         V_USERNAME,
         '1',
         V_ACCOUNT_ID,
         'USER_ACCOUNTS',
         v_bails,
         v_bails - P_AMOUNT);

      /*额度流水*/
      INSERT INTO USER_QUOTAS
        (ID,
         USER_ID,
         ADMIN_ID,
         ADMIN_NAME,
         AMOUNT,
         QUOTA_TYPE,
         OPERATE_TYPE,
         DIRECTION,
         CREATED_AT)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL,
         P_USER_ID,
         P_USER_ID,
         V_USERNAME,
         P_AMOUNT * P_BAIL_OF_PROPORTION,
         '3',
         '0',
         '1',
         NOW);
    EXCEPTION
      WHEN OTHERS THEN
        RESULT_STATUS := 3;
        ROLLBACK;
        RETURN;
    END;
    RESULT_STATUS := 0;
    RETURN;
  END IF;
END P_TEST_TRANSFER;

 
/

-- ----------------------------
-- Procedure structure for P_TMP_USER_INFO
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_TMP_USER_INFO"
(
       p_id IN NUMBER,
       p_name IN VARCHAR2,
       p_postcode IN NUMBER,
       p_address IN VARCHAR2,
       p_exec_code OUT NUMBER,
       p_exec_msg OUT VARCHAR2
) is
begin
  INSERT INTO tmp_user_info(id,NAME,postcode,address)
  VALUES(p_id,p_name,p_postcode,p_address);
  p_exec_code := 0;
  p_exec_msg := 'exec success!';
  EXCEPTION
    WHEN too_many_rows THEN
      p_exec_code := 1;
      p_exec_msg := '语句符合条件的记录有多条返回';
    WHEN value_error THEN
      p_exec_code := 2;
      p_exec_msg := '转换类型时错误';
end p_tmp_user_info;

declare
  cursor example3Cur is select * from tmp_user_info;
  begin
    for me in example3Cur
      loop
        dbms_output.put_line(example3Cur%rowCount||','||me.id||','||me.name||','||me.address);
      end loop;
  end;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_TRADE_AUTODELAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_AUTODELAY"
 is
  /**
     作者:成玉芬
     日期:2011.10.27
     描述：交易单自动延期
     延期规则创建之后生成的交易单并符合延期规则 (自动延期)
  */

  --查询所有有效的延期规则
  cursor cur_delay is
    select * from (select * from user_order_delays order by end_at desc) where rownum=1;
begin

 for result_delay in cur_delay loop
  --系统时间过了延期设置的结束时间，自动延期设置自动失效
  if result_delay.end_at > sysdate then
     /*自动延期，并在支付时限上延期天数和小时(已经延期过的或在客户未支付处理延期过的不可再延期)
      是否延期为0时,则此交易单还未延期过*/
      update user_orders s
         set s.is_auto_delay  = 1,
             s.limit_pay_date = (s.limit_pay_date + result_delay.delay_days) +
                                (result_delay.delay_hours / 24)
       where s.created_at > result_delay.created_at
       and s.created_at > result_delay.start_at
       and s.created_at < result_delay.end_at
       and s.is_delay = 0
       and s.is_auto_delay = 0
       and s.status = 0;

      /*自动为交易单添加一条延期备注*/
      insert into common_remarks s
        (id,
         source_id,
         source_type,
         custom_type,
         content,
         admin_name,
         status,
         created_at)
      values
        (common_remarks_seq.nextval,
         result_delay.id,
         'USER_ORDER_DELAYS',
         '交易单自动延期',
         '交易单自动延期' || result_delay.delay_days || '天' || result_delay.delay_hours || '小时',
         '系统自动添加',
         '1',
         sysdate);
  end if;
  end loop;
end p_trade_autodelay;


 
/

-- ----------------------------
-- Procedure structure for P_TRADE_AUTODELAY_1
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_AUTODELAY_1" (
                                                    p_start_at in date, --开始时间
                                                    p_end_at   in date, --结束时间
                                                    p_created_at in date,  --创建时间
                                                    p_admin_id in number,
                                                    p_admin_name in varchar2
                                                 ) is
/**
     作者:成玉芬
     日期:2011.10.27
     描述：交易单自动延期
  */
  v_delayDays  number; --定义保存存延期天数的变量
  v_delayHours number; --定义保存延期小时数的变量

  /*延期规则创建之后生成的交易单并符合延期规则 (自动延期)*/
  cursor user_order_autoDelay is
    select id from user_orders
     where created_at > p_created_at and created_at > p_start_at and created_at < p_end_at
     and is_delay = 0 and is_auto_delay = 0 and status=0;

begin
  --查出延期规则对应延期的天数保存到变量里
  if p_start_at is not null and p_end_at is not null then
    select delay_days, delay_hours
      into v_delayDays, v_delayHours
      from user_order_delays
     where start_at = p_start_at
       and end_at = p_end_at;
  end if;

 if p_end_at > sysdate then --系��时间过了延期设置的结束时间，自动延期设置自动失效
   --自动延期，并在支付时限上延期天数和小时(已经延期过的或在客户未支付处理延期过的不可再延期)
    for result_autoDelay in user_order_autoDelay loop
        /*是否延期为0时,则此交易单还未延期过*/
           update user_orders s
              set s.is_auto_delay       = 1,
                  s.limit_pay_date = (s.limit_pay_date + v_delayDays) +
                                     (v_delayHours / 24)
            where id = result_autoDelay.id;
            if v_delayHours is null then
               v_delayHours:=0;
            end if;
            /*自动为交易单添加一条延期备注*/
           insert into common_remarks s
             (id,
              source_id,
              source_type,
              custom_type,
              content,
              status,
              created_at)
           values
             (common_remarks_seq.nextval,
              result_autoDelay.id,
              'USER_ORDERS',
              '交易单自动延期',
              '交易单自动延期' || v_delayDays || '天' || v_delayHours || '小时',
              '1',
              sysdate);
    end loop;
   end if;
end p_trade_autodelay_1;


 

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_TRADE_AUTODELAY1
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_AUTODELAY1"
 is
  /**
     作者:成玉芬
     日期:2011.10.27
     描述：交易单自动延期   
     延期规则创建之后生成的交易单并符合延期规则 (自动延期)
  */

  --查询所有有效的延期规则
  cursor cur_delay is
    select * from user_order_delays where status=1;
     
begin

 for result_delay in cur_delay loop
  --系统时间过了延期设置的结束时间，自动延期设置自动失效
  if result_delay.end_at > sysdate then    
     /*自动延期，并在支付时限上延期天数和小时(已经延期过的或在客户未支付处理延期过的不可再延期)    
      是否延期为0时,则此交易单还未延期过*/
      update user_orders s
         set s.is_auto_delay  = 1,
             s.limit_pay_date = (s.limit_pay_date + result_delay.delay_days) +
                                (result_delay.delay_hours / 24)
       where s.created_at > result_delay.created_at
       and s.created_at > result_delay.start_at
       and s.created_at < result_delay.end_at
       and s.is_delay = 0
       and s.is_auto_delay = 0
       and s.status = 0;     
      
      /*自动为交易单添加一条延期备注*/
      insert into common_remarks s
        (id,
         source_id,
         source_type,
         custom_type,
         content,
         admin_name,
         status,
         created_at)
      values
        (common_remarks_seq.nextval,
         result_delay.id,
         'USER_ORDER_DELAYS',
         '交易单自动延期',
         '交易单自动延期' || result_delay.delay_days || '天' || result_delay.delay_hours || '小时',
         '系统自动添加',
         '1',
         sysdate);
  end if;
  end loop;
end p_trade_autodelay1;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_TRADE_DELAYDETAILS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_DELAYDETAILS" (p_start_at in date, --延期开始时间
                                                     p_end_at   in date --延期结束时间
                                                     ) is
  /**
     作者:成玉芬
     日期:2011.10.27
     描述：查询指定延期时间内的相关交易单 （后台调用）
  */
  v_delayDays  number; --保存延期天数
  v_delayHours number; --保存延期小时数
begin
 --查出指定时间内延期的天数保存到变量里
  select delay_days, delay_hours
    into v_delayDays, v_delayHours
    from user_order_delays
   where start_at = p_start_at
     and end_at = p_end_at;

  declare
   --定义延期交易单查询游标 (查询交易单生成时间在设置时间范围之内延期的交易单)
    cursor p_delay is
      select o.id,
             o.auction_no,
             o.auction_name,
             o.user_id,
             o.user_name,
             o.total_amount,
             o.created_at,
             ((o.limit_pay_date - v_delayDays) - (v_delayHours / 24)) as start_limit_pay,
             o.limit_pay_date
        from user_orders o
       where (o.is_delay = 1 or o.is_auto_delay = 1)
         and o.created_at > p_start_at
         and o.created_at < p_end_at;

  begin
    --删除临时表中的数据
    execute immediate 'delete from temp_userorders_delay';

  --循环游标并将查询出的结果插入临时表中
    for result_delay in p_delay loop
      if result_delay.id is not null then
        insert into temp_userorders_delay
          (id,
           order_id,
           auction_no,
           auction_name,
           user_id,
           user_name,
           total_amount,
           created_at,
           first_limit_pay,
           delay_limit_pay)
        values
          (TEMP_USERORDERS_DELAY_SEQ.nextval,
           result_delay.id,
           result_delay.auction_no,
           result_delay.auction_name,
           result_delay.user_id,
           result_delay.user_name,
           result_delay.total_amount,
           result_delay.created_at,
           result_delay.start_limit_pay,
           result_delay.limit_pay_date);
      end if;
    end loop;
  end;
  commit;
  return;
end p_trade_delaydetails;


 
/

-- ----------------------------
-- Procedure structure for P_TRADE_DELAYSTATUS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_DELAYSTATUS" as
       /*
          @author chengyufen
          2011.11.2
          修改交易单的延期状态 （后台调用）
       */
       cursor cusel is select de.end_at from user_order_delays de;

begin
     for result_delay in cusel loop
         --如果当前系统时间过了延期设置的结束时间，则此延期设置自动失效
         if result_delay.end_at is not null then
           if sysdate > result_delay.end_at then
              update user_order_delays set status = 0 where sysdate>end_at;
           end if;
         end if;
     end loop;
     commit;
end p_trade_delayStatus;


 
/

-- ----------------------------
-- Procedure structure for P_TRADE_HANDERDELAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_HANDERDELAY" (
                                              p_start_at in date, --开始时间
                                              p_end_at   in date, --结束时间
                                              p_created_at in date,  --创建时间
                                              p_admin_id in number,
                                              p_admin_name in varchar2,
                                              result_status out number   --1.成功 2.没有可延期的交易单
                                              ) is
  /**
     作者:成玉芬
     日期:2011.10.27
     描述：交易单手动延期
  */
  v_delayDays  number; --定义保存存延期天数的变量
  v_delayHours number; --定义保存延期小时数的变量
  v_count number;

  /*延期规则创建之前生成的交易单并符合延期规则 (手动延期)*/
  cursor user_order_delay is
    select id from user_orders
     where created_at < p_created_at and created_at > p_start_at and created_at < p_end_at
     and is_delay = 0 and is_auto_delay = 0 and status=0;

begin
  --查出延期规则对应延期的天数保存到变量里
  if p_start_at is not null and p_end_at is not null then
    select delay_days, delay_hours
      into v_delayDays, v_delayHours
      from user_order_delays
     where start_at = p_start_at
       and end_at = p_end_at;
  end if;

  begin
    /*统计手动延期的交易单数量*/
    select count(id) into v_count from user_orders
     where created_at < p_created_at and created_at > p_start_at and created_at < p_end_at
       and is_delay = 0 and is_auto_delay = 0 and status=0;
    if v_count = 0 then
        begin
          rollback;
          result_status := 2;
          return;
        end;
    end if;
  end;

 --手动延期，并在支付时限上延期天数和小时(已经延期过的或在客户未支付处理延期过的不可再延期)
  for result_delay in user_order_delay loop
      /*是否延期为0时,则此交易单还未延期过*/
         update user_orders s
            set s.is_delay       = 1,
                s.limit_pay_date = (s.limit_pay_date + v_delayDays) +
                                   (v_delayHours / 24)
          where id = result_delay.id;
          if v_delayHours is null then
             v_delayHours:=0;
          end if;
         /*自动为交易单添加一条延期备注*/
         insert into common_remarks s
           (id,
            source_id,
            source_type,
            custom_type,
            content,
            admin_id,
            admin_name,
            status,
            created_at)
         values
           (common_remarks_seq.nextval,
            result_delay.id,
            'UserOrder',
            '交易单统一延期',
            '交易单统一延期' || v_delayDays || '天' || v_delayHours || '小时',
            p_admin_id,
            p_admin_name,
            '1',
            sysdate);
  end loop;
  result_status := 1;
end p_trade_handerDelay;


 
/

-- ----------------------------
-- Procedure structure for P_TRADE_NO_PAY
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_TRADE_NO_PAY"(p_user_orders            in varchar,
                                           p_not_payment_type       in varchar,
                                           p_not_payment_reason     in varchar,
                                           p_is_freeze_customer     in varchar,
                                           p_freeze_customer_reason in varchar,
                                           p_admin_id               in number,
                                           p_admin_name             in varchar,
                                           p_output                 OUT VARCHAR) is
                                           /**
                                              0：支付成功
                                              1: 订单编号为空
                                              2：交易单状态被改变
                                              3：程序异常
                                           */

  v_now              DATE := SYSDATE; /*当前时间*/
  v_sql              VARCHAR(4000);
  v_temp             VARCHAR2(4000);
  v_split            VARCHAR2(2) := ',';
  v_order_count_temp number;
  v_user_order_id    number;

  v_user_id       number;
  v_user_name     varchar2(400);
  v_used_quota    number;
  v_user_bail_old number; /*操作前保证金余额*/
  v_user_bail_new number; /*操作后保证金余额*/
  v_account_old   number; /*操作前账户余额*/
  v_account_new   number; /*操作后账户余额*/
  v_end_price     number;
  v_amount        number; /*扣除保证金*/
  v_result_status number := 0;
  v_auction_id    number;

  v_bail_quato  NUMBER:=50;     --保证金与额度比例  50

  v_nopay_remark varchar2(4000);

begin

  IF p_user_orders IS NULL THEN
    p_output := 1;
    RAISE_APPLICATION_ERROR(-20000, 'p_user_orders cannot be null');
    return;
  ELSE
    /*统计不等于未支付状态的个数*/
    v_sql := 'select count(1) from user_orders where id in (' ||
             p_user_orders || ')  and  status != 0  and is_freeze = 1 ';
    EXECUTE IMMEDIATE v_sql
      INTO v_order_count_temp;

    /*交易单状态有发生改变*/
    if v_order_count_temp > 0 then
      begin
        rollback;
        p_output := 2;
        return;
      end;

    else

      if p_not_payment_type = '5' then
        v_nopay_remark := '交易单无理由不支付';
      else
        v_nopay_remark := '交易单有理由不支付';
      end if;

      v_temp := p_user_orders || ',';
      WHILE SUBSTR(v_temp, 1, INSTR(v_temp, v_split) - 1) IS NOT NULL LOOP

        v_user_order_id := SUBSTR(v_temp, 1, INSTR(v_temp, v_split) - 1);
        v_temp          := SUBSTR(v_temp,
                                  INSTR(v_temp, v_split) + LENGTH(v_split),
                                  LENGTH(v_temp));

        /*查询客户编号*/
        select uo.user_id,
               u.true_name,
               u.bails,
               u.total_quota,
               u.total_account,
               uo.end_price,
               uo.auction_id
          into v_user_id,
               v_user_name,
               v_user_bail_old,
               v_used_quota,
               v_account_old,
               v_end_price,
               v_auction_id
          from user_orders uo
          left join users u on uo.user_id = u.id
         where uo.id = v_user_order_id;

        /*预存积分无效*/
        update scores
           set score_status = 2,
               admin_id     = p_admin_id,
               admin_name   = p_admin_name
         where source_id = v_user_order_id
           and score_type = 0
           and score_source = 0;

        /*修改订单状态为不支付*/
        update user_orders
           set status         = p_not_payment_type,
               admin_id       = p_admin_id,
               admin_name     = p_admin_name,
               never_pay_date = v_now,
               remarks        = p_not_payment_reason
         where id = v_user_order_id;

        /*修改拍品结算状态为待结算*/
        update auctions
           set settlement_status = 2
         where id in (select auction_id
                        from user_orders
                       where id = v_user_order_id);

        /*添加不支付理由*/
        insert into common_remarks
          (id,
           source_id,
           source_type,
           custom_type,
           content,
           created_at,
           admin_id,
           admin_name)
        values
          (common_remarks_seq.nextval,
           v_user_order_id,
           'USER_ORDERS',
           v_nopay_remark,
           p_not_payment_reason,
           v_now,
           p_admin_id,
           p_admin_name);

        /*汇总额度*/
        v_sql := 'select sum(use_quota) from user_quota_usages where user_id = ' ||
                 v_user_id ||
                 ' and status = 1  and auction_id in
               (select auction_id from user_orders where user_id = ' ||
                 v_user_id || '  and id  =  ' || v_user_order_id || ')';
        EXECUTE IMMEDIATE v_sql
          INTO v_used_quota;

        /*释放占用额度*/
        v_sql := 'update user_quota_usages set status = 0 where user_id = ' ||
                 v_user_id ||
                 ' and status = 1 and auction_id in
               (select auction_id from user_orders where user_id = ' ||
                 v_user_id || '  and  id = ' || v_user_order_id || ')';
        EXECUTE IMMEDIATE v_sql;

        /*更改客户可用额度*/
        if v_used_quota is not null then
          update users
             set quota = quota + v_used_quota
           where id = v_user_id;

          /*额度流水*/
          insert into user_quotas
            (id,
             user_id,
             amount,
             direction,
             quota_type,
             operate_type,
             admin_id,
             admin_name,
             remarks,
             created_at)
          values
            (user_quotas_seq.nextval,
             v_user_id,
             v_used_quota,
             '0', --收入
             '5', ---竞拍释放额度
             1, --人工操作，交易单不支付
             p_admin_id,
             p_admin_name,
             v_user_order_id || '订单不支付',
             v_now);
        end if;

        /*无理由不支付*/
        if p_not_payment_type = '5' then
          /*扣除保证金:结标价格=1:50*/
          v_amount := v_end_price / v_bail_quato - v_user_bail_old;
          /*保证金不够扣,先把差额，从余额转过去*/
          if v_amount > 0 then
            /*操作后余额 = 操作前余额 - 转为保证金部分*/
            v_account_new := v_account_old - v_amount;

            /*先把差额部分从余额转过去*/
            insert into user_accounts
              (id,
               user_id,
               source_id,
               source_type,
               money,
               direction,
               finance_type,
               finance_id,
               finance_name,
               finance_date,
               remarks,
               status,
               created_at,
               account_old,
               account_new)
            values
              (user_accounts_seq.nextval,
               v_user_id,
               v_user_id,
               'USERS',
               v_amount,
               '1', -- 支出
               '4', -- 余额转保证金
               p_admin_id,
               p_admin_name,
               v_now,
               v_user_order_id || '订单不支付，扣除保证金不足，先余额转保证金',
               1, -- 有效
               v_now,
               v_account_old,
               v_account_new);

            v_user_bail_new := v_user_bail_old + v_amount;
            /*保证金流水*/
            insert into user_margins
              (id,
               user_id,
               user_name,
               amount,
               account_old,
               account_new,
               direction,
               margin_type,
               remarks,
               admin_id,
               admin_name,
               created_at,
               resource_id,
               resource_type)
            values
              (user_margins_seq.nextval,
               v_user_id,
               v_user_name,
               v_amount,
               v_user_bail_old,
               v_user_bail_new,
               0, --收入
               1, --余额转出
               v_user_order_id || '订单不支付，扣除保证金不足，先余额转保证金',
               p_admin_id,
               p_admin_name,
               v_now,
               v_user_id,
               'USERS');

            /*添加额度流水*/
            insert into user_quotas
              (id,
               user_id,
               amount,
               quota_type,
               operate_type,
               admin_id,
               admin_name,
               remarks,
               created_at)
            values
              (user_quotas_seq.nextval,
               v_user_id,
               v_amount * v_bail_quato,
               1, --保证金存入
               0, --人工操作
               p_admin_id,
               p_admin_name,
               v_user_order_id || '订单不支付，扣除保证金不足，先余额转保证金',
               v_now);

            update users
               set bails         = bails + v_amount,
                   account       = account - v_amount,
                   total_account = total_account - v_amount,
                   total_quota   = total_quota + v_amount * v_bail_quato,
                   quota         = quota + v_amount * v_bail_quato
             where id = v_user_id;

          end if;

          /*扣除保证金*/
          /*查询客户保证金*/
          select u.bails
            into v_user_bail_old
            from user_orders uo
            left join users u on uo.user_id = u.id
           where uo.id = v_user_order_id;

          /*操作后保证金  = 操作前保证金 - 要扣除的保证金*/
          v_user_bail_new := v_user_bail_old - v_end_price / v_bail_quato;

          /*保证金流水*/
          insert into user_margins
            (id,
             user_id,
             user_name,
             amount,
             account_old,
             account_new,
             direction,
             margin_type,
             remarks,
             admin_id,
             admin_name,
             created_at,
             resource_id,
             resource_type)
          values
            (user_margins_seq.nextval,
             v_user_id,
             v_user_name,
             v_end_price / v_bail_quato,
             v_user_bail_old,
             v_user_bail_new,
             1, --支出
             4, --违约扣除
             v_user_order_id || '订单不支付，扣除保证金',
             p_admin_id,
             p_admin_name,
             v_now,
             v_user_order_id,
             'USER_ORDERS');

          /*添加额度流水*/
          insert into user_quotas
            (id,
             user_id,
             amount,
             quota_type,
             operate_type,
             admin_id,
             admin_name,
             remarks,
             created_at)
          values
            (user_quotas_seq.nextval,
             v_user_id,
             v_end_price / v_bail_quato * v_bail_quato,
             3, --保证金减少
             1,
             p_admin_id,
             p_admin_name,
             v_user_order_id || '订单不支付，扣除保证金',
             v_now);

          update users
             set bails       = bails - (v_end_price / v_bail_quato),
                 total_quota = total_quota - (v_end_price / v_bail_quato * v_bail_quato),
                 quota       = quota - (v_end_price / v_bail_quato * v_bail_quato)
           where id = v_user_id;

          if p_is_freeze_customer is not null then
            /*冻结客户*/
            update users
               set lock_operator = p_admin_id,
                   lock_reason   = p_freeze_customer_reason,
                   islock        = 1,
                   status        = 1 -- 不支付冻结
             where id = v_user_id;
            /*冻结备注*/
            insert into common_remarks
              (id,
               source_id,
               source_type,
               custom_type,
               content,
               created_at,
               admin_id,
               admin_name)
            values
              (common_remarks_seq.nextval,
               v_user_order_id,
               'USERS',
               '客户不支付冻结',
               p_freeze_customer_reason,
               v_now,
               p_admin_id,
               p_admin_name);
          end if;
        end if;

        /*更新拍品委托费用表*/
        p_settlement_auction_fee(v_auction_id, v_result_status);

      END LOOP;
      commit;
      p_output := 0;
      return;
    end if;
  END IF;

 EXCEPTION
   WHEN OTHERS THEN
     p_output := 3;
     DBMS_OUTPUT.PUT_LINE('SQLCODE: '|| SQLCODE);
     RETURN;

end P_TRADE_NO_PAY;


 
/

-- ----------------------------
-- Procedure structure for P_TRADE_PAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_PAY"(p_order_ids                 IN VARCHAR, /**所有需要支付的交易单*/
                                          p_order_no_score_ids        IN VARCHAR, /**其中没有选中交易单，积分变无效*/
                                          p_order_extended_reason_ids IN VARCHAR, /*有理由超期支付交易单*/
                                          p_order_extended_reason     IN VARCHAR, /**超期支付理由*/
                                          p_user_id                   IN NUMBER, /**客户ID*/
                                          p_admin_id                  IN NUMBER, /**操作人员ID*/
                                          p_admin_name                IN VARCHAR, /**操作人员姓名*/
                                          p_order_id_certificate      IN VARCHAR, /** 所有需要支付的交易单号与是否需要收藏证书*/
                                          user_payment_id             OUT VARCHAR,
                                          RESULT_STATUS               OUT VARCHAR
                                          /*
                                              **0：成功
                                              **1: NO USER  没有当前用户
                                              **2: NO LEGAL ORDERS  不合法的交易单（不符合客户未支付并且未冻结的交易单）
                                              **3: NO ENOUGH MONEY   账户余额不足够支付
                                              4:异常
                                            */) is
  /**
     作者:刘静
     日期:2011.08.08
     描述：交易单支付
  */
  v_user_name        VARCHAR(500); /**客户名称*/
  v_user_money       NUMBER := 0; /**客户账户余额*/
  v_total_account    NUMBER := 0; /**客户账户总余额*/
  v_order_count      NUMBER := 0; /**待支付交易单个数*/
  v_total_amount     NUMBER := 0; /**待支付交易单总金额*/
  v_pay_type         CHAR := '1'; /*支付类型：余额支付*/
  v_total_used_quota NUMBER := 0;
  v_now              DATE := SYSDATE; /*当前时间*/

  v_sql                VARCHAR(4000);
  v_temp               VARCHAR2(4000);
  v_extended_reason_id VARCHAR2(4000);
  v_order_id           VARCHAR2(4000);
  v_split              VARCHAR2(2) := ',';
  v_order_count_temp   NUMBER := 0; /**待支付交易单个数*/
  v_result_status      NUMBER := 0;
  v_auction_id         number;
  v_payment_id         number;
  v_order_certificate_count NUMBER := 0; /*本次已支付且有收藏证书的订单的总数*/

  type cur_type is ref cursor;
  cur_auction_fee     cur_type;
  res_cur_auction_fee auction_fees%rowtype;

  cursor extend_order_cur is
  select id
    from user_orders
   where instr(v_split || p_order_extended_reason_ids || v_split,
               v_split || id || v_split) > 0;

BEGIN

  IF p_order_ids IS NOT NULL THEN
    BEGIN

      /*查找客户以及客户账户余额*/
      BEGIN
        select true_name, account, total_account
          into v_user_name, v_user_money, v_total_account
          from users
         where id = p_user_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          RESULT_STATUS := 1;
          RETURN;
      END;

      /*统计客户未支付并且未冻结的交易单的个数以及金额*/
      select count(1), sum(total_amount)
      into v_order_count, v_total_amount
      from user_orders
     where user_id = p_user_id
       and status = 0
       and is_freeze = 0
       and instr(v_split || p_order_ids || v_split, v_split || id || v_split) > 0;

      /*统计待支付交易单个数以及金额*/
     select count(1) into v_order_count_temp
    from user_orders
   where user_id = p_user_id
     and instr(v_split || p_order_ids || v_split, v_split || id || v_split) > 0;
     
      

      /*不合法的交易单*/
      IF v_order_count != v_order_count_temp THEN
        BEGIN
          rollback;
          RESULT_STATUS := 2;
          RETURN;
        END;
      END IF;

      /*检查客户账户余额是否足够支付*/
      IF v_user_money < v_total_amount THEN
        BEGIN
          rollback;
          RESULT_STATUS := 3;
          RETURN;
        END;
      END IF;
      /*创建支付单*/
      select user_payments_seq.nextval into v_payment_id from dual;
      /*创建账户流水*/
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         direction,
         account_old,
         account_new,
         finance_type,
         finance_id,
         finance_name,
         finance_date,
         created_at)
      values
        (user_accounts_seq.nextval,
         p_user_id,
         v_payment_id,
         'USER_PAYMENTS',
         v_total_amount,
         '1', /*资金流转方式：资金流入*/
         v_total_account,
         v_total_account - v_total_amount,
         '11', /**收支方式：交易单支付*/
         p_admin_id,
         p_admin_name,
         v_now,
         v_now);
         
         
      

      /*更新账户金额*/
      update users
         set account       = account - v_total_amount - v_order_certificate_count*20,
             total_account = total_account - v_total_amount - v_order_certificate_count*20
       where id = p_user_id;

      /*创建支付单数据*/
      insert into user_payments
        (id,
         user_id,
         username,
         total_amount,
         ac_amount,
         pay_type,
         pay_date,
         pay_status,
         created_at)
      values
        (v_payment_id,
         p_user_id,
         v_user_name,
         v_total_amount,
         v_order_count,
         v_pay_type, /*支付类型：余额支付*/
         v_now,
         1, /*支付状态 ：成功*/
         v_now);

      /*更新订单表支付状态*/
      update user_orders
         set status          = 1,
             user_payment_id = v_payment_id,
             pay_date        = v_now,
             admin_id        = admin_id,
             admin_name      = p_admin_name,
             has_collection_certificate = substr(p_order_id_certificate,instr(p_order_id_certificate,ID)+Length(id)+1,1)
       where user_id = p_user_id
       and status = 0
       and instr(v_split || p_order_ids || v_split,
                   v_split || id || v_split) > 0;
                   
      /*查询本次本次已支付并且有收藏证书的总数*/				
		   SELECT count(id) INTO v_order_certificate_count FROM user_orders 
              WHERE user_id = p_user_id AND status  = 1 AND has_collection_certificate = 1 
                    AND instr(v_split || p_order_ids || v_split,
                        v_split || id || v_split) > 0 ;		
 	
  
         /*创建账户流水（书画收藏证书）*/
     IF v_order_certificate_count > 0 then
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         direction,
         account_old,
         account_new,
         finance_type,
         finance_id,
         finance_name,
         finance_date,
         created_at)
      values
        (user_accounts_seq.nextval,
         p_user_id,
         v_payment_id,
         'USER_PAYMENTS',
         v_order_certificate_count*20,
         '1', /*资金流转方式：资金流入*/
         v_total_account - v_total_amount,
         v_total_account - v_total_amount - v_order_certificate_count*20,
         '34', /**收支方式：收藏证书*/
         p_admin_id,
         p_admin_name,
         v_now,
         v_now);
         END IF;
                        
        /*创建用户收藏证书记录表(书画)表数据*/           
        IF v_order_certificate_count is not null then           
           INSERT INTO USER_COLLECTION_CERTIFICATE  (id, ORDER_ID,CREATED_AT )
            SELECT USER_COLLECTION_CERT_SEQ.Nextval, id, SYSDATE FROM user_orders 
              WHERE user_id = p_user_id AND status  = 1 AND has_collection_certificate = 1 
                    AND instr(v_split || p_order_ids || v_split,
                        v_split || id || v_split) > 0;
          END IF;
      /*更改拍品为待结算状态*/
      update auctions
       set settlement_status = 2
     where id in (select auction_id
                    from user_orders
                   where instr(v_split || p_order_ids || v_split,
                               v_split || id || v_split) > 0);

     select sum(use_quota) into v_total_used_quota
      from user_quota_usages
     where user_id = p_user_id
       and status = 1
       and auction_id in
           (select auction_id
              from user_orders
             where user_id = p_user_id
               and status = 1
               and user_payment_id = v_payment_id);

      /*释放占用额度*/
      update user_quota_usages
       set status = 0
     where user_id = p_user_id
       and status = 1
       and auction_id in
           (select auction_id
              from user_orders
             where user_id = p_user_id
               and status = 1
               and user_payment_id = v_payment_id);


      /*更改客户可用额度*/
      IF v_total_used_quota is not null then
        update users
           set quota = quota + v_total_used_quota
         where id = p_user_id;

        /*额度流水*/
        insert into user_quotas
          (id,
           user_id,
           amount,
           direction,
           quota_type,
           operate_type,
           admin_id,
           admin_name,
           remarks,
           created_at)
        values
          (user_quotas_seq.nextval,
           p_user_id,
           v_total_used_quota,
           '0', --收入
           '5', ---竞拍释放额度
           0, --人工操作
           p_admin_id,
           p_admin_name,
           p_order_ids || '订单支付',
           v_now);
      END IF;

      if p_order_no_score_ids is not null then
        /*不选择的积分变无效**/
         update scores
              set score_status = 2,
                  updated_at   = v_now,
                  admin_id     = p_admin_id,
                  admin_name   = p_admin_name
            where score_type = 0
              and score_source = 0
              and instr(v_split || p_order_no_score_ids || v_split,
                           v_split || source_id || v_split) > 0;
      end if;

      if p_order_extended_reason_ids is not null then
        update user_orders
         set remarks = p_order_extended_reason
       where instr(v_split || p_order_extended_reason_ids || v_split,
                   v_split || id || v_split) > 0;

        /*超期有理由支付，添加超期理由*/
         for res in extend_order_cur loop
             insert into common_remarks
              (id, source_id, source_type, custom_type, content, created_at)
            values
              (common_remarks_seq.nextval,
               res.id,
               'USER_ORDERS',
               '交易单超期有理由支付',
               p_order_extended_reason,
               v_now);
         end loop;
      end if;

      /*更新拍品委托费用表*/
      IF p_order_ids IS NOT NULL AND LENGTH(p_order_ids) > 0 THEN
        v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
                 ' and o.id in (' || p_order_ids || ')';

        OPEN cur_auction_fee FOR v_sql;
        LOOP
          FETCH cur_auction_fee
            INTO v_auction_id;
          EXIT WHEN cur_auction_fee%NOTFOUND;

          p_settlement_auction_fee(v_auction_id, v_result_status);
        END LOOP;
      END IF;

     user_payment_id := v_payment_id;
      COMMIT;
    END;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    RESULT_STATUS := 4;
    DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
    RETURN;
end P_TRADE_PAY;


 
/

-- ----------------------------
-- Procedure structure for P_TRADE_PAY1
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_PAY1"(p_order_ids                 IN VARCHAR, /**所有需要支付的交易单*/
                                          p_order_no_score_ids        IN VARCHAR, /**其中没有选中交易单，积分变无效*/
                                          p_order_extended_reason_ids IN VARCHAR, /*有理由超期支付交易单*/
                                          p_order_extended_reason     IN VARCHAR, /**超期支付理由*/
                                          p_user_id                   IN NUMBER, /**客户ID*/
                                          p_admin_id                  IN NUMBER, /**操作人员ID*/
                                          p_admin_name                IN VARCHAR, /**操作人员姓名*/
                                          user_payment_id             OUT VARCHAR,
                                          RESULT_STATUS               OUT VARCHAR
                                          /*
                                              **0：成功
                                              **1: NO USER  没有当前用户
                                              **2: NO LEGAL ORDERS  不合法的交易单（不符合客户未支付并且未冻结的交易单）
                                              **3: NO ENOUGH MONEY   账户余额不足够支付
                                              4:异常
                                            */) is
  /**
     作者:刘静
     日期:2011.08.08
     描述：交易单支付
  */
  v_user_name        VARCHAR(500); /**客户名称*/
  v_user_money       NUMBER := 0; /**客户账户余额*/
  v_total_account    NUMBER := 0; /**客户账户总余额*/
  v_order_count      NUMBER := 0; /**待支付交易单个数*/
  v_total_amount     NUMBER := 0; /**待支付交易单总金额*/
  v_pay_type         CHAR := '1'; /*支付类型：余额支付*/
  v_total_used_quota NUMBER := 0;
  v_now              DATE := SYSDATE; /*当前时间*/

  v_sql                VARCHAR(4000);
  v_temp               VARCHAR2(4000);
  v_extended_reason_id VARCHAR2(4000);
  v_order_id           VARCHAR2(4000);
  v_split              VARCHAR2(2) := ',';
  v_order_count_temp   NUMBER := 0; /**待支付交易单个数*/
  v_result_status      NUMBER := 0;
  v_auction_id         number;

  type cur_type is ref cursor;
  cur_auction_fee     cur_type;
  res_cur_auction_fee auction_fees%rowtype;

BEGIN

  IF p_order_ids IS NOT NULL THEN
    BEGIN
    
      /*查找客户以及客户账户余额*/
      BEGIN
        select true_name, account, total_account
          into v_user_name, v_user_money, v_total_account
          from users
         where id = p_user_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          RESULT_STATUS := 1;
          RETURN;
      END;
    
      /*统计客户未支付并且未冻结的交易单的个数以及金额*/     
      select count(1), sum(total_amount)
      into v_order_count, v_total_amount
      from user_orders
     where user_id = p_user_id
       and status = 0
       and is_freeze = 0
       and instr(v_split || p_order_ids || v_split, v_split || id || v_split) > 0;
    
      /*统计待支付交易单个数以及金额*/  
     select count(1) into v_order_count_temp
    from user_orders
   where user_id = p_user_id
     and instr(v_split || p_order_ids || v_split, v_split || id || v_split) > 0;
    
      /*不合法的交易单*/
      IF v_order_count != v_order_count_temp THEN
        BEGIN
          rollback;
          RESULT_STATUS := 2;
          RETURN;
        END;
      END IF;
    
      /*检查客户账户余额是否足够支付*/
      IF v_user_money < v_total_amount THEN
        BEGIN
          rollback;
          RESULT_STATUS := 3;
          RETURN;
        END;
      END IF;
      /*创建支付单*/
      select user_payments_seq.nextval into user_payment_id from dual;
      /*创建账户流水*/
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         direction,
         account_old,
         account_new,
         finance_type,
         finance_id,
         finance_name,
         finance_date,
         created_at)
      values
        (user_accounts_seq.nextval,
         p_user_id,
         user_payment_id,
         'USER_PAYMENTS',
         v_total_amount,
         '1', /*资金流转方式：资金流入*/
         v_total_account,
         v_total_account - v_total_amount,
         '11', /**收支方式：交易单支付*/
         p_admin_id,
         p_admin_name,
         v_now,
         v_now);
    
      /*更新账户金额*/
      update users
         set account       = account - v_total_amount,
             total_account = total_account - v_total_amount
       where id = p_user_id;
    
      /*创建支付单数据*/
      insert into user_payments
        (id,
         user_id,
         username,
         total_amount,
         ac_amount,
         pay_type,
         pay_date,
         pay_status,
         created_at)
      values
        (user_payment_id,
         p_user_id,
         v_user_name,
         v_total_amount,
         v_order_count,
         v_pay_type, /*支付类型：余额支付*/
         v_now,
         1, /*支付状态 ：成功*/
         v_now);
    
      /*更新订单表支付状态*/    
      update user_orders
         set status          = 1,
             user_payment_id = user_payment_id,
             pay_date        = v_now,
             admin_id        = admin_id,
             admin_name      = p_admin_name
       where user_id = p_user_id 
       and status = 0
       and instr(v_split || p_order_ids || v_split,
                   v_split || id || v_split) > 0;
    
      /*更改拍品为待结算状态*/    
      update auctions
       set settlement_status = 2
     where id in (select auction_id
                    from user_orders
                   where instr(v_split || p_order_ids || v_split,
                               v_split || id || v_split) > 0);
        
     select sum(use_quota) into v_total_used_quota
      from user_quota_usages
     where user_id = p_user_id
       and status = 1
       and auction_id in
           (select auction_id
              from user_orders
             where user_id = p_user_id
               and status = 1
               and user_payment_id = user_payment_id);   
    
      /*释放占用额度*/
      update user_quota_usages
       set status = 0
     where user_id = p_user_id
       and status = 1
       and auction_id in
           (select auction_id
              from user_orders
             where user_id = p_user_id
               and status = 1
               and user_payment_id = user_payment_id);
               
    
      /*更改客户可用额度*/
      IF v_total_used_quota is not null then
        update users
           set quota = quota + v_total_used_quota
         where id = p_user_id;
      
        /*额度流水*/
        insert into user_quotas
          (id,
           user_id,
           amount,
           direction,
           quota_type,
           operate_type,
           admin_id,
           admin_name,
           remarks,
           created_at)
        values
          (user_quotas_seq.nextval,
           p_user_id,
           v_total_used_quota,
           '0', --收入
           '5', ---竞拍释放额度
           0, --人工操作
           p_admin_id,
           p_admin_name,
           p_order_ids || '订单支付',
           v_now);
      END IF;
    
      if p_order_no_score_ids is not null then
        /*不选择的积分变无效**/
         update scores
              set score_status = 2,
                  updated_at   = v_now,
                  admin_id     = p_admin_id,
                  admin_name   = p_admin_name
            where score_type = 0
              and score_source = 0
              and instr(v_split || p_order_no_score_ids || v_split,
                           v_split || source_id || v_split) > 0;
      end if;
    
      if p_order_extended_reason_ids is not null then
        update user_orders
         set remarks = p_order_extended_reason
       where instr(v_split || p_order_extended_reason_ids || v_split,
                   v_split || id || v_split) > 0;
        
        
      
        v_temp := p_order_extended_reason_ids || ',';
      
        /*超期有理由支付，添加超期理由*/
        WHILE SUBSTR(v_temp, 1, INSTR(v_temp, v_split) - 1) IS NOT NULL LOOP
        
          v_extended_reason_id := SUBSTR(v_temp,
                                         1,
                                         INSTR(v_temp, v_split) - 1);
          v_temp               := SUBSTR(v_temp,
                                         INSTR(v_temp, v_split) +
                                         LENGTH(v_split),
                                         LENGTH(v_temp));
          insert into common_remarks
            (id, source_id, source_type, custom_type, content, created_at)
          values
            (common_remarks_seq.nextval,
             v_extended_reason_id,
             'USER_ORDERS',
             '交易单超期有理由支付',
             p_order_extended_reason,
             v_now);
        END LOOP;
      end if;
    
      /*更新拍品委托费用表*/
      IF p_order_ids IS NOT NULL AND LENGTH(p_order_ids) > 0 THEN
        v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
                 ' and o.id in (' || p_order_ids || ')';         
      
        OPEN cur_auction_fee FOR v_sql;
        LOOP
          FETCH cur_auction_fee
            INTO v_auction_id;
          EXIT WHEN cur_auction_fee%NOTFOUND;
        
          p_settlement_auction_fee(v_auction_id, v_result_status);
        END LOOP;
      END IF;
    
      /*      v_temp := p_order_ids || ',';
      WHILE SUBSTR(v_temp, 1, INSTR(v_temp, v_split) - 1) IS NOT NULL LOOP
      
        v_order_id := SUBSTR(v_temp, 1, INSTR(v_temp, v_split) - 1);
        v_temp     := SUBSTR(v_temp,
                             INSTR(v_temp, v_split) + LENGTH(v_split),
                             LENGTH(v_temp));
      
        select auction_id
          into v_auction_id
          from user_orders
         where id = v_order_id;
        \*更新拍品委托费用表*\
        p_settlement_auction_fee(v_auction_id, v_result_status);
      END LOOP;*/
    
      COMMIT;
    END;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    RESULT_STATUS := 4;
    DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
    RETURN;
end P_TRADE_PAY1;

 
 
 

 
/

-- ----------------------------
-- Procedure structure for P_TRADE_PAY2
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_TRADE_PAY2"(p_order_ids                 IN VARCHAR, /**所有需要支付的交易单*/
                                          p_order_no_score_ids        IN VARCHAR, /**其中没有选中交易单，积分变无效*/
                                          p_order_extended_reason_ids IN VARCHAR, /*有理由超期支付交易单*/
                                          p_order_extended_reason     IN VARCHAR, /**超期支付理由*/
                                          p_user_id                   IN NUMBER, /**客户ID*/
                                          p_admin_id                  IN NUMBER, /**操作人员ID*/
                                          p_admin_name                IN VARCHAR, /**操作人员姓名*/
                                          p_order_id_certificate      IN VARCHAR, /** 所有需要支付的交易单号与是否需要收藏证书*/
                                          user_payment_id             OUT VARCHAR,
                                          RESULT_STATUS               OUT VARCHAR
                                          /*
                                              **0：成功
                                              **1: NO USER  没有当前用户
                                              **2: NO LEGAL ORDERS  不合法的交易单（不符合客户未支付并且未冻结的交易单）
                                              **3: NO ENOUGH MONEY   账户余额不足够支付
                                              **4: 异常
                                            */) is
  /**
     作者:刘静
     日期:2011.08.08
     描述：交易单支付
  */
  v_user_name        VARCHAR(500); /**客户名称*/
  v_user_money       NUMBER := 0; /**客户账户余额*/
  v_total_account    NUMBER := 0; /**客户账户总余额*/
  v_order_count      NUMBER := 0; /**待支付交易单个数*/
  v_total_amount     NUMBER := 0; /**待支付交易单总金额*/
  v_pay_type         CHAR := '1'; /*支付类型：余额支付*/
  v_total_used_quota NUMBER := 0;
  v_now              DATE := SYSDATE; /*当前时间*/

  v_sql                VARCHAR(4000);
  v_temp               VARCHAR2(4000);
  v_extended_reason_id VARCHAR2(4000);
  v_order_id           VARCHAR2(4000);
  v_split              VARCHAR2(2) := ',';
  v_order_count_temp   NUMBER := 0; /**待支付交易单个数*/
  v_result_status      NUMBER := 0;
  v_auction_id         number;
  v_payment_id         number;
  v_order_certificate_count NUMBER := 0; /*本次已支付且有收藏证书的订单的总数*/

  type cur_type is ref cursor;
  cur_auction_fee     cur_type;
  res_cur_auction_fee auction_fees%rowtype;

  cursor extend_order_cur is
  select id
    from user_orders
   where instr(v_split || p_order_extended_reason_ids || v_split,
               v_split || id || v_split) > 0;

BEGIN

  IF p_order_ids IS NOT NULL THEN
    BEGIN

      /*查找客户以及客户账户余额*/
      BEGIN
        select true_name, account, total_account
          into v_user_name, v_user_money, v_total_account
          from users
         where id = p_user_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          RESULT_STATUS := 1;
          RETURN;
      END;

      /*统计客户未支付并且未冻结的交易单的个数以及金额*/
      select count(1), sum(total_amount)
      into v_order_count, v_total_amount
      from user_orders
     where user_id = p_user_id
       and status = 0
       and is_freeze = 0
       and instr(v_split || p_order_ids || v_split, v_split || id || v_split) > 0;

      /*统计待支付交易单个数以及金额*/
     select count(1) into v_order_count_temp
    from user_orders
   where user_id = p_user_id
     and instr(v_split || p_order_ids || v_split, v_split || id || v_split) > 0;



      /*不合法的交易单*/
      IF v_order_count != v_order_count_temp THEN
        BEGIN
          rollback;
          RESULT_STATUS := 2;
          RETURN;
        END;
      END IF;

      /*检查客户账户余额是否足够支付*/
      IF v_user_money < v_total_amount THEN
        BEGIN
          rollback;
          RESULT_STATUS := 3;
          RETURN;
        END;
      END IF;
      /*创建支付单*/
      select user_payments_seq.nextval into v_payment_id from dual;


      /*创建账户流水*/
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         direction,
         account_old,
         account_new,
         finance_type,
         finance_id,
         finance_name,
         finance_date,
         created_at)
      values
        (user_accounts_seq.nextval,
         p_user_id,
         v_payment_id,
         'USER_PAYMENTS',
         v_total_amount,
         '1', /*资金流转方式：资金流入*/
         v_total_account,
         v_total_account - v_total_amount,
         '11', /**收支方式：交易单支付*/
         p_admin_id,
         p_admin_name,
         v_now,
         v_now);


    /*更新账户金额*/
      update users
         set account       = account - v_total_amount ,
             total_account = total_account - v_total_amount
       where id = p_user_id;


      /*创建支付单数据*/
      insert into user_payments
        (id,
         user_id,
         username,
         total_amount,
         ac_amount,
         pay_type,
         pay_date,
         pay_status,
         created_at)
      values
        (v_payment_id,
         p_user_id,
         v_user_name,
         v_total_amount,
         v_order_count,
         v_pay_type, /*支付类型：余额支付*/
         v_now,
         1, /*支付状态 ：成功*/
         v_now);

      /*更新订单表支付状态*/
      update user_orders
         set status          = 1,
             user_payment_id = v_payment_id,
             pay_date        = v_now,
             admin_id        = admin_id,
             admin_name      = p_admin_name,
             has_collection_certificate = substr(p_order_id_certificate,instr(p_order_id_certificate,ID)+Length(id)+1,1)
       where user_id = p_user_id
       and status = 0
       and instr(v_split || p_order_ids || v_split,
                   v_split || id || v_split) > 0;

    /* 判断：如果上一条SQL：update user_orders返回0条，则该订单已支付。事务回滚 */
    if sql%rowcount=0  then
       BEGIN
          rollback;
          RESULT_STATUS := 2; --return 2: 该订单已经处理
          RETURN;
        END;
    end if;


      /*更改拍品为待结算状态*/
      update auctions
       set settlement_status = 2
     where id in (select auction_id
                    from user_orders
                   where instr(v_split || p_order_ids || v_split,
                               v_split || id || v_split) > 0);

     select sum(use_quota) into v_total_used_quota
      from user_quota_usages
     where user_id = p_user_id
       and status = 1
       and auction_id in
           (select auction_id
              from user_orders
             where user_id = p_user_id
               and status = 1
               and user_payment_id = v_payment_id);

      /*释放占用额度*/
      update user_quota_usages
       set status = 0
     where user_id = p_user_id
       and status = 1
       and auction_id in
           (select auction_id
              from user_orders
             where user_id = p_user_id
               and status = 1
               and user_payment_id = v_payment_id);


      /*更改客户可用额度*/
      IF v_total_used_quota is not null then
        update users
           set quota = quota + v_total_used_quota
         where id = p_user_id;

        /*额度流水*/
        insert into user_quotas
          (id,
           user_id,
           amount,
           direction,
           quota_type,
           operate_type,
           admin_id,
           admin_name,
           remarks,
           created_at)
        values
          (user_quotas_seq.nextval,
           p_user_id,
           v_total_used_quota,
           '0', --收入
           '5', ---竞拍释放额度
           0, --人工操作
           p_admin_id,
           p_admin_name,
           p_order_ids || '订单支付',
           v_now);
      END IF;

      if p_order_no_score_ids is not null then
        /*不选择的积分变无效**/
         update scores
              set score_status = 2,
                  updated_at   = v_now,
                  admin_id     = p_admin_id,
                  admin_name   = p_admin_name
            where score_type = 0
              and score_source = 0
              and instr(v_split || p_order_no_score_ids || v_split,
                           v_split || source_id || v_split) > 0;
      end if;

      if p_order_extended_reason_ids is not null then
        update user_orders
         set remarks = p_order_extended_reason
       where instr(v_split || p_order_extended_reason_ids || v_split,
                   v_split || id || v_split) > 0;

        /*超期有理由支付，添加超期理由*/
         for res in extend_order_cur loop
             insert into common_remarks
              (id, source_id, source_type, custom_type, content, created_at)
            values
              (common_remarks_seq.nextval,
               res.id,
               'USER_ORDERS',
               '交易单超期有理由支付',
               p_order_extended_reason,
               v_now);
         end loop;
      end if;

      /*更新拍品委托费用表*/
      IF p_order_ids IS NOT NULL AND LENGTH(p_order_ids) > 0 THEN
        v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
                 ' and o.id in (' || p_order_ids || ')';

        OPEN cur_auction_fee FOR v_sql;
        LOOP
          FETCH cur_auction_fee
            INTO v_auction_id;
          EXIT WHEN cur_auction_fee%NOTFOUND;

          p_settlement_auction_fee(v_auction_id, v_result_status);
        END LOOP;
      END IF;

     /*查询本次本次已支付并且有收藏证书的总数*/
       SELECT count(id) INTO v_order_certificate_count FROM user_orders
              WHERE user_id = p_user_id AND status  = 1 AND has_collection_certificate = 1
                    AND instr(v_split || p_order_ids || v_split,
                        v_split || id || v_split) > 0 ;


         /*创建账户流水（书画收藏证书）*/
     IF v_order_certificate_count > 0 then
      insert into user_accounts
        (id,
         user_id,
         source_id,
         source_type,
         money,
         direction,
         account_old,
         account_new,
         finance_type,
         finance_id,
         finance_name,
         finance_date,
         created_at)
      values
        (user_accounts_seq.nextval,
         p_user_id,
         v_payment_id,
         'USER_PAYMENTS',
         v_order_certificate_count*20,
         '1', /*资金流转方式：资金流入*/
         v_total_account - v_total_amount,
         v_total_account - v_total_amount - v_order_certificate_count*20,
         '34', /**收支方式：收藏证书*/
         p_admin_id,
         p_admin_name,
         v_now,
         v_now);

   /*更新账户金额*/
    update users
     set account       = account  - v_order_certificate_count*20,
       total_account = total_account  - v_order_certificate_count*20
     where id = p_user_id;

     /*创建用户收藏证书记录表(书画)表数据*/
      INSERT INTO USER_COLLECTION_CERTIFICATE  (id, ORDER_ID,CREATED_AT )
            SELECT USER_COLLECTION_CERT_SEQ.Nextval, id, SYSDATE FROM user_orders
              WHERE user_id = p_user_id AND status  = 1 AND has_collection_certificate = 1
                    AND instr(v_split || p_order_ids || v_split,
                        v_split || id || v_split) > 0;

         END IF;

     user_payment_id := v_payment_id;
      COMMIT;
    END;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    RESULT_STATUS := 4;
    DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
    RETURN;
end P_TRADE_PAY2;
/

-- ----------------------------
-- Procedure structure for P_USER_ACCOUNT_BAILS_TRANS_NEW
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_ACCOUNT_BAILS_TRANS_NEW"
(
	P_USER_ID            IN NUMBER,
	P_AMOUNT             IN NUMBER,
	P_BAIL_OF_PROPORTION IN NUMBER, --保证金比例
	P_DIRECTION          IN NUMBER,
	/*
                                0: 余额转保证金
                                1: 保证金转余额
                                */
	RESULT_STATUS OUT NUMBER
	/*
                                0:ok
                                1:用户不存在
                                2:金额不足
                                3:其它
                                4:用户被冻结
                                */
) IS
	/*
    作者:李征
    日期:2012-06-02
    描述:金额转换,6.10号新版保证金额度转换比例1:50,勿删
  */
	V_ACCOUNT    NUMBER;
	V_BAILS      NUMBER;
	V_USERNAME   VARCHAR(500);
	V_QUOTA      NUMBER;
	V_STATUS     VARCHAR2(255);
	NOW          DATE := SYSDATE;
	V_ACCOUNT_ID NUMBER;
	V_MRGIN_ID   NUMBER;
BEGIN
	BEGIN
		SELECT ACCOUNT, BAILS, TRUE_NAME, QUOTA, STATUS
			INTO V_ACCOUNT, V_BAILS, V_USERNAME, V_QUOTA, V_STATUS
			FROM USERS
		 WHERE ID = P_USER_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 1;
			RETURN;
	END;

	/*用户冻结不能操作余额保证金*/
	IF V_STATUS != 0 THEN
		ROLLBACK;
		RESULT_STATUS := 4;
		RETURN;
	END IF;
	IF V_QUOTA IS NULL THEN
		V_QUOTA := 0;
	END IF;

	/*余额转保证金*/
	IF P_DIRECTION = 0 THEN
		/*余额不足*/
		IF V_ACCOUNT IS NULL OR V_ACCOUNT < P_AMOUNT THEN
			RESULT_STATUS := 2;
			RETURN;
		END IF;

		BEGIN

			/*更新用户余额,保证金信息*/
			UPDATE USERS
				 SET BAILS         = BAILS + P_AMOUNT,
						 ACCOUNT       = ACCOUNT - P_AMOUNT,
						 TOTAL_ACCOUNT = TOTAL_ACCOUNT - P_AMOUNT,
						 TOTAL_QUOTA   = TOTAL_QUOTA + P_AMOUNT * P_BAIL_OF_PROPORTION,
						 QUOTA         = V_QUOTA + P_AMOUNT * P_BAIL_OF_PROPORTION
			 WHERE ID = P_USER_ID;

			SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO V_ACCOUNT_ID FROM DUAL;

			SELECT USER_MARGINS_SEQ.NEXTVAL INTO V_MRGIN_ID FROM DUAL;

			/*余额流水明细*/
			INSERT INTO USER_ACCOUNTS
				(ID,
				 USER_ID,
				 MONEY,
				 FINANCE_TYPE,
				 FINANCE_DATE,
				 FINANCE_ID,
				 FINANCE_NAME,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW,
				 DIRECTION,
				 CREATED_AT)
			VALUES
				(V_ACCOUNT_ID,
				 P_USER_ID,
				 P_AMOUNT,
				 4,
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 V_MRGIN_ID,
				 'USER_MARGINS',
				 V_ACCOUNT,
				 V_ACCOUNT - P_AMOUNT,
				 '1',
				 NOW);

			/*保证金流水明细*/
			INSERT INTO USER_MARGINS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 MARGIN_TYPE,
				 CREATED_AT,
				 ADMIN_ID,
				 ADMIN_NAME,
				 DIRECTION,
				 RESOURCE_ID,
				 RESOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW)
			VALUES
				(V_MRGIN_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT,
				 '1',
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 '0',
				 V_ACCOUNT_ID,
				 'USER_ACCOUNTS',
				 v_bails,
				 v_bails + P_AMOUNT);

			/*额度流水*/
			INSERT INTO USER_QUOTAS
				(ID,
				 USER_ID,
				 ADMIN_ID,
				 ADMIN_NAME,
				 AMOUNT,
				 QUOTA_TYPE,
				 OPERATE_TYPE,
				 DIRECTION,
				 CREATED_AT)
			VALUES
				(USER_QUOTAS_SEQ.NEXTVAL,
				 P_USER_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT * P_BAIL_OF_PROPORTION,
				 '1',
				 '0',
				 '0',
				 NOW);
		EXCEPTION
			WHEN OTHERS THEN
				RESULT_STATUS := 3;
				ROLLBACK;
				RETURN;
		END;
		RESULT_STATUS := 0;
		RETURN;

		/*保证金转余额*/
	ELSIF P_DIRECTION = 1 THEN
		/*保证金不足*/
		IF V_BAILS IS NULL OR V_BAILS < P_AMOUNT OR
			 V_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION < 0 THEN
			RESULT_STATUS := 2;
			RETURN;
		END IF;
		BEGIN
			/*更新用户信息*/
			UPDATE USERS
				 SET BAILS         = BAILS - P_AMOUNT,
						 ACCOUNT       = ACCOUNT + P_AMOUNT,
						 TOTAL_ACCOUNT = TOTAL_ACCOUNT + P_AMOUNT,
						 TOTAL_QUOTA   = TOTAL_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION,
						 QUOTA         = V_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION
			 WHERE ID = P_USER_ID;

			SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO V_ACCOUNT_ID FROM DUAL;

			SELECT USER_MARGINS_SEQ.NEXTVAL INTO V_MRGIN_ID FROM DUAL;

			/*用户余额流水明细*/
			INSERT INTO USER_ACCOUNTS
				(ID,
				 USER_ID,
				 MONEY,
				 FINANCE_TYPE,
				 FINANCE_DATE,
				 FINANCE_ID,
				 FINANCE_NAME,
				 DIRECTION,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW,
				 CREATED_AT)
			VALUES
				(V_ACCOUNT_ID,
				 P_USER_ID,
				 P_AMOUNT,
				 2,
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 '0',
				 V_MRGIN_ID,
				 'USER_MARGINS',
				 V_ACCOUNT,
				 V_ACCOUNT + P_AMOUNT,
				 NOW);

			/*用户保证金流水明细*/
			INSERT INTO USER_MARGINS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 MARGIN_TYPE,
				 CREATED_AT,
				 ADMIN_ID,
				 ADMIN_NAME,
				 DIRECTION,
				 RESOURCE_ID,
				 RESOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW)
			VALUES
				(V_MRGIN_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT,
				 '0',
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 '1',
				 V_ACCOUNT_ID,
				 'USER_ACCOUNTS',
				 v_bails,
				 v_bails - P_AMOUNT);

			/*额度流水*/
			INSERT INTO USER_QUOTAS
				(ID,
				 USER_ID,
				 ADMIN_ID,
				 ADMIN_NAME,
				 AMOUNT,
				 QUOTA_TYPE,
				 OPERATE_TYPE,
				 DIRECTION,
				 CREATED_AT)
			VALUES
				(USER_QUOTAS_SEQ.NEXTVAL,
				 P_USER_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT * P_BAIL_OF_PROPORTION,
				 '3',
				 '0',
				 '1',
				 NOW);
		EXCEPTION
			WHEN OTHERS THEN
				RESULT_STATUS := 3;
				ROLLBACK;
				RETURN;
		END;
		RESULT_STATUS := 0;
		RETURN;
	END IF;
END P_USER_ACCOUNT_BAILS_TRANS_NEW;


 
/

-- ----------------------------
-- Procedure structure for P_USER_ACCOUNT_BAILS_TRANSFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_ACCOUNT_BAILS_TRANSFER"
(
	P_USER_ID            IN NUMBER,
	P_AMOUNT             IN NUMBER,
	P_BAIL_OF_PROPORTION IN NUMBER, --保证金比例
	P_DIRECTION          IN NUMBER,
	/*
                                      0: 余额转保证金
                                      1: 保证金转余额
                                      */
	RESULT_STATUS OUT NUMBER
	/*
                                      0:ok
                                      1:用户不存在
                                      2:金额不足
                                      3:其它
                                      4:用户被冻结
                                      */
) IS
	/*
    作者:李征
    日期:2012-06-02
    描述:金额转换,6.10号新版保证金额度转换比例1:50,勿删
  */
	V_ACCOUNT       NUMBER;
	V_ACCOUNT_TOTAL NUMBER;
	V_BAILS         NUMBER;
	V_USERNAME      VARCHAR(500);
	V_QUOTA         NUMBER;
	V_STATUS        VARCHAR2(255);
	NOW             DATE := SYSDATE;
	V_ACCOUNT_ID    NUMBER;
	V_MRGIN_ID      NUMBER;
BEGIN
	BEGIN
		SELECT ACCOUNT, TOTAL_ACCOUNT, BAILS, TRUE_NAME, QUOTA, STATUS
			INTO V_ACCOUNT,
					 V_ACCOUNT_TOTAL,
					 V_BAILS,
					 V_USERNAME,
					 V_QUOTA,
					 V_STATUS
			FROM USERS
		 WHERE ID = P_USER_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 1;
			RETURN;
	END;

	/*用户冻结不能操作余额保证金*/
	IF V_STATUS != 0 THEN
		ROLLBACK;
		RESULT_STATUS := 4;
		RETURN;
	END IF;
	IF V_QUOTA IS NULL THEN
		V_QUOTA := 0;
	END IF;

	/*余额转保证金*/
	IF P_DIRECTION = 0 THEN
		/*余额不足*/
		IF V_ACCOUNT IS NULL OR V_ACCOUNT < P_AMOUNT THEN
			RESULT_STATUS := 2;
			RETURN;
		END IF;

		BEGIN

			/*更新用户余额,保证金信息*/
			UPDATE USERS
				 SET BAILS         = BAILS + P_AMOUNT,
						 ACCOUNT       = ACCOUNT - P_AMOUNT,
						 TOTAL_ACCOUNT = TOTAL_ACCOUNT - P_AMOUNT,
						 TOTAL_QUOTA   = TOTAL_QUOTA + P_AMOUNT * P_BAIL_OF_PROPORTION,
						 QUOTA         = V_QUOTA + P_AMOUNT * P_BAIL_OF_PROPORTION
			 WHERE ID = P_USER_ID;

			SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO V_ACCOUNT_ID FROM DUAL;

			SELECT USER_MARGINS_SEQ.NEXTVAL INTO V_MRGIN_ID FROM DUAL;

			/*余额流水明细*/
			INSERT INTO USER_ACCOUNTS
				(ID,
				 USER_ID,
				 MONEY,
				 FINANCE_TYPE,
				 FINANCE_DATE,
				 FINANCE_ID,
				 FINANCE_NAME,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW,
				 DIRECTION,
				 CREATED_AT)
			VALUES
				(V_ACCOUNT_ID,
				 P_USER_ID,
				 P_AMOUNT,
				 4,
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 V_MRGIN_ID,
				 'USER_MARGINS',
				 V_ACCOUNT_TOTAL,
				 V_ACCOUNT_TOTAL - P_AMOUNT,
				 '1',
				 NOW);

			/*保证金流水明细*/
			INSERT INTO USER_MARGINS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 MARGIN_TYPE,
				 CREATED_AT,
				 ADMIN_ID,
				 ADMIN_NAME,
				 DIRECTION,
				 RESOURCE_ID,
				 RESOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW)
			VALUES
				(V_MRGIN_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT,
				 '1',
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 '0',
				 V_ACCOUNT_ID,
				 'USER_ACCOUNTS',
				 v_bails,
				 v_bails + P_AMOUNT);

			/*额度流水*/
			INSERT INTO USER_QUOTAS
				(ID,
				 USER_ID,
				 ADMIN_ID,
				 ADMIN_NAME,
				 AMOUNT,
				 QUOTA_TYPE,
				 OPERATE_TYPE,
				 DIRECTION,
				 CREATED_AT)
			VALUES
				(USER_QUOTAS_SEQ.NEXTVAL,
				 P_USER_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT * P_BAIL_OF_PROPORTION,
				 '1',
				 '0',
				 '0',
				 NOW);
		EXCEPTION
			WHEN OTHERS THEN
				RESULT_STATUS := 3;
				ROLLBACK;
				RETURN;
		END;
		RESULT_STATUS := 0;
		RETURN;

		/*保证金转余额*/
	ELSIF P_DIRECTION = 1 THEN
		/*保证金不足*/
		IF V_BAILS IS NULL OR V_BAILS < P_AMOUNT OR
			 V_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION < 0 THEN
			RESULT_STATUS := 2;
			RETURN;
		END IF;
		BEGIN
			/*更新用户信息*/
			UPDATE USERS
				 SET BAILS         = BAILS - P_AMOUNT,
						 ACCOUNT       = ACCOUNT + P_AMOUNT,
						 TOTAL_ACCOUNT = TOTAL_ACCOUNT + P_AMOUNT,
						 TOTAL_QUOTA   = TOTAL_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION,
						 QUOTA         = V_QUOTA - P_AMOUNT * P_BAIL_OF_PROPORTION
			 WHERE ID = P_USER_ID;

			SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO V_ACCOUNT_ID FROM DUAL;

			SELECT USER_MARGINS_SEQ.NEXTVAL INTO V_MRGIN_ID FROM DUAL;

			/*用户余额流水明细*/
			INSERT INTO USER_ACCOUNTS
				(ID,
				 USER_ID,
				 MONEY,
				 FINANCE_TYPE,
				 FINANCE_DATE,
				 FINANCE_ID,
				 FINANCE_NAME,
				 DIRECTION,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW,
				 CREATED_AT)
			VALUES
				(V_ACCOUNT_ID,
				 P_USER_ID,
				 P_AMOUNT,
				 2,
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 '0',
				 V_MRGIN_ID,
				 'USER_MARGINS',
				 V_ACCOUNT_TOTAL,
				 V_ACCOUNT_TOTAL + P_AMOUNT,
				 NOW);

			/*用户保证金流水明细*/
			INSERT INTO USER_MARGINS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 MARGIN_TYPE,
				 CREATED_AT,
				 ADMIN_ID,
				 ADMIN_NAME,
				 DIRECTION,
				 RESOURCE_ID,
				 RESOURCE_TYPE,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW)
			VALUES
				(V_MRGIN_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT,
				 '0',
				 NOW,
				 P_USER_ID,
				 V_USERNAME,
				 '1',
				 V_ACCOUNT_ID,
				 'USER_ACCOUNTS',
				 v_bails,
				 v_bails - P_AMOUNT);

			/*额度流水*/
			INSERT INTO USER_QUOTAS
				(ID,
				 USER_ID,
				 ADMIN_ID,
				 ADMIN_NAME,
				 AMOUNT,
				 QUOTA_TYPE,
				 OPERATE_TYPE,
				 DIRECTION,
				 CREATED_AT)
			VALUES
				(USER_QUOTAS_SEQ.NEXTVAL,
				 P_USER_ID,
				 P_USER_ID,
				 V_USERNAME,
				 P_AMOUNT * P_BAIL_OF_PROPORTION,
				 '3',
				 '0',
				 '1',
				 NOW);
		EXCEPTION
			WHEN OTHERS THEN
				RESULT_STATUS := 3;
				ROLLBACK;
				RETURN;
		END;
		RESULT_STATUS := 0;
		RETURN;
	END IF;
END P_USER_ACCOUNT_BAILS_TRANSFER;


 
/

-- ----------------------------
-- Procedure structure for P_USER_APPOINTMENT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_APPOINTMENT"
(
	p_user_id              NUMBER,
	p_user_name            VARCHAR,
	p_auction_order_or_ids VARCHAR, --交易单或拍品id
	p_item_count           IN OUT NUMBER,
	P_APPOINTMENT_ALL      IN NUMBER, --支付所有
	p_card_type            IN VARCHAR2,
	p_card_id              IN VARCHAR2,
	p_booking_start_at     IN DATE,
	p_booking_end_at       IN DATE,
	p_remarks              IN VARCHAR2,
	p_lend_type            IN VARCHAR2, --1:客户查看2:内部3客户支付
	v_lend_id              OUT NUMBER,
	result_status          OUT NUMBER
) IS
	/*
    创建人:李征
    日期:2012-05-05
    描述:前台预约查看/预约支付
  */

	v_user_id NUMBER;

	v_sql VARCHAR2(1000);

	v_count     NUMBER := 0;
	V_ORDER_IDS VARCHAR2(10000) := '';
	CURSOR C_PAY_ALL_ORDER_IDS(V_USER_ID NUMBER) IS
		SELECT ID
			FROM USER_ORDERS O
		 WHERE O.STATUS = '0'
			 AND O.IS_FREEZE = 0
			 AND O.USER_ID = V_USER_ID
			 AND NOT EXISTS
		 (SELECT LD.ID
							FROM LEND_DETAILS LD
							JOIN LENDS L ON L.ID = LD.LEND_ID
							JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
						 WHERE LD.AUCTION_ID = O.AUCTION_ID
							 AND L.LEND_TYPE = '3'
							 AND (VWMS.lendStatus NOT IN ('2', '9', '10') OR
									 L.STATUS = '1'));

BEGIN
	DBMS_OUTPUT.ENABLE(1000000);
	BEGIN
		SELECT id INTO v_user_id FROM users WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			result_status := 1;
			RETURN;
	END;

	V_ORDER_IDS := p_auction_order_or_ids;
	--上门支付所有未支付拍品
	IF p_lend_type = 3 AND P_APPOINTMENT_ALL = 1 THEN
		FOR O_ID IN C_PAY_ALL_ORDER_IDS(V_USER_ID) LOOP
			v_count     := v_count + 1;
			V_ORDER_IDS := V_ORDER_IDS || ',' || O_ID.ID;
		END LOOP;
		IF LENGTH(V_ORDER_IDS) > 0 THEN
			V_ORDER_IDS := SUBSTR(V_ORDER_IDS, 2);
		ELSE
			result_status := 0;
			RETURN;
		END IF;

		p_item_count := v_count;
	END IF;

	SELECT lends_seq.NEXTVAL INTO v_lend_id FROM dual;

	IF V_ORDER_IDS IS NOT NULL AND p_lend_type = '3' THEN
		v_sql := 'INSERT INTO lend_details' ||
						 '(id,lend_id,auction_id,auction_no,auction_name,category_id,character_id,auction_descr,created_at)' ||
						 ' SELECT lend_details_seq.NEXTVAL,' || v_lend_id || ',' ||
						 ' A.ID,A.AUCTION_NO,A.NAME,A.AUCTION_CATEGORY_ID,A.AUCTION_CHARACTER_ID,' ||
						 ' A.DESCR,SYSDATE' ||
						 ' FROM AUCTIONS A JOIN USER_ORDERS O ON O.AUCTION_ID=A.ID' ||
						 ' WHERE O.STATUS=0 AND O.IS_FREEZE = 0 AND O.USER_ID=' ||
						 P_USER_ID || ' AND O.ID IN (' || V_ORDER_IDS || ')' ||
						 ' AND NOT EXISTS(SELECT LD.ID	FROM LEND_DETAILS LD JOIN LENDS L ON L.ID = LD.LEND_ID ' ||
						 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID' ||
						 ' WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
						 ' AND L.LEND_TYPE = 3' ||
						 ' AND (VWMS.lendStatus NOT IN (2,9) OR L.STATUS = 1))';
		DBMS_OUTPUT.put_line(v_sql);
		EXECUTE IMMEDIATE v_sql;
	ELSIF V_ORDER_IDS IS NOT NULL AND p_lend_type = '1' THEN
		v_sql := 'INSERT INTO lend_details' ||
						 '(id,lend_id,auction_id,auction_no,auction_name,category_id,character_id,auction_descr,created_at)' ||
						 ' SELECT lend_details_seq.NEXTVAL,' || v_lend_id || ',' ||
						 ' A.ID,A.AUCTION_NO,A.NAME,A.AUCTION_CATEGORY_ID,A.AUCTION_CHARACTER_ID,' ||
						 ' A.DESCR,SYSDATE' ||
						 ' FROM AUCTIONS A JOIN USER_AUCTIONS UA ON UA.AUCTION_ID=A.ID' ||
						 ' WHERE UA.USER_ID=' || P_USER_ID || ' AND A.ID IN (' ||
						 V_ORDER_IDS || ')' ||
						 ' AND NOT EXISTS(SELECT LD.ID	FROM LEND_DETAILS LD JOIN LENDS L ON L.ID = LD.LEND_ID JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID' ||
						 ' WHERE LD.AUCTION_ID = A.ID' || ' AND L.LEND_TYPE = 3' ||
						 ' AND (VWMS.lendStatus NOT IN (2,9) OR L.STATUS = 1))';
		EXECUTE IMMEDIATE v_sql;
	END IF;
	IF SQL%ROWCOUNT > 0 THEN
		INSERT INTO lends
			(id,
			 lend_type,
			 user_id,
			 user_name,
			 auctions_count,
			 booking_at,
			 status,
			 remarks,
			 created_at,
			 updated_at)
		VALUES
			(v_lend_id,
			 p_lend_type, --上门取货/临场新览
			 p_user_id,
			 p_user_name,
			 p_item_count,
			 p_booking_start_at,
			 1,
			 p_remarks,
			 SYSDATE,
			 SYSDATE);

		INSERT INTO bookings
			(id,
			 source_id,
			 source_type,
			 user_name,
			 card_type,
			 card_id,
			 start_at,
			 end_at,
			 remarks,
			 STATUS,
			 created_at)
		VALUES
			(bookings_seq.NEXTVAL,
			 v_lend_id,
			 'LENDS',
			 p_user_name,
			 p_card_type,
			 p_card_id,
			 p_booking_start_at,
			 p_booking_end_at,
			 p_remarks,
			 1,
			 SYSDATE);
	ELSE
		ROLLBACK;
		result_status := 2;
		RETURN;
	END IF;

	result_status := 0;
	RETURN;
END P_USER_APPOINTMENT;


 
/

-- ----------------------------
-- Procedure structure for P_USER_APPOINTMENT_BAK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_APPOINTMENT_BAK"
(
  p_user_id              NUMBER,
  p_user_name            VARCHAR,
  p_auction_order_or_ids VARCHAR,    --交易单或拍品id
  P_Credential_ORDER_IDS IN VARCHAR, --需要收藏证书的订单id,用逗号分隔
  p_item_count           IN OUT NUMBER,
  P_APPOINTMENT_ALL      IN NUMBER, --支付所有
  p_card_type            IN VARCHAR2,
  p_card_id              IN VARCHAR2,
  p_booking_start_at     IN DATE,
  p_booking_end_at       IN DATE,
  p_remarks              IN VARCHAR2,
  p_lend_type            IN VARCHAR2, --1:客户查看2:内部3客户支付
  v_lend_id              OUT NUMBER,
  result_status          OUT NUMBER
) IS
  /*
    创建人:李征
    日期:2012-05-05
    描述:前台预约查看/预约支付
  */
   
  --王平定义变量start
  type cur_type  is ref cursor;
  cur_user_order         cur_type;
  v_order_id             USER_ORDERS.ID%TYPE;
  v_order_auction_name   USER_ORDERS.auction_name%TYPE;
  v_order_auction_no     USER_ORDERS.auction_no%TYPE;
  v_order_category_id    auctions.auction_category_id%TYPE;
  ---end
  v_user_id NUMBER;

  v_sql VARCHAR2(1000);

  v_count     NUMBER := 0;
  V_ORDER_IDS VARCHAR2(10000) := '';
  CURSOR C_PAY_ALL_ORDER_IDS(V_USER_ID NUMBER) IS
    SELECT ID
      FROM USER_ORDERS O
     WHERE O.STATUS = '0'
       AND O.IS_FREEZE = 0
       AND O.USER_ID = V_USER_ID
       AND NOT EXISTS
     (SELECT LD.ID
              FROM LEND_DETAILS LD
              JOIN LENDS L ON L.ID = LD.LEND_ID
              JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
             WHERE LD.AUCTION_ID = O.AUCTION_ID
               AND L.LEND_TYPE = '3'
               AND (VWMS.lendStatus NOT IN ('2', '9', '10') 
         OR L.STATUS = '1'));
                   

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);
  BEGIN
    SELECT id INTO v_user_id FROM users WHERE id = p_user_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      result_status := 1;
      RETURN;
  END;

  V_ORDER_IDS := p_auction_order_or_ids;
  --上门支付所有未支付拍品
  IF p_lend_type = 3 AND P_APPOINTMENT_ALL = 1 THEN
    FOR O_ID IN C_PAY_ALL_ORDER_IDS(V_USER_ID) LOOP
      v_count     := v_count + 1;
      V_ORDER_IDS := V_ORDER_IDS || ',' || O_ID.ID;
    END LOOP;
    IF LENGTH(V_ORDER_IDS) > 0 THEN
      V_ORDER_IDS := SUBSTR(V_ORDER_IDS, 2);
    ELSE
      result_status := 0;
      RETURN;
    END IF;

    p_item_count := v_count;
  END IF;

  SELECT lends_seq.NEXTVAL INTO v_lend_id FROM dual;

  IF V_ORDER_IDS IS NOT NULL AND p_lend_type = '3' THEN
    v_sql := 'INSERT INTO lend_details' ||
             '(id,lend_id,auction_id,auction_no,auction_name,category_id,character_id,auction_descr,created_at)' ||
             ' SELECT lend_details_seq.NEXTVAL,' || v_lend_id || ',' ||
             ' A.ID,A.AUCTION_NO,A.NAME,A.AUCTION_CATEGORY_ID,A.AUCTION_CHARACTER_ID,' ||
             ' A.DESCR,SYSDATE' ||
             ' FROM AUCTIONS A JOIN USER_ORDERS O ON O.AUCTION_ID=A.ID' ||
             ' WHERE O.STATUS=0 AND O.IS_FREEZE = 0 AND O.USER_ID=' ||
             P_USER_ID || ' AND O.ID IN (' || V_ORDER_IDS || ')' ||
             ' AND NOT EXISTS(SELECT LD.ID  FROM LEND_DETAILS LD JOIN LENDS L ON L.ID = LD.LEND_ID ' ||
             ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID' ||
             ' WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
             ' AND L.LEND_TYPE = 3' ||
             ' AND (VWMS.lendStatus NOT IN (2,9) OR L.STATUS = 1))';
    DBMS_OUTPUT.put_line(v_sql);
    EXECUTE IMMEDIATE v_sql;
  
   /* 添加收藏证书*/
     --执行收藏证书操作 P_Credential_ORDER_IDS
  IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
      --计算几个20元钱?
     --V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + LENGTH(P_Credential_ORDER_IDS)*20;
      open cur_user_order for select us.id,us.auction_name,us.auction_no, a.auction_category_id from  
           USER_ORDERS US LEFT JOIN auctions A ON US.auction_id = A.ID  where us.id in (P_Credential_ORDER_IDS);
      loop 
      fetch cur_user_order into v_order_id,v_order_auction_name,v_order_auction_no,v_order_category_id;
      exit when cur_user_order%notfound;
      insert  into USER_COLLECTION_CERTIFICATE (id,ORDER_ID,CREATED_AT,NAME,TYPE,PRICE,COLLECTION_NO) 
           values(COLLECTION_CERTIFICATE_seq.nextval,
           v_order_id,
           'SH' || to_char(sysdate,'yyyy'),
           v_order_auction_name|| v_order_auction_no ||'_收藏证书',
           v_order_category_id,
           20,
           'SH2014');   
      end loop;
      close cur_user_order;
    --更新,交易单有收藏证书
     UPDATE USER_ORDERS us set HAS_COLLECTION_CERTIFICATE ='1' where us.id in (P_Credential_ORDER_IDS);
    END IF; 
  
  ELSIF V_ORDER_IDS IS NOT NULL AND p_lend_type = '1' THEN
    v_sql := 'INSERT INTO lend_details' ||
             '(id,lend_id,auction_id,auction_no,auction_name,category_id,character_id,auction_descr,created_at)' ||
             ' SELECT lend_details_seq.NEXTVAL,' || v_lend_id || ',' ||
             ' A.ID,A.AUCTION_NO,A.NAME,A.AUCTION_CATEGORY_ID,A.AUCTION_CHARACTER_ID,' ||
             ' A.DESCR,SYSDATE' ||
             ' FROM AUCTIONS A JOIN USER_AUCTIONS UA ON UA.AUCTION_ID=A.ID' ||
             ' WHERE UA.USER_ID=' || P_USER_ID || ' AND A.ID IN (' ||
             V_ORDER_IDS || ')' ||
             ' AND NOT EXISTS(SELECT LD.ID  FROM LEND_DETAILS LD JOIN LENDS L ON L.ID = LD.LEND_ID JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID' ||
             ' WHERE LD.AUCTION_ID = A.ID' || ' AND L.LEND_TYPE = 3' ||
             ' AND (VWMS.lendStatus NOT IN (2,9) OR L.STATUS = 1))';
    EXECUTE IMMEDIATE v_sql;
   /* 添加收藏证书*/
     --执行收藏证书操作 P_Credential_ORDER_IDS
  IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
      --计算几个20元钱?
      --V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + LENGTH(P_Credential_ORDER_IDS)*20;
      open cur_user_order for select us.id,us.auction_name,us.auction_no, a.auction_category_id from  
           USER_ORDERS US LEFT JOIN auctions A ON US.auction_id = A.ID  where us.id in (P_Credential_ORDER_IDS);
      loop 
      fetch cur_user_order into v_order_id,v_order_auction_name,v_order_auction_no,v_order_category_id;
      exit when cur_user_order%notfound;
      insert  into USER_COLLECTION_CERTIFICATE (id,ORDER_ID,CREATED_AT,NAME,TYPE,PRICE,COLLECTION_NO) 
           values(COLLECTION_CERTIFICATE_seq.nextval,
           v_order_id,
           'SH' || to_char(sysdate,'yyyy'),
           v_order_auction_name|| v_order_auction_no ||'_收藏证书',
           v_order_category_id,
           20,
           'SH2014');   
      end loop;
      close cur_user_order;
    --更新,交易单有收藏证书
     UPDATE USER_ORDERS us set HAS_COLLECTION_CERTIFICATE ='1' where us.id in (P_Credential_ORDER_IDS);
    END IF; 
  
  END IF;
  IF SQL%ROWCOUNT > 0 THEN
    INSERT INTO lends
      (id,
       lend_type,
       user_id,
       user_name,
       auctions_count,
       booking_at,
       status,
       remarks,
       created_at,
       updated_at)
    VALUES
      (v_lend_id,
       p_lend_type, --上门取货/临场新览
       p_user_id,
       p_user_name,
       p_item_count,
       p_booking_start_at,
       1,
       p_remarks,
       SYSDATE,
       SYSDATE);

    INSERT INTO bookings
      (id,
       source_id,
       source_type,
       user_name,
       card_type,
       card_id,
       start_at,
       end_at,
       remarks,
       STATUS,
       created_at)
    VALUES
      (bookings_seq.NEXTVAL,
       v_lend_id,
       'LENDS',
       p_user_name,
       p_card_type,
       p_card_id,
       p_booking_start_at,
       p_booking_end_at,
       p_remarks,
       1,
       SYSDATE);
  ELSE
    ROLLBACK;
    result_status := 2;
    RETURN;
  END IF;

  result_status := 0;
  RETURN;
END P_USER_APPOINTMENT_bak;

 
/

-- ----------------------------
-- Procedure structure for P_USER_BALANCE_PAY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_BALANCE_PAY"
(
	P_USER_ID           IN NUMBER,
	P_ORDER_IDS         IN VARCHAR, --所有提交支付的订单,用逗号分隔
	P_AUCTION_ORDER_IDS IN VARCHAR, --竞拍订单
  P_EC_ORDER_IDS      IN VARCHAR, --商城订单
  P_PAY_ALL           IN NUMBER, --支付所有未支付的 1/0
  P_AMOUNT            IN NUMBER, --总金额
  P_ORDERS_COUNT      IN NUMBER, --总订单数,包括商城和拍卖
  P_REMARK            IN VARCHAR2, --备注
  P_PAYMENT_ID        OUT NUMBER, --支付单id
  CONSUME_SCORES      OUT NUMBER, --商城消耗积分
  RESULT_STATUS       OUT NUMBER

) IS
  /**
     作者:李征
     日期:2012.05.26
     描述：余额支付记录
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商场订单数
  V_EC_TOTAL_AMUNT    NUMBER := 0; --商场订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;
  V_USER_NAME         VARCHAR2(255);

  V_USER_ACCOUNT       NUMBER;
  V_USER_ACCOUNT_TOTAL NUMBER;
  V_USER_SCORES        NUMBER;

  V_EC_SCORES_RESULT NUMBER := 0;
  V_TOTAL_USED_QUOTA NUMBER := 0;

  TYPE cur_type IS REF CURSOR;
  cur_auction_fee     cur_type;
  v_auction_id        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;
  V_EC_DEPOSITS       NUMBER:=0;--定金总额
  V_EC_DEPOSITS_NUM   NUMBER;--定金单数
  V_AMOUNT_WITHOUT_DEPOSIT           NUMBER:=0;
BEGIN
  BEGIN
    SELECT ID,
           BUY_SCORE_USEABLE,
           ACCOUNT,
           TOTAL_ACCOUNT,
           DECODE(TRUE_NAME, NULL, NICKNAME, TRUE_NAME)
      INTO V_USER_ID,
           V_USER_SCORES,
           V_USER_ACCOUNT,
           V_USER_ACCOUNT_TOTAL,
           V_USER_NAME
      FROM USERS
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  /*订金总额*/
  /*edit by zhangyi 增加商城投资理财部分的定金*/
  IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
    V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)'||
               'FROM ec_auction_book WHERE ORDER_ID IN' ||
               '(' || P_EC_ORDER_IDS || ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID='||V_USER_ID;
    EXECUTE IMMEDIATE V_SQL
    INTO V_EC_DEPOSITS,V_EC_DEPOSITS_NUM;
  END IF;

  /*是否支付所有未支拍品*/
  IF P_PAY_ALL = 1 THEN
    SELECT COUNT(*), nvl(SUM(TOTAL_AMOUNT), 0)
      INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT
      FROM USER_ORDERS O
     WHERE USER_ID = V_USER_ID
       AND NOT EXISTS
     (SELECT LD.ID
              FROM LEND_DETAILS LD
              JOIN LENDS L ON L.ID = LD.LEND_ID
              JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
             WHERE LD.AUCTION_ID = O.AUCTION_ID
               AND L.LEND_TYPE = '3'
               AND L.USER_ID = V_USER_ID
               AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                   L.STATUS = '1'))
       AND STATUS = '0'
       AND O.IS_FREEZE = 0;
    --商城订单
    SELECT COUNT(*),
           SUM(ORDER_PRICE * GOODS_NUMBER )- V_EC_DEPOSITS,
           SUM(CONSUME_SCORES * GOODS_NUMBER)
      INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES
      FROM EC_ORDER_GOODS O
     WHERE O.USER_ID = V_USER_ID
       AND ORDER_STATUS = '0';



    IF V_EC_TOTAL_AMUNT IS NULL THEN
      V_EC_TOTAL_AMUNT := 0;
    END IF;

    IF V_EC_CONSUME_SCORES IS NULL THEN
      V_EC_CONSUME_SCORES := 0;
    END IF;

    V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
    V_AMOUNT_WITHOUT_DEPOSIT := V_TOTAL_AMOUNT + V_EC_DEPOSITS;
    V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;
    /*支付所选择的拍品*/
  ELSIF P_ORDER_IDS IS NOT NULL THEN
    BEGIN
      /*拍卖订单统计*/
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND
         LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT COUNT(*),nvl(SUM(TOTAL_AMOUNT),0) FROM USER_ORDERS O WHERE O.USER_ID=' ||
                 V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' ||
                 P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' ||
                 ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' ||
                 V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;
      END IF;
      /*商城订单统计*/
      /*edit by zhangyi 商城订单应支付金额 需要减去 定金部分*/
      IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN

        V_SQL := 'SELECT COUNT(*),nvl(SUM(ORDER_PRICE*GOODS_NUMBER)-'||V_EC_DEPOSITS||',0),nvl(SUM(CONSUME_SCORES*GOODS_NUMBER),0)  FROM EC_ORDER_GOODS O WHERE O.USER_ID=' ||
                 V_USER_ID || ' AND O.ORDER_STATUS=0 AND O.ID IN (' || P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES;

      END IF;
      V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;

      /*数据订单数与参数数目不等*/
      IF V_ORDERS_COUNT != P_ORDERS_COUNT THEN
        ROLLBACK;
        RESULT_STATUS := 3;
        RETURN;
      END IF;

      --参数金额与实际统计金额不相等
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
      V_AMOUNT_WITHOUT_DEPOSIT := V_TOTAL_AMOUNT + V_EC_DEPOSITS;
      IF V_TOTAL_AMOUNT != P_AMOUNT THEN
        ROLLBACK;
        RESULT_STATUS := 4;
        RETURN;
      END IF;

      /**积分不足*/
      IF V_USER_SCORES < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        RESULT_STATUS := 5;
        RETURN;
      END IF;
      CONSUME_SCORES := V_EC_CONSUME_SCORES;
    END;
  END IF;

  /*余额不足*/
  IF V_USER_ACCOUNT < V_TOTAL_AMOUNT THEN
    ROLLBACK;
    RESULT_STATUS := 2;
    RETURN;
  END IF;

  SELECT USER_PAYMENTS_SEQ.NEXTVAL INTO P_PAYMENT_ID FROM DUAL;

  INSERT INTO USER_PAYMENTS
    (ID,
     USER_ID,
     USERNAME,
     TOTAL_AMOUNT,
     AC_AMOUNT,
     --TRANSMIT_FEE,
     --INSURANCE_FEE,
     CONSUME_SCORES,
     PAY_TYPE,
     PAY_DATE,
     PAY_STATUS,
     REMARK,
     CREATED_AT)
  VALUES
    (P_PAYMENT_ID,
     V_USER_ID,
     V_USER_NAME,
     V_AMOUNT_WITHOUT_DEPOSIT,
     V_ORDERS_COUNT,
     --V_TRANSMIT_FEE,
     --V_INSURANCE_FEE,
     V_EC_CONSUME_SCORES,
     '1', --余额支付
     V_NOW,
     '1', --支付状态
     P_REMARK,
     V_NOW);

  --生成余额流水
  INSERT INTO USER_ACCOUNTS
    (ID,
     USER_ID,
     SOURCE_ID,
     SOURCE_TYPE,
     MONEY,
     FINANCE_TYPE,
     FINANCE_DATE,
     FINANCE_NAME,
     REMARKS,
     CREATED_AT,
     ACCOUNT_OLD,
     ACCOUNT_NEW,
     DIRECTION,
     STATUS)
  VALUES
    (USER_ACCOUNTS_SEQ.NEXTVAL,
     V_USER_ID,
     P_PAYMENT_ID,
     'USER_PAYMENTS',
     V_AMOUNT_WITHOUT_DEPOSIT,
     '11',
     V_NOW,
     V_USER_NAME,
     '余额:' || V_AMOUNT_WITHOUT_DEPOSIT || '支付',
     V_NOW,
     V_USER_ACCOUNT_TOTAL,
     V_USER_ACCOUNT_TOTAL - V_AMOUNT_WITHOUT_DEPOSIT,
     '1', --支出
     '1');

  /*从用户余额中扣除*/
  /*从用户余额中扣除*/
  UPDATE USERS
     SET ACCOUNT       = nvl(ACCOUNT, 0) - V_TOTAL_AMOUNT,
         TOTAL_ACCOUNT = nvl(TOTAL_ACCOUNT, 0) - V_TOTAL_AMOUNT
   WHERE ID = V_USER_ID;

  DBMS_OUTPUT.put_line('更新用户余额,更新前:' || V_USER_ACCOUNT || ',更新后:' ||
                       (V_USER_ACCOUNT - V_TOTAL_AMOUNT));
  /*扣除积分*/
  IF V_EC_CONSUME_SCORES > 0 THEN
    P_SCORE_BUYER_EXCHANGE(V_USER_ID,
                           V_EC_CONSUME_SCORES,
                           P_PAYMENT_ID,
                           V_EC_SCORES_RESULT);
    IF V_EC_SCORES_RESULT != 0 THEN
      ROLLBACK;
      RESULT_STATUS := 6;
      RETURN;
    END IF;
  END IF;

  IF P_PAY_ALL = 1 THEN
    BEGIN
      --更新结算状态
      UPDATE AUCTIONS A
         SET SETTLEMENT_STATUS = '2'
       WHERE EXISTS (SELECT ID
                FROM USER_ORDERS O
               WHERE O.USER_ID = V_USER_ID
                 AND O.STATUS = '0'
                 AND O.IS_FREEZE = 0
                 AND O.AUCTION_ID = A.ID)
         AND NOT EXISTS
       (SELECT LD.ID
                FROM LEND_DETAILS LD
                JOIN LENDS L ON L.ID = LD.LEND_ID
                JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
               WHERE LD.AUCTION_ID = A.ID
                 AND L.LEND_TYPE = '3'
                 AND L.USER_ID = V_USER_ID
                 AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                     L.STATUS = '1'));
      --更新交易单状态
      UPDATE USER_ORDERS O
         SET STATUS          = '1',
             USER_PAYMENT_ID = P_PAYMENT_ID,
             PAY_DATE        = V_NOW,
             ADMIN_ID        = V_USER_ID,
             ADMIN_NAME      = V_USER_NAME
       WHERE USER_ID = V_USER_ID
         AND O.IS_FREEZE = 0
         AND STATUS = '0'
         AND NOT EXISTS
       (SELECT LD.ID
                FROM LEND_DETAILS LD
                JOIN LENDS L ON L.ID = LD.LEND_ID
                JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
               WHERE LD.AUCTION_ID = O.AUCTION_ID
                 AND L.USER_ID = V_USER_ID
                 AND L.LEND_TYPE = '3'
                 AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                     L.STATUS = '1'));
    END;
  ELSE
    BEGIN
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND
         LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        /*更新交易单状态*/
        V_SQL := 'UPDATE USER_ORDERS O SET STATUS=1, USER_PAYMENT_ID = ' ||
                 P_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') ' || ',ADMIN_ID=' ||
                 V_USER_ID || ',ADMIN_NAME=''' || V_USER_NAME ||
                 ''' WHERE USER_ID=' || V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' ||
                 P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' ||
                 ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' ||
                 V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL;
        /*更新拍品结算状态*/
        V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (' ||
                 'SELECT AUCTION_ID FROM USER_ORDERS WHERE USER_ID=' ||
                 V_USER_ID || ' AND ID IN (' || P_AUCTION_ORDER_IDS || '))';
        EXECUTE IMMEDIATE V_SQL;

        DBMS_OUTPUT.put_line('更新拍卖交易单状态为已支付,数量:' || SQL%ROWCOUNT);
      END IF;

      /*还有新商场交易单需要更新*/
      IF V_EC_ORDERS_COUNT > 0 THEN
        V_SQL := 'UPDATE EC_ORDER_GOODS SET ORDER_STATUS=1, UNITE_PAY_ID = ' ||
                 P_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND  ID IN (' ||
                 P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;

        DBMS_OUTPUT.put_line('更新商城交易单状态为已支付,数量:' || SQL%ROWCOUNT);

        /*edit by zhangyi 扣除冻结的订金*/
        IF V_EC_DEPOSITS_NUM>0 THEN
          V_SQL := 'UPDATE ec_auction_book SET STATUS=6,UPDATED_AT=sysdate WHERE ORDER_ID IN (' ||
                 P_EC_ORDER_IDS || ') AND STATUS IN (4,5)';
          EXECUTE IMMEDIATE V_SQL;
        END IF;

        /*edit by zhangyi 修改用户账户里的冻结资金*/
        IF V_EC_DEPOSITS>0 THEN
          UPDATE USERS
          SET TOTAL_ACCOUNT=TOTAL_ACCOUNT-V_EC_DEPOSITS,
          FREEZE_ACCOUNT=FREEZE_ACCOUNT-V_EC_DEPOSITS
          WHERE ID = V_USER_ID;
        END IF;


      END IF;
    END;
  END IF;
  BEGIN
    /*获取占用额度*/
    SELECT SUM(USE_QUOTA)
      INTO V_TOTAL_USED_QUOTA
      FROM USER_QUOTA_USAGES
     WHERE USER_ID = V_USER_ID
       AND STATUS = 1
       AND EXISTS
     (SELECT ID
              FROM USER_ORDERS
             WHERE USER_ID = V_USER_ID
               AND STATUS = '1'
               AND USER_PAYMENT_ID = P_PAYMENT_ID
               AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

    /*更新占用额度为不占用*/
    UPDATE USER_QUOTA_USAGES
       SET STATUS = '0'
     WHERE USER_ID = V_USER_ID
       AND STATUS = '1'
       AND EXISTS
     (SELECT ID
              FROM USER_ORDERS
             WHERE USER_ID = V_USER_ID
               AND STATUS = '1'
               AND USER_PAYMENT_ID = P_PAYMENT_ID
               AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

    /*释放占用额度*/
    IF V_TOTAL_USED_QUOTA IS NOT NULL AND V_TOTAL_USED_QUOTA > 0 THEN
      UPDATE USERS
         SET QUOTA = QUOTA + V_TOTAL_USED_QUOTA
       WHERE ID = V_USER_ID;
      /*额度流水*/
      INSERT INTO user_quotas
        (ID,
         user_id,
         amount,
         quota_type,
         operate_type,
         remarks,
         created_at,
         direction)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL,
         v_user_id,
         V_TOTAL_USED_QUOTA,
         5,
         1,
         '余额支付交易单',
         V_NOW,
         0);
      DBMS_OUTPUT.put_line('释放占用额度:' || V_TOTAL_USED_QUOTA);
    END IF;

    IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
      -----
      v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
               ' and o.id in (' || P_AUCTION_ORDER_IDS || ')';

      OPEN cur_auction_fee FOR v_sql;
      LOOP
        FETCH cur_auction_fee
          INTO v_auction_id;
        EXIT WHEN cur_auction_fee%NOTFOUND;

        p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
      END LOOP;
    END IF;
  END;
  RESULT_STATUS := 0;
  RETURN;
END P_USER_BALANCE_PAY;


 
/

-- ----------------------------
-- Procedure structure for P_USER_BALANCE_PAY_BAK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_BALANCE_PAY_BAK"
(
  P_USER_ID           IN NUMBER,
  P_ORDER_IDS         IN VARCHAR, --所有提交支付的订单,用逗号分隔
  P_AUCTION_ORDER_IDS IN VARCHAR, --竞拍订单
  P_EC_ORDER_IDS      IN VARCHAR, --商城订单
  P_PAY_ALL           IN NUMBER, --支付所有未支付的 1/0
  P_AMOUNT            IN NUMBER, --总金额
  P_ORDERS_COUNT      IN NUMBER, --总订单数,包括商城和拍卖
  P_REMARK            IN VARCHAR2, --备注
  P_Credential_ORDER_IDS  IN VARCHAR, --需要收藏证书的订单id,用逗号分隔
  P_PAYMENT_ID        OUT NUMBER, --支付单id
  CONSUME_SCORES      OUT NUMBER, --商城消耗积分
  RESULT_STATUS       OUT NUMBER

) IS
  /**
     作者:李征
     日期:2012.05.26
     描述：余额支付记录
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商场订单数
  V_EC_TOTAL_AMUNT    NUMBER := 0; --商场订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;
  V_USER_NAME         VARCHAR2(255);

  V_USER_ACCOUNT       NUMBER;
  V_USER_ACCOUNT_TOTAL NUMBER;
  V_USER_SCORES        NUMBER;

  V_EC_SCORES_RESULT NUMBER := 0;
  V_TOTAL_USED_QUOTA NUMBER := 0;

  TYPE cur_type IS REF CURSOR;
  cur_auction_fee     cur_type;
  v_auction_id        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;
  V_EC_DEPOSITS       NUMBER:=0;--定金总额
  V_EC_DEPOSITS_NUM   NUMBER;--定金单数
  V_AMOUNT_WITHOUT_DEPOSIT           NUMBER:=0;
  
  --王平定义变量
  cur_user_order         cur_type;
  v_order_id             USER_ORDERS.ID%TYPE;
  v_order_auction_name   USER_ORDERS.auction_name%TYPE;
  v_order_auction_no     USER_ORDERS.auction_no%TYPE;
  v_order_category_id    auctions.auction_category_id%TYPE;
  v_order_ids            USER_ORDERS.ID%TYPE;
   
BEGIN
  BEGIN
    SELECT ID,
           BUY_SCORE_USEABLE,
           ACCOUNT,
           TOTAL_ACCOUNT,
           DECODE(TRUE_NAME, NULL, NICKNAME, TRUE_NAME)
      INTO V_USER_ID,
           V_USER_SCORES,
           V_USER_ACCOUNT,
           V_USER_ACCOUNT_TOTAL,
           V_USER_NAME
      FROM USERS
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  /*订金总额*/
  /*edit by zhangyi 增加商城投资理财部分的定金*/
  IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
    V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)'||
               'FROM ec_auction_book WHERE ORDER_ID IN' ||
               '(' || P_EC_ORDER_IDS || ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID='||V_USER_ID;
    EXECUTE IMMEDIATE V_SQL
    INTO V_EC_DEPOSITS,V_EC_DEPOSITS_NUM;
  END IF;

  /*是否支付所有未支拍品*/
  IF P_PAY_ALL = 1 THEN
    SELECT COUNT(*), nvl(SUM(TOTAL_AMOUNT), 0)
      INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT
      FROM USER_ORDERS O
     WHERE USER_ID = V_USER_ID
       AND NOT EXISTS
     (SELECT LD.ID
              FROM LEND_DETAILS LD
              JOIN LENDS L ON L.ID = LD.LEND_ID
              JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
             WHERE LD.AUCTION_ID = O.AUCTION_ID
               AND L.LEND_TYPE = '3'
               AND L.USER_ID = V_USER_ID
               AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                   L.STATUS = '1'))
       AND STATUS = '0'
       AND O.IS_FREEZE = 0;
    --商城订单
    SELECT COUNT(*),
           SUM(ORDER_PRICE * GOODS_NUMBER )- V_EC_DEPOSITS,
           SUM(CONSUME_SCORES * GOODS_NUMBER)
      INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES
      FROM EC_ORDER_GOODS O
     WHERE O.USER_ID = V_USER_ID
       AND ORDER_STATUS = '0';



    IF V_EC_TOTAL_AMUNT IS NULL THEN
      V_EC_TOTAL_AMUNT := 0;
    END IF;

    IF V_EC_CONSUME_SCORES IS NULL THEN
      V_EC_CONSUME_SCORES := 0;
    END IF;

    V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
    V_AMOUNT_WITHOUT_DEPOSIT := V_TOTAL_AMOUNT + V_EC_DEPOSITS;
    V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;

   /* 添加收藏证书*/
     --执行收藏证书操作 P_Credential_ORDER_IDS
  IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
      --计算几个20元钱
      DBMS_OUTPUT.put_line(P_Credential_ORDER_IDS);
      DBMS_OUTPUT.put_line(v_order_ids);
      select count(1) into v_order_ids from USER_ORDERS where id in (P_Credential_ORDER_IDS);
    V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + v_order_ids*20;
      open cur_user_order for select us.id,us.auction_name,us.auction_no, a.auction_category_id from  
           USER_ORDERS US LEFT JOIN auctions A ON US.auction_id = A.ID  where us.id in (P_Credential_ORDER_IDS);
      loop 
      fetch cur_user_order into v_order_id,v_order_auction_name,v_order_auction_no,v_order_category_id;
      exit when cur_user_order%notfound;
      insert  into USER_COLLECTION_CERTIFICATE (id,ORDER_ID,CREATED_AT,NAME,TYPE,PRICE,COLLECTION_NO) 
           values(COLLECTION_CERTIFICATE_seq.nextval,
           v_order_id,
           'SH' || to_char(sysdate,'yyyy'),
            v_order_auction_name||'_'|| v_order_auction_no ||'_收藏证书',
           v_order_category_id,
           20,
           'SH2014');   
      end loop;
      close cur_user_order;
    END IF; 
    /*支付所选择的拍品*/
  ELSIF P_ORDER_IDS IS NOT NULL THEN
    BEGIN
      /*拍卖订单统计*/
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND  LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT COUNT(*),nvl(SUM(TOTAL_AMOUNT),0) FROM USER_ORDERS O WHERE O.USER_ID=' ||
                 V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' ||
                 P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' ||
                 ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' ||
                 V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;
      END IF;
    
     /* 添加收藏证书*/
    --执行收藏证书操作 P_Credential_ORDER_IDS
    IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
      --计算几个20元钱
    select count(1) into v_order_ids from USER_ORDERS where id in (P_Credential_ORDER_IDS);
    V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + v_order_ids*20;
      open cur_user_order for select us.id,us.auction_name,us.auction_no, a.auction_category_id from  
           USER_ORDERS US LEFT JOIN auctions A ON US.auction_id = A.ID  where us.id in (P_Credential_ORDER_IDS);
      loop 
      fetch cur_user_order into v_order_id,v_order_auction_name,v_order_auction_no,v_order_category_id;
      exit when cur_user_order%notfound;
      insert  into USER_COLLECTION_CERTIFICATE (id,ORDER_ID,CREATED_AT,NAME,TYPE,PRICE,COLLECTION_NO) 
           values(COLLECTION_CERTIFICATE_seq.nextval,
           v_order_id,
           'SH' || to_char(sysdate,'yyyy'),
           v_order_auction_name||'_'|| v_order_auction_no ||'_收藏证书',
           v_order_category_id,
           20,
           'SH2014');   
      end loop;
      close cur_user_order;
     END IF; 
    
      /*商城订单统计*/
      /*edit by zhangyi 商城订单应支付金额 需要减去 定金部分*/
      IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN

        V_SQL := 'SELECT COUNT(*),nvl(SUM(ORDER_PRICE*GOODS_NUMBER)-'||V_EC_DEPOSITS||',0),nvl(SUM(CONSUME_SCORES*GOODS_NUMBER),0)  FROM EC_ORDER_GOODS O WHERE O.USER_ID=' ||
                 V_USER_ID || ' AND O.ORDER_STATUS=0 AND O.ID IN (' || P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES;

      END IF;
      V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;

      /*数据订单数与参数数目不等*/
      IF V_ORDERS_COUNT != P_ORDERS_COUNT THEN
        ROLLBACK;
        RESULT_STATUS := 3;
        RETURN;
      END IF;

      --参数金额与实际统计金额不相等
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
      V_AMOUNT_WITHOUT_DEPOSIT := V_TOTAL_AMOUNT + V_EC_DEPOSITS;
      IF V_TOTAL_AMOUNT != P_AMOUNT THEN
        ROLLBACK;
        RESULT_STATUS := 4;
        RETURN;
      END IF;

      /**积分不足*/
      IF V_USER_SCORES < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        RESULT_STATUS := 5;
        RETURN;
      END IF;
      CONSUME_SCORES := V_EC_CONSUME_SCORES;
    END;
  END IF;

  /*余额不足*/
  IF V_USER_ACCOUNT < V_TOTAL_AMOUNT THEN
    ROLLBACK;
    RESULT_STATUS := 2;
    RETURN;
  END IF;

  SELECT USER_PAYMENTS_SEQ.NEXTVAL INTO P_PAYMENT_ID FROM DUAL;

  INSERT INTO USER_PAYMENTS
    (ID,
     USER_ID,
     USERNAME,
     TOTAL_AMOUNT,
     AC_AMOUNT,
     --TRANSMIT_FEE,
     --INSURANCE_FEE,
     CONSUME_SCORES,
     PAY_TYPE,
     PAY_DATE,
     PAY_STATUS,
     REMARK,
     CREATED_AT)
  VALUES
    (P_PAYMENT_ID,
     V_USER_ID,
     V_USER_NAME,
     V_AMOUNT_WITHOUT_DEPOSIT,
     V_ORDERS_COUNT,
     --V_TRANSMIT_FEE,
     --V_INSURANCE_FEE,
     V_EC_CONSUME_SCORES,
     '1', --余额支付
     V_NOW,
     '1', --支付状态
     P_REMARK,
     V_NOW);

  --生成余额流水
  INSERT INTO USER_ACCOUNTS
    (ID,
     USER_ID,
     SOURCE_ID,
     SOURCE_TYPE,
     MONEY,
     FINANCE_TYPE,
     FINANCE_DATE,
     FINANCE_NAME,
     REMARKS,
     CREATED_AT,
     ACCOUNT_OLD,
     ACCOUNT_NEW,
     DIRECTION,
     STATUS)
  VALUES
    (USER_ACCOUNTS_SEQ.NEXTVAL,
     V_USER_ID,
     P_PAYMENT_ID,
     'USER_PAYMENTS',
     V_AMOUNT_WITHOUT_DEPOSIT,
     '11',
     V_NOW,
     V_USER_NAME,
     '余额:' || V_AMOUNT_WITHOUT_DEPOSIT || '支付',
     V_NOW,
     V_USER_ACCOUNT_TOTAL,
     V_USER_ACCOUNT_TOTAL - V_AMOUNT_WITHOUT_DEPOSIT,
     '1', --支出
     '1');
    --生成收藏证书流水
   IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
     INSERT INTO USER_ACCOUNTS
    (ID,
     USER_ID,
     SOURCE_ID,
     SOURCE_TYPE,
     MONEY,
     FINANCE_TYPE,
     FINANCE_DATE,
     FINANCE_NAME,
     REMARKS,
     CREATED_AT,
     ACCOUNT_OLD,
     ACCOUNT_NEW,
     DIRECTION,
     STATUS)
    VALUES
    (USER_ACCOUNTS_SEQ.NEXTVAL,
     V_USER_ID,
     P_PAYMENT_ID,
     'USER_PAYMENTS',
     V_AMOUNT_WITHOUT_DEPOSIT,
     '34',
     V_NOW,
     V_USER_NAME,
     '余额:' || V_AMOUNT_WITHOUT_DEPOSIT || '支付',
     V_NOW,
     V_USER_ACCOUNT_TOTAL,
     V_USER_ACCOUNT_TOTAL - V_AMOUNT_WITHOUT_DEPOSIT,
     '1', --支出
     '1');
    END IF;
  /*从用户余额中扣除*/
  /*从用户余额中扣除*/
  UPDATE USERS
     SET ACCOUNT       = nvl(ACCOUNT, 0) - V_TOTAL_AMOUNT,
         TOTAL_ACCOUNT = nvl(TOTAL_ACCOUNT, 0) - V_TOTAL_AMOUNT
   WHERE ID = V_USER_ID;

  DBMS_OUTPUT.put_line('更新用户余额,更新前:' || V_USER_ACCOUNT || ',更新后:' ||
                       (V_USER_ACCOUNT - V_TOTAL_AMOUNT));
  /*扣除积分*/
  IF V_EC_CONSUME_SCORES > 0 THEN
    P_SCORE_BUYER_EXCHANGE(V_USER_ID,
                           V_EC_CONSUME_SCORES,
                           P_PAYMENT_ID,
                           V_EC_SCORES_RESULT);
    IF V_EC_SCORES_RESULT != 0 THEN
      ROLLBACK;
      RESULT_STATUS := 6;
      RETURN;
    END IF;
  END IF;

  IF P_PAY_ALL = 1 THEN
    BEGIN
      --更新结算状态
      UPDATE AUCTIONS A
         SET SETTLEMENT_STATUS = '2'
       WHERE EXISTS (SELECT ID
                FROM USER_ORDERS O
               WHERE O.USER_ID = V_USER_ID
                 AND O.STATUS = '0'
                 AND O.IS_FREEZE = 0
                 AND O.AUCTION_ID = A.ID)
         AND NOT EXISTS
       (SELECT LD.ID
                FROM LEND_DETAILS LD
                JOIN LENDS L ON L.ID = LD.LEND_ID
                JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
               WHERE LD.AUCTION_ID = A.ID
                 AND L.LEND_TYPE = '3'
                 AND L.USER_ID = V_USER_ID
                 AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                     L.STATUS = '1'));
      --更新交易单状态
      UPDATE USER_ORDERS O
         SET STATUS          = '1',
             USER_PAYMENT_ID = P_PAYMENT_ID,
             PAY_DATE        = V_NOW,
             ADMIN_ID        = V_USER_ID,
             ADMIN_NAME      = V_USER_NAME
       WHERE USER_ID = V_USER_ID
         AND O.IS_FREEZE = 0
         AND STATUS = '0'
         AND NOT EXISTS
       (SELECT LD.ID
                FROM LEND_DETAILS LD
                JOIN LENDS L ON L.ID = LD.LEND_ID
                JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
               WHERE LD.AUCTION_ID = O.AUCTION_ID
                 AND L.USER_ID = V_USER_ID
                 AND L.LEND_TYPE = '3'
                 AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                     L.STATUS = '1'));
           
     --更新交易单有收藏证书
   IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
     UPDATE USER_ORDERS O set HAS_COLLECTION_CERTIFICATE ='1'
     where o.id in (P_Credential_ORDER_IDS); 
     END IF; 
    END;
  ELSE
    BEGIN
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND
         LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        /*更新交易单状态*/
        V_SQL := 'UPDATE USER_ORDERS O SET STATUS=1, USER_PAYMENT_ID = ' ||
                 P_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') ' || ',ADMIN_ID=' ||
                 V_USER_ID || ',ADMIN_NAME=''' || V_USER_NAME ||
                 ''' WHERE USER_ID=' || V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' ||
                 P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' ||
                 ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' ||
                 V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL;
        /*更新拍品结算状态*/
        V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (' ||
                 'SELECT AUCTION_ID FROM USER_ORDERS WHERE USER_ID=' ||
                 V_USER_ID || ' AND ID IN (' || P_AUCTION_ORDER_IDS || '))';
        EXECUTE IMMEDIATE V_SQL;
        DBMS_OUTPUT.put_line('更新拍卖交易单状态为已支付,数量:' || SQL%ROWCOUNT);
      END IF;
      --更新,交易单有收藏证书
    IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
       V_SQL :='UPDATE USER_ORDERS us set HAS_COLLECTION_CERTIFICATE =1  where us.id in ('||
              P_Credential_ORDER_IDS||')';
       EXECUTE IMMEDIATE V_SQL;
    END IF;
    
      /*还有新商场交易单需要更新*/
      IF V_EC_ORDERS_COUNT > 0 THEN
        V_SQL := 'UPDATE EC_ORDER_GOODS SET ORDER_STATUS=1, UNITE_PAY_ID = ' ||
                 P_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND  ID IN (' ||
                 P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;

        DBMS_OUTPUT.put_line('更新商城交易单状态为已支付,数量:' || SQL%ROWCOUNT);

        /*edit by zhangyi 扣除冻结的订金*/
        IF V_EC_DEPOSITS_NUM>0 THEN
          V_SQL := 'UPDATE ec_auction_book SET STATUS=6,UPDATED_AT=sysdate WHERE ORDER_ID IN (' ||
                 P_EC_ORDER_IDS || ') AND STATUS IN (4,5)';
          EXECUTE IMMEDIATE V_SQL;
        END IF;

        /*edit by zhangyi 修改用户账户里的冻结资金*/
        IF V_EC_DEPOSITS>0 THEN
          UPDATE USERS
          SET TOTAL_ACCOUNT=TOTAL_ACCOUNT-V_EC_DEPOSITS,
          FREEZE_ACCOUNT=FREEZE_ACCOUNT-V_EC_DEPOSITS
          WHERE ID = V_USER_ID;
        END IF;

      END IF;
    END;
  END IF;
  BEGIN
    /*获取占用额度*/
    SELECT SUM(USE_QUOTA)
      INTO V_TOTAL_USED_QUOTA
      FROM USER_QUOTA_USAGES
     WHERE USER_ID = V_USER_ID
       AND STATUS = 1
       AND EXISTS
     (SELECT ID
              FROM USER_ORDERS
             WHERE USER_ID = V_USER_ID
               AND STATUS = '1'
               AND USER_PAYMENT_ID = P_PAYMENT_ID
               AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

    /*更新占用额度为不占用*/
    UPDATE USER_QUOTA_USAGES
       SET STATUS = '0'
     WHERE USER_ID = V_USER_ID
       AND STATUS = '1'
       AND EXISTS
     (SELECT ID
              FROM USER_ORDERS
             WHERE USER_ID = V_USER_ID
               AND STATUS = '1'
               AND USER_PAYMENT_ID = P_PAYMENT_ID
               AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

    /*释放占用额度*/
    IF V_TOTAL_USED_QUOTA IS NOT NULL AND V_TOTAL_USED_QUOTA > 0 THEN
      UPDATE USERS
         SET QUOTA = QUOTA + V_TOTAL_USED_QUOTA
       WHERE ID = V_USER_ID;
      /*额度流水*/
      INSERT INTO user_quotas
        (ID,
         user_id,
         amount,
         quota_type,
         operate_type,
         remarks,
         created_at,
         direction)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL,
         v_user_id,
         V_TOTAL_USED_QUOTA,
         5,
         1,
         '余额支付交易单',
         V_NOW,
         0);
      DBMS_OUTPUT.put_line('释放占用额度:' || V_TOTAL_USED_QUOTA);
    END IF;

    IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
      -----
      v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
               ' and o.id in (' || P_AUCTION_ORDER_IDS || ')';

      OPEN cur_auction_fee FOR v_sql;
      LOOP
        FETCH cur_auction_fee
          INTO v_auction_id;
        EXIT WHEN cur_auction_fee%NOTFOUND;

        p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
      END LOOP;
    END IF;
  END;
  RESULT_STATUS := 0;
  RETURN;
END P_USER_BALANCE_PAY_BAK;

 
/

-- ----------------------------
-- Procedure structure for P_USER_BALANCE_PAY2
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_BALANCE_PAY2"(P_USER_ID           IN NUMBER,
                                                P_ORDER_IDS         IN VARCHAR, --所有提交支付的订单,用逗号分隔
                                                P_AUCTION_ORDER_IDS IN VARCHAR, --竞拍订单
                                                P_EC_ORDER_IDS      IN VARCHAR, --商城订单
                                                P_CERTIFICATE_IDS   IN VARCHAR, --需要收藏证书的交易单
                                                P_AMOUNT            IN NUMBER, --总金额
                                                P_ORDERS_COUNT      IN NUMBER, --总订单数,包括商城和拍卖
                                                P_REMARK            IN VARCHAR2, --备注
                                                P_PAYMENT_ID        OUT NUMBER, --支付单id
                                                CONSUME_SCORES      OUT NUMBER, --商城消耗积分
                                                RESULT_STATUS       OUT NUMBER
                                                
                                                ) IS
  /**
     作者:李征
     日期:2012.05.26
     描述：余额支付,新增书画收藏证书
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商场订单数
  V_EC_TOTAL_AMUNT    NUMBER := 0; --商场订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_EC_GET_SCORES     NUMBER := 0; --商城购买商品可赠送积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;
  V_USER_NAME         VARCHAR2(255);

  V_USER_ACCOUNT       NUMBER;
  V_USER_ACCOUNT_TOTAL NUMBER;
  V_USER_SCORES        NUMBER;

  V_EC_SCORES_RESULT NUMBER := 0;
  V_TOTAL_USED_QUOTA NUMBER := 0;

  TYPE CUR_TYPE IS REF CURSOR;
  CUR_AUCTION_FEE          CUR_TYPE;
  V_AUCTION_ID             NUMBER;
  V_AUCTIO_FEE_RESULT      NUMBER;
  V_EC_DEPOSITS            NUMBER := 0; --定金总额
  V_EC_DEPOSITS_NUM        NUMBER; --定金单数
  V_AMOUNT_WITHOUT_DEPOSIT NUMBER := 0;

  V_COLLECTION_CERTIFICATE NUMBER := 0;
BEGIN
  DBMS_OUTPUT.ENABLE(10000);
  BEGIN
    SELECT ID, BUY_SCORE_USEABLE, ACCOUNT, TOTAL_ACCOUNT, DECODE(TRUE_NAME, NULL, NICKNAME, TRUE_NAME)
      INTO V_USER_ID, V_USER_SCORES, V_USER_ACCOUNT, V_USER_ACCOUNT_TOTAL, V_USER_NAME
      FROM USERS
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  /*订金总额*/
  /*edit by zhangyi 增加商城投资理财部分的定金*/
  IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
    V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)' || 'FROM ec_auction_book WHERE ORDER_ID IN' || '(' ||
             P_EC_ORDER_IDS || ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID=' || V_USER_ID;
    EXECUTE IMMEDIATE V_SQL
      INTO V_EC_DEPOSITS, V_EC_DEPOSITS_NUM;
  END IF;

  /*是否支付所有未支拍品*/
  IF P_ORDER_IDS IS NOT NULL THEN
    BEGIN
      /*拍卖订单统计*/
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT COUNT(*),nvl(SUM(TOTAL_AMOUNT),0) FROM USER_ORDERS O WHERE O.USER_ID=' || V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' || P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' || ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' || V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;
      END IF;
      /*商城订单统计*/
      /*edit by zhangyi 商城订单应支付金额 需要减去 定金部分*/
      IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
      
        V_SQL := 'SELECT COUNT(*),nvl(SUM(ORDER_PRICE*GOODS_NUMBER)-' || V_EC_DEPOSITS ||
                 ',0),nvl(SUM(CONSUME_SCORES*GOODS_NUMBER),0),nvl(sum(get_scores*goods_number),0)  FROM EC_ORDER_GOODS O WHERE O.USER_ID=' ||
                 V_USER_ID || ' AND O.ORDER_STATUS=0 AND O.ID IN (' || P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES, V_EC_GET_SCORES;
      
      END IF;
      V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;
    
      IF P_CERTIFICATE_IDS IS NOT NULL AND LENGTH(P_CERTIFICATE_IDS) > 0 THEN
        V_SQL := 'SELECT COUNT(*) FROM USER_ORDERS O WHERE O.USER_ID=' || V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' || P_CERTIFICATE_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' || ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' || V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_COLLECTION_CERTIFICATE;
      END IF;
    
      /*数据订单数与参数数目不等*/
      IF V_ORDERS_COUNT != P_ORDERS_COUNT THEN
        ROLLBACK;
        RESULT_STATUS := 3;
        RETURN;
      END IF;
    
      --参数金额与实际统计金额不相等
      V_TOTAL_AMOUNT           := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
      V_AMOUNT_WITHOUT_DEPOSIT := V_TOTAL_AMOUNT + V_EC_DEPOSITS;
    
      IF V_COLLECTION_CERTIFICATE > 0 THEN
        V_COLLECTION_CERTIFICATE := V_COLLECTION_CERTIFICATE * 20;
      END IF;
    
      IF V_TOTAL_AMOUNT + V_COLLECTION_CERTIFICATE != P_AMOUNT THEN
        ROLLBACK;
        RESULT_STATUS := 4;
        RETURN;
      END IF;
    
      /**积分不足*/
      IF V_USER_SCORES < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        RESULT_STATUS := 5;
        RETURN;
      END IF;
      CONSUME_SCORES := V_EC_CONSUME_SCORES;
    END;
  END IF;

  /*余额不足*/
  IF V_USER_ACCOUNT < (V_TOTAL_AMOUNT + V_COLLECTION_CERTIFICATE) THEN
    ROLLBACK;
    RESULT_STATUS := 2;
    RETURN;
  END IF;

  SELECT USER_PAYMENTS_SEQ.NEXTVAL INTO P_PAYMENT_ID FROM DUAL;

  INSERT INTO USER_PAYMENTS
    (ID,
     USER_ID,
     USERNAME,
     TOTAL_AMOUNT,
     AC_AMOUNT,
     --TRANSMIT_FEE,
     --INSURANCE_FEE,
     CONSUME_SCORES,
     PAY_TYPE,
     PAY_DATE,
     PAY_STATUS,
     REMARK,
     CREATED_AT)
  VALUES
    (P_PAYMENT_ID,
     V_USER_ID,
     V_USER_NAME,
     V_AMOUNT_WITHOUT_DEPOSIT + V_COLLECTION_CERTIFICATE,
     V_ORDERS_COUNT,
     --V_TRANSMIT_FEE,
     --V_INSURANCE_FEE,
     V_EC_CONSUME_SCORES,
     '1', --余额支付
     V_NOW,
     '1', --支付状态
     P_REMARK,
     V_NOW);

  --生成余额流水
  INSERT INTO USER_ACCOUNTS
    (ID,
     USER_ID,
     SOURCE_ID,
     SOURCE_TYPE,
     MONEY,
     FINANCE_TYPE,
     FINANCE_DATE,
     FINANCE_NAME,
     REMARKS,
     CREATED_AT,
     ACCOUNT_OLD,
     ACCOUNT_NEW,
     DIRECTION,
     STATUS)
  VALUES
    (USER_ACCOUNTS_SEQ.NEXTVAL,
     V_USER_ID,
     P_PAYMENT_ID,
     'USER_PAYMENTS',
     V_AMOUNT_WITHOUT_DEPOSIT,
     '11',
     V_NOW,
     V_USER_NAME,
     '余额:' || V_AMOUNT_WITHOUT_DEPOSIT || '支付',
     V_NOW,
     V_USER_ACCOUNT_TOTAL,
     V_USER_ACCOUNT_TOTAL - V_AMOUNT_WITHOUT_DEPOSIT,
     '1', --支出
     '1');

  IF V_COLLECTION_CERTIFICATE > 0 THEN
    --书画收藏证书, 20元
    INSERT INTO USER_ACCOUNTS
      (ID,
       USER_ID,
       SOURCE_ID,
       SOURCE_TYPE,
       MONEY,
       FINANCE_TYPE,
       FINANCE_DATE,
       FINANCE_NAME,
       REMARKS,
       CREATED_AT,
       ACCOUNT_OLD,
       ACCOUNT_NEW,
       DIRECTION,
       STATUS)
    VALUES
      (USER_ACCOUNTS_SEQ.NEXTVAL,
       V_USER_ID,
       P_PAYMENT_ID,
       'USER_PAYMENTS',
       V_COLLECTION_CERTIFICATE,
       '34',
       V_NOW,
       V_USER_NAME,
       '收藏证书:' || V_COLLECTION_CERTIFICATE,
       V_NOW,
       V_USER_ACCOUNT_TOTAL - V_AMOUNT_WITHOUT_DEPOSIT,
       V_USER_ACCOUNT_TOTAL - V_AMOUNT_WITHOUT_DEPOSIT - V_COLLECTION_CERTIFICATE,
       '1', --支出
       '1');
  
    --更新交易单是否需要收藏证书
    V_SQL := 'UPDATE USER_ORDERS O SET HAS_COLLECTION_CERTIFICATE=1 WHERE USER_ID=' || V_USER_ID ||
             ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' || P_CERTIFICATE_IDS ||
             ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' || ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
             ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
             ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' || V_USER_ID || ' AND L.LEND_TYPE = 3' ||
             ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
    EXECUTE IMMEDIATE V_SQL;
  
    V_SQL := 'INSERT INTO USER_COLLECTION_CERTIFICATE(ID,ORDER_ID,CREATED_AT) SELECT ' ||
             'USER_COLLECTION_CERT_SEQ.NEXTVAL,O.ID,SYSDATE FROM USER_ORDERS O WHERE USER_ID=' || V_USER_ID ||
             ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' || P_CERTIFICATE_IDS ||
             ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' || ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
             ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
             ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' || V_USER_ID || ' AND L.LEND_TYPE = 3' ||
             ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
    EXECUTE IMMEDIATE V_SQL;
  
  END IF;

  /*从用户余额中扣除*/
  UPDATE USERS
     SET ACCOUNT       = NVL(ACCOUNT, 0) - V_TOTAL_AMOUNT - V_COLLECTION_CERTIFICATE,
         TOTAL_ACCOUNT = NVL(TOTAL_ACCOUNT, 0) - V_TOTAL_AMOUNT - V_COLLECTION_CERTIFICATE
   WHERE ID = V_USER_ID;

  DBMS_OUTPUT.PUT_LINE('更新用户余额,更新前:' || V_USER_ACCOUNT || ',更新后:' ||
                       (V_USER_ACCOUNT - V_TOTAL_AMOUNT - V_COLLECTION_CERTIFICATE));
  /*扣除积分*/
  IF V_EC_CONSUME_SCORES > 0 THEN
    P_SCORE_BUYER_EXCHANGE(V_USER_ID, V_EC_CONSUME_SCORES, P_PAYMENT_ID, V_EC_SCORES_RESULT);
    IF V_EC_SCORES_RESULT != 0 THEN
      ROLLBACK;
      RESULT_STATUS := 6;
      RETURN;
    END IF;
  END IF;

  IF V_EC_GET_SCORES > 0 THEN
    P_SCORE_GIFT(V_USER_ID, V_EC_GET_SCORES, 1, NULL, V_USER_ID, V_USER_NAME, NULL, '0', V_AUCTIO_FEE_RESULT);
  END IF;

  BEGIN
    IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
      /*更新交易单状态*/
      V_SQL := 'UPDATE USER_ORDERS O SET STATUS=1, USER_PAYMENT_ID = ' || P_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
               TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') || ''',''YYYY-MM-DD HH24:MI:SS'') ' || ',ADMIN_ID=' || V_USER_ID ||
               ',ADMIN_NAME=''' || V_USER_NAME || ''' WHERE USER_ID=' || V_USER_ID ||
               ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' || P_AUCTION_ORDER_IDS ||
               ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' || ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
               ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
               ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' || V_USER_ID || ' AND L.LEND_TYPE = 3' ||
               ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
      EXECUTE IMMEDIATE V_SQL;
      
      /* 判断：如果上一条SQL：update user_orders返回0条，则该订单已支付。事务回滚 */
      if sql%rowcount=0  then
         BEGIN
            rollback;
            RESULT_STATUS := 2; --return 2: 该订单已经处理
            RETURN;
          END;
      end if;
      /*更新拍品结算状态*/
      V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (' ||
               'SELECT AUCTION_ID FROM USER_ORDERS WHERE USER_ID=' || V_USER_ID || ' AND ID IN (' ||
               P_AUCTION_ORDER_IDS || '))';
      EXECUTE IMMEDIATE V_SQL;
    
      DBMS_OUTPUT.PUT_LINE('更新拍卖交易单状态为已支付,数量:' || SQL%ROWCOUNT);
    END IF;
  
    /*还有新商场交易单需要更新*/
    IF V_EC_ORDERS_COUNT > 0 THEN
      V_SQL := 'UPDATE EC_ORDER_GOODS SET ORDER_STATUS=1, UNITE_PAY_ID = ' || P_PAYMENT_ID || ', PAY_DATE=to_date(''' ||
               TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') || ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || V_USER_ID ||
               ' AND ORDER_STATUS=0 AND  ID IN (' || P_EC_ORDER_IDS || ')';
      EXECUTE IMMEDIATE V_SQL;
    
      DBMS_OUTPUT.PUT_LINE('更新商城交易单状态为已支付,数量:' || SQL%ROWCOUNT);
    
      /*edit by zhangyi 扣除冻结的订金*/
      IF V_EC_DEPOSITS_NUM > 0 THEN
        V_SQL := 'UPDATE ec_auction_book SET STATUS=6,UPDATED_AT=sysdate WHERE ORDER_ID IN (' || P_EC_ORDER_IDS ||
                 ') AND STATUS IN (4,5)';
        EXECUTE IMMEDIATE V_SQL;
      END IF;
    
      /*edit by zhangyi 修改用户账户里的冻结资金*/
      IF V_EC_DEPOSITS > 0 THEN
        UPDATE USERS
           SET TOTAL_ACCOUNT = TOTAL_ACCOUNT - V_EC_DEPOSITS, FREEZE_ACCOUNT = FREEZE_ACCOUNT - V_EC_DEPOSITS
         WHERE ID = V_USER_ID;
      END IF;
    
    END IF;
  END;

  BEGIN
    /*获取占用额度*/
    SELECT SUM(USE_QUOTA)
      INTO V_TOTAL_USED_QUOTA
      FROM USER_QUOTA_USAGES
     WHERE USER_ID = V_USER_ID
       AND STATUS = 1
       AND EXISTS (SELECT ID
              FROM USER_ORDERS
             WHERE USER_ID = V_USER_ID
               AND STATUS = '1'
               AND USER_PAYMENT_ID = P_PAYMENT_ID
               AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);
  
    /*更新占用额度为不占用*/
    UPDATE USER_QUOTA_USAGES
       SET STATUS = '0'
     WHERE USER_ID = V_USER_ID
       AND STATUS = '1'
       AND EXISTS (SELECT ID
              FROM USER_ORDERS
             WHERE USER_ID = V_USER_ID
               AND STATUS = '1'
               AND USER_PAYMENT_ID = P_PAYMENT_ID
               AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);
  
    /*释放占用额度*/
    IF V_TOTAL_USED_QUOTA IS NOT NULL AND V_TOTAL_USED_QUOTA > 0 THEN
      UPDATE USERS SET QUOTA = QUOTA + V_TOTAL_USED_QUOTA WHERE ID = V_USER_ID;
      /*额度流水*/
      INSERT INTO USER_QUOTAS
        (ID, USER_ID, AMOUNT, QUOTA_TYPE, OPERATE_TYPE, REMARKS, CREATED_AT, DIRECTION)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL, V_USER_ID, V_TOTAL_USED_QUOTA, 5, 1, '余额支付交易单', V_NOW, 0);
      DBMS_OUTPUT.PUT_LINE('释放占用额度:' || V_TOTAL_USED_QUOTA);
    END IF;
  
    IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
      -----
      V_SQL := 'select a.id from auctions a,user_orders o where a.id=o.auction_id and o.id in (' || P_AUCTION_ORDER_IDS || ')';
    
      OPEN CUR_AUCTION_FEE FOR V_SQL;
      LOOP
        FETCH CUR_AUCTION_FEE
          INTO V_AUCTION_ID;
        EXIT WHEN CUR_AUCTION_FEE%NOTFOUND;
      
        P_SETTLEMENT_AUCTION_FEE(V_AUCTION_ID, V_AUCTIO_FEE_RESULT);
      END LOOP;
    END IF;
  END;
  RESULT_STATUS := 0;
  RETURN;
END P_USER_BALANCE_PAY2;

 
/

-- ----------------------------
-- Procedure structure for P_USER_BUY_LEVEL_CHANGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_BUY_LEVEL_CHANGE"
/*
     作者： lizheng
     日期： 2014.1.28
     描述： 买方会员级别变更
     买方级别说明:
           0：注册会员
           1：一钻会员
           2：二钻会员
           3：三钻会员
           4：四钻会员
           5：五钻会员
     异常说明：
     B0001   : 买方升级异常
     B0002   : 买方保级降级异常
  
     修改人：lizheng
     修改日期：2014.1.28
     描述：修改用降级业务规则(规则见readmine#162)
  */
 IS
  V_NOW DATE := SYSDATE;
  /** 买方过期或需要升级的会员  */
  CURSOR C_USER_LEVEL_BUY IS
    SELECT U.ID,
           U.TRUE_NAME,
           U.BUY_LEVEL,
           U.BUY_SCORE_AMOUNT,
           U.BUY_LEVEL_STARTED_AT,
           U.BUY_LEVEL_EXPIRED_AT,
           U.SELL_LEVEL,
           U.SELL_SCORE_AMOUNT,
           U.SELL_LEVEL_STARTED_AT
      FROM USERS U
     WHERE U.ISLOCK != 1
       AND U.USER_LANG != 2
       AND U.ID = 2041418
       AND (TO_CHAR(U.BUY_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') = TO_CHAR(V_NOW, 'yyyy-MM-dd') OR
           ((U.BUY_LEVEL = 0 AND U.BUY_SCORE_AMOUNT > 0) OR (U.BUY_LEVEL = 1 AND U.BUY_SCORE_AMOUNT >= 250) OR
           (U.BUY_LEVEL = 2 AND U.BUY_SCORE_AMOUNT >= 1200) OR (U.BUY_LEVEL = 3 AND U.BUY_SCORE_AMOUNT >= 4000) OR
           (U.BUY_LEVEL = 4 AND U.BUY_SCORE_AMOUNT >= 8000)));

  --V_COUNT_DAYS NUMBER := 0; /* 级别有效期天数 */

  TYPE LEVEL_ARRAY_TYPE IS VARRAY(5) OF NUMBER(38);
  --每一等级需要的形象值
  V_LEVEL_CHANGE_ARRAY    LEVEL_ARRAY_TYPE := LEVEL_ARRAY_TYPE(0, 250, 1200, 4000, 8000);
  V_USER_BUY_SCORES       NUMBER := 0; --升/降/保过后当前形象值
  V_USER_BUY_LEVEL_CHANGE NUMBER := 1; --变更的级别

  V_IS_LEVEL_EXPIRED    NUMBER; --是否过期用户
  V_IS_DEMOTION         NUMBER; --是否过期重新计算等级用户
  V_GIFT_QUOTA          NUMBER := 0; --赠送额度
  V_ADD_MONTH           DATE; --升/降级到期时间
  V_IS_GIVE_LEVEL_QUOTA NUMBER := 0; --是否赠送过4,5钻赠送额度
  V_CHANGE_TYPE         NUMBER; --级别变更历史类型 0升级,1降级,4保级
  V_OPERATE_TYPE        NUMBER; --形象值操作类型 3升级4降级5保级

  V_LEVEL  NUMBER;
  V_REMARK VARCHAR2(50);
  V_DEBUG  VARCHAR2(1000);

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);

  FOR RESULT_ROW IN C_USER_LEVEL_BUY LOOP
    V_IS_LEVEL_EXPIRED := 0;
    V_IS_DEMOTION      := 0;
    V_GIFT_QUOTA       := 0;
    V_ADD_MONTH        := ADD_MONTHS(V_NOW, 12);
    V_CHANGE_TYPE      := 0;
    V_REMARK           := '';
  
    V_DEBUG := RESULT_ROW.ID;
    --@1.是否过期用户
    IF TRUNC(RESULT_ROW.BUY_LEVEL_EXPIRED_AT) = TRUNC(V_NOW) AND RESULT_ROW.BUY_LEVEL != 0 THEN
      V_DEBUG            := V_DEBUG || '过期(' || TO_CHAR(RESULT_ROW.BUY_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') || ')';
      V_IS_LEVEL_EXPIRED := 1;
      /*五钻用户,满8000可延1年.满4000可延期半年.否则按实际等级计算*/
      IF RESULT_ROW.BUY_LEVEL = 5 THEN
        IF RESULT_ROW.BUY_SCORE_AMOUNT >= 8000 THEN
          V_USER_BUY_SCORES       := RESULT_ROW.BUY_SCORE_AMOUNT - 8000;
          V_USER_BUY_LEVEL_CHANGE := 5;
        ELSIF RESULT_ROW.BUY_SCORE_AMOUNT >= 4000 THEN
          V_USER_BUY_SCORES       := RESULT_ROW.BUY_SCORE_AMOUNT - 4000;
          V_ADD_MONTH             := ADD_MONTHS(V_NOW, 6);
          V_USER_BUY_LEVEL_CHANGE := 5;
        ELSE
          V_IS_DEMOTION := 1;
        END IF;
      ELSE
        V_IS_DEMOTION := 1;
      END IF;
    END IF;
    --END @1.是否过期用户
  
    --@2过期且非5钻保级/延长用户 或 未过期需要升级用户
    IF (V_IS_LEVEL_EXPIRED = 1 AND V_IS_DEMOTION = 1) OR (V_IS_LEVEL_EXPIRED = 0 AND V_IS_DEMOTION = 0) THEN
    
      V_USER_BUY_SCORES := RESULT_ROW.BUY_SCORE_AMOUNT;
      --@3计算对应级别
      FOR I IN 0 .. 4 LOOP
        IF I = RESULT_ROW.BUY_LEVEL THEN
          --未过期用户只判断升级
          IF V_IS_LEVEL_EXPIRED = 0 THEN
            V_LEVEL                 := I + 1; --下一等级
            V_USER_BUY_LEVEL_CHANGE := RESULT_ROW.BUY_LEVEL;
          ELSE
            --过期用户根据实际形象值计算对应级别
            V_LEVEL                 := 2;
            V_USER_BUY_LEVEL_CHANGE := 1; --最低降到1级
          END IF;
        
          --计算对应级别
          FOR J IN V_LEVEL .. V_LEVEL_CHANGE_ARRAY.COUNT LOOP
            IF V_USER_BUY_SCORES - V_LEVEL_CHANGE_ARRAY(J) < 0 THEN
              EXIT;
            END IF;
            V_USER_BUY_LEVEL_CHANGE := J;
            V_USER_BUY_SCORES       := V_USER_BUY_SCORES - V_LEVEL_CHANGE_ARRAY(J);
          END LOOP;
        
          --注册用户完成至少一次交易,即可升1钻
          IF V_USER_BUY_LEVEL_CHANGE = 0 AND RESULT_ROW.BUY_LEVEL = 0 AND V_USER_BUY_SCORES > 0 AND
             V_USER_BUY_SCORES < V_LEVEL_CHANGE_ARRAY(1) THEN
            V_USER_BUY_LEVEL_CHANGE := 1;
          END IF;
        
          /*@4升到5钻, 需要4钻满1年.*/
          IF V_USER_BUY_LEVEL_CHANGE = 5 AND RESULT_ROW.BUY_LEVEL = 4 AND V_NOW - RESULT_ROW.BUY_LEVEL_STARTED_AT > 364 THEN
            --是否赠送过5钻的500000额度
            SELECT COUNT(*)
              INTO V_IS_GIVE_LEVEL_QUOTA
              FROM USER_QUOTAS Q
             WHERE Q.AMOUNT = 500000
               AND Q.QUOTA_TYPE = '0'
               AND Q.OPERATE_TYPE = '1'
               AND Q.USER_ID = RESULT_ROW.ID
               AND Q.REMARKS LIKE 'UPGRADE%->5';
          
            IF V_IS_GIVE_LEVEL_QUOTA = 0 THEN
              V_GIFT_QUOTA := 500000;
            END IF;
            --@4.1否则最高升到4钻
          ELSIF V_USER_BUY_LEVEL_CHANGE = 5 THEN
            V_USER_BUY_LEVEL_CHANGE := 4;
            V_USER_BUY_SCORES       := V_USER_BUY_SCORES + 8000;
            --是否赠送过4钻的100000额度
            SELECT COUNT(*)
              INTO V_IS_GIVE_LEVEL_QUOTA
              FROM USER_QUOTAS Q
             WHERE Q.AMOUNT = 100000
               AND Q.QUOTA_TYPE = '0'
               AND Q.OPERATE_TYPE = '1'
               AND Q.USER_ID = RESULT_ROW.ID
               AND Q.REMARKS LIKE 'UPGRADE%->4';
          
            IF V_IS_GIVE_LEVEL_QUOTA = 0 THEN
              V_GIFT_QUOTA := 100000;
            END IF;
          ELSIF V_USER_BUY_LEVEL_CHANGE = 4 THEN
            SELECT COUNT(*)
              INTO V_IS_GIVE_LEVEL_QUOTA
              FROM USER_QUOTAS Q
             WHERE Q.AMOUNT = 100000
               AND Q.QUOTA_TYPE = '0'
               AND Q.OPERATE_TYPE = '1'
               AND Q.USER_ID = RESULT_ROW.ID
               AND Q.REMARKS LIKE 'UPGRADE%->4';
          
            IF V_IS_GIVE_LEVEL_QUOTA = 0 THEN
              V_GIFT_QUOTA := 100000;
            END IF;
          END IF;
          --END @4
          EXIT;
        END IF;
      END LOOP;
      --END @3
    END IF;
    --END @2
    --******************DEBUG************************
    IF V_IS_LEVEL_EXPIRED = 1 THEN
      V_DEBUG := V_DEBUG || ', 从';
      V_DEBUG := V_DEBUG || RESULT_ROW.BUY_LEVEL || '钻到' || V_USER_BUY_LEVEL_CHANGE || '钻(' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD') || '~' || TO_CHAR(V_ADD_MONTH, 'YYYY-MM-DD') || '),当前形象值' ||
                 RESULT_ROW.BUY_SCORE_AMOUNT || ', 共消耗' || (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES) ||
                 '形象值, 剩余形象值为' || V_USER_BUY_SCORES;
      DBMS_OUTPUT.PUT_LINE(V_DEBUG);
    ELSE
      IF V_USER_BUY_LEVEL_CHANGE > RESULT_ROW.BUY_LEVEL THEN
        V_DEBUG := V_DEBUG || '升级, 从';
        V_DEBUG := V_DEBUG || RESULT_ROW.BUY_LEVEL || '钻到' || V_USER_BUY_LEVEL_CHANGE || '钻(' ||
                   TO_CHAR(V_NOW, 'YYYY-MM-DD') || '~' || TO_CHAR(V_ADD_MONTH, 'YYYY-MM-DD') || '), 共消耗' ||
                   (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES) || '形象值, 当前形象值为' || V_USER_BUY_SCORES;
        DBMS_OUTPUT.PUT_LINE(V_DEBUG);
      ELSE
        V_DEBUG := V_DEBUG || '无变化';
        DBMS_OUTPUT.PUT_LINE(V_DEBUG);
      END IF;
    END IF;
    --******************DEBUG************************
  
    --******************操作用户数据,记录流水和历史*****
    IF V_IS_LEVEL_EXPIRED = 1 OR (V_IS_LEVEL_EXPIRED = 0 AND V_USER_BUY_LEVEL_CHANGE > RESULT_ROW.BUY_LEVEL) THEN
      /*更新用户信息*/
      UPDATE USERS U
         SET U.BUY_LEVEL            = V_USER_BUY_LEVEL_CHANGE,
             U.BUY_SCORE_AMOUNT     = V_USER_BUY_SCORES,
             U.BUY_LEVEL_STARTED_AT = V_NOW,
             U.BUY_LEVEL_EXPIRED_AT = V_ADD_MONTH,
             U.QUOTA                = U.QUOTA + V_GIFT_QUOTA,
             U.TOTAL_QUOTA          = U.TOTAL_QUOTA + V_GIFT_QUOTA
       WHERE U.ID = RESULT_ROW.ID;
    
      IF RESULT_ROW.BUY_LEVEL = V_USER_BUY_LEVEL_CHANGE THEN
        V_REMARK       := 'noChangeLevel';
        V_CHANGE_TYPE  := 4;
        V_OPERATE_TYPE := 5;
      ELSIF RESULT_ROW.BUY_LEVEL > V_USER_BUY_LEVEL_CHANGE THEN
        V_REMARK       := 'demetion LEVEL' || RESULT_ROW.BUY_LEVEL || '->' || V_USER_BUY_LEVEL_CHANGE;
        V_CHANGE_TYPE  := 1;
        V_OPERATE_TYPE := 4;
      ELSIF RESULT_ROW.BUY_LEVEL < V_USER_BUY_LEVEL_CHANGE THEN
        V_REMARK       := 'upgrade';
        V_CHANGE_TYPE  := 0;
        V_OPERATE_TYPE := 3;
      END IF;
    
      /*级别变更历史*/
      INSERT INTO USER_LEVEL_HISTS
        (ID,
         USER_ID,
         CHANGE_TYPE,
         USER_CHANGE_LEVEL,
         USER_CHANGED_LEVEL,
         CONSUME_SCORES,
         USER_TYPE,
         CHANGE_REASON,
         START_DATE,
         EXPIRE_DATE,
         OP)
      VALUES
        (USER_LEVEL_HISTS_SEQ.NEXTVAL,
         RESULT_ROW.ID,
         V_CHANGE_TYPE,
         RESULT_ROW.BUY_LEVEL,
         V_USER_BUY_LEVEL_CHANGE,
         (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES),
         '0',
         V_REMARK,
         V_NOW,
         V_ADD_MONTH,
         'PROC P_USER_BUY_LEVEL_CHANGE');
      IF RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES > 0 THEN
        /* 用户形象值流水 */
        INSERT INTO USER_LEVEL_DETAILS
          (ID,
           USER_ID,
           USER_NAME,
           USER_TYPE,
           SCORES,
           DIRECTION,
           OPERATE_TYPE,
           RESOURCE_ID,
           RESOURCE_TYPE,
           REMARKS,
           CREATED_AT)
        VALUES
          (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           RESULT_ROW.TRUE_NAME,
           '0',
           (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES),
           '1',
           V_OPERATE_TYPE,
           RESULT_ROW.ID,
           'USERS',
           'PROC P_USER_BUY_LEVEL_CHANGE',
           SYSDATE);
        --操作扣除相应的形象值
        P_VALUES_BUYER_EXCHANGE(RESULT_ROW.ID, (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES));
      END IF;
    END IF;
    --是否赠送额度
    IF V_GIFT_QUOTA > 0 THEN
      IF V_USER_BUY_LEVEL_CHANGE = 4 AND RESULT_ROW.BUY_LEVEL < 4 THEN
        V_REMARK := 'UPGRADE LEVEL' || RESULT_ROW.BUY_LEVEL || '->4';
      ELSIF V_USER_BUY_LEVEL_CHANGE = 4 AND RESULT_ROW.BUY_LEVEL > 4 THEN
        V_REMARK := 'demetion LEVEL5->4';
      ELSIF V_USER_BUY_LEVEL_CHANGE = 5 THEN
        V_REMARK := 'UPGRADE LEVEL4->5';
      END IF;
    
      INSERT INTO USER_QUOTAS
        (ID, USER_ID, AMOUNT, REMARKS, CREATED_AT, OPERATE_TYPE, QUOTA_TYPE, ADMIN_NAME)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL,
         RESULT_ROW.ID,
         V_GIFT_QUOTA,
         V_REMARK,
         V_NOW,
         '1',
         '0',
         'PROC P_USER_BUY_LEVEL_CHANGE');
    END IF;
  END LOOP;
END P_USER_BUY_LEVEL_CHANGE;

 
/

-- ----------------------------
-- Procedure structure for P_USER_BUY_LEVEL_CHG
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_BUY_LEVEL_CHG"
/*
     作者： lizheng
     日期： 2014.1.28
     描述： 买方会员级别变更
     买方级别说明:
           0：注册会员
           1：一钻会员
           2：二钻会员
           3：三钻会员
           4：四钻会员
           5：五钻会员
     异常说明：
     B0001   : 买方升级异常
     B0002   : 买方保级降级异常
  
     修改人：lizheng
     修改日期：2014.1.28
     描述：修改用降级业务规则(规则见readmine#162)
  */
 IS
  V_NOW DATE := SYSDATE;
  /** 买方过期或需要升级的会员  */
  CURSOR C_USER_LEVEL_BUY IS
    SELECT U.ID,
           U.TRUE_NAME,
           U.BUY_LEVEL,
           U.BUY_SCORE_AMOUNT,
           U.BUY_LEVEL_STARTED_AT,
           U.BUY_LEVEL_EXPIRED_AT,
           U.SELL_LEVEL,
           U.SELL_SCORE_AMOUNT,
           U.SELL_LEVEL_STARTED_AT
      FROM USERS U
     WHERE U.ISLOCK != 1
       AND U.USER_LANG != 2
          --AND U.ID = 2029925;
       AND (TO_CHAR(U.BUY_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') = TO_CHAR(V_NOW, 'yyyy-MM-dd') OR
           ((U.BUY_LEVEL = 0 AND U.BUY_SCORE_AMOUNT > 0) OR (U.BUY_LEVEL = 1 AND U.BUY_SCORE_AMOUNT >= 250) OR
           (U.BUY_LEVEL = 2 AND U.BUY_SCORE_AMOUNT >= 1200) OR (U.BUY_LEVEL = 3 AND U.BUY_SCORE_AMOUNT >= 4000) OR
           (U.BUY_LEVEL = 4 AND U.BUY_SCORE_AMOUNT >= 8000)));

  --V_COUNT_DAYS NUMBER := 0; /* 级别有效期天数 */

  TYPE LEVEL_ARRAY_TYPE IS VARRAY(5) OF NUMBER(38);
  --每一等级需要的形象值
  V_LEVEL_CHANGE_ARRAY    LEVEL_ARRAY_TYPE := LEVEL_ARRAY_TYPE(0, 250, 1200, 4000, 8000);
  V_USER_BUY_SCORES       NUMBER := 0; --升/降/保过后当前形象值
  V_USER_BUY_LEVEL_CHANGE NUMBER := 1; --变更的级别

  V_IS_LEVEL_EXPIRED    NUMBER; --是否过期用户
  V_IS_DEMOTION         NUMBER; --是否过期重新计算等级用户
  V_GIFT_QUOTA          NUMBER := 0; --赠送额度
  V_ADD_MONTH           DATE; --升/降级到期时间
  V_IS_GIVE_LEVEL_QUOTA NUMBER := 0; --是否赠送过4,5钻赠送额度
  V_CHANGE_TYPE         NUMBER; --级别变更历史类型 0升级,1降级,4保级
  V_OPERATE_TYPE        NUMBER; --形象值操作类型 3升级4降级5保级

  V_LEVEL  NUMBER;
  V_REMARK VARCHAR2(50);
  V_DEBUG  VARCHAR2(1000);

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);

  FOR RESULT_ROW IN C_USER_LEVEL_BUY LOOP
    V_IS_LEVEL_EXPIRED := 0;
    V_IS_DEMOTION      := 0;
    V_GIFT_QUOTA       := 0;
    V_ADD_MONTH        := ADD_MONTHS(V_NOW, 12);
    V_CHANGE_TYPE      := 0;
    V_REMARK           := '';
  
    V_DEBUG := RESULT_ROW.ID;
    --@1.是否过期用户
    IF TRUNC(RESULT_ROW.BUY_LEVEL_EXPIRED_AT) = TRUNC(V_NOW) AND RESULT_ROW.BUY_LEVEL != 0 THEN
      V_DEBUG            := V_DEBUG || '过期(' || TO_CHAR(RESULT_ROW.BUY_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') || ')';
      V_IS_LEVEL_EXPIRED := 1;
      /*五钻用户,满8000可延1年.满4000可延期半年.否则按实际等级计算*/
      IF RESULT_ROW.BUY_LEVEL = 5 THEN
        IF RESULT_ROW.BUY_SCORE_AMOUNT >= 8000 THEN
          V_USER_BUY_SCORES       := RESULT_ROW.BUY_SCORE_AMOUNT - 8000;
          V_USER_BUY_LEVEL_CHANGE := 5;
        ELSIF RESULT_ROW.BUY_SCORE_AMOUNT >= 4000 THEN
          V_USER_BUY_SCORES       := RESULT_ROW.BUY_SCORE_AMOUNT - 4000;
          V_ADD_MONTH             := ADD_MONTHS(V_NOW, 6);
          V_USER_BUY_LEVEL_CHANGE := 5;
        ELSE
          V_IS_DEMOTION := 1;
        END IF;
      ELSE
        V_IS_DEMOTION := 1;
      END IF;
    END IF;
    --END @1.是否过期用户
  
    --@2过期且非5钻保级/延长用户 或 未过期需要升级用户
    IF (V_IS_LEVEL_EXPIRED = 1 AND V_IS_DEMOTION = 1) OR (V_IS_LEVEL_EXPIRED = 0 AND V_IS_DEMOTION = 0) THEN
    
      V_USER_BUY_SCORES := RESULT_ROW.BUY_SCORE_AMOUNT;
      --@3计算对应级别
      FOR I IN 0 .. 4 LOOP
        IF I = RESULT_ROW.BUY_LEVEL THEN
          --未过期用户只判断升级
          IF V_IS_LEVEL_EXPIRED = 0 THEN
            V_LEVEL                 := I + 1; --下一等级
            V_USER_BUY_LEVEL_CHANGE := RESULT_ROW.BUY_LEVEL;
          ELSE
            --过期用户根据实际形象值计算对应级别
            V_LEVEL                 := 2;
            V_USER_BUY_LEVEL_CHANGE := 1; --最低降到1级
          END IF;
        
          --计算对应级别
          FOR J IN V_LEVEL .. V_LEVEL_CHANGE_ARRAY.COUNT LOOP
            IF V_USER_BUY_SCORES - V_LEVEL_CHANGE_ARRAY(J) < 0 THEN
              EXIT;
            END IF;
            V_USER_BUY_LEVEL_CHANGE := J;
            V_USER_BUY_SCORES       := V_USER_BUY_SCORES - V_LEVEL_CHANGE_ARRAY(J);
          END LOOP;
        
          --注册用户完成至少一次交易,即可升1钻
          IF V_USER_BUY_LEVEL_CHANGE = 0 AND RESULT_ROW.BUY_LEVEL = 0 AND V_USER_BUY_SCORES > 0 AND
             V_USER_BUY_SCORES < V_LEVEL_CHANGE_ARRAY(1) THEN
            V_USER_BUY_LEVEL_CHANGE := 1;
          END IF;
        
          /*@4升到5钻, 需要4钻满1年.*/
          IF V_USER_BUY_LEVEL_CHANGE = 5 AND RESULT_ROW.BUY_LEVEL = 4 AND V_NOW - RESULT_ROW.BUY_LEVEL_STARTED_AT > 365 THEN
            --是否赠送过5钻的500000额度
            SELECT COUNT(*)
              INTO V_IS_GIVE_LEVEL_QUOTA
              FROM USER_QUOTAS Q
             WHERE Q.AMOUNT = 500000
               AND Q.QUOTA_TYPE = '0'
               AND Q.OPERATE_TYPE = '1'
               AND Q.USER_ID = RESULT_ROW.ID
               AND Q.REMARKS LIKE 'UPGRADE%->5';
          
            IF V_IS_GIVE_LEVEL_QUOTA = 0 THEN
              V_GIFT_QUOTA := 500000;
            END IF;
            --@4.1否则最高升到4钻
          ELSIF V_USER_BUY_LEVEL_CHANGE = 5 THEN
            V_USER_BUY_LEVEL_CHANGE := 4;
            V_USER_BUY_SCORES       := V_USER_BUY_SCORES + 8000;
            --是否赠送过4钻的100000额度
            SELECT COUNT(*)
              INTO V_IS_GIVE_LEVEL_QUOTA
              FROM USER_QUOTAS Q
             WHERE Q.AMOUNT = 100000
               AND Q.QUOTA_TYPE = '0'
               AND Q.OPERATE_TYPE = '1'
               AND Q.USER_ID = RESULT_ROW.ID
               AND Q.REMARKS LIKE 'UPGRADE%->4';
          
            IF V_IS_GIVE_LEVEL_QUOTA = 0 THEN
              V_GIFT_QUOTA := 100000;
            END IF;
          ELSIF V_USER_BUY_LEVEL_CHANGE = 4 THEN
            SELECT COUNT(*)
              INTO V_IS_GIVE_LEVEL_QUOTA
              FROM USER_QUOTAS Q
             WHERE Q.AMOUNT = 100000
               AND Q.QUOTA_TYPE = '0'
               AND Q.OPERATE_TYPE = '1'
               AND Q.USER_ID = RESULT_ROW.ID
               AND Q.REMARKS LIKE 'UPGRADE%->4';
          
            IF V_IS_GIVE_LEVEL_QUOTA = 0 THEN
              V_GIFT_QUOTA := 100000;
            END IF;
          END IF;
          --END @4
          EXIT;
        END IF;
      END LOOP;
      --END @3
    END IF;
    --END @2
    --******************DEBUG************************
    IF V_IS_LEVEL_EXPIRED = 1 THEN
      V_DEBUG := V_DEBUG || ', 从';
      V_DEBUG := V_DEBUG || RESULT_ROW.BUY_LEVEL || '钻到' || V_USER_BUY_LEVEL_CHANGE || '钻(' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD') || '~' || TO_CHAR(V_ADD_MONTH, 'YYYY-MM-DD') || '),当前形象值' ||
                 RESULT_ROW.BUY_SCORE_AMOUNT || ', 共消耗' || (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES) ||
                 '形象值, 剩余形象值为' || V_USER_BUY_SCORES;
      DBMS_OUTPUT.PUT_LINE(V_DEBUG);
    ELSE
      IF V_USER_BUY_LEVEL_CHANGE > RESULT_ROW.BUY_LEVEL THEN
        V_DEBUG := V_DEBUG || '升级, 从';
        V_DEBUG := V_DEBUG || RESULT_ROW.BUY_LEVEL || '钻到' || V_USER_BUY_LEVEL_CHANGE || '钻(' ||
                   TO_CHAR(V_NOW, 'YYYY-MM-DD') || '~' || TO_CHAR(V_ADD_MONTH, 'YYYY-MM-DD') || '), 共消耗' ||
                   (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES) || '形象值, 当前形象值为' || V_USER_BUY_SCORES;
        DBMS_OUTPUT.PUT_LINE(V_DEBUG);
      ELSE
        V_DEBUG := V_DEBUG || '无变化';
        DBMS_OUTPUT.PUT_LINE(V_DEBUG);
      END IF;
    END IF;
    --******************DEBUG************************
  
    --******************操作用户数据,记录流水和历史*****
    IF V_IS_LEVEL_EXPIRED = 1 OR (V_IS_LEVEL_EXPIRED = 0 AND V_USER_BUY_LEVEL_CHANGE > RESULT_ROW.BUY_LEVEL) THEN
      /*更新用户信息*/
      UPDATE USERS U
         SET U.BUY_LEVEL            = V_USER_BUY_LEVEL_CHANGE,
             U.BUY_SCORE_AMOUNT     = V_USER_BUY_SCORES,
             U.BUY_LEVEL_STARTED_AT = V_NOW,
             U.BUY_LEVEL_EXPIRED_AT = V_ADD_MONTH,
             U.QUOTA                = U.QUOTA + V_GIFT_QUOTA,
             U.TOTAL_QUOTA          = U.TOTAL_QUOTA + V_GIFT_QUOTA
       WHERE U.ID = RESULT_ROW.ID;
    
      IF RESULT_ROW.BUY_LEVEL = V_USER_BUY_LEVEL_CHANGE THEN
        V_REMARK       := 'noChangeLevel';
        V_CHANGE_TYPE  := 4;
        V_OPERATE_TYPE := 5;
      ELSIF RESULT_ROW.BUY_LEVEL > V_USER_BUY_LEVEL_CHANGE THEN
        V_REMARK       := 'demetion LEVEL' || RESULT_ROW.BUY_LEVEL || '->' || V_USER_BUY_LEVEL_CHANGE;
        V_CHANGE_TYPE  := 1;
        V_OPERATE_TYPE := 4;
      ELSIF RESULT_ROW.BUY_LEVEL < V_USER_BUY_LEVEL_CHANGE THEN
        V_REMARK       := 'upgrade';
        V_CHANGE_TYPE  := 0;
        V_OPERATE_TYPE := 3;
      END IF;
    
      /*级别变更历史*/
      INSERT INTO USER_LEVEL_HISTS
        (ID,
         USER_ID,
         CHANGE_TYPE,
         USER_CHANGE_LEVEL,
         USER_CHANGED_LEVEL,
         CONSUME_SCORES,
         USER_TYPE,
         CHANGE_REASON,
         START_DATE,
         EXPIRE_DATE,
         OP)
      VALUES
        (USER_LEVEL_HISTS_SEQ.NEXTVAL,
         RESULT_ROW.ID,
         V_CHANGE_TYPE,
         RESULT_ROW.BUY_LEVEL,
         V_USER_BUY_LEVEL_CHANGE,
         (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES),
         '0',
         V_REMARK,
         V_NOW,
         V_ADD_MONTH,
         'PROC P_USER_BUY_LEVEL_CHANGE');
      IF RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES > 0 THEN
        /* 用户形象值流水 */
        INSERT INTO USER_LEVEL_DETAILS
          (ID,
           USER_ID,
           USER_NAME,
           USER_TYPE,
           SCORES,
           DIRECTION,
           OPERATE_TYPE,
           RESOURCE_ID,
           RESOURCE_TYPE,
           REMARKS,
           CREATED_AT)
        VALUES
          (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           RESULT_ROW.TRUE_NAME,
           '0',
           (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES),
           '1',
           V_OPERATE_TYPE,
           RESULT_ROW.ID,
           'USERS',
           'PROC P_USER_BUY_LEVEL_CHANGE',
           SYSDATE);
        --操作扣除相应的形象值
        P_VALUES_BUYER_EXCHANGE(RESULT_ROW.ID, (RESULT_ROW.BUY_SCORE_AMOUNT - V_USER_BUY_SCORES));
      END IF;
    END IF;
    --是否赠送额度
    IF V_GIFT_QUOTA > 0 THEN
      IF V_USER_BUY_LEVEL_CHANGE = 4 AND RESULT_ROW.BUY_LEVEL < 4 THEN
        V_REMARK := 'UPGRADE LEVEL' || RESULT_ROW.BUY_LEVEL || '->4';
      ELSIF V_USER_BUY_LEVEL_CHANGE = 4 AND RESULT_ROW.BUY_LEVEL > 4 THEN
        V_REMARK := 'demetion LEVEL5->4';
      ELSIF V_USER_BUY_LEVEL_CHANGE = 5 THEN
        V_REMARK := 'UPGRADE LEVEL4->5';
      END IF;
    
      INSERT INTO USER_QUOTAS
        (ID, USER_ID, AMOUNT, REMARKS, CREATED_AT, OPERATE_TYPE, QUOTA_TYPE, ADMIN_NAME)
      VALUES
        (USER_QUOTAS_SEQ.NEXTVAL,
         RESULT_ROW.ID,
         V_GIFT_QUOTA,
         V_REMARK,
         V_NOW,
         '1',
         '0',
         'PROC P_USER_BUY_LEVEL_CHANGE');
    END IF;
  END LOOP;
END P_USER_BUY_LEVEL_CHG;

 
/

-- ----------------------------
-- Procedure structure for P_USER_CERTIFICATE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_CERTIFICATE" (p_user_id     IN NUMBER,
                                               p_cer_no      IN NUMBER,
                                               p_cer_type    IN NUMBER,
                                               p_true_name   IN NUMBER,
                                               p_birthday    IN DATE,
                                               result_status OUT NUMBER) IS
BEGIN
  /**
  日期：2012-2-16
  描述：新增用户证件认证信息
  **/
  --修改用户详细信息
  UPDATE USER_DETAILS UD
     SET UD.CERT_TYPE            = p_cer_type,
         UD.CERT_NO              = p_cer_no,
         UD.ID_AUTH_REQUEST_TIME = SYSDATE,
         UD.BRITHDAY             = p_birthday
   WHERE UD.USER_ID = p_user_id;
  --修改用户真实姓名
  UPDATE USERS U
     SET U.TRUE_NAME = p_true_name, U.UPDATED_AT = SYSDATE
   WHERE U.ID = p_user_id;
  result_status := 0;
  COMMIT;
  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    result_status := 1;
    ROLLBACK;
    RETURN;
END;


 
/

-- ----------------------------
-- Procedure structure for P_USER_COMEBACK_VALUES
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_COMEBACK_VALUES" 
(
    P_USER_ID         IN NUMBER,
    P_EXCHANGE_SCORES IN NUMBER,
    RESULT_STATUS     OUT NUMBER
)IS
/*
      作者： Dwen
      日期： 2014-01-24
      描述： 用户退货扣除形象值
      退货成功后，把当前退货那笔形象值设为过期，并从用户表总的形象值中减去该笔形象值，
      不够扣的情况？？？(需求不明确)，需要降级。
*/
V_BUY_SCORE_AMOUNT  NUMBER;
BEGIN
  SELECT U.BUY_SCORE_AMOUNT 
  INTO V_BUY_SCORE_AMOUNT 
  FROM USERS U 
  WHERE U.ID=P_USER_ID;
END P_USER_COMEBACK_VALUES;
 
/

-- ----------------------------
-- Procedure structure for P_USER_CREATE_ADDRESS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_CREATE_ADDRESS"
(
	p_user_id      IN NUMBER,
	p_receive_name IN VARCHAR,
	p_address      IN VARCHAR,
	p_postcode     IN VARCHAR,
	p_tel          IN VARCHAR,
	p_mobile_tel   IN VARCHAR,
	p_nickname     IN VARCHAR,
	p_country_id   IN NUMBER,
	p_first_name   IN VARCHAR,
	p_last_name    IN VARCHAR,
	p_id           OUT NUMBER
) IS
BEGIN
	/*
    作者：李征
    日期：2011-12-12
    描述：新建用户地址
  */
	BEGIN
		SELECT ID
			INTO P_ID
			FROM USER_ADDRESSES
		 WHERE USER_ID = p_user_id
			 AND RECEIVE_NAME = p_receive_name
			 AND ADDRESS = p_address
			 AND TEL = p_tel
			 AND MOBILE_TEL = p_mobile_tel;
		RETURN;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			p_id := 0;
	END;

	BEGIN
		SELECT USER_ADDRESSES_SEQ.NEXTVAL INTO p_id FROM DUAL;
		INSERT INTO USER_ADDRESSES
			(ID,
			 USER_ID,
			 RECEIVE_NAME,
			 ADDRESS,
			 POSTCODE,
			 TEL,
			 MOBILE_TEL,
			 NICKNAME,
			 CREATED_AT,
			 COUNTRY_ID,
			 FIRST_NAME,
			 LAST_NAME)
		VALUES
			(p_id,
			 p_user_id,
			 p_receive_name,
			 p_address,
			 p_postcode,
			 p_tel,
			 p_mobile_tel,
			 p_nickname,
			 SYSDATE,
			 p_country_id,
			 p_first_name,
			 p_last_name);
	EXCEPTION
		WHEN OTHERS THEN
			P_ID := 0;
			ROLLBACK;
			RETURN;
	END;

END P_USER_CREATE_ADDRESS;


 
/

-- ----------------------------
-- Procedure structure for P_USER_CREATE_IPS_PAYMENT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_CREATE_IPS_PAYMENT"
(
	P_USER_ID             IN NUMBER,
	P_REMARK              IN VARCHAR2,
	P_ORDER_TYPE          IN VARCHAR2,
	P_ORDER_IDS           IN VARCHAR2,
	P_TOTAL_AMOUNT        IN NUMBER,
  P_PAY_CHARGED_FEE     IN NUMBER,
	RESULT_IPS_PAYMENT_ID OUT NUMBER,
	RESULT_STATUS         OUT NUMBER
) IS
	V_NOW DATE := SYSDATE;
	/*
        创建人:李征
        描述:生成一条IPS/SDO支付请求记录
        
        修改人：dwen
        修改日期：2013-12-09
        修改内容：添加手续费P_PAY_CHARGED_FEE(财付通支付时需收取手续费)
  */
BEGIN
	SELECT USER_IPS_PAYMENTS_SEQ.NEXTVAL
		INTO RESULT_IPS_PAYMENT_ID
		FROM DUAL;
	/*生成一条IPS/SDO支付请求记录*/
	INSERT INTO USER_IPS_PAYMENTS
		(ID,
		 ORDER_IDS,
		 AMOUNT,
     PAY_CHARGED_FEE,
		 CREATED_AT,
		 STATUS,
		 F_CHECK,
		 USER_ID,
		 REMARK,
		 CURRENCY,
		 ORDER_TYPE)
	VALUES
		(RESULT_IPS_PAYMENT_ID,
		 P_ORDER_IDS,
		 P_TOTAL_AMOUNT,
     P_PAY_CHARGED_FEE,
		 V_NOW,
		 '0',
		 '0',
		 P_USER_ID,
		 P_REMARK,
		 'RMB',
		 P_ORDER_TYPE);

	RESULT_STATUS := 0;
	RETURN;
END P_USER_CREATE_IPS_PAYMENT;
 
/

-- ----------------------------
-- Procedure structure for P_USER_CREATE_MESSAGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_CREATE_MESSAGE"
	(
		p_from_id         NUMBER,
		p_to_id           VARCHAR,
		p_subject         VARCHAR,
		p_content         VARCHAR,
		p_parent_id       NUMBER,
		p_msg_type        CHAR,
		p_is_send_del     CHAR,
    p_app_id          VARCHAR,
		p_id              OUT NUMBER
     /*
      * 作者： Dwen
      * 日期： 2012-03-01
      * 描述： 创建站内信
      * 参数说明：
      *   p_from_id               :发信人
      *   p_to_id                 :收件人
      *   p_subject               :站内信标题
      *   p_content               :内容
      *   p_parent_id             :
      *   p_msg_type              :消息类型
      *   p_is_send_del           :发送方是否删除(0:否，1:是)
      *   p_app_id                : 0:PC, 1:WAP, 2:IPHONE, 3:ANDROID
      *   p_id                    :返回站内信ID,插入异常返回0，成功返回ID
      */
  )
  is
  v_msg_from VARCHAR(1000);
BEGIN
  BEGIN
  IF p_from_id=6 THEN
     v_msg_from := '客服';
  ELSE
    SELECT TRUE_NAME INTO v_msg_from FROM USERS WHERE ID = p_from_id;
  END IF;
  /* 插入站内信 */
  SELECT MESSAGES_SEQ.NEXTVAL INTO p_id FROM DUAL;
  INSERT INTO MESSAGES(ID,MSG_FROM,FROM_ID,TO_ID,SUBJECT,CONTENT,PARENT_ID,MSG_TYPE,IS_SEND_DEL,CREATED_AT,APP_ID)
  VALUES (p_id,v_msg_from,p_from_id,p_to_id,p_subject,p_content,p_parent_id,p_msg_type,p_is_send_del,SYSDATE,p_app_id);
  EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
        ROLLBACK;
        p_id:=0;
        RETURN;
  WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
        ROLLBACK;
        p_id:=0;
        RETURN;
  WHEN OTHERS THEN              /* 其它异常 */
        ROLLBACK;
        p_id:=0;
        RETURN;
  END;
  COMMIT;
END P_USER_CREATE_MESSAGE;


 
/

-- ----------------------------
-- Procedure structure for P_USER_DELIVER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_DELIVER"
(
	p_user_id             IN NUMBER, --客户编号
	p_auction_order_ids   IN VARCHAR, --竞拍交易单号
	p_consign_auction_ids IN VARCHAR, --退委拍品id
	p_ec_order_ids        IN VARCHAR, --商城交易单号
	p_combine_logistic_id IN VARCHAR, --合并发货单号
	p_logistic_type_id    IN OUT NUMBER, --发货方式
	P_DELIVER_ALL         IN NUMBER,
	p_address_id          IN NUMBER, --收货地址
	p_keepPrice           IN NUMBER, --保价额
	p_keepFee             IN NUMBER, --保价费
	p_itmes_count         IN OUT NUMBER, --发货数量
	p_remarks             IN VARCHAR, --备注
	v_logistic_id         OUT NUMBER,
	v_logistic_detail_id  OUT NUMBER,
	result_status         OUT NUMBER
	/*
        * 1:用户不存在
        * 2:被合并的发货单不存在
        * 3:合并发货单失败
        */
) IS
	/**
     作者:李征
     日期:2012.09.27
     描述：前台新申请发货,包括商城,退委,竞拍
  */
	v_sql         VARCHAR2(10000);
	v_user_name   VARCHAR2(225);
	v_items_count NUMBER := 0;

	v_keep_price NUMBER;
	v_keep_fee   NUMBER;

	v_logistic_type NUMBER;
	v_address_id    NUMBER;
	v_address       VARCHAR2(300);

BEGIN
	DBMS_OUTPUT.enable(10000);
	BEGIN
    SELECT 
    decode(u.true_name, NULL, u.NICKNAME, u.true_name)
		INTO v_user_name
		FROM users u
		WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			result_status := 1;
			RETURN;
	END;

	SELECT logistics_seq.NEXTVAL INTO v_logistic_id FROM dual;
	SELECT logistic_details_seq.NEXTVAL INTO v_logistic_detail_id FROM dual;

	IF p_combine_logistic_id IS NOT NULL THEN
		BEGIN
			SELECT L.USER_ADDRESS_ID, L.ADDRESS, L.LOGISTIC_TYPE_ID
				INTO V_ADDRESS_ID, V_ADDRESS, p_logistic_type_id
				FROM LOGISTICS L
			 WHERE ID = p_combine_logistic_id;
		EXCEPTION
			WHEN no_data_found THEN
				result_status := 3;
				RETURN;
		END;
	ELSE
		V_ADDRESS_ID := p_address_id;
	END IF;

	--新申请发货的交易单

	BEGIN
		IF P_DELIVER_ALL = 1 THEN
			v_sql := 'UPDATE USER_ORDERS O SET O.LOGISTIC_DETAIL_ID = ' ||
							 V_LOGISTIC_DETAIL_ID || ' WHERE O.USER_ID=' || P_USER_ID ||
							 ' AND O.STATUS=1 AND O.IS_FREEZE = 0 AND O.LOGISTIC_DETAIL_ID IS NULL ' ||
							 ' AND NOT EXISTS(SELECT OO.ID FROM USER_ORDERS OO ' ||
							 ' JOIN LOGISTIC_DETAILS LD ON LD.ID = OO.LOGISTIC_DETAIL_ID ' ||
							 ' JOIN LOGISTICS L ON L.ID = LD.LOGISTIC_ID ' ||
							 ' JOIN V_WMS_LOG_ORDER_STATUS_INFO VWMS ON VWMS.LOGISTICID = L.ID ' ||
							 ' WHERE OO.USER_ID = ' || P_USER_ID || '  AND OO.ID =O.ID ' ||
							 ' AND DECODE(VWMS.LOGISTICSTATUS, 2, 0, 3, 0, 6, 0, 1) = 1 )' ||
							 ' AND NOT EXISTS(SELECT UR.ID FROM USER_REFUNDS UR' ||
							 ' WHERE UR.ID=O.USER_REFUND_ID' ||
							 ' AND DECODE(UR.STATUS,NULL,0,8,0,1) =1)' ||
							 ' AND NOT EXISTS (SELECT ID FROM LOGISTIC_LADING_DETAILS lld,v_wms_log_order_status_info v' ||
							 ' WHERE lld.AUCTION_ID = O.AUCTION_ID ' ||
							 ' AND V.logisticId = LLD.logistic_lading_id ' ||
							 ' AND V.logisticStatus != 6)';
			EXECUTE IMMEDIATE v_sql;
			p_itmes_count := SQL%ROWCOUNT;

			V_SQL := 'UPDATE AUCTIONS A SET A.LOGISTIC_DETAIL_ID = ' ||
							 V_LOGISTIC_DETAIL_ID || ' WHERE A.ID IN (SELECT ID ' ||
							 'FROM V_CONSIGN_RTN_DELIVERY_LST VCR WHERE USER_ID=' ||
							 P_USER_ID ||
							 ' AND NOT EXISTS (SELECT ID FROM LOGISTIC_LADING_DETAILS lld,v_wms_log_order_status_info v' ||
							 ' WHERE lld.AUCTION_ID = VCR.ID ' ||
							 ' AND V.logisticId = LLD.logistic_lading_id ' ||
							 ' AND V.logisticStatus != 6))';
			EXECUTE IMMEDIATE v_sql;

			p_itmes_count := p_itmes_count + SQL%ROWCOUNT;

			v_sql := 'update EC_ORDER_GOODS o set o.UNITE_CONSIGN_ID = ' ||
							 v_logistic_detail_id || ',APPLY_CONSIGN_DATE=sysdate ' ||
							 'where o.user_id=' || p_user_id ||
							 ' and o.ORDER_STATUS=1 and O.UNITE_CONSIGN_ID IS NULL';
			EXECUTE IMMEDIATE v_sql;
			p_itmes_count := p_itmes_count + SQL%ROWCOUNT;

		ELSE
			--更新交易单发货id
			IF P_AUCTION_ORDER_IDS IS NOT NULL THEN
				V_SQL := 'UPDATE USER_ORDERS O SET O.LOGISTIC_DETAIL_ID = ' ||
								 V_LOGISTIC_DETAIL_ID || ' WHERE O.USER_ID=' || P_USER_ID ||
								 ' AND O.STATUS=1 AND O.IS_FREEZE = 0 AND O.ID IN (' ||
								 P_AUCTION_ORDER_IDS || ')' ||
								 ' AND NOT EXISTS(SELECT OO.ID ' || ' FROM USER_ORDERS OO ' ||
								 ' JOIN LOGISTIC_DETAILS LD ON LD.ID = OO.LOGISTIC_DETAIL_ID ' ||
								 ' JOIN LOGISTICS L ON L.ID = LD.LOGISTIC_ID ' ||
								 ' JOIN V_WMS_LOG_ORDER_STATUS_INFO VWMS ON VWMS.LOGISTICID = L.ID ' ||
								 ' WHERE OO.STATUS=1 AND OO.USER_ID = ' || P_USER_ID ||
								 ' AND OO.ID =O.ID ' ||
								 ' AND DECODE(VWMS.LOGISTICSTATUS, 2, 0, 3, 0, 6, 0, 1) = 1 )' ||
								 ' AND NOT EXISTS(SELECT UR.ID FROM USER_REFUNDS UR WHERE UR.ID=O.USER_REFUND_ID' ||
								 ' AND DECODE(UR.STATUS,NULL,0,8,0,1) = 1)' ||
								 ' AND NOT EXISTS (SELECT ID FROM LOGISTIC_LADING_DETAILS lld,v_wms_log_order_status_info v' ||
								 ' WHERE lld.AUCTION_ID = O.AUCTION_ID ' ||
								 ' AND V.logisticId = LLD.logistic_lading_id ' ||
								 ' AND V.logisticStatus != 6)';
				EXECUTE IMMEDIATE V_SQL;
			END IF;
			--委托方退货
			IF p_consign_auction_ids IS NOT NULL THEN
				V_SQL := 'UPDATE AUCTIONS A SET A.LOGISTIC_DETAIL_ID = ' ||
								 V_LOGISTIC_DETAIL_ID || ' WHERE A.ID IN (SELECT ID ' ||
								 'FROM V_CONSIGN_RTN_DELIVERY_LST VCR WHERE USER_ID=' ||
								 P_USER_ID || ' AND ID IN (' || p_consign_auction_ids || ')' ||
								 ' AND NOT EXISTS (SELECT ID FROM LOGISTIC_LADING_DETAILS lld,v_wms_log_order_status_info v' ||
								 ' WHERE lld.AUCTION_ID = VCR.ID ' ||
								 ' AND V.logisticId = LLD.logistic_lading_id ' ||
								 ' AND V.logisticStatus != 6))';
				EXECUTE IMMEDIATE v_sql;
			END IF;

			--更新商城交易单发货ID
			IF P_EC_ORDER_IDS IS NOT NULL THEN
				V_SQL := 'UPDATE EC_ORDER_GOODS O SET O.UNITE_CONSIGN_ID = ' ||
								 V_LOGISTIC_DETAIL_ID || ',APPLY_CONSIGN_DATE=SYSDATE ' ||
								 'WHERE O.ORDER_STATUS=1 AND O.USER_ID=' || P_USER_ID ||
								 ' AND O.ID IN (' || P_EC_ORDER_IDS || ')';
				EXECUTE IMMEDIATE v_sql;
			END IF;
		END IF;

		IF p_itmes_count > 0 THEN
			IF p_logistic_type_id = 185 THEN
				--发货申请记录
				INSERT INTO logistics
					(id,
					 user_id,
					 user_name,
					 region_id,
					 logistic_type_id,
					 items_count,
					 is_free,
					 status,
					 remarks,
					 created_at,
					 address,
					 USER_ADDRESS_ID,
					 is_merged)
					SELECT v_logistic_id,
								 p_user_id,
								 v_user_name,
								 1,
								 p_logistic_type_id,
								 p_itmes_count,
								 0,
								 '2',
								 p_remarks,
								 SYSDATE,
								 '上门自取',
								 0,
								 0
						FROM dual;

			ELSE
				--发货申请记录
				INSERT INTO logistics
					(id,
					 user_id,
					 user_name,
					 region_id,
					 logistic_type_id,
					 user_address_id,
					 keep_price,
					 keep_fee,
					 is_merged,
					 items_count,
					 is_free,
					 status,
					 remarks,
					 created_at,
					 address,
					 postcode,
					 tel,
					 mobile_tel)
					SELECT v_logistic_id,
								 p_user_id,
								 v_user_name,
								 CASE
									 WHEN ua.COUNTRY_ID = 40 THEN
										1
									 WHEN ua.COUNTRY_ID = 186 OR ua.COUNTRY_ID = 114 OR
												ua.COUNTRY_ID = 84 THEN
										2
									 ELSE
										3
								 END,
								 p_logistic_type_id,
								 V_ADDRESS_ID,
								 p_keepPrice,
								 p_keepFee,
								 0,
								 p_itmes_count,
								 0,
								 '2',
								 p_remarks,
								 SYSDATE,
								 ua.ADDRESS,
								 ua.POSTCODE,
								 ua.TEL,
								 ua.MOBILE_TEL
						FROM user_addresses ua
					 WHERE ua.id = V_ADDRESS_ID;

			END IF;

			--发货申请详细
			INSERT INTO logistic_details
				(id,
				 logistic_id,
				 old_logistic_id,
				 user_id,
				 keep_price,
				 keep_fee,
				 delivery_type,
				 remarks,
				 created_at)
			VALUES
				(v_logistic_detail_id,
				 v_logistic_id,
				 v_logistic_id,
				 p_user_id,
				 p_keepPrice,
				 p_keepFee,
				 1,
				 p_remarks,
				 SYSDATE);
		ELSE
			ROLLBACK;
			p_itmes_count := 0;
			result_status := 4;
			RETURN;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			result_status := 4;
			DBMS_OUTPUT.PUT_LINE('SQLCODE:' || TO_CHAR(SQLCODE) || ',SQLERRM:' ||
													 SQLERRM);
			RETURN;
	END;

	--合并到已暂缓的发货单中
	IF p_combine_logistic_id IS NOT NULL AND p_combine_logistic_id != 0 THEN
		BEGIN
			SELECT items_count, keep_price, keep_fee
				INTO v_items_count, v_keep_price, v_keep_fee
				FROM logistics l
			 WHERE l.id = p_combine_logistic_id;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				result_status := 2;
				RETURN;
		END;

		BEGIN
			--更新原暂缓发货申请为合并状态,拍品数量为0
			UPDATE logistics
				 SET IS_MERGED = '1', items_count = 0
			 WHERE id = p_combine_logistic_id;

			--被合并的发货单详细外键改为新的发货单
			UPDATE LOGISTIC_DETAILS
				 SET logistic_id = v_logistic_id
			 WHERE logistic_id = p_combine_logistic_id;

			--更新新发货单数据,加上合并的数量
			UPDATE logistics
				 SET items_count = items_count + v_items_count,
						 keep_price  = v_keep_price,
						 keep_fee    = v_keep_fee
			 WHERE id = v_logistic_id;

			IF p_logistic_type_id = 185 THEN
				UPDATE BOOKINGS B
					 SET B.SOURCE_ID = v_logistic_id
				 WHERE SOURCE_TYPE = 'LOGISTICS'
					 AND SOURCE_ID = p_combine_logistic_id;
			END IF;

		EXCEPTION
			WHEN OTHERS THEN
				ROLLBACK;
				result_status := 3;
				RETURN;
		END;
	END IF;

	result_status := 0;
	RETURN;

END P_USER_DELIVER;


 
/

-- ----------------------------
-- Procedure structure for P_USER_DELIVER_BY_HIMSELF
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_DELIVER_BY_HIMSELF"
(
	p_user_id             NUMBER,
	p_user_name           VARCHAR,
	p_auction_order_ids   VARCHAR,
	p_consign_auction_ids VARCHAR,
	p_ec_order_ids        VARCHAR,
	p_item_count          IN OUT NUMBER,
	P_DELIVER_ALL         IN NUMBER,
	p_card_type           IN VARCHAR2,
	p_card_id             IN VARCHAR2,
	P_START_AT            IN DATE,
	P_END_AT              IN DATE,
	p_remarks             IN VARCHAR2,
	v_logistic_id         OUT NUMBER,
	V_LOGISTIC_DETAIL_ID  OUT NUMBER,
	result_status         OUT NUMBER
) IS
	/*
    创建人:李征
    日期:2012-05-05
    描述:前台申请发货,上门自取
  */

	v_user_id NUMBER;

	v_lend_id    NUMBER;
	v_booking_id NUMBER;
	v_sql        VARCHAR2(1000);

	v_logistic_type NUMBER := 185;

BEGIN
	BEGIN
		SELECT id INTO v_user_id FROM users WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			result_status := 1;
			RETURN;
	END;

	p_user_deliver(p_user_id,
								 p_auction_order_ids,
								 p_consign_auction_ids,
								 p_ec_order_ids,
								 NULL,
								 v_logistic_type, --上门自取
								 P_DELIVER_ALL,
								 0,
								 0,
								 0,
								 p_item_count,
								 p_remarks,
								 v_logistic_id,
								 V_LOGISTIC_DETAIL_ID,
								 result_status);

	INSERT INTO bookings
		(id,
		 source_id,
		 source_type,
		 user_name,
		 card_type,
		 card_id,
		 start_at,
		 end_at,
		 remarks,
		 created_at,
		 status)
	VALUES
		(bookings_seq.NEXTVAL,
		 v_logistic_id,
		 'LOGISTICS',
		 p_user_name,
		 p_card_type,
		 p_card_id,
		 P_START_AT,
		 P_END_AT,
		 p_remarks,
		 SYSDATE,
		 2);

	result_status := 0;
	RETURN;
END P_USER_DELIVER_BY_HIMSELF;


 
/

-- ----------------------------
-- Procedure structure for P_USER_DELIVER_MERGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_DELIVER_MERGE"
(
	P_USER_ID                 IN NUMBER,
	P_LOGISTIC_MAIN_ID        IN NUMBER,
	P_MERGE_IDS               IN VARCHAR,
	P_MERGE_COUNT             IN NUMBER,
	P_RESULT_LOGISTIC_TYPE_ID OUT NUMBER,
	RESULT_STATUS             OUT NUMBER
) IS
	/*
   * 描述:前台暂缓发货单合并
   * 时间:2012.10.12
   * 创建人:李征
     更新时间:2013.05.06
  */

	V_ITEM_COUNT     NUMBER := 0;
	V_ITEM_COUNT_TMP NUMBER;

	V_USER_NAME VARCHAR2(225);

	V_LOGISTIC_ID NUMBER;

	V_SQL              VARCHAR2(4000);
	V_TEMP             VARCHAR2(4001);
	V_TEMP_LOGISTIC_ID VARCHAR2(4001);

	TYPE cur_type IS REF CURSOR;
	cur_logistic cur_type;
BEGIN
	BEGIN
		SELECT decode(u.true_name, NULL, u.NICKNAME, u.true_name)
			INTO v_user_name
			FROM users u
		 WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			result_status := 1;
			RETURN;
	END;

	BEGIN
		SELECT L.ID, L.LOGISTIC_TYPE_ID
			INTO V_LOGISTIC_ID, P_RESULT_LOGISTIC_TYPE_ID
			FROM LOGISTICS L
		 WHERE ID = P_LOGISTIC_MAIN_ID;
	EXCEPTION
		WHEN no_data_found THEN
			result_status := 2;
			RETURN;
	END;

	IF P_MERGE_IDS IS NOT NULL THEN
		V_SQL := 'SELECT COUNT(O.ID) FROM LOGISTICS L,LOGISTIC_DETAILS LD,USER_ORDERS O WHERE' ||
						 ' L.ID=LD.LOGISTIC_ID AND O.LOGISTIC_DETAIL_ID=LD.ID AND L.USER_ID=' ||
						 P_USER_ID || ' AND L.ID IN( ' || P_MERGE_IDS || ',' ||
						 P_LOGISTIC_MAIN_ID || ')';
		EXECUTE IMMEDIATE V_SQL
			INTO V_ITEM_COUNT_TMP;

		V_ITEM_COUNT := V_ITEM_COUNT + V_ITEM_COUNT_TMP;

		V_SQL := 'SELECT nvl(SUM(O.GOODS_NUMBER),0) FROM LOGISTICS L,LOGISTIC_DETAILS LD, EC_ORDER_GOODS O' ||
						 ' WHERE L.ID=LD.LOGISTIC_ID AND O.UNITE_CONSIGN_ID=LD.ID AND L.USER_ID=' ||
						 P_USER_ID || 'AND L.ID IN( ' || P_MERGE_IDS || ',' ||
						 P_LOGISTIC_MAIN_ID || ')';
		EXECUTE IMMEDIATE V_SQL
			INTO V_ITEM_COUNT_TMP;

		V_ITEM_COUNT := V_ITEM_COUNT + V_ITEM_COUNT_TMP;

		V_SQL := 'SELECT COUNT(A.ID) FROM LOGISTICS L,LOGISTIC_DETAILS LD,AUCTIONS A WHERE' ||
						 ' L.ID=LD.LOGISTIC_ID AND A.LOGISTIC_DETAIL_ID=LD.ID AND L.USER_ID=' ||
						 P_USER_ID || ' AND L.ID IN( ' || P_MERGE_IDS || ',' ||
						 P_LOGISTIC_MAIN_ID || ')';
		EXECUTE IMMEDIATE V_SQL
			INTO V_ITEM_COUNT_TMP;

		V_ITEM_COUNT := V_ITEM_COUNT + V_ITEM_COUNT_TMP;
	END IF;

	BEGIN
		V_SQL := 'UPDATE LOGISTICS SET ITEMS_COUNT=' || V_ITEM_COUNT ||
						 'WHERE USER_ID=' || P_USER_ID || ' AND ID =' ||
						 P_LOGISTIC_MAIN_ID;
		EXECUTE IMMEDIATE V_SQL;

		--更新原暂缓发货申请为合并状态,拍品数量为0
		V_SQL := 'UPDATE LOGISTICS SET IS_MERGED=1,ITEMS_COUNT=0 WHERE USER_ID=' ||
						 P_USER_ID || ' AND ID IN(' || P_MERGE_IDS || ')';
		EXECUTE IMMEDIATE V_SQL;

		V_SQL := 'UPDATE LOGISTIC_DETAILS SET LOGISTIC_ID=' || v_logistic_id ||
						 ' WHERE USER_ID=' || P_USER_ID || ' AND LOGISTIC_ID IN(' ||
						 P_MERGE_IDS || ')';
		EXECUTE IMMEDIATE V_SQL;

		--20130503
		v_sql := 'select id from LOGISTICS where id in (' || P_MERGE_IDS || ')';
		OPEN cur_logistic FOR v_sql;
		LOOP
			FETCH cur_logistic
				INTO V_TEMP_LOGISTIC_ID;
			EXIT WHEN cur_logistic%NOTFOUND;

			INSERT INTO common_remarks
				(id,
				 source_id,
				 source_type,
				 custom_type,
				 content,
				 admin_id,
				 admin_name,
				 created_at)
			VALUES
				(common_remarks_seq.NEXTVAL,
				 V_TEMP_LOGISTIC_ID,
				 'LOGISTICS',
				 '合并发货',
				 '合并发货，其中' || V_TEMP_LOGISTIC_ID || '被' || v_logistic_id || '合并',
				 P_USER_ID,
				 V_USER_NAME,
				 SYSDATE);

		END LOOP;

		INSERT INTO common_remarks
			(id,
			 source_id,
			 source_type,
			 custom_type,
			 content,
			 admin_id,
			 admin_name,
			 created_at)
		VALUES
			(common_remarks_seq.NEXTVAL,
			 v_logistic_id,
			 'LOGISTICS',
			 '合并发货',
			 v_logistic_id || '合并' || P_MERGE_IDS || '发货',
			 P_USER_ID,
			 V_USER_NAME,
			 SYSDATE);

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			result_status := 3;
			RETURN;
	END;

	result_status := 0;

END P_USER_DELIVER_MERGE;


 
/

-- ----------------------------
-- Procedure structure for P_USER_EXPIRED_VALUES
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_EXPIRED_VALUES"
/*
      作者：Dwen
      日期：2014-01-10
      描述：形象值过期管理.
      需求：
      1、查询所有用户过期的形象值
      2、更新查询用户形象值状态（需添加USER_LEVEL_DETAILS形象值表，status字段）
      3、减少用户表形象值
      
*/
IS 
  /* 查询所有用户过期的形象值 */
  CURSOR C_EXPIRED_VALUES IS
    SELECT D.USER_ID,D.SCORES,D.USABLE_SCORES,D.USER_TYPE
    FROM USER_LEVEL_DETAILS D 
    JOIN USERS U ON (U.ID = D.USER_ID)
    WHERE U.USER_LANG !=2
    AND U.ISLOCK != 1 
    AND D.DIRECTION = '0' 
    AND D.STATUS = '1' 
    AND to_char(D.EXPIRED_AT, 'yyyy-MM-dd') =
					 to_char(SYSDATE, 'yyyy-MM-dd') 
    AND U.ID = 8038034;--#测试人员测试用,上线时删除
    /* 注：上线需加该条件，该条件日期根据上线日期来定 */
    --AND D.CREATED_AT >= TO_DATE('2014-02-15','yyyy-MM-dd');
BEGIN
  BEGIN 
    /* 更新查询用户形象值状态为已过期 */
    UPDATE USER_LEVEL_DETAILS D
    SET D.STATUS = 2,
        D.UPDATED_AT = SYSDATE
    WHERE D.DIRECTION = '0' 
    AND D.STATUS = '1' 
    AND to_char(D.EXPIRED_AT, 'yyyy-MM-dd') =
					 to_char(SYSDATE, 'yyyy-MM-dd')
    /* 注：上线需加该条件，该条件日期根据上线日期来定 */
    --AND D.CREATED_AT >= TO_DATE('2014-02-15','yyyy-MM-dd')
    --#测试人员测试用,上线时删除
    AND D.USER_ID IN (SELECT U.ID FROM USERS U WHERE U.USER_LANG !=2 AND U.ISLOCK != 1 AND U.ID = 8038034); 
    /* 注：上线时打开该条件 */
    --AND D.USER_ID IN (SELECT U.ID FROM USERS U WHERE U.USER_LANG !=2 AND U.ISLOCK != 1); 
  EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
      ROLLBACK;
  WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
      ROLLBACK;
  WHEN OTHERS THEN              /* 其它异常 */
      ROLLBACK;
  END;
  COMMIT;
  
  /* 过期用户形象值处理 */
  FOR RESULT_ROW IN C_EXPIRED_VALUES LOOP
  BEGIN
    /* 竞买方形象值 */
    IF RESULT_ROW.USER_TYPE = '0' THEN
      /* 减少用户表形象值*/
      UPDATE USERS U
      SET U.BUY_SCORE_AMOUNT  = U.BUY_SCORE_AMOUNT - RESULT_ROW.USABLE_SCORES
      WHERE U.ID = RESULT_ROW.USER_ID;
    END IF;
    
    /* 委托方形象值 */
    IF RESULT_ROW.USER_TYPE = '1' THEN
      /* 减少用户表形象值*/
      UPDATE USERS U
      SET U.SELL_SCORE_AMOUNT  = U.SELL_SCORE_AMOUNT - RESULT_ROW.USABLE_SCORES
      WHERE U.ID = RESULT_ROW.USER_ID;
    END IF;
    
  EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN    /*插入数据唯一索引对应的列上有重复值*/
      ROLLBACK;
  WHEN NO_DATA_FOUND THEN       /* 末找到数据 */
      ROLLBACK;
  WHEN OTHERS THEN              /* 其它异常 */
      ROLLBACK;
  END;
  COMMIT;
  END LOOP;
END P_USER_EXPIRED_VALUES;

 
/

-- ----------------------------
-- Procedure structure for P_USER_INFO_TITLE_COUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_INFO_TITLE_COUNT"
(
	P_USER_ID             IN NUMBER,
	NOT_YET_PAID_COUNT    OUT NUMBER,
	NOT_YET_SHIPPED_COUNT OUT NUMBER,
	MSG_COUNT             OUT NUMBER,
	NOT_SETTLEMENT_COUNT  OUT NUMBER
) IS
	/**
  作者：张禕
  描述：计算用户head 的各项数字
  **/
	V_NOT_YET_PAID_COUNT    NUMBER;
	V_NOT_YET_SHIPPED_COUNT NUMBER;
	V_MSG_COUNT             NUMBER;
	V_NOT_SETTLEMENT_COUNT  NUMBER;
BEGIN
	--未支付总数,未发货总数
	BEGIN
		IF P_USER_ID IS NULL THEN
			NOT_YET_PAID_COUNT    := 0;
			NOT_YET_SHIPPED_COUNT := 0;
			MSG_COUNT             := 0;
			RETURN;
		END IF;

		SELECT SUM(T.NOT_YET_PAID) AS NOT_YET_PAID
			INTO V_NOT_YET_PAID_COUNT
			FROM (SELECT COUNT(DECODE(O.USER_ID,
																P_USER_ID,
																DECODE(O.STATUS, 0, 1, NULL))) AS NOT_YET_PAID

							FROM USER_ORDERS O
						 WHERE O.USER_ID = P_USER_ID
							 AND NOT EXISTS
						 (SELECT UR.ID
											FROM USER_REFUNDS UR
										 WHERE UR.ID = O.USER_REFUND_ID
											 AND DECODE(UR.STATUS, NULL, 0, 8, 0, 1) = 1)
						UNION ALL
						SELECT COUNT(DECODE(O.USER_ID,
																P_USER_ID,
																DECODE(O.ORDER_STATUS, 0, 1, NULL),
																NULL)) AS NOT_YET_PAID
							FROM EC_ORDER_GOODS O
						 INNER JOIN EC_GOODS EG ON EG.ID = O.GOODS_ID
						 WHERE O.USER_ID = P_USER_ID) T;

		SELECT SUM(CNT)
			INTO V_NOT_YET_SHIPPED_COUNT
			FROM (SELECT COUNT(*) AS CNT,
									 SUM(O.TOTAL_AMOUNT) AS SUM_TOTAL,
									 0 AS SUM_SCORES,
									 1 AS TYPE_,
									 SUM(O.IS_FREEZE) AS FREEZE_CNT
							FROM USER_ORDERS O, AUCTIONS A
						 WHERE O.AUCTION_ID = A.ID
							 AND O.STATUS = '1'
							 AND O.USER_ID = P_USER_ID
							 AND DECODE(O.LOGISTIC_DETAIL_ID, NULL, 0, 1) = 0
							 AND NOT EXISTS
						 (SELECT O.ID
											FROM USER_REFUNDS UR
										 WHERE UR.ID = O.USER_REFUND_ID
											 AND DECODE(UR.STATUS, NULL, 0, 8, 0, 1) = 1)
               AND NOT EXISTS(SELECT ld.id FROM LOGISTIC_LADINGS l,LOGISTIC_LADING_DETAILS ld
                WHERE l.id=ld.LOGISTIC_LADING_ID
                AND ld.AUCTION_ID=A.ID
                AND ld.LOGISTIC_STATUS != '3')
							 AND NOT EXISTS
						 (SELECT LLD.ID
											FROM LOGISTIC_LADING_DETAILS     lld,
													 v_wms_log_order_status_info v
										 WHERE lld.AUCTION_ID = O.AUCTION_ID
											 AND V.logisticId = LLD.logistic_lading_id
											 AND V.logisticStatus != 6)
						UNION ALL
						SELECT COUNT(*) AS CNT,
									 SUM(END_PRICE) AS SUM_TOTAL,
									 0 AS SUM_SCORES,
									 2 AS TYPE_,
									 0 AS FREEZE_CNT
							FROM V_CONSIGN_RTN_DELIVERY_LST T
						 WHERE T.USER_ID = P_USER_ID
							 AND NOT EXISTS
						 (SELECT LLD.ID
											FROM LOGISTIC_LADING_DETAILS     lld,
													 v_wms_log_order_status_info v
										 WHERE lld.AUCTION_ID = T.ID
											 AND V.logisticId = LLD.logistic_lading_id
											 AND V.logisticStatus != 6)
						UNION ALL
						SELECT COUNT(EGO.ID) AS CNT,
									 SUM(EGO.ORDER_PRICE * EGO.GOODS_NUMBER) AS SUM_TOTAL,
									 SUM(EGO.CONSUME_SCORES * EGO.GOODS_NUMBER) AS SUM_SCORES,
									 3 AS TYPE_,
									 0 AS FREEZE_CNT
							FROM EC_ORDER_GOODS EGO, EC_GOODS G
						 WHERE G.ID = EGO.GOODS_ID
							 AND EGO.USER_ID = P_USER_ID
							 AND EGO.ORDER_STATUS = '1'
							 AND EGO.CANCEL_DATE IS NULL
							 AND EGO.UNITE_CONSIGN_ID IS NULL);

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_NOT_YET_PAID_COUNT := 0;
			RETURN;
		WHEN OTHERS THEN
			V_NOT_YET_PAID_COUNT := 0;
			RETURN;
	END;

	--未打开短信
	BEGIN
		SELECT COUNT(ID)
			INTO V_MSG_COUNT
			FROM MESSAGES
		 WHERE TO_ID = P_USER_ID
			 AND IS_RECEIVE_DEL = 0
			 AND MSG_TYPE = 0
			 AND MSG_STATUS = 0;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_MSG_COUNT := 0;
			RETURN;
		WHEN OTHERS THEN
			V_MSG_COUNT := 0;
			RETURN;
	END;
	--未结算数
	BEGIN

		SELECT COUNT(0)
			INTO V_NOT_SETTLEMENT_COUNT
			FROM CONTRACTS C, AUCTIONS A
		 WHERE C.ID = A.CONTRACT_ID
			 AND A.STATUS <> '0'
			 AND C.IS_DISCARD <> '1'
			 AND C.USER_ID = P_USER_ID
			 AND A.SETTLEMENT_STATUS IN (0, 2);

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_NOT_SETTLEMENT_COUNT := 0;
			RETURN;
		WHEN OTHERS THEN
			V_NOT_SETTLEMENT_COUNT := 0;
			RETURN;
	END;

	NOT_YET_PAID_COUNT    := V_NOT_YET_PAID_COUNT;
	NOT_YET_SHIPPED_COUNT := V_NOT_YET_SHIPPED_COUNT;
	MSG_COUNT             := V_MSG_COUNT;
	NOT_SETTLEMENT_COUNT  := V_NOT_SETTLEMENT_COUNT;
	RETURN;

END P_USER_INFO_TITLE_COUNT;


 
/

-- ----------------------------
-- Procedure structure for P_USER_IPS_PAYMENT_RES_BAK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_IPS_PAYMENT_RES_BAK"
(
  P_IPS_PAYMENT_ID        IN NUMBER, --支付请求id
  P_BILL_NO               IN VARCHAR, --返回的第三方交易平台交易单号(IPS/SDO)
  P_AUCTION_ORDER_IDS     IN VARCHAR,
  P_EC_ORDER_IDS          IN VARCHAR,
  P_ORDER_COUNT           IN NUMBER, --交易单数量(商城和竞拍)
  P_AMOUNT                IN NUMBER, --IPS/SDO交易金额
  P_PAY_TYPE              IN VARCHAR2, -- IPS/SDO
  RESULT_USER_PAYMENTS_ID OUT NUMBER, --用户支付单号
  RESULT_STATUS           OUT NUMBER --结果
  /*
                                        **1: IPS支付请求记录不存在
                                        **2: 用户不存在
                                        **3: 订单不存在
                                        **4: 余额不足
                                        **5: 积分不足
                                        **6: 积分扣除失败
                                        **7: ERROR
                                        */
) IS
  /**
     作者:李征
     最后更新日期:2012.03.13
     描述：IPS/SDO回调,更新ips支付/充值请求,金额先进余额流水,如果有交易单需要支付,再从余额中扣除并生成流水

     如果使用余额+第三方支付,P_AMOUNT仅是第三方支付部分,不包括使用的余额
     USER_ACCOUNTS中流水记录
     FINANCE_TYPE=24(IPS+余额,余额部分)
     FINANCE_TYPE=25(SDO+余额,余额部分)
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_IPS_AMOUNT        NUMBER := 0; --IPS支付金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商城订单数
  V_EC_TOTAL_AMOUNT   NUMBER := 0; --商城订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;

  V_ORDER_TYPE VARCHAR2(255); --0竞买1商城2竞买+商城

  V_ORDER_IDS VARCHAR2(4000);
  V_USER_NAME VARCHAR2(200);

  V_USER_ACCOUNT_OLD NUMBER := 0;
  V_USER_ACCOUNT_NOW NUMBER := 0;
  V_USER_SOCRE       NUMBER := 0;
  V_TOTAL_USED_QUOTA NUMBER := 0;

  V_FINANCE_TYPE       NUMBER := 0; --财务类型
  V_PAY_TYPE           NUMBER; --支付方式IPS/SDO
  V_USE_BALANCE        NUMBER := 0; --余额+第三方支付时,余额占用部分
  V_USE_BALANCE_STATUS VARCHAR2(255);
  V_USE_BALANCE_ID     NUMBER; --余额+第三方支付时,记录的余额的流水id

  V_USER_IPS_REQUEST_STATUS VARCHAR2(255) := '0';

  V_EC_SCORES_RESULT NUMBER := 0;

  TYPE cur_type IS REF CURSOR;
  cur_auction_fee     cur_type;
  v_auction_id        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;

  v_error_msg        VARCHAR2(500);
  v_ips_request_lock NUMBER;
  v_ips_user_lock    NUMBER;

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);
  BEGIN
    /*===============================================================*/
    /*==========================第三方充值部分=======================*/
    /*===============================================================*/
    BEGIN
      /*获取ips支付请求记录*/
      SELECT id,
             USER_ID,
             AMOUNT,
             ORDER_IDS,
             STATUS,
             ORDER_TYPE,
             USER_PAYMENT_ID
        INTO v_ips_request_lock,
             V_USER_ID,
             V_IPS_AMOUNT,
             V_ORDER_IDS,
             V_USER_IPS_REQUEST_STATUS,
             V_ORDER_TYPE,
             RESULT_USER_PAYMENTS_ID
        FROM USER_IPS_PAYMENTS
       WHERE ID = P_IPS_PAYMENT_ID
         FOR UPDATE NOWAIT;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS           := 1;
        RESULT_USER_PAYMENTS_ID := 0;
        RETURN;
    END;

    IF P_PAY_TYPE = 'IPS' THEN
      V_FINANCE_TYPE := 10; --IPS支付
      V_PAY_TYPE     := 2;
    ELSIF P_PAY_TYPE = 'SDO' THEN
      V_FINANCE_TYPE := 9; --SDO盛付通支付
      V_PAY_TYPE     := 4;
    END IF;

    /*该IPS请求还未处理*/
    IF V_USER_IPS_REQUEST_STATUS = '0' THEN
      /*获取用户信息*/
      SELECT TRUE_NAME, nvl(ACCOUNT, 0), nvl(TOTAL_ACCOUNT, 0)
        INTO V_USER_NAME, V_USER_ACCOUNT_OLD, V_USER_ACCOUNT_NOW
        FROM USERS
       WHERE ID = V_USER_ID;

      IF P_PAY_TYPE = 'IPS' THEN
        /*更新IPS支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, IPS_BILL_NO = P_BILL_NO
         WHERE ID = P_IPS_PAYMENT_ID;
      ELSIF P_PAY_TYPE = 'SDO' THEN
        /*更新SDO支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, SDO_BILL_NO = P_BILL_NO
         WHERE ID = P_IPS_PAYMENT_ID;
      END IF;

      DBMS_OUTPUT.put_line('更新USER_IPS_PAYMENTS,' || P_PAY_TYPE ||
                           '支付请求状态为成功');

      /*IPS支付/充值,先进用户余额,生成余额流水,如果是支付交易单再从余额扣除*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         P_IPS_PAYMENT_ID,
         'USER_IPS_PAYMENTS',
         V_IPS_AMOUNT,
         V_FINANCE_TYPE,
         V_NOW,
         V_USER_NAME,
         V_NOW,
         V_USER_ACCOUNT_NOW,
         V_USER_ACCOUNT_NOW + V_IPS_AMOUNT,
         '0',
         '1'); --收入

      DBMS_OUTPUT.put_line('生成余额流水,' || P_PAY_TYPE || '收入:' ||
                           V_IPS_AMOUNT);

      /*更新用户余额*/
      UPDATE USERS
         SET ACCOUNT       = nvl(ACCOUNT, 0) + V_IPS_AMOUNT,
             TOTAL_ACCOUNT = nvl(TOTAL_ACCOUNT, 0) + V_IPS_AMOUNT
       WHERE ID = V_USER_ID;

      DBMS_OUTPUT.put_line('更新用户余额(commit),更新前:' || V_USER_ACCOUNT_OLD ||
                           ',更新后:' || (V_USER_ACCOUNT_OLD + V_IPS_AMOUNT));
      /*提交IPS/SDO充值结果*/
      COMMIT;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  /*===============================================================*/
  /*=======================第三方支付交易单部分====================*/
  /*===============================================================*/
  /*如果交易单id不为空,IPS/SDO支付订单*/
  IF RESULT_USER_PAYMENTS_ID IS NULL AND V_ORDER_IDS IS NOT NULL THEN
    V_TOTAL_AMOUNT := 0;

    DBMS_OUTPUT.put_line('有订单需要支付,' || V_ORDER_IDS);
    BEGIN

      /*用户信息*/
      SELECT TRUE_NAME,
             nvl(ACCOUNT, 0),
             nvl(TOTAL_ACCOUNT, 0),
             BUY_SCORE_USEABLE
        INTO V_USER_NAME,
             V_USER_ACCOUNT_OLD,
             V_USER_ACCOUNT_NOW,
             V_USER_SOCRE
        FROM USERS
       WHERE ID = V_USER_ID;

      IF V_ORDER_TYPE = '0' OR V_ORDER_TYPE = '2' THEN
        /*统计支付交易单数量和金额*/
        V_SQL := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT) FROM USER_ORDERS WHERE USER_ID=' ||
                 V_USER_ID || ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;

        DBMS_OUTPUT.put_line('其中,拍卖订单数:' || V_ORDERS_COUNT || ',金额:' ||
                             V_TOTAL_AMOUNT);
      END IF;
      /*包含商城订单*/
      IF V_ORDER_TYPE = '1' OR V_ORDER_TYPE = '2' THEN
        V_SQL := 'SELECT COUNT(*),SUM(ORDER_PRICE*GOODS_NUMBER),SUM(CONSUME_SCORES*GOODS_NUMBER) FROM EC_ORDER_GOODS WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND ID IN (' ||
                 V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMOUNT, V_EC_CONSUME_SCORES;

        DBMS_OUTPUT.put_line('其中,商城订单数:' || V_EC_ORDERS_COUNT || ',金额:' ||
                             V_EC_TOTAL_AMOUNT || ',积分:' ||
                             V_EC_CONSUME_SCORES);
      END IF;

      V_TOTAL_AMOUNT := nvl(V_TOTAL_AMOUNT, 0) + nvl(V_EC_TOTAL_AMOUNT, 0);

      /*交易单不存在*/
      IF V_ORDERS_COUNT + V_EC_ORDERS_COUNT = 0 THEN
        ROLLBACK;
        DBMS_OUTPUT.put_line('错误:交易单不存在或已经支付');
        RESULT_USER_PAYMENTS_ID := 0;
        RESULT_STATUS           := 0;
        RETURN;
      END IF;

      /*积分不足*/
      IF V_USER_SOCRE < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        DBMS_OUTPUT.put_line('错误:积分不足');
        RESULT_STATUS := 5;
        RETURN;
      END IF;

      /*余额不足*/
      IF V_USER_ACCOUNT_OLD < V_TOTAL_AMOUNT THEN
        BEGIN
          ROLLBACK;
          DBMS_OUTPUT.put_line('错误:余额不足');
          RESULT_STATUS := 4;
          RETURN;
        END;
      END IF;

      /*支付单id*/
      SELECT USER_PAYMENTS_SEQ.NEXTVAL
        INTO RESULT_USER_PAYMENTS_ID
        FROM DUAL;

      /*生成支付单*/
      INSERT INTO USER_PAYMENTS
        (ID,
         USER_ID,
         USERNAME,
         TOTAL_AMOUNT,
         AC_AMOUNT,
         PAY_TYPE,
         PAY_DATE,
         PAY_STATUS,
         CREATED_AT)
      VALUES
        (RESULT_USER_PAYMENTS_ID,
         V_USER_ID,
         V_USER_NAME,
         V_TOTAL_AMOUNT,
         V_ORDERS_COUNT + V_EC_ORDERS_COUNT,
         V_PAY_TYPE,
         V_NOW,
         '1',
         V_NOW);

      DBMS_OUTPUT.put_line('生成用户支付单:' || RESULT_USER_PAYMENTS_ID);

      IF V_TOTAL_AMOUNT > V_IPS_AMOUNT THEN
        /*
        总金额>第三方支付金额,则使用余额+第三方支付
        余额部分在生成请求时已经记录流水,状态为2,
        */
        BEGIN
          IF P_PAY_TYPE = 'IPS' THEN
            SELECT id, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '24';
            --支付方式IPS+余额
            V_PAY_TYPE := '5';

          ELSIF P_PAY_TYPE = 'SDO' THEN
            /*余额+SDO支付时,余额部分流水记录*/
            SELECT id, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '25';
            --支付方式SDO+余额
            V_PAY_TYPE := '6';

          END IF;

          /*余额+IPS支付时,占用的余额部分*/
          IF V_USE_BALANCE IS NOT NULL AND
             V_USER_ACCOUNT_OLD > V_USE_BALANCE THEN
            IF P_PAY_TYPE = 'IPS' THEN
              V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
            ELSIF P_PAY_TYPE = 'SDO' THEN
              V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
            END IF;

            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               SOURCE_ID,
               SOURCE_TYPE,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               REMARKS,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW,
               DIRECTION,
               STATUS)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               V_USER_ID,
               RESULT_USER_PAYMENTS_ID,
               'USER_PAYMENTS',
               V_USE_BALANCE,
               V_FINANCE_TYPE, --余额+第三方支付时余额部分
               V_NOW,
               P_PAY_TYPE || ':' || (V_TOTAL_AMOUNT - V_USE_BALANCE) ||
               '+余额:' || V_USE_BALANCE || '支付', --IPS/SDO
               V_NOW,
               V_USER_ACCOUNT_NOW,
               V_USER_ACCOUNT_NOW - V_USE_BALANCE,
               '1', --支出
               '1'); --余额占用,支付成功需要更新为1,支付失败更新为0

            IF V_USE_BALANCE_STATUS = '2' THEN
              DELETE FROM USER_ACCOUNTS WHERE id = V_USE_BALANCE_ID;
              /*扣除余额*/
              UPDATE USERS
                 SET ACCOUNT       = ACCOUNT - V_USE_BALANCE,
                     TOTAL_ACCOUNT = TOTAL_ACCOUNT - V_USE_BALANCE
               WHERE ID = V_USER_ID;
              /*网银+余额支付,余额部分扣除*/
              V_USER_ACCOUNT_OLD := V_USER_ACCOUNT_OLD - V_USE_BALANCE;
              V_USER_ACCOUNT_NOW := V_USER_ACCOUNT_NOW - V_USE_BALANCE;
            END IF;

            DBMS_OUTPUT.put_line('其中使用余额部分为:' || V_USE_BALANCE);
          ELSE
            /*余额不够扣除,更新流水状态为无效*/
            UPDATE USER_ACCOUNTS
               SET STATUS = '0'
             WHERE ID = V_USE_BALANCE_ID;
            /*结束,退出,第三方支付当充值进入帐户*/
            DBMS_OUTPUT.put_line('余额不够扣除:三方支付部分当充值进入余额');
            RETURN;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            v_error_msg := 'V_TOTAL_AMOUNT:' || V_TOTAL_AMOUNT ||
                           ',P_AMOUNT:' || P_AMOUNT || ' 1-SQLCODE:' ||
                           SQLCODE || ',SQLERRM:' || SQLERRM;
            UPDATE USER_IPS_PAYMENTS
               SET remark = v_error_msg
             WHERE id = P_IPS_PAYMENT_ID;
        END;
      END IF;

      IF V_USE_BALANCE IS NULL THEN
        V_USE_BALANCE := 0;
      END IF;

      /*三方支付部分金额*/
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT - V_USE_BALANCE;

      IF V_ORDER_TYPE = '0' AND V_USE_BALANCE = 0 THEN
        V_FINANCE_TYPE := 11; --交易单支付
      ELSIF V_ORDER_TYPE = '1' OR V_ORDER_TYPE = '2' THEN
        V_FINANCE_TYPE := 19;
      END IF;

      /*支付,生成余额流水*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS,
         REMARKS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         RESULT_USER_PAYMENTS_ID,
         'USER_PAYMENTS',
         V_TOTAL_AMOUNT,
         V_FINANCE_TYPE, --交易单支付
         V_NOW,
         V_USER_NAME,
         V_NOW,
         V_USER_ACCOUNT_NOW,
         V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT,
         '1',
         '1',
         P_PAY_TYPE || '支付,其中使用余额部分为' || V_USE_BALANCE);

      DBMS_OUTPUT.put_line('生成余额流水,交易单支出:' || V_TOTAL_AMOUNT);

      /*从用户余额中扣除*/
      UPDATE USERS
         SET ACCOUNT       = nvl(ACCOUNT, 0) - V_TOTAL_AMOUNT,
             TOTAL_ACCOUNT = nvl(TOTAL_ACCOUNT, 0) - V_TOTAL_AMOUNT
       WHERE ID = V_USER_ID;

      DBMS_OUTPUT.put_line('更新用户余额,更新前:' || V_USER_ACCOUNT_NOW || ',更新后:' ||
                           (V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT));
      /*扣除积分*/
      IF V_EC_CONSUME_SCORES > 0 THEN
        P_SCORE_BUYER_EXCHANGE(V_USER_ID,
                               V_EC_CONSUME_SCORES,
                               RESULT_USER_PAYMENTS_ID,
                               V_EC_SCORES_RESULT);
        IF V_EC_SCORES_RESULT != 0 THEN
          ROLLBACK;
          RESULT_STATUS := 6;
          RETURN;
        END IF;
      END IF;

      --更新结算状态
      V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (SELECT AUCTION_ID FROM USER_ORDERS' ||
               ' WHERE USER_ID=' || V_USER_ID ||
               ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || '))';
      EXECUTE IMMEDIATE V_SQL;

      /*更新交易单状态*/
      V_SQL := 'UPDATE USER_ORDERS SET STATUS=1, USER_PAYMENT_ID = ' ||
               RESULT_USER_PAYMENTS_ID || ', PAY_DATE=to_date(''' ||
               TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
               ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || V_USER_ID ||
               ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || ')';
      EXECUTE IMMEDIATE V_SQL;

      DBMS_OUTPUT.put_line('更新拍卖交易单状态为已支付,数量:' || SQL%ROWCOUNT);

      /*如果ips支付的交易单数量大于竞拍交易单数量,还有新商场交易单需要更新*/
      IF P_ORDER_COUNT > V_ORDERS_COUNT THEN
        V_SQL := 'UPDATE EC_ORDER_GOODS SET ORDER_STATUS=1, UNITE_PAY_ID = ' ||
                 RESULT_USER_PAYMENTS_ID || ', PAY_DATE=to_date(''' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND  ID IN (' ||
                 V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;
        DBMS_OUTPUT.put_line('更新商城交易单状态为已支付,数量:' || SQL%ROWCOUNT);
      END IF;

      /*获取占用额度*/
      SELECT SUM(USE_QUOTA)
        INTO V_TOTAL_USED_QUOTA
        FROM USER_QUOTA_USAGES
       WHERE USER_ID = V_USER_ID
         AND STATUS = 1
         AND EXISTS
       (SELECT ID
                FROM USER_ORDERS
               WHERE USER_ID = V_USER_ID
                 AND STATUS = 1
                 AND USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID
                 AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

      /*更新占用额度为不占用*/
      UPDATE USER_QUOTA_USAGES
         SET STATUS = '0'
       WHERE USER_ID = V_USER_ID
         AND STATUS = '1'
         AND EXISTS
       (SELECT ID
                FROM USER_ORDERS
               WHERE USER_ID = V_USER_ID
                 AND STATUS = '1'
                 AND USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID
                 AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

      /*释放占用额度*/
      IF V_TOTAL_USED_QUOTA IS NOT NULL THEN
        UPDATE USERS
           SET QUOTA = QUOTA + V_TOTAL_USED_QUOTA
         WHERE ID = V_USER_ID;
        /*额度流水*/
        INSERT INTO user_quotas
          (ID,
           user_id,
           amount,
           quota_type,
           operate_type,
           remarks,
           created_at,
           direction)
        VALUES
          (USER_QUOTAS_SEQ.NEXTVAL,
           v_user_id,
           V_TOTAL_USED_QUOTA,
           5,
           1,
           P_PAY_TYPE || '支付交易单',
           V_NOW,
           0);

        DBMS_OUTPUT.put_line('释放占用额度:' || V_TOTAL_USED_QUOTA);

      END IF;

      /*更新支付单id*/
      UPDATE USER_IPS_PAYMENTS
         SET USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID, UPDATED_AT = V_NOW
       WHERE ID = P_IPS_PAYMENT_ID;

      DBMS_OUTPUT.put_line('更新' || P_PAY_TYPE || '交易单:' ||
                           P_IPS_PAYMENT_ID || '关联的支付单' ||
                           RESULT_USER_PAYMENTS_ID);
      COMMIT;

    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.put_line('SQLCODE:' || SQLCODE || ',SQLERRM:' ||
                             SQLERRM);
        v_error_msg := 'SQLCODE:' || SQLCODE || ',SQLERRM:' || SQLERRM;
        UPDATE USER_IPS_PAYMENTS
           SET remark = v_error_msg
         WHERE id = P_IPS_PAYMENT_ID;

        RESULT_STATUS := 7;
        RETURN;
    END;
    --计算制作费
    BEGIN
      v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
               ' and o.id in (' || V_ORDER_IDS || ')';

      OPEN cur_auction_fee FOR v_sql;
      LOOP
        FETCH cur_auction_fee
          INTO v_auction_id;
        EXIT WHEN cur_auction_fee%NOTFOUND;

        p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN;
    END;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
END P_USER_IPS_PAYMENT_RES_BAK;

 
 
 
 
/

-- ----------------------------
-- Procedure structure for P_USER_IPS_PAYMENT_RESPONSE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_IPS_PAYMENT_RESPONSE"
(
	P_IPS_PAYMENT_ID        IN NUMBER, --支付请求id
	P_BILL_NO               IN VARCHAR, --返回的第三方交易平台交易单号(IPS/SDO/TENPAY/ALIPAY)
	P_AUCTION_ORDER_IDS     IN VARCHAR,
	P_EC_ORDER_IDS          IN VARCHAR,
	P_ORDER_COUNT           IN NUMBER, --交易单数量(商城和竞拍)
	P_AMOUNT                IN NUMBER, --IPS/SDO/TENPAY/ALIPAY交易金额
	P_PAY_TYPE              IN VARCHAR2, -- IPS/SDO/TENPAY/ALIPAY
	RESULT_USER_PAYMENTS_ID OUT NUMBER, --用户支付单号
	RESULT_STATUS           OUT NUMBER --结果
	/*
                                        **1: IPS支付请求记录不存在
                                        **2: 用户不存在
                                        **3: 订单不存在
                                        **4: 余额不足
                                        **5: 积分不足
                                        **6: 积分扣除失败
                                        **7: ERROR
                                        */
) IS
	/**
     作者:李征
     最后更新日期:2012.03.13
     描述：IPS/SDO回调,更新ips支付/充值请求,金额先进余额流水,如果有交易单需要支付,再从余额中扣除并生成流水

     如果使用余额+第三方支付,P_AMOUNT仅是第三方支付部分,不包括使用的余额
     USER_ACCOUNTS中流水记录
     FINANCE_TYPE=24(IPS+余额,余额部分)
     FINANCE_TYPE=25(SDO+余额,余额部分)
     
     修改人： dwen
     修改日期：2013-12-02
     描述：添加财付通(TENPAY)，业务流程与IPS、SDO相同。
     USER_ACCOUNTS中流水记录：
     FINANCE_TYPE=32(TENPAY支付)
     FINANCE_TYPE=33(TENPAY+余额,余额部分)

     修改人： GUQJ
     修改日期：2015-01-16
     描述：添加支付宝(ALIPAY)，业务流程与IPS、SDO、TENPAY相同。
     USER_ACCOUNTS中流水记录：
     FINANCE_TYPE=42(ALIPAY支付)
     FINANCE_TYPE=43(ALIPAY+余额,余额部分)
     
  */
	V_SQL               VARCHAR2(4000);
	V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
	V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
	V_IPS_AMOUNT        NUMBER := 0; --IPS支付金额
	V_EC_ORDERS_COUNT   NUMBER := 0; --商城订单数
	V_EC_TOTAL_AMOUNT   NUMBER := 0; --商城订单金额
	V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;

  V_ORDER_TYPE VARCHAR2(255); --0竞买1商城2竞买+商城

  V_ORDER_IDS VARCHAR2(4000);
  V_USER_NAME VARCHAR2(200);

  V_USER_ACCOUNT_OLD NUMBER := 0;
  V_USER_ACCOUNT_NOW NUMBER := 0;
  V_USER_SOCRE       NUMBER := 0;
  V_TOTAL_USED_QUOTA NUMBER := 0;

  V_FINANCE_TYPE       NUMBER := 0; --财务类型
  V_PAY_TYPE           NUMBER; --支付方式IPS/SDO/TENPAY/ALIPAY
  V_USE_BALANCE        NUMBER := 0; --余额+第三方支付时,余额占用部分
  V_USE_BALANCE_STATUS VARCHAR2(255);
  V_USE_BALANCE_ID     NUMBER; --余额+第三方支付时,记录的余额的流水id

  V_USER_IPS_REQUEST_STATUS VARCHAR2(255) := '0';
  V_EC_DEPOSITS       NUMBER := 0;--订单中商城定金总额
  V_EC_DEPOSITS_NUM   NUMBER := 0;--定金单数
  V_EC_SCORES_RESULT NUMBER;

  TYPE cur_type IS REF CURSOR;
  cur_auction_fee     cur_type;
  v_auction_id        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;

  v_error_msg        VARCHAR2(500);
  v_ips_request_lock NUMBER;
  v_ips_user_lock    NUMBER;

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);
  BEGIN
    /*===============================================================*/
    /*==========================第三方充值部分=======================*/
    /*===============================================================*/
    BEGIN
      /*获取ips支付请求记录*/
      SELECT id,
             USER_ID,
             AMOUNT,
             ORDER_IDS,
             STATUS,
             ORDER_TYPE,
             USER_PAYMENT_ID
        INTO v_ips_request_lock,
             V_USER_ID,
             V_IPS_AMOUNT,
             V_ORDER_IDS,
             V_USER_IPS_REQUEST_STATUS,
             V_ORDER_TYPE,
             RESULT_USER_PAYMENTS_ID
        FROM USER_IPS_PAYMENTS
       WHERE ID = P_IPS_PAYMENT_ID
         FOR UPDATE NOWAIT;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS           := 1;
        RESULT_USER_PAYMENTS_ID := 0;
        RETURN;
    END;

    IF P_PAY_TYPE = 'IPS' THEN
      V_FINANCE_TYPE := 10; --IPS支付
      V_PAY_TYPE     := 2;
    ELSIF P_PAY_TYPE = 'SDO' THEN
      V_FINANCE_TYPE := 9; --SDO盛付通支付
      V_PAY_TYPE     := 4;
    ELSIF P_PAY_TYPE = 'TENPAY' THEN
      V_FINANCE_TYPE := 32; --TENPAY财付通支付
      V_PAY_TYPE     := 10;
    ELSIF P_PAY_TYPE = 'ALIPAY' THEN
      V_FINANCE_TYPE := 42; --ALIPAY支付宝支付
      V_PAY_TYPE     := 16;
    END IF;

    /*该IPS请求还未处理*/
    IF V_USER_IPS_REQUEST_STATUS = '0' THEN
      /*获取用户信息*/
      SELECT TRUE_NAME, nvl(ACCOUNT, 0), nvl(TOTAL_ACCOUNT, 0)
        INTO V_USER_NAME, V_USER_ACCOUNT_OLD, V_USER_ACCOUNT_NOW
        FROM USERS
       WHERE ID = V_USER_ID;

      IF P_PAY_TYPE = 'IPS' THEN
        /*更新IPS支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, IPS_BILL_NO = P_BILL_NO
         WHERE ID = P_IPS_PAYMENT_ID;
      ELSIF P_PAY_TYPE = 'SDO' THEN
        /*更新SDO支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, SDO_BILL_NO = P_BILL_NO
         WHERE ID = P_IPS_PAYMENT_ID;
      ELSIF P_PAY_TYPE = 'TENPAY' THEN
        /*更新TENPAY支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, BILL_NO = P_BILL_NO,BILL_TYPE='TENPAY' 
         WHERE ID = P_IPS_PAYMENT_ID;
      ELSIF P_PAY_TYPE = 'ALIPAY' THEN
        /*更新ALIPAY支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, BILL_NO = P_BILL_NO,BILL_TYPE='ALIPAY' 
         WHERE ID = P_IPS_PAYMENT_ID;
      END IF;

      DBMS_OUTPUT.put_line('更新USER_IPS_PAYMENTS,' || P_PAY_TYPE ||
                           '支付请求状态为成功');

      /*IPS支付/充值,先进用户余额,生成余额流水,如果是支付交易单再从余额扣除*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         P_IPS_PAYMENT_ID,
         'USER_IPS_PAYMENTS',
         V_IPS_AMOUNT,
         V_FINANCE_TYPE,
         V_NOW,
         V_USER_NAME,
         V_NOW,
         V_USER_ACCOUNT_NOW,
         V_USER_ACCOUNT_NOW + V_IPS_AMOUNT,
         '0',
         '1'); --收入

      DBMS_OUTPUT.put_line('生成余额流水,' || P_PAY_TYPE || '收入:' ||
                           V_IPS_AMOUNT);

      /*更新用户余额*/
      UPDATE USERS
         SET ACCOUNT       = nvl(ACCOUNT, 0) + V_IPS_AMOUNT,
             TOTAL_ACCOUNT = nvl(TOTAL_ACCOUNT, 0) + V_IPS_AMOUNT
       WHERE ID = V_USER_ID;

      DBMS_OUTPUT.put_line('更新用户余额(commit),更新前:' || V_USER_ACCOUNT_OLD ||
                           ',更新后:' || (V_USER_ACCOUNT_OLD + V_IPS_AMOUNT));
      /*提交IPS/SDO充值结果*/
      COMMIT;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  /*===============================================================*/
  /*=======================第三方支付交易单部分====================*/
  /*===============================================================*/
  /*如果交易单id不为空,IPS/SDO/TENPAY支付订单*/
  IF RESULT_USER_PAYMENTS_ID IS NULL AND V_ORDER_IDS IS NOT NULL THEN
    V_TOTAL_AMOUNT := 0;

    DBMS_OUTPUT.put_line('有订单需要支付,' || V_ORDER_IDS);
    BEGIN

      /*用户信息*/
      SELECT TRUE_NAME,
             nvl(ACCOUNT, 0),
             nvl(TOTAL_ACCOUNT, 0),
             BUY_SCORE_USEABLE
        INTO V_USER_NAME,
             V_USER_ACCOUNT_OLD,
             V_USER_ACCOUNT_NOW,
             V_USER_SOCRE
        FROM USERS
       WHERE ID = V_USER_ID;

      IF V_ORDER_TYPE = '0' OR V_ORDER_TYPE = '2' THEN
        /*统计支付交易单数量和金额*/
        V_SQL := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT) FROM USER_ORDERS WHERE USER_ID=' ||
                 V_USER_ID || ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;

        DBMS_OUTPUT.put_line('其中,拍卖订单数:' || V_ORDERS_COUNT || ',金额:' ||
                             V_TOTAL_AMOUNT);
      END IF;
      /*包含商城订单*/
      /*edit by zhangyi 增加商城投资理财部分的定金*/
        /*订金总额*/
      IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)'||
                   'FROM ec_auction_book WHERE ORDER_ID IN' ||
                   '(' || P_EC_ORDER_IDS || ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID='||V_USER_ID;
        EXECUTE IMMEDIATE V_SQL
        INTO V_EC_DEPOSITS,V_EC_DEPOSITS_NUM;
      END IF;

      /*edit by zhangyi 商城订单应支付金额 需要减去 定金部分*/
      IF V_ORDER_TYPE = '1' OR V_ORDER_TYPE = '2' THEN
        V_SQL := 'SELECT COUNT(*),nvl(SUM(ORDER_PRICE*GOODS_NUMBER)-'||V_EC_DEPOSITS||',0),SUM(CONSUME_SCORES*GOODS_NUMBER)'||
                 '  FROM EC_ORDER_GOODS WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND ID IN (' ||
                 V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMOUNT, V_EC_CONSUME_SCORES;

        DBMS_OUTPUT.put_line('其中,商城订单数:' || V_EC_ORDERS_COUNT || ',金额:' ||
                             V_EC_TOTAL_AMOUNT || ',积分:' ||
                             V_EC_CONSUME_SCORES);
      END IF;

      V_TOTAL_AMOUNT := nvl(V_TOTAL_AMOUNT, 0) + nvl(V_EC_TOTAL_AMOUNT, 0);

      /*交易单不存在*/
      IF V_ORDERS_COUNT + V_EC_ORDERS_COUNT = 0 THEN
        ROLLBACK;
        DBMS_OUTPUT.put_line('错误:交易单不存在或已经支付');
        RESULT_USER_PAYMENTS_ID := 0;
        RESULT_STATUS           := 0;
        RETURN;
      END IF;

      /*积分不足*/
      IF V_USER_SOCRE < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        DBMS_OUTPUT.put_line('错误:积分不足');
        RESULT_STATUS := 5;
        RETURN;
      END IF;

      /*余额不足*/
      IF V_USER_ACCOUNT_OLD < V_TOTAL_AMOUNT THEN
        BEGIN
          ROLLBACK;
          DBMS_OUTPUT.put_line('错误:余额不足');
          RESULT_STATUS := 4;
          RETURN;
        END;
      END IF;

      /*支付单id*/
      SELECT USER_PAYMENTS_SEQ.NEXTVAL
        INTO RESULT_USER_PAYMENTS_ID
        FROM DUAL;

      /*生成支付单*/
      INSERT INTO USER_PAYMENTS
        (ID,
         USER_ID,
         USERNAME,
         TOTAL_AMOUNT,
         AC_AMOUNT,
         PAY_TYPE,
         PAY_DATE,
         PAY_STATUS,
         CREATED_AT)
      VALUES
        (RESULT_USER_PAYMENTS_ID,
         V_USER_ID,
         V_USER_NAME,
         V_TOTAL_AMOUNT+V_EC_DEPOSITS,/*edit by zhangyi 加上 定金部分*/
         V_ORDERS_COUNT + V_EC_ORDERS_COUNT,
         V_PAY_TYPE,
         V_NOW,
         '1',
         V_NOW);

      DBMS_OUTPUT.put_line('生成用户支付单:' || RESULT_USER_PAYMENTS_ID);

      IF V_TOTAL_AMOUNT > V_IPS_AMOUNT THEN
        /*
        总金额>第三方支付金额,则使用余额+第三方支付
        余额部分在生成请求时已经记录流水,状态为2,
        */
        BEGIN
          IF P_PAY_TYPE = 'IPS' THEN
            SELECT id, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '24';
            --支付方式IPS+余额
            V_PAY_TYPE := '5';

          ELSIF P_PAY_TYPE = 'SDO' THEN
            /*余额+SDO支付时,余额部分流水记录*/
            SELECT id, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '25';
            --支付方式SDO+余额
            V_PAY_TYPE := '6';
            
          ELSIF P_PAY_TYPE = 'TENPAY' THEN
            /*余额+TENPAY支付时,余额部分流水记录*/
            SELECT id, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '33';
            --支付方式TENPAY+余额
            V_PAY_TYPE := '11';
          ELSIF P_PAY_TYPE = 'ALIPAY' THEN
            /*余额+ALIPAY支付时,余额部分流水记录*/
            SELECT id, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '43';
            --支付方式ALIPAY+余额
            V_PAY_TYPE := '17';
          END IF;

          /*余额+IPS支付时,占用的余额部分*/
          IF V_USE_BALANCE IS NOT NULL AND
             V_USER_ACCOUNT_OLD > V_USE_BALANCE THEN
            IF P_PAY_TYPE = 'IPS' THEN
              V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
            ELSIF P_PAY_TYPE = 'SDO' THEN
              V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
            ELSIF P_PAY_TYPE = 'TENPAY' THEN
              V_FINANCE_TYPE := '33'; --余额+TENPAY支付时,余额部分
            ELSIF P_PAY_TYPE = 'ALIPAY' THEN
              V_FINANCE_TYPE := '43'; --余额+ALIPAY支付时,余额部分
            END IF;

            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               SOURCE_ID,
               SOURCE_TYPE,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               REMARKS,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW,
               DIRECTION,
               STATUS)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               V_USER_ID,
               RESULT_USER_PAYMENTS_ID,
               'USER_PAYMENTS',
               V_USE_BALANCE+V_EC_DEPOSITS,/*edit by zhangyi 加上 定金部分*/
               V_FINANCE_TYPE, --余额+第三方支付时余额部分
               V_NOW,
               P_PAY_TYPE || ':' || (V_TOTAL_AMOUNT - V_USE_BALANCE) ||
               '+余额:' || (V_USE_BALANCE+V_EC_DEPOSITS) || '支付', --IPS/SDO
               --'+余额:' || V_USE_BALANCE || '支付', --IPS/SDO
               V_NOW,
               V_USER_ACCOUNT_NOW,
               V_USER_ACCOUNT_NOW - V_USE_BALANCE,
               '1', --支出
               '1'); --余额占用,支付成功需要更新为1,支付失败更新为0

            IF V_USE_BALANCE_STATUS = '2' THEN
              DELETE FROM USER_ACCOUNTS WHERE id = V_USE_BALANCE_ID;
              /*扣除余额*/
              UPDATE USERS
                 SET ACCOUNT       = ACCOUNT - V_USE_BALANCE,
                     TOTAL_ACCOUNT = TOTAL_ACCOUNT - V_USE_BALANCE
               WHERE ID = V_USER_ID;
              /*网银+余额支付,余额部分扣除*/
              V_USER_ACCOUNT_OLD := V_USER_ACCOUNT_OLD - V_USE_BALANCE;
              V_USER_ACCOUNT_NOW := V_USER_ACCOUNT_NOW - V_USE_BALANCE;
              V_EC_DEPOSITS:=0;
            END IF;

            DBMS_OUTPUT.put_line('其中使用余额部分为:' || V_USE_BALANCE);
          ELSE
            /*余额不够扣除,更新流水状态为无效*/
            UPDATE USER_ACCOUNTS
               SET STATUS = '0'
             WHERE ID = V_USE_BALANCE_ID;
            /*结束,退出,第三方支付当充值进入帐户*/
            DBMS_OUTPUT.put_line('余额不够扣除:三方支付部分当充值进入余额');
            RETURN;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            v_error_msg := 'V_TOTAL_AMOUNT:' || V_TOTAL_AMOUNT ||
                           ',P_AMOUNT:' || P_AMOUNT || ' 1-SQLCODE:' ||
                           SQLCODE || ',SQLERRM:' || SQLERRM;
            UPDATE USER_IPS_PAYMENTS
               SET remark = v_error_msg
             WHERE id = P_IPS_PAYMENT_ID;

             RESULT_STATUS := 7;
             RETURN;
        END;
      END IF;

      IF V_USE_BALANCE IS NULL THEN
        V_USE_BALANCE := 0;
      END IF;

      /*三方支付部分金额*/
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT - V_USE_BALANCE;

      IF V_ORDER_TYPE = '0' AND V_USE_BALANCE = 0 THEN
        V_FINANCE_TYPE := 11; --交易单支付
      ELSIF V_ORDER_TYPE = '1' OR V_ORDER_TYPE = '2' THEN
        V_FINANCE_TYPE := 19;
      END IF;

      /*支付,生成余额流水*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS,
         REMARKS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         RESULT_USER_PAYMENTS_ID,
         'USER_PAYMENTS',
         V_TOTAL_AMOUNT+V_EC_DEPOSITS,
         V_FINANCE_TYPE, --交易单支付
         V_NOW,
         V_USER_NAME,
         V_NOW,
         V_USER_ACCOUNT_NOW,
         V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT,
         '1',
         '1',
         P_PAY_TYPE || '支付,其中使用余额部分为' || V_USE_BALANCE);

      DBMS_OUTPUT.put_line('生成余额流水,交易单支出:' || V_TOTAL_AMOUNT);

      /*从用户余额中扣除*/
      UPDATE USERS
         SET ACCOUNT       = nvl(ACCOUNT, 0) - V_TOTAL_AMOUNT,
             TOTAL_ACCOUNT = nvl(TOTAL_ACCOUNT, 0) - V_TOTAL_AMOUNT
       WHERE ID = V_USER_ID;

      DBMS_OUTPUT.put_line('更新用户余额,更新前:' || V_USER_ACCOUNT_NOW || ',更新后:' ||
                           (V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT));
      /*扣除积分*/
      IF V_EC_CONSUME_SCORES > 0 THEN
        P_SCORE_BUYER_EXCHANGE(V_USER_ID,
                               V_EC_CONSUME_SCORES,
                               RESULT_USER_PAYMENTS_ID,
                               V_EC_SCORES_RESULT);
        IF V_EC_SCORES_RESULT != 0 THEN
          ROLLBACK;
          RESULT_STATUS := 6;
          RETURN;
        END IF;
      END IF;

      --更新结算状态
      V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (SELECT AUCTION_ID FROM USER_ORDERS' ||
               ' WHERE USER_ID=' || V_USER_ID ||
               ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || '))';
      EXECUTE IMMEDIATE V_SQL;

      /*更新交易单状态*/
      V_SQL := 'UPDATE USER_ORDERS SET STATUS=1, USER_PAYMENT_ID = ' ||
               RESULT_USER_PAYMENTS_ID || ', PAY_DATE=to_date(''' ||
               TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
               ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || V_USER_ID ||
               ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || ')';
      EXECUTE IMMEDIATE V_SQL;

      DBMS_OUTPUT.put_line('更新拍卖交易单状态为已支付,数量:' || SQL%ROWCOUNT);
      
 

      /*如果ips支付的交易单数量大于竞拍交易单数量,还有新商场交易单需要更新*/
      IF P_ORDER_COUNT > V_ORDERS_COUNT THEN
        V_SQL := 'UPDATE EC_ORDER_GOODS SET ORDER_STATUS=1, UNITE_PAY_ID = ' ||
                 RESULT_USER_PAYMENTS_ID || ', PAY_DATE=to_date(''' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND  ID IN (' ||
                 V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;

        DBMS_OUTPUT.put_line('更新商城交易单状态为已支付,数量:' || SQL%ROWCOUNT);
        
        

        /*edit by zhangyi 扣除冻结的订金*/
        IF V_EC_DEPOSITS_NUM>0 THEN
          V_SQL := 'UPDATE ec_auction_book SET STATUS=6,UPDATED_AT=sysdate WHERE ORDER_ID IN (' ||
                 P_EC_ORDER_IDS || ') AND STATUS IN (4,5)';
          EXECUTE IMMEDIATE V_SQL;
        END IF;

        /*edit by zhangyi 修改用户账户里的冻结资金*/
        IF V_EC_DEPOSITS>0 THEN
          UPDATE USERS
          SET TOTAL_ACCOUNT=TOTAL_ACCOUNT-V_EC_DEPOSITS,
          FREEZE_ACCOUNT=FREEZE_ACCOUNT-V_EC_DEPOSITS
          WHERE ID = V_USER_ID;
        END IF;



      END IF;

      /*获取占用额度*/
      SELECT nvl(SUM(USE_QUOTA),0)
        INTO V_TOTAL_USED_QUOTA
        FROM USER_QUOTA_USAGES
       WHERE USER_ID = V_USER_ID
         AND STATUS = 1
         AND EXISTS
       (SELECT ID
                FROM USER_ORDERS
               WHERE USER_ID = V_USER_ID
                 AND STATUS = 1
                 AND USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID
                 AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

      /*更新占用额度为不占用*/
      UPDATE USER_QUOTA_USAGES
         SET STATUS = '0'
       WHERE USER_ID = V_USER_ID
         AND STATUS = '1'
         AND EXISTS
       (SELECT ID
                FROM USER_ORDERS
               WHERE USER_ID = V_USER_ID
                 AND STATUS = '1'
                 AND USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID
                 AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);

      /*释放占用额度*/
      IF V_TOTAL_USED_QUOTA IS NOT NULL THEN
        UPDATE USERS
           SET QUOTA = QUOTA + V_TOTAL_USED_QUOTA
         WHERE ID = V_USER_ID;
        /*额度流水*/
        INSERT INTO user_quotas
          (ID,
           user_id,
           amount,
           quota_type,
           operate_type,
           remarks,
           created_at,
           direction)
        VALUES
          (USER_QUOTAS_SEQ.NEXTVAL,
           v_user_id,
           V_TOTAL_USED_QUOTA,
           5,
           1,
           P_PAY_TYPE || '支付交易单',
           V_NOW,
           0);

        DBMS_OUTPUT.put_line('释放占用额度:' || V_TOTAL_USED_QUOTA);

      END IF;

      /*更新支付单id*/
      UPDATE USER_IPS_PAYMENTS
         SET USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID, UPDATED_AT = V_NOW
       WHERE ID = P_IPS_PAYMENT_ID;

      DBMS_OUTPUT.put_line('更新' || P_PAY_TYPE || '交易单:' ||
                           P_IPS_PAYMENT_ID || '关联的支付单' ||
                           RESULT_USER_PAYMENTS_ID);
      COMMIT;

    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.put_line('SQLCODE:' || SQLCODE || ',SQLERRM:' ||
                             SQLERRM);
        v_error_msg := 'SQLCODE:' || SQLCODE || ',SQLERRM:' || SQLERRM;
        UPDATE USER_IPS_PAYMENTS
           SET remark = v_error_msg
         WHERE id = P_IPS_PAYMENT_ID;

        RESULT_STATUS := 7;
        RETURN;
    END;
    --计算制作费
    BEGIN
      v_sql := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' ||
               ' and o.id in (' || V_ORDER_IDS || ')';

      OPEN cur_auction_fee FOR v_sql;
      LOOP
        FETCH cur_auction_fee
          INTO v_auction_id;
        EXIT WHEN cur_auction_fee%NOTFOUND;

        p_settlement_auction_fee(v_auction_id, V_AUCTIO_FEE_RESULT);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN;
    END;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
END P_USER_IPS_PAYMENT_RESPONSE;
 
/

-- ----------------------------
-- Procedure structure for P_USER_IPS_PAYMENT_RESPONSE2
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_IPS_PAYMENT_RESPONSE2"(P_IPS_PAYMENT_ID        IN NUMBER, --支付请求id
                                                         P_BILL_NO               IN VARCHAR, --返回的第三方交易平台交易单号(IPS/SDO/TENPAY)
                                                         P_ORDER_COUNT           IN NUMBER, --交易单数量(商城和竞拍)
                                                         P_AMOUNT                IN NUMBER, --IPS/SDO/TENPAY交易金额
                                                         P_PAY_TYPE              IN VARCHAR2, -- IPS/SDO/TENPAY
                                                         RESULT_USER_PAYMENTS_ID OUT NUMBER, --用户支付单号
                                                         RESULT_STATUS           OUT NUMBER --结果
                                                         /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                **1: IPS支付请求记录不存在
用户不存在
订单不存在
余额不足
积分不足
积分扣除失败


  /**
     作者:李征
     最后更新日期:2012.03.13
     描述：IPS/SDO回调,更新ips支付/充值请求,金额先进余额流水,如果有交易单需要支付,再从余额中扣除并生成流水
  
     如果使用余额+第三方支付,P_AMOUNT仅是第三方支付部分,不包括使用的余额
     USER_ACCOUNTS中流水记录
     FINANCE_TYPE=24(IPS+余额,余额部分)
     FINANCE_TYPE=25(SDO+余额,余额部分)
     
     修改人： dwen
     修改日期：2013-12-02
     描述：添加财付通(TENPAY)，业务流程与IPS、SDO相同。
     USER_ACCOUNTS中流水记录：
     FINANCE_TYPE=32(TENPAY支付)
     FINANCE_TYPE=33(TENPAY+余额,余额部分)
     
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_IPS_AMOUNT        NUMBER := 0; --IPS支付金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商城订单数
  V_EC_TOTAL_AMOUNT   NUMBER := 0; --商城订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;

  V_ORDER_TYPE VARCHAR2(255); --0竞买1商城2竞买+商城

  V_ORDER_IDS VARCHAR2(4000);
  V_USER_NAME VARCHAR2(200);

  V_USER_ACCOUNT_OLD NUMBER := 0;
  V_USER_ACCOUNT_NOW NUMBER := 0;
  V_USER_SOCRE       NUMBER := 0;
  V_TOTAL_USED_QUOTA NUMBER := 0;

  V_FINANCE_TYPE       NUMBER := 0; --财务类型
  V_PAY_TYPE           NUMBER; --支付方式IPS/SDO/TENPAY
  V_USE_BALANCE        NUMBER := 0; --余额+第三方支付时,余额占用部分
  V_USE_BALANCE_STATUS VARCHAR2(255);
  V_USE_BALANCE_ID     NUMBER; --余额+第三方支付时,记录的余额的流水id

  V_USER_IPS_REQUEST_STATUS VARCHAR2(255) := '0';
  V_EC_DEPOSITS             NUMBER := 0; --订单中商城定金总额
  V_EC_DEPOSITS_NUM         NUMBER := 0; --定金单数
  V_EC_SCORES_RESULT        NUMBER;

  TYPE CUR_TYPE IS REF CURSOR;
  CUR_AUCTION_FEE     CUR_TYPE;
  V_AUCTION_ID        NUMBER;
  V_AUCTIO_FEE_RESULT NUMBER;

  V_ERROR_MSG        VARCHAR2(500);
  V_IPS_REQUEST_LOCK NUMBER;
  V_IPS_USER_LOCK    NUMBER;

  V_COLLECTION_CERTIFICATE NUMBER; --收藏证书

  V_EC_GET_SCORES NUMBER := 0; --购商品送积分

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);
  BEGIN
    /*===============================================================*/
    /*==========================第三方充值部分=======================*/
    /*===============================================================*/
    BEGIN
      /*获取ips支付请求记录*/
      SELECT ID, USER_ID, AMOUNT, ORDER_IDS, STATUS, ORDER_TYPE, USER_PAYMENT_ID
        INTO V_IPS_REQUEST_LOCK,
             V_USER_ID,
             V_IPS_AMOUNT,
             V_ORDER_IDS,
             V_USER_IPS_REQUEST_STATUS,
             V_ORDER_TYPE,
             RESULT_USER_PAYMENTS_ID
        FROM USER_IPS_PAYMENTS
       WHERE ID = P_IPS_PAYMENT_ID
         FOR UPDATE NOWAIT;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RESULT_STATUS           := 1;
        RESULT_USER_PAYMENTS_ID := 0;
        RETURN;
    END;
  
    IF P_PAY_TYPE = 'IPS' THEN
      V_FINANCE_TYPE := 10; --IPS支付
      V_PAY_TYPE     := 2;
    ELSIF P_PAY_TYPE = 'SDO' THEN
      V_FINANCE_TYPE := 9; --SDO盛付通支付
      V_PAY_TYPE     := 4;
    ELSIF P_PAY_TYPE = 'TENPAY' THEN
      V_FINANCE_TYPE := 32; --TENPAY财付通支付
      V_PAY_TYPE     := 10;
    END IF;
  
    /*该IPS请求还未处理*/
    IF V_USER_IPS_REQUEST_STATUS = '0' THEN
      /*获取用户信息*/
      SELECT TRUE_NAME, NVL(ACCOUNT, 0), NVL(TOTAL_ACCOUNT, 0)
        INTO V_USER_NAME, V_USER_ACCOUNT_OLD, V_USER_ACCOUNT_NOW
        FROM USERS
       WHERE ID = V_USER_ID;
    
      IF P_PAY_TYPE = 'IPS' THEN
        /*更新IPS支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, IPS_BILL_NO = P_BILL_NO
         WHERE ID = P_IPS_PAYMENT_ID;
      ELSIF P_PAY_TYPE = 'SDO' THEN
        /*更新SDO支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, SDO_BILL_NO = P_BILL_NO
         WHERE ID = P_IPS_PAYMENT_ID;
      ELSIF P_PAY_TYPE = 'TENPAY' THEN
        /*更新TENPAY支付请求记录*/
        UPDATE USER_IPS_PAYMENTS
           SET STATUS = '1', UPDATED_AT = V_NOW, BILL_NO = P_BILL_NO, BILL_TYPE = 'TENPAY'
         WHERE ID = P_IPS_PAYMENT_ID;
      END IF;
    
      DBMS_OUTPUT.PUT_LINE('更新USER_IPS_PAYMENTS,' || P_PAY_TYPE || '支付请求状态为成功');
    
      /*IPS支付/充值,先进用户余额,生成余额流水,如果是支付交易单再从余额扣除*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         P_IPS_PAYMENT_ID,
         'USER_IPS_PAYMENTS',
         V_IPS_AMOUNT,
         V_FINANCE_TYPE,
         V_NOW,
         V_USER_NAME,
         V_NOW,
         V_USER_ACCOUNT_NOW,
         V_USER_ACCOUNT_NOW + V_IPS_AMOUNT,
         '0',
         '1'); --收入
    
      DBMS_OUTPUT.PUT_LINE('生成余额流水,' || P_PAY_TYPE || '收入:' || V_IPS_AMOUNT);
    
      /*更新用户余额*/
      UPDATE USERS
         SET ACCOUNT = NVL(ACCOUNT, 0) + V_IPS_AMOUNT, TOTAL_ACCOUNT = NVL(TOTAL_ACCOUNT, 0) + V_IPS_AMOUNT
       WHERE ID = V_USER_ID;
    
      DBMS_OUTPUT.PUT_LINE('更新用户余额(commit),更新前:' || V_USER_ACCOUNT_OLD || ',更新后:' ||
                           (V_USER_ACCOUNT_OLD + V_IPS_AMOUNT));
      /*提交IPS/SDO充值结果*/
      COMMIT;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  /*===============================================================*/
  /*=======================第三方支付交易单部分====================*/
  /*===============================================================*/
  /*如果交易单id不为空,IPS/SDO/TENPAY支付订单*/
  IF RESULT_USER_PAYMENTS_ID IS NULL AND V_ORDER_IDS IS NOT NULL THEN
    V_TOTAL_AMOUNT := 0;
  
    DBMS_OUTPUT.PUT_LINE('有订单需要支付,' || V_ORDER_IDS);
    BEGIN
    
      /*用户信息*/
      SELECT TRUE_NAME, NVL(ACCOUNT, 0), NVL(TOTAL_ACCOUNT, 0), BUY_SCORE_USEABLE
        INTO V_USER_NAME, V_USER_ACCOUNT_OLD, V_USER_ACCOUNT_NOW, V_USER_SOCRE
        FROM USERS
       WHERE ID = V_USER_ID;
    
      IF V_ORDER_TYPE = '0' OR V_ORDER_TYPE = '2' THEN
        /*统计支付交易单数量和金额*/
        V_SQL := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT), sum(DECODE(HAS_COLLECTION_CERTIFICATE,1,20,0)) FROM USER_ORDERS WHERE USER_ID=' ||
                 V_USER_ID || ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT, V_COLLECTION_CERTIFICATE;
      
        DBMS_OUTPUT.PUT_LINE('其中,拍卖订单数:' || V_ORDERS_COUNT || ',金额:' || V_TOTAL_AMOUNT);
      END IF;
      /*包含商城订单*/
      /*edit by zhangyi 增加商城投资理财部分的定金*/
      /*订金总额*/
      /*IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)' || 'FROM ec_auction_book WHERE ORDER_ID IN' || '(' ||
                 P_EC_ORDER_IDS || ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID=' || V_USER_ID;
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_DEPOSITS, V_EC_DEPOSITS_NUM;
      END IF;*/
    
      /*edit by zhangyi 商城订单应支付金额 需要减去 定金部分*/
      IF V_ORDER_TYPE = '1' OR V_ORDER_TYPE = '2' THEN
        V_SQL := 'SELECT COUNT(*),nvl(SUM(ORDER_PRICE*GOODS_NUMBER)-' || V_EC_DEPOSITS ||
                 ',0),nvl(SUM(CONSUME_SCORES*GOODS_NUMBER),0), nvl(sum(get_scores*goods_number),0)' ||
                 '  FROM EC_ORDER_GOODS WHERE USER_ID=' || V_USER_ID || ' AND ORDER_STATUS=0 AND ID IN (' ||
                 V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMOUNT, V_EC_CONSUME_SCORES, V_EC_GET_SCORES;
      
        DBMS_OUTPUT.PUT_LINE('其中,商城订单数:' || V_EC_ORDERS_COUNT || ',金额:' || V_EC_TOTAL_AMOUNT || ',积分:' ||
                             V_EC_CONSUME_SCORES);
      END IF;
    
      V_COLLECTION_CERTIFICATE := NVL(V_COLLECTION_CERTIFICATE, 0);
      V_TOTAL_AMOUNT           := NVL(V_TOTAL_AMOUNT, 0) + NVL(V_EC_TOTAL_AMOUNT, 0);
    
      /*交易单不存在*/
      IF V_ORDERS_COUNT + V_EC_ORDERS_COUNT = 0 THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('错误:交易单不存在或已经支付');
        RESULT_USER_PAYMENTS_ID := 0;
        RESULT_STATUS           := 0;
        RETURN;
      END IF;
    
      /*积分不足*/
      IF V_USER_SOCRE < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('错误:积分不足');
        RESULT_STATUS := 5;
        RETURN;
      END IF;
    
      /*余额不足*/
      IF V_USER_ACCOUNT_OLD < V_TOTAL_AMOUNT + V_COLLECTION_CERTIFICATE THEN
        BEGIN
          ROLLBACK;
          DBMS_OUTPUT.PUT_LINE('错误:余额不足');
          RESULT_STATUS := 4;
          RETURN;
        END;
      END IF;
    
      /*支付单id*/
      SELECT USER_PAYMENTS_SEQ.NEXTVAL INTO RESULT_USER_PAYMENTS_ID FROM DUAL;
    
      /*生成支付单*/
      INSERT INTO USER_PAYMENTS
        (ID, USER_ID, USERNAME, TOTAL_AMOUNT, AC_AMOUNT, PAY_TYPE, PAY_DATE, PAY_STATUS, CREATED_AT)
      VALUES
        (RESULT_USER_PAYMENTS_ID,
         V_USER_ID,
         V_USER_NAME,
         V_TOTAL_AMOUNT + V_COLLECTION_CERTIFICATE + V_EC_DEPOSITS, /*edit by zhangyi 加上 定金部分*/
         V_ORDERS_COUNT + V_EC_ORDERS_COUNT,
         V_PAY_TYPE,
         V_NOW,
         '1',
         V_NOW);
    
      DBMS_OUTPUT.PUT_LINE('生成用户支付单:' || RESULT_USER_PAYMENTS_ID);
    
      IF V_TOTAL_AMOUNT + V_COLLECTION_CERTIFICATE > V_IPS_AMOUNT THEN
        /*
        总金额>第三方支付金额,则使用余额+第三方支付
        余额部分在生成请求时已经记录流水,状态为2,
        */
        BEGIN
          IF P_PAY_TYPE = 'IPS' THEN
            SELECT ID, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '24';
            --支付方式IPS+余额
            V_PAY_TYPE := '5';
          
          ELSIF P_PAY_TYPE = 'SDO' THEN
            /*余额+SDO支付时,余额部分流水记录*/
            SELECT ID, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '25';
            --支付方式SDO+余额
            V_PAY_TYPE := '6';
          
          ELSIF P_PAY_TYPE = 'TENPAY' THEN
            /*余额+TENPAY支付时,余额部分流水记录*/
            SELECT ID, MONEY, STATUS
              INTO V_USE_BALANCE_ID, V_USE_BALANCE, V_USE_BALANCE_STATUS
              FROM USER_ACCOUNTS UA
             WHERE UA.SOURCE_TYPE = 'USER_IPS_PAYMENTS'
               AND UA.SOURCE_ID = P_IPS_PAYMENT_ID
               AND FINANCE_TYPE = '33';
            --支付方式TENPAY+余额
            V_PAY_TYPE := '11';
          
          END IF;
        
          /*余额+IPS支付时,占用的余额部分*/
          IF V_USE_BALANCE IS NOT NULL AND V_USER_ACCOUNT_OLD > V_USE_BALANCE THEN
            IF P_PAY_TYPE = 'IPS' THEN
              V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
            ELSIF P_PAY_TYPE = 'SDO' THEN
              V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
            ELSIF P_PAY_TYPE = 'TENPAY' THEN
              V_FINANCE_TYPE := '33'; --余额+TENPAY支付时,余额部分
            END IF;
          
            INSERT INTO USER_ACCOUNTS
              (ID,
               USER_ID,
               SOURCE_ID,
               SOURCE_TYPE,
               MONEY,
               FINANCE_TYPE,
               FINANCE_DATE,
               REMARKS,
               CREATED_AT,
               ACCOUNT_OLD,
               ACCOUNT_NEW,
               DIRECTION,
               STATUS)
            VALUES
              (USER_ACCOUNTS_SEQ.NEXTVAL,
               V_USER_ID,
               RESULT_USER_PAYMENTS_ID,
               'USER_PAYMENTS',
               V_USE_BALANCE + V_EC_DEPOSITS, /*edit by zhangyi 加上 定金部分*/
               V_FINANCE_TYPE, --余额+第三方支付时余额部分
               V_NOW,
               P_PAY_TYPE || ':' || (V_TOTAL_AMOUNT - V_USE_BALANCE) || '+余额:' || (V_USE_BALANCE + V_EC_DEPOSITS) || '支付', --IPS/SDO
               --'+余额:' || V_USE_BALANCE || '支付', --IPS/SDO
               V_NOW,
               V_USER_ACCOUNT_NOW,
               V_USER_ACCOUNT_NOW - V_USE_BALANCE,
               '1', --支出
               '1'); --余额占用,支付成功需要更新为1,支付失败更新为0
          
            IF V_USE_BALANCE_STATUS = '2' THEN
              DELETE FROM USER_ACCOUNTS WHERE ID = V_USE_BALANCE_ID;
              /*扣除余额*/
              UPDATE USERS
                 SET ACCOUNT = ACCOUNT - V_USE_BALANCE, TOTAL_ACCOUNT = TOTAL_ACCOUNT - V_USE_BALANCE
               WHERE ID = V_USER_ID;
              /*网银+余额支付,余额部分扣除*/
              V_USER_ACCOUNT_OLD := V_USER_ACCOUNT_OLD - V_USE_BALANCE;
              V_USER_ACCOUNT_NOW := V_USER_ACCOUNT_NOW - V_USE_BALANCE;
              V_EC_DEPOSITS      := 0;
            END IF;
          
            DBMS_OUTPUT.PUT_LINE('其中使用余额部分为:' || V_USE_BALANCE);
          ELSE
            /*余额不够扣除,更新流水状态为无效*/
            UPDATE USER_ACCOUNTS SET STATUS = '0' WHERE ID = V_USE_BALANCE_ID;
            /*结束,退出,第三方支付当充值进入帐户*/
            DBMS_OUTPUT.PUT_LINE('余额不够扣除:三方支付部分当充值进入余额');
            RETURN;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            V_ERROR_MSG := 'V_TOTAL_AMOUNT:' || V_TOTAL_AMOUNT || ',P_AMOUNT:' || P_AMOUNT || ' 1-SQLCODE:' || SQLCODE ||
                           ',SQLERRM:' || SQLERRM;
            UPDATE USER_IPS_PAYMENTS SET REMARK = V_ERROR_MSG WHERE ID = P_IPS_PAYMENT_ID;
          
            RESULT_STATUS := 7;
            RETURN;
        END;
      END IF;
    
      IF V_USE_BALANCE IS NULL THEN
        V_USE_BALANCE := 0;
      END IF;
    
      /*三方支付部分金额*/
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT - V_USE_BALANCE;
    
      IF V_ORDER_TYPE = '0' AND V_USE_BALANCE = 0 THEN
        V_FINANCE_TYPE := 11; --交易单支付
      ELSIF V_ORDER_TYPE = '1' OR V_ORDER_TYPE = '2' THEN
        V_FINANCE_TYPE := 19;
      END IF;
    
      /*支付,生成余额流水*/
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_NAME,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS,
         REMARKS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         RESULT_USER_PAYMENTS_ID,
         'USER_PAYMENTS',
         V_TOTAL_AMOUNT,
         V_FINANCE_TYPE, --交易单支付
         V_NOW,
         V_USER_NAME,
         V_NOW,
         V_USER_ACCOUNT_NOW,
         V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT,
         '1',
         '1',
         P_PAY_TYPE || '支付,其中使用余额部分为' || V_USE_BALANCE);
    
      IF V_COLLECTION_CERTIFICATE > 0 THEN
        V_SQL := 'INSERT INTO USER_COLLECTION_CERTIFICATE(ID,ORDER_ID,CREATED_AT) SELECT ' ||
                 'USER_COLLECTION_CERT_SEQ.NEXTVAL,O.ID,SYSDATE FROM USER_ORDERS O WHERE USER_ID=' || V_USER_ID ||
                 ' AND O.STATUS=0 AND O.IS_FREEZE =0 AND ID IN (' || V_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT LD.ID FROM LEND_DETAILS LD ' || ' JOIN LENDS L ON L.ID=LD.LEND_ID ' ||
                 ' JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID ' ||
                 ' WHERE LD.AUCTION_ID = O.AUCTION_ID AND L.USER_ID=' || V_USER_ID || ' AND L.LEND_TYPE = 3' ||
                 ' AND (VWMS.LENDSTATUS NOT IN (2, 9, 10) OR L.STATUS=1))';
        EXECUTE IMMEDIATE V_SQL;
      
        /*支付,生成余额流水*/
        INSERT INTO USER_ACCOUNTS
          (ID,
           USER_ID,
           SOURCE_ID,
           SOURCE_TYPE,
           MONEY,
           FINANCE_TYPE,
           FINANCE_DATE,
           FINANCE_NAME,
           CREATED_AT,
           ACCOUNT_OLD,
           ACCOUNT_NEW,
           DIRECTION,
           STATUS)
        VALUES
          (USER_ACCOUNTS_SEQ.NEXTVAL,
           V_USER_ID,
           RESULT_USER_PAYMENTS_ID,
           'USER_PAYMENTS',
           V_COLLECTION_CERTIFICATE,
           '34', --书画收藏证书
           V_NOW,
           V_USER_NAME,
           V_NOW,
           V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT,
           V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT - V_COLLECTION_CERTIFICATE,
           '1',
           '1');
      END IF;
    
      DBMS_OUTPUT.PUT_LINE('生成余额流水,交易单支出:' || V_TOTAL_AMOUNT);
    
      IF V_EC_GET_SCORES > 0 THEN
        P_SCORE_GIFT(V_USER_ID, V_EC_GET_SCORES, 1, NULL, V_USER_ID, V_USER_NAME, NULL, '0', V_AUCTIO_FEE_RESULT);
      END IF;
    
      /*从用户余额中扣除*/
      UPDATE USERS
         SET ACCOUNT       = NVL(ACCOUNT, 0) - V_TOTAL_AMOUNT - V_COLLECTION_CERTIFICATE,
             TOTAL_ACCOUNT = NVL(TOTAL_ACCOUNT, 0) - V_TOTAL_AMOUNT - V_COLLECTION_CERTIFICATE
       WHERE ID = V_USER_ID;
    
      DBMS_OUTPUT.PUT_LINE('更新用户余额,更新前:' || V_USER_ACCOUNT_NOW || ',更新后:' || (V_USER_ACCOUNT_NOW - V_TOTAL_AMOUNT));
      /*扣除积分*/
      IF V_EC_CONSUME_SCORES > 0 THEN
        P_SCORE_BUYER_EXCHANGE(V_USER_ID, V_EC_CONSUME_SCORES, RESULT_USER_PAYMENTS_ID, V_EC_SCORES_RESULT);
        IF V_EC_SCORES_RESULT != 0 THEN
          ROLLBACK;
          RESULT_STATUS := 6;
          RETURN;
        END IF;
      END IF;
    
      --更新结算状态
      V_SQL := 'UPDATE AUCTIONS SET SETTLEMENT_STATUS=2 WHERE ID IN (SELECT AUCTION_ID FROM USER_ORDERS' ||
               ' WHERE USER_ID=' || V_USER_ID || ' AND STATUS=0 AND ID IN (' || V_ORDER_IDS || '))';
      EXECUTE IMMEDIATE V_SQL;
    
      /*更新交易单状态*/
      V_SQL := 'UPDATE USER_ORDERS SET STATUS=1, USER_PAYMENT_ID = ' || RESULT_USER_PAYMENTS_ID ||
               ', PAY_DATE=to_date(''' || TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
               ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || V_USER_ID || ' AND STATUS=0 AND ID IN (' ||
               V_ORDER_IDS || ')';
      EXECUTE IMMEDIATE V_SQL;
    
      DBMS_OUTPUT.PUT_LINE('更新拍卖交易单状态为已支付,数量:' || SQL%ROWCOUNT);
    
      /*如果ips支付的交易单数量大于竞拍交易单数量,还有新商场交易单需要更新*/
      IF P_ORDER_COUNT > V_ORDERS_COUNT THEN
        V_SQL := 'UPDATE EC_ORDER_GOODS SET ORDER_STATUS=1, UNITE_PAY_ID = ' || RESULT_USER_PAYMENTS_ID ||
                 ', PAY_DATE=to_date(''' || TO_CHAR(V_NOW, 'YYYY-MM-DD HH24:MI:SS') ||
                 ''',''YYYY-MM-DD HH24:MI:SS'') WHERE USER_ID=' || V_USER_ID || ' AND ORDER_STATUS=0 AND  ID IN (' ||
                 V_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL;
      
        DBMS_OUTPUT.PUT_LINE('更新商城交易单状态为已支付,数量:' || SQL%ROWCOUNT);
      
        /*edit by zhangyi 扣除冻结的订金*/
        /*IF V_EC_DEPOSITS_NUM > 0 THEN
          V_SQL := 'UPDATE ec_auction_book SET STATUS=6,UPDATED_AT=sysdate WHERE ORDER_ID IN (' || P_EC_ORDER_IDS ||
                   ') AND STATUS IN (4,5)';
          EXECUTE IMMEDIATE V_SQL;
        END IF;*/
      
        /*edit by zhangyi 修改用户账户里的冻结资金*/
        IF V_EC_DEPOSITS > 0 THEN
          UPDATE USERS
             SET TOTAL_ACCOUNT = TOTAL_ACCOUNT - V_EC_DEPOSITS, FREEZE_ACCOUNT = FREEZE_ACCOUNT - V_EC_DEPOSITS
           WHERE ID = V_USER_ID;
        END IF;
      
      END IF;
    
      /*获取占用额度*/
      SELECT NVL(SUM(USE_QUOTA), 0)
        INTO V_TOTAL_USED_QUOTA
        FROM USER_QUOTA_USAGES
       WHERE USER_ID = V_USER_ID
         AND STATUS = 1
         AND EXISTS (SELECT ID
                FROM USER_ORDERS
               WHERE USER_ID = V_USER_ID
                 AND STATUS = 1
                 AND USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID
                 AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);
    
      /*更新占用额度为不占用*/
      UPDATE USER_QUOTA_USAGES
         SET STATUS = '0'
       WHERE USER_ID = V_USER_ID
         AND STATUS = '1'
         AND EXISTS (SELECT ID
                FROM USER_ORDERS
               WHERE USER_ID = V_USER_ID
                 AND STATUS = '1'
                 AND USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID
                 AND USER_ORDERS.AUCTION_ID = USER_QUOTA_USAGES.AUCTION_ID);
    
      /*释放占用额度*/
      IF V_TOTAL_USED_QUOTA IS NOT NULL THEN
        UPDATE USERS SET QUOTA = QUOTA + V_TOTAL_USED_QUOTA WHERE ID = V_USER_ID;
        /*额度流水*/
        INSERT INTO USER_QUOTAS
          (ID, USER_ID, AMOUNT, QUOTA_TYPE, OPERATE_TYPE, REMARKS, CREATED_AT, DIRECTION)
        VALUES
          (USER_QUOTAS_SEQ.NEXTVAL, V_USER_ID, V_TOTAL_USED_QUOTA, 5, 1, P_PAY_TYPE || '支付交易单', V_NOW, 0);
      
        DBMS_OUTPUT.PUT_LINE('释放占用额度:' || V_TOTAL_USED_QUOTA);
      
      END IF;
    
      /*更新支付单id*/
      UPDATE USER_IPS_PAYMENTS
         SET USER_PAYMENT_ID = RESULT_USER_PAYMENTS_ID, UPDATED_AT = V_NOW
       WHERE ID = P_IPS_PAYMENT_ID;
    
      DBMS_OUTPUT.PUT_LINE('更新' || P_PAY_TYPE || '交易单:' || P_IPS_PAYMENT_ID || '关联的支付单' || RESULT_USER_PAYMENTS_ID);
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('SQLCODE:' || SQLCODE || ',SQLERRM:' || SQLERRM);
        V_ERROR_MSG := 'SQLCODE:' || SQLCODE || ',SQLERRM:' || SQLERRM;
        UPDATE USER_IPS_PAYMENTS SET REMARK = V_ERROR_MSG WHERE ID = P_IPS_PAYMENT_ID;
      
        RESULT_STATUS := 7;
        RETURN;
    END;
    --计算制作费
    BEGIN
      V_SQL := 'select a.id from auctions a,user_orders o where a.id=o.auction_id' || ' and o.id in (' || V_ORDER_IDS || ')';
    
      OPEN CUR_AUCTION_FEE FOR V_SQL;
      LOOP
        FETCH CUR_AUCTION_FEE
          INTO V_AUCTION_ID;
        EXIT WHEN CUR_AUCTION_FEE%NOTFOUND;
      
        P_SETTLEMENT_AUCTION_FEE(V_AUCTION_ID, V_AUCTIO_FEE_RESULT);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN;
    END;
  END IF;
  RESULT_STATUS := 0;
  RETURN;
END P_USER_IPS_PAYMENT_RESPONSE2;

 
/

-- ----------------------------
-- Procedure structure for P_USER_LEVEL
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_USER_LEVEL" is
/*
作者：马磊
统计每个月用户等级数量
每月底执行
*/
begin
delete from user_level_count a where a.create_date=to_char(sysdate,'YYYY-MM');
commit;
insert into user_level_count
select aa.ct,aa.u_level,aa.create_date from (
select count(*) ct,case when a.buy_level<10 then '钻'||a.buy_level end u_level,to_char(sysdate,'YYYY-MM') create_date from users a group by a.buy_level
union
select count(*) ct,case when a.sell_level>=10 then '星'||a.sell_level end u_level,to_char(sysdate,'YYYY-MM') create_date from users a group by a.sell_level
) aa order by aa.u_level;
commit;
end p_user_level;


 
/

-- ----------------------------
-- Procedure structure for P_USER_LOGISTIC_DELIVER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_LOGISTIC_DELIVER"
(
	p_user_id             IN NUMBER, --客户编号
	p_auction_order_ids   IN VARCHAR, --竞拍交易单号
	p_ec_order_ids        IN VARCHAR, --商城交易单号
	p_combine_logistic_id IN VARCHAR, --合并发货单号
	p_logistic_type_id    IN NUMBER, --发货方式
	P_DELIVER_ALL         IN NUMBER,
	p_address_id          IN NUMBER, --收货地址
	p_keepPrice           IN NUMBER, --保价额
	p_keepFee             IN NUMBER, --保价费
	p_itmes_count         IN OUT NUMBER, --发货数量
	p_remarks             IN VARCHAR, --备注
	v_logistic_id         OUT NUMBER,
	v_logistic_detail_id  OUT NUMBER,
	result_status         OUT NUMBER
	/*
                          * 1:用户不存在
                          * 2:被合并的发货单不存在
                          * 3:合并发货单失败
                          */
) IS
	/**
     作者:李征
     日期:2012.05.03
     描述：前台申请发货,
  */
	v_sql                  VARCHAR2(10000);
	v_user_name            VARCHAR2(225);
	v_items_count          NUMBER := 0;
	v_auction_items_amount NUMBER := 0;
	v_ec_items_amount      NUMBER := 0;

	v_combine_logistic_detail_id NUMBER;
BEGIN
	DBMS_OUTPUT.enable(10000);
	BEGIN
		SELECT decode(u.true_name, NULL, u.NICKNAME, u.true_name)
			INTO v_user_name
			FROM users u
		 WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			result_status := 1;
			RETURN;
	END;

	SELECT logistics_seq.NEXTVAL INTO v_logistic_id FROM dual;
	SELECT logistic_details_seq.NEXTVAL INTO v_logistic_detail_id FROM dual;
	--合并到已暂缓的发货单中
	IF p_combine_logistic_id IS NOT NULL AND p_combine_logistic_id != 0 THEN
		BEGIN
			SELECT ID
				INTO v_combine_logistic_detail_id
				FROM LOGISTIC_DETAILS LD
			 WHERE LD.LOGISTIC_ID = p_combine_logistic_id;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				ROLLBACK;
				result_status := 2;
				RETURN;
		END;

		BEGIN
			--更新原暂缓发货申请为合并状态
			UPDATE logistics
				 SET IS_MERGED = '1'
			 WHERE id = p_combine_logistic_id;
			--新拍品与被合并的拍品价值总合
			v_sql := 'select sum(total_amount) from user_orders o ' ||
							 'JOIN logistic_details ld ON ld.id=o.LOGISTIC_DETAIL_ID' ||
							 'JOIN logistics l ON l.id=ld.LOGISTIC_ID' ||
							 'LEFT JOIN V_WMS_LOG_ORDER_STATUS_INFO vwms  ON vwms.logisticId=l.id' ||
							 'where o.user_id=' || p_user_id ||
							 ' and o.LOGISTIC_DETAIL_ID=' || v_combine_logistic_detail_id;
			--选择需要合并的单
			IF p_auction_order_ids IS NOT NULL THEN
				v_sql := v_sql || ' or (o.user_id=' || p_user_id ||
								 ' and o.id in (' || p_auction_order_ids ||
								 ') and vwms.logisticId is null)' || ' ';
			END IF;
			EXECUTE IMMEDIATE v_sql
				INTO v_auction_items_amount;

			--新商城商品与被合并的商城商品价值总合
			v_sql := 'select sum(total_amount) from EC_ORDER_GOODS o ' ||
							 'where o.user_id=' || p_user_id ||
							 ' and o.UNITE_CONSIGN_ID=' || v_combine_logistic_detail_id;

			IF p_ec_order_ids IS NOT NULL THEN
				v_sql := v_sql || ' or (o.user_id=' || p_user_id ||
								 ' and o.id in (' || p_ec_order_ids || '))';
			END IF;
			EXECUTE IMMEDIATE v_sql
				INTO v_ec_items_amount;

			--合并到已暂缓的发货单中,新建一条发货申请,复制原暂缓数据到新建发货申请
			INSERT INTO LOGISTICS
				(ID,
				 user_id,
				 user_address_id,
				 logistic_type_id,
				 status,
				 postage,
				 pack_fee,
				 keep_fee,
				 extra_fee,
				 total_fee,
				 is_send_sms,
				 remarks,
				 created_at,
				 updated_at,
				 keep_price,
				 user_name,
				 region_id,
				 items_count,
				 items_amount,
				 is_free)
				SELECT v_logistic_id,
							 P_USER_ID,
							 user_address_id,
							 logistic_type_id,
							 0,
							 postage,
							 pack_fee,
							 keep_fee,
							 extra_fee,
							 total_fee,
							 is_send_sms,
							 remarks || ',' || P_REMARKS,
							 SYSDATE,
							 SYSDATE,
							 keep_price,
							 v_user_name,
							 region_id,
							 items_count + p_itmes_count,
							 v_ec_items_amount + v_auction_items_amount,
							 is_free
					FROM logistics
				 WHERE ID = p_combine_logistic_id;

			--发货申请详细
			INSERT INTO logistic_details
				(id,
				 logistic_id,
				 old_logistic_id,
				 user_id,
				 delivery_type,
				 remarks,
				 created_at)
			VALUES
				(v_logistic_detail_id,
				 v_logistic_id,
				 p_combine_logistic_id,
				 p_user_id,
				 1,
				 p_remarks,
				 SYSDATE);
			--更新原暂缓的交易单为新的发货详情
			UPDATE user_orders o
				 SET o.LOGISTIC_DETAIL_ID = v_logistic_detail_id
			 WHERE o.LOGISTIC_DETAIL_ID = v_combine_logistic_detail_id;
			--更新原暂缓的交易单为新的发货详情
			UPDATE EC_ORDER_GOODS EO
				 SET EO.UNITE_CONSIGN_ID = v_logistic_detail_id
			 WHERE EO.UNITE_CONSIGN_ID = v_combine_logistic_detail_id;

			--更新交易单发货id
			IF p_auction_order_ids IS NOT NULL THEN
				v_sql := 'update user_orders o set o.logistic_detail_id = ' ||
								 v_logistic_detail_id || ' where o.user_id=' || p_user_id ||
								 ' and o.id in (' || p_auction_order_ids || ')';
				EXECUTE IMMEDIATE v_sql;
			END IF;
			--更新商城交易单发货id
			IF p_ec_order_ids IS NOT NULL THEN
				v_sql := 'update EC_ORDER_GOODS o set o.UNITE_CONSIGN_ID = ' ||
								 v_logistic_detail_id || ',APPLY_CONSIGN_DATE=sysdate ' ||
								 'where o.user_id=' || p_user_id || ' and o.id in (' ||
								 p_ec_order_ids || ')';
				EXECUTE IMMEDIATE v_sql;
			END IF;
		EXCEPTION
			WHEN OTHERS THEN
				ROLLBACK;
				result_status := 3;
				RETURN;
		END;

		result_status := 0;
		RETURN;
	END IF;

	--新申请发货的交易单
	IF p_auction_order_ids IS NOT NULL OR p_ec_order_ids IS NOT NULL OR
		 P_DELIVER_ALL = 1 THEN
		BEGIN
			--更新交易单发货id
			IF P_AUCTION_ORDER_IDS IS NOT NULL THEN
				V_SQL := 'UPDATE USER_ORDERS O SET O.LOGISTIC_DETAIL_ID = ' ||
								 V_LOGISTIC_DETAIL_ID || ' WHERE O.USER_ID=' || P_USER_ID ||
								 ' AND O.STATUS=1 AND O.ID IN (' || P_AUCTION_ORDER_IDS || ')' ||
								 ' AND NOT EXISTS(SELECT OO.ID ' || ' FROM USER_ORDERS OO ' ||
								 ' JOIN LOGISTIC_DETAILS LD ON LD.ID = OO.LOGISTIC_DETAIL_ID ' ||
								 ' JOIN LOGISTICS L ON L.ID = LD.LOGISTIC_ID ' ||
								 ' JOIN V_WMS_LOG_ORDER_STATUS_INFO VWMS ON VWMS.LOGISTICID = L.ID ' ||
								 ' WHERE OO.STATUS=1 AND OO.USER_ID = ' || P_USER_ID ||
								 ' AND OO.ID =O.ID ' ||
								 ' AND DECODE(VWMS.LOGISTICSTATUS, 2, 0, 3, 0, 6, 0, 1) = 1 )' ||
								 ' AND NOT EXISTS(SELECT UR.ID FROM USER_REFUNDS UR WHERE UR.ID=O.USER_REFUND_ID' ||
								 ' AND DECODE(UR.STATUS,NULL,0,8,0,1) = 1)';
				EXECUTE IMMEDIATE V_SQL;
			END IF;
			--更新商城交易单发货ID
			IF P_EC_ORDER_IDS IS NOT NULL THEN
				V_SQL := 'UPDATE EC_ORDER_GOODS O SET O.UNITE_CONSIGN_ID = ' ||
								 V_LOGISTIC_DETAIL_ID || ',APPLY_CONSIGN_DATE=SYSDATE ' ||
								 'WHERE O.ORDER_STATUS=1 AND O.USER_ID=' || P_USER_ID ||
								 ' AND O.ID IN (' || P_EC_ORDER_IDS || ')';
				EXECUTE IMMEDIATE v_sql;
			END IF;

			IF P_DELIVER_ALL = 1 THEN
				v_sql := 'UPDATE USER_ORDERS O SET O.LOGISTIC_DETAIL_ID = ' ||
								 V_LOGISTIC_DETAIL_ID || ' WHERE O.USER_ID=' || P_USER_ID ||
								 ' AND O.STATUS=1 AND O.LOGISTIC_DETAIL_ID IS NULL ' ||
								 ' AND NOT EXISTS(SELECT OO.ID FROM USER_ORDERS OO ' ||
								 ' JOIN LOGISTIC_DETAILS LD ON LD.ID = OO.LOGISTIC_DETAIL_ID ' ||
								 ' JOIN LOGISTICS L ON L.ID = LD.LOGISTIC_ID ' ||
								 ' JOIN V_WMS_LOG_ORDER_STATUS_INFO VWMS ON VWMS.LOGISTICID = L.ID ' ||
								 ' WHERE OO.USER_ID = ' || P_USER_ID ||
								 '  AND OO.ID =O.ID ' ||
								 ' AND DECODE(VWMS.LOGISTICSTATUS, 2, 0, 3, 0, 6, 0, 1) = 1 )' ||
								 ' AND NOT EXISTS(SELECT UR.ID FROM USER_REFUNDS UR' ||
								 ' WHERE UR.ID=O.USER_REFUND_ID' ||
								 ' AND DECODE(UR.STATUS,NULL,0,8,0,1) =1)';
				EXECUTE IMMEDIATE v_sql;
				p_itmes_count := SQL%ROWCOUNT;

				v_sql := 'update EC_ORDER_GOODS o set o.UNITE_CONSIGN_ID = ' ||
								 v_logistic_detail_id || ',APPLY_CONSIGN_DATE=sysdate ' ||
								 'where o.user_id=' || p_user_id ||
								 ' and o.ORDER_STATUS=1 and O.UNITE_CONSIGN_ID IS NULL';
				EXECUTE IMMEDIATE v_sql;
				p_itmes_count := p_itmes_count + SQL%ROWCOUNT;

			END IF;

			IF p_itmes_count > 0 THEN
				IF p_logistic_type_id = 185 THEN
					--发货申请记录
					INSERT INTO logistics
						(id,
						 user_id,
						 user_name,
						 region_id,
						 logistic_type_id,

						 items_count,
						 is_free,
						 status,
						 remarks,
						 created_at,
						 address)
						SELECT v_logistic_id,
									 p_user_id,
									 v_user_name,
									 1,
									 p_logistic_type_id,
									 p_itmes_count,
									 0,
									 '2',
									 p_remarks,
									 SYSDATE,
									 '上门自取'
							FROM dual;
				ELSE
					--发货申请记录
					INSERT INTO logistics
						(id,
						 user_id,
						 user_name,
						 region_id,
						 logistic_type_id,
						 user_address_id,
						 keep_price,
						 keep_fee,
						 is_merged,
						 items_count,
						 is_free,
						 status,
						 remarks,
						 created_at,
						 address,
						 postcode,
						 tel,
						 mobile_tel)
						SELECT v_logistic_id,
									 p_user_id,
									 v_user_name,
									 CASE
										 WHEN ua.COUNTRY_ID = 40 THEN
											1
										 WHEN ua.COUNTRY_ID = 186 OR ua.COUNTRY_ID = 114 OR
													ua.COUNTRY_ID = 84 THEN
											2
										 ELSE
											3
									 END,
									 p_logistic_type_id,
									 p_address_id,
									 p_keepPrice,
									 p_keepFee,
									 0,
									 p_itmes_count,
									 0,
									 '2',
									 p_remarks,
									 SYSDATE,
									 ua.ADDRESS,
									 ua.POSTCODE,
									 ua.TEL,
									 ua.MOBILE_TEL
							FROM user_addresses ua
						 WHERE ua.id = p_address_id;

				END IF;

				--发货申请详细
				INSERT INTO logistic_details
					(id,
					 logistic_id,
					 old_logistic_id,
					 user_id,
					 keep_price,
					 keep_fee,
					 delivery_type,
					 remarks,
					 created_at)
				VALUES
					(v_logistic_detail_id,
					 v_logistic_id,
					 v_logistic_id,
					 p_user_id,
					 p_keepPrice,
					 p_keepFee,
					 1,
					 p_remarks,
					 SYSDATE);
			ELSE
				ROLLBACK;
				p_itmes_count := 0;
				result_status := 4;
				RETURN;
			END IF;
		EXCEPTION
			WHEN OTHERS THEN
				ROLLBACK;
				result_status := 4;
				DBMS_OUTPUT.PUT_LINE('SQLCODE:' || TO_CHAR(SQLCODE) || ',SQLERRM:' ||
														 SQLERRM);
				RETURN;
		END;
		result_status := 0;
		RETURN;
	END IF;
END P_USER_LOGISTIC_DELIVER;


 
/

-- ----------------------------
-- Procedure structure for P_USER_LOGISTIC_GET_BY_HIMSELF
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_LOGISTIC_GET_BY_HIMSELF"
(
	p_user_id            NUMBER,
	p_user_name          VARCHAR,
	p_auction_order_ids  VARCHAR,
	p_ec_order_ids       VARCHAR,
	p_item_count         IN OUT NUMBER,
	P_DELIVER_ALL        IN NUMBER,
	p_card_type          IN VARCHAR2,
	p_card_id            IN VARCHAR2,
	P_START_AT           IN DATE,
	P_END_AT             IN DATE,
	p_remarks            IN VARCHAR2,
	v_logistic_id        OUT NUMBER,
	V_LOGISTIC_DETAIL_ID OUT NUMBER,
	result_status        OUT NUMBER
) IS
	/*
    创建人:李征
    日期:2012-05-05
    描述:前台申请发货,上门自取
  */

	v_user_id NUMBER;

	v_lend_id    NUMBER;
	v_booking_id NUMBER;
	v_sql        VARCHAR2(1000);

BEGIN
	BEGIN
		SELECT id INTO v_user_id FROM users WHERE id = p_user_id;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			result_status := 1;
			RETURN;
	END;

	P_USER_LOGISTIC_DELIVER(p_user_id,
													p_auction_order_ids,
													p_ec_order_ids,
													NULL,
													185, --上门自取
													P_DELIVER_ALL,
													0,
													0,
													0,
													p_item_count,
													p_remarks,
													v_logistic_id,
													V_LOGISTIC_DETAIL_ID,
													result_status);

	INSERT INTO bookings
		(id,
		 source_id,
		 source_type,
		 user_name,
		 card_type,
		 card_id,
		 start_at,
		 end_at,
		 remarks,
		 created_at,
		 status)
	VALUES
		(bookings_seq.NEXTVAL,
		 v_logistic_id,
		 'LOGISTICS',
		 p_user_name,
		 p_card_type,
		 p_card_id,
		 P_START_AT,
		 P_END_AT,
		 p_remarks,
		 SYSDATE,
		 2);

	result_status := 0;
	RETURN;
END P_USER_LOGISTIC_GET_BY_HIMSELF;


 
/

-- ----------------------------
-- Procedure structure for P_USER_MAKE_ONE_USER_ORDERS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_MAKE_ONE_USER_ORDERS"
(
  P_USER_ID     IN NUMBER,
  RESULT_STATUS OUT NUMBER
) IS
  /*
    作者:李征
    日期:2011-11-28
    描述:生成指定用户的交易单

    2013.10.31 lizheng hosane双年展专场10544结标后冻结,不让支付

    作者:顾全江
    日期:2015-03-09
    描述:竞买方手续费有拍品分类表中读取改为从拍品表中读取。主要是因为目前的业务：书画且为展售
    拍品的手续费为0
    
  */
  NOW            DATE := SYSDATE;
  V_CUSTODY      NUMBER := 0; --保管费
  V_USER_ORDERID NUMBER := 0;
  V_SCORES       NUMBER := 0; --积分
  V_AUCTION_NAME auctions.NAME%TYPE;
  V_COUNT        NUMBER := 0;
  V_SCORE_TIMES  NUMBER := 1; --积分倍数

  V_IS_FREEZE NUMBER :=0; --是否冻结

  /*指定用户的交易单*/
  CURSOR C_WITH_USER(V_USER_ID NUMBER) IS
    SELECT A.AUCTION_NO, --拍品编号
           A.AUCTION_TYPE, --拍品类型(竞拍/一口价)
           A.PREVIEW_AT, --预展时间
           A.AUCTION_CATEGORY_ID, --类别id
           A.ID AUCTION_ID, --拍品id
           A.AUCTION_SPECIAL_TOPIC_ID, --专场id
           P.USER_ID, --最后一次出价人id
           P.MAX_PRICE, --最大价格
           P.PROXY_PRICE,
           --AC.BUY_CHARGE_PERCENT AS BUY_CHARGE_FEE, --竞拍方手续费
           A.BUY_CHARGE_FEE,   --竞拍方手续费
           A.START_AT, --开拍时间
           A.END_AT, --结标时间
           A.NAME, --拍品名称
           A.NAME_EN, --英文拍品名称
           A.NAME_GBK, --繁体拍品名称
           U.TRUE_NAME, --用户真实姓名
           D.TEL, --电话
           U.EMAIL, --email
           U.USER_LANG, --用户语言
           A.BUY_SCORE_PARAM, --竞拍积分参数
           A.BUY_SCORE_TIMES, --竞拍积分倍数
           A.CONTRACT_ID --合同id
      FROM AUCTIONS A
      JOIN AUCTION_MAX_PRICES P ON (A.ID = P.AUCTION_ID)
      JOIN AUCTION_CATEGORIES AC ON AC.ID = A.AUCTION_CATEGORY_ID
      JOIN USERS U ON (P.USER_ID = U.ID)
      JOIN USER_DETAILS D ON (P.USER_ID = D.USER_ID)
     WHERE A.STATUS = 2
       AND A.END_AT < NOW
       AND P.USER_ID = V_USER_ID;

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);

  IF P_USER_ID IS NULL OR P_USER_ID = 0 THEN
    RESULT_STATUS := 1;
    RAISE_APPLICATION_ERROR(-20000, 'p_user_id cannot be null');
  ELSE
    BEGIN
      RESULT_STATUS := 0;
      FOR RESULT_ROW IN C_WITH_USER(P_USER_ID) LOOP
        BEGIN
          /*已拍出*/
          UPDATE AUCTIONS
             SET STATUS            = 3,
                 SETTLEMENT_STATUS = 0,
                 BUY_CHARGE_FEE    = RESULT_ROW.BUY_CHARGE_FEE, --201305061148
                 END_PRICE         = RESULT_ROW.MAX_PRICE
           WHERE ID = RESULT_ROW.AUCTION_ID;

          /*INSERT INTO AUCTION_STATUS_CHANGE_LOG(ID,AUCTION_ID,STATUS,UPDATED_AT)
          VALUES (AUCTION_STATUS_CHANGE_LOG_SEQ.NEXTVAL,RESULT_ROW.AUCTION_ID,3,SYSDATE);*/

          SELECT USER_ORDERS_SEQ.NEXTVAL INTO V_USER_ORDERID FROM DUAL;

          /*拍品名称*/
          IF RESULT_ROW.USER_LANG = '1' THEN
            V_AUCTION_NAME := RESULT_ROW.NAME;
          ELSIF RESULT_ROW.USER_LANG = '2' THEN
            V_AUCTION_NAME := RESULT_ROW.NAME_EN;
          ELSE
            V_AUCTION_NAME := RESULT_ROW.NAME;
          END IF;

          --双年展结标后冻结.不让支付.  20131031 by lizheng
          IF RESULT_ROW.AUCTION_SPECIAL_TOPIC_ID = 10544 THEN
             V_IS_FREEZE :=1;
          END IF;
          --end

          /*生成交易单信息*/
          INSERT INTO USER_ORDERS
            (ID,
             USER_ID,
             USER_NAME,
             TEL,
             EMAIL,
             STATUS,
             CREATED_AT,
             LIMIT_PAY_DATE,
             AUCTION_ID,
             AUCTION_NAME,
             END_DATE,
             END_PRICE,
             SERVICE_CHARGE,
             ACTUAL_CHARGE,
             TOTAL_AMOUNT,
             AUCTION_NO,
             CONTRACT_ID,
             IS_FREEZE)
          VALUES
            (V_USER_ORDERID,
             RESULT_ROW.USER_ID,
             RESULT_ROW.TRUE_NAME,
             RESULT_ROW.TEL,
             RESULT_ROW.EMAIL,
             0,
             NOW,
             NOW + 7,
             RESULT_ROW.AUCTION_ID,
             V_AUCTION_NAME,
             RESULT_ROW.END_AT,
             RESULT_ROW.MAX_PRICE,
             RESULT_ROW.BUY_CHARGE_FEE,
             RESULT_ROW.BUY_CHARGE_FEE * RESULT_ROW.MAX_PRICE / 100,
             RESULT_ROW.BUY_CHARGE_FEE * RESULT_ROW.MAX_PRICE / 100 +
             RESULT_ROW.MAX_PRICE,
             RESULT_ROW.AUCTION_NO,
             RESULT_ROW.CONTRACT_ID,
             V_IS_FREEZE);

          /*如果用户使用代理价拍得拍品,生成交易单时只占用成交价 add by lizheng*/
          IF RESULT_ROW.PROXY_PRICE > RESULT_ROW.MAX_PRICE THEN
            /*取消代理价占用额度*/
            UPDATE USER_QUOTA_USAGES
               SET STATUS = '0', UPDATED_AT = SYSDATE
             WHERE USER_ID = P_USER_ID
               AND AUCTION_ID = RESULT_ROW.AUCTION_ID
               AND STATUS = '1';
            /*更新用户总额度*/
            UPDATE USERS
               SET QUOTA = QUOTA +
                           (RESULT_ROW.PROXY_PRICE - RESULT_ROW.MAX_PRICE)
             WHERE ID = P_USER_ID;

            /*额度流水
            INSERT INTO user_quotas
              (ID,
               user_id,
               amount,
               quota_type,
               operate_type,
               remarks,
               created_at,
               direction)
            VALUES
              (USER_QUOTAS_SEQ.NEXTVAL,
               p_user_id,
               RESULT_ROW.PROXY_PRICE - RESULT_ROW.MAX_PRICE,
               5,
               1,
               '释放竞拍代理价大于当前价差额额度',
               NOW,
               0);
                */
            /*生成实际占用额度*/
            INSERT INTO USER_QUOTA_USAGES
              (ID,
               USER_ID,
               AUCTION_ID,
               AUCTION_NO,
               AUCTION_NAME,
               USE_QUOTA,
               STATUS,
               USE_TYPE,
               CREATED_AT)
            VALUES
              (USER_QUOTA_USAGES_SEQ.NEXTVAL,
               p_user_id,
               RESULT_ROW.AUCTION_ID,
               RESULT_ROW.AUCTION_NO,
               RESULT_ROW.NAME,
               RESULT_ROW.MAX_PRICE,
               1,
               0,
               NOW);
          END IF;

          DBMS_OUTPUT.PUT_LINE('生成交易单:' || V_USER_ORDERID || ',用户:' ||
                               RESULT_ROW.USER_ID || ',拍品:' ||
                               RESULT_ROW.AUCTION_NO);
          /*用户积分*/
          /*积分倍数(拍品积分倍数,专场积分倍数,时间段积分倍数中最大的一个)*/
          SELECT MAX(SCOPE_TIMES)
            INTO V_SCORE_TIMES
            FROM (SELECT AU.BUY_SCORE_TIMES SCOPE_TIMES
                    FROM AUCTIONS AU
                   WHERE AU.ID = RESULT_ROW.AUCTION_ID
                  UNION ALL
                  SELECT SS.SCORE_TIMES
                    FROM SCORE_SETTINGS SS
                   WHERE SS.SCORE_TYPE = '0'
                     AND SS.RESOURCE_TYPE = 'AUCTION_SPECIAL_TOPICS'
                     AND SS.RESOURCE_ID =
                         RESULT_ROW.AUCTION_SPECIAL_TOPIC_ID
                     AND SS.USER_LEVEL_ID =
                         (SELECT US.BUY_LEVEL
                            FROM USERS US
                           WHERE ID = P_USER_ID)
                  UNION ALL
                  SELECT SST.SCORE_TIMES
                    FROM SCORE_SETTINGS SST
                   WHERE SST.SCORE_TYPE = '0'
                     AND SST.RESOURCE_TYPE = 'SCORE_TIME_SETTINGS'
                     AND SST.RESOURCE_ID IN
                         (SELECT STS.ID
                            FROM SCORE_TIME_SETTINGS STS
                           WHERE STS.START_AT <= RESULT_ROW.END_AT
                             AND STS.END_AT >= RESULT_ROW.END_AT)
                     AND SST.USER_LEVEL_ID =
                         (SELECT US.BUY_LEVEL
                            FROM USERS US
                           WHERE ID = P_USER_ID));

          /*结标价除以竞买积分参数,向下取整,剩以积分倍数*/
          V_SCORES := FLOOR((RESULT_ROW.MAX_PRICE /
                            RESULT_ROW.BUY_SCORE_PARAM) * V_SCORE_TIMES);

          IF V_SCORES > 0 THEN
            INSERT INTO SCORES US
              (ID,
               USER_ID,
               SCORE_TYPE,
               SCORE_STATUS,
               SCORE_SOURCE,
               SCORES,
               USEABLE_SCORES,
               SOURCE_ID,
               SOURCE_TYPE,
               CREATED_AT,
               SCORE_PARAM,
               SCORE_TIMES,
               USER_NAME)
            VALUES
              (SCORES_SEQ.NEXTVAL,
               RESULT_ROW.USER_ID,
               0,
               0,
               0,
               V_SCORES,
               0,
               V_USER_ORDERID,
               'USER_ORDERS',
               SYSDATE,
               RESULT_ROW.BUY_SCORE_PARAM,
               V_SCORE_TIMES,
               RESULT_ROW.TRUE_NAME);
          END IF;
          V_COUNT := V_COUNT + 1;
          /* solr日志记录 */
          INSERT INTO AUCTION_STATUS_CHANGE_LOGS
            (id, AUCTION_ID, OLD_STATUS, NEW_STATUS, UPDATED_AT)
          VALUES
            (auction_status_change_logs_seq.NEXTVAL,
             RESULT_ROW.AUCTION_ID,
             '2',
             '3',
             SYSDATE);
        EXCEPTION
          WHEN OTHERS THEN
            RESULT_STATUS := RESULT_STATUS + 1;
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('生成交易单错误,SQLCODE:' || TO_CHAR(SQLCODE) ||
                                 ',SQLERRM:' || SQLERRM);
        END;
      END LOOP;
      IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('用户:' || P_USER_ID || '无交易单需要生成.');
      END IF;
    END;
  END IF;
END P_USER_MAKE_ONE_USER_ORDERS;


 
/

-- ----------------------------
-- Procedure structure for P_USER_MAKE_ORDERS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_MAKE_ORDERS"(RESULT_STATUS OUT NUMBER) IS
	/*
  作者:李征
  日期:2011-11-28
  描述:生成交易单
  */
	NOW                 DATE := SYSDATE;
	V_SUB_RESULT_STATUS NUMBER := 0;
	V_COUNT             NUMBER := 0;
	/*所有需要生成的交易单*/
	CURSOR C_WITHOUT_USER IS
		SELECT A.ID AUCTION_ID, P.USER_ID, A.AUCTION_NO
			FROM AUCTIONS A
			JOIN AUCTION_MAX_PRICES P ON (A.ID = P.AUCTION_ID)
		 WHERE A.STATUS = 2
			 AND A.END_AT <= NOW;

BEGIN
	DBMS_OUTPUT.ENABLE(1000000);
	RESULT_STATUS := 0;
	BEGIN
		FOR RESULT_ROW IN C_WITHOUT_USER LOOP
			BEGIN
				IF RESULT_ROW.USER_ID IS NULL OR RESULT_ROW.USER_ID = 0 THEN
					/*无用户竞拍,流拍*/
					UPDATE AUCTIONS
						 SET STATUS = '6', SETTLEMENT_STATUS = '2', END_PRICE = 0
					 WHERE ID = RESULT_ROW.AUCTION_ID;
					/* solr日志记录 */
					INSERT INTO AUCTION_STATUS_CHANGE_LOGS
						(id, AUCTION_ID, OLD_STATUS, NEW_STATUS, UPDATED_AT)
					VALUES
						(AUCTION_STATUS_CHANGE_LOGS_seq.NEXTVAL,
						 RESULT_ROW.AUCTION_ID,
						 '2',
						 '6',
						 SYSDATE);
					P_SETTLEMENT_AUCTION_FEE(RESULT_ROW.AUCTION_ID, RESULT_STATUS);

					DBMS_OUTPUT.PUT_LINE('拍品:' || RESULT_ROW.AUCTION_NO || ' 流拍.');
				ELSE
					/*否则生成用户交易单*/
					P_USER_MAKE_ONE_USER_ORDERS(RESULT_ROW.USER_ID,
																			V_SUB_RESULT_STATUS);

					V_COUNT := V_COUNT + V_SUB_RESULT_STATUS;
				END IF;
			EXCEPTION
				WHEN OTHERS THEN
					ROLLBACK;
					DBMS_OUTPUT.PUT_LINE('SQLCODE:' || SQLCODE || ',SQLERRM' ||
															 SQLERRM);
					RETURN;
			END;
		END LOOP;
		IF V_COUNT > 0 THEN
			DBMS_OUTPUT.PUT_LINE('共有' || V_COUNT || '个交易单生成错误.');
		END IF;

		RESULT_STATUS := 0;
		COMMIT;
	END;
END P_USER_MAKE_ORDERS;


 
/

-- ----------------------------
-- Procedure structure for P_USER_MAKE_SCORES
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_MAKE_SCORES"
/*
      作者： Dwen
      日期： 2011-12-16
      描述： 用户积分管理  1: 预存积分转可用积分  2: 用户积分过期处理
      异常说明：
      S0001   : 更新预存积分为可用积分异常
      S0002   : 更新过期用户积分异常
      
      修改人：Dwen
      修改日期：2013-12-31
      修改描述：赠送积分不产生形象值
      
  */


 IS

	/* 预存积分用户 */
	CURSOR C_SCORES IS
		SELECT S.ID,
					 S.USER_ID,
					 S.SCORE_TYPE,
					 S.SCORE_STATUS,
					 S.SCORES,
					 S.USEABLE_SCORES,
					 S.EXPIRED_AT,
           S.SOURCE_ID,
           S.SOURCE_TYPE,
					 U.TRUE_NAME
			FROM SCORES S
			JOIN USERS U ON (U.ID = S.USER_ID)
		 WHERE U.ISLOCK != 1
			 AND S.SCORE_STATUS = 0
			 AND S.EFFECTED_AT <= SYSDATE;

	/* 积分过期用户 */
	CURSOR C_EXPIRE_SCORES IS
		SELECT S.ID,
					 S.USER_ID,
					 S.SCORE_TYPE,
					 S.SCORES,
					 S.USEABLE_SCORES,
					 U.TRUE_NAME
			FROM SCORES S
			JOIN USERS U ON (U.ID = S.USER_ID)
		 WHERE U.ISLOCK != 1
			 AND (TO_CHAR(S.EXPIRED_AT, 'yyyy-MM-dd') =
					 TO_CHAR(SYSDATE, 'yyyy-MM-dd'))
			 AND S.SCORE_STATUS = 1;

       V_BUY_SCORE_AMOUNT_TIMES NUMBER:=1;

  V_TOTAL_SCORE_AMOUNT NUMBER:=0;

BEGIN

  /*---------------预存积分用户--------------- */
  FOR RESULT_ROW IN C_SCORES LOOP
    /* 更新预存积分为可用积分 */
    UPDATE SCORES S
       SET S.SCORE_STATUS   = 1,
           S.USEABLE_SCORES = S.SCORES,
           S.EXPIRED_AT     = ADD_MONTHS(S.EFFECTED_AT, 2 * 12)
     WHERE S.ID = RESULT_ROW.ID;
     --获取形象值倍数
     SELECT NVL(MAX(S.SCORE_TIMES),1)
     INTO V_BUY_SCORE_AMOUNT_TIMES
     FROM SCORE_TIME_SETTINGS ST, SCORE_SETTINGS S
     WHERE ST.ID=S.RESOURCE_ID
     AND S.RESOURCE_TYPE='SCORE_TIME_RATIO_SETTINGS'
     AND S.SCORE_TYPE = '0'
     AND S.USER_LEVEL_ID = (SELECT U.BUY_LEVEL FROM USERS U WHERE U.ID=RESULT_ROW.USER_ID)
     AND EXISTS (
         SELECT 1 FROM USER_ORDERS O
         WHERE O.ID=RESULT_ROW.SOURCE_ID
         AND ST.START_AT <= O.END_DATE
         AND ST.END_AT >= O.END_DATE
     );
     --计算形象值
     IF RESULT_ROW.SCORE_TYPE = 0 AND RESULT_ROW.SOURCE_TYPE='USER_ORDERS' THEN
        SELECT FLOOR(O.END_PRICE/A.BUY_SCORE_PARAM*V_BUY_SCORE_AMOUNT_TIMES)
        INTO V_TOTAL_SCORE_AMOUNT
        FROM USER_ORDERS O,AUCTIONS A
        WHERE O.AUCTION_ID = A.ID
        AND O.ID=RESULT_ROW.SOURCE_ID;
     END IF;

    /* 买家积分（score_type 0:竟买积分  3：活动积分） */
    IF RESULT_ROW.SCORE_TYPE = 0 OR
       RESULT_ROW.SCORE_TYPE = 3 THEN
      UPDATE USERS U
         SET U.BUY_SCORE_AMOUNT  = U.BUY_SCORE_AMOUNT + V_TOTAL_SCORE_AMOUNT,
             U.BUY_SCORE_USEABLE = U.BUY_SCORE_USEABLE + RESULT_ROW.SCORES
       WHERE U.ID = RESULT_ROW.USER_ID;
      /* 用户积分流水 */
      INSERT INTO SCORE_INCOME_EXPENSES
        (ID,
         USER_ID,
         USER_NAME,
         SOURCE_ID,
         SOURCE_TYPE,
         SCORES,
         SCORE_TYPE,
         DIRECTION,
         OPERATION_TYPE,
         CREATED_AT,
         REMARKS,
         SCORE_PARAM,
         SCORE_TIMES)
      VALUES
        (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
         RESULT_ROW.USER_ID,
         RESULT_ROW.TRUE_NAME,
         RESULT_ROW.ID,
         'SCORES',
         RESULT_ROW.SCORES,
         '0',
         '0',
         '1',
         SYSDATE,
         'P_USER_MAKE_SCORES',
         NULL,
         NULL);
      /* 用户形象值流水 */
      INSERT INTO USER_LEVEL_DETAILS
        (ID,
         USER_ID,
         USER_NAME,
         USER_TYPE,
         SCORES,
         DIRECTION,
         OPERATE_TYPE,
         RESOURCE_ID,
         RESOURCE_TYPE,
         REMARKS,
         STATUS,
         CREATED_AT,
         EFFECTED_AT,
         EXPIRED_AT,
         USABLE_SCORES)
      VALUES
        (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
         RESULT_ROW.USER_ID,
         RESULT_ROW.TRUE_NAME,
         '0',
         V_TOTAL_SCORE_AMOUNT,
         '0',
         '1',
         RESULT_ROW.ID,
         'SCORES',
         'P_USER_MAKE_SCORES',
         '1',
         SYSDATE,
         SYSDATE,
         ADD_MONTHS(SYSDATE, 1 * 12),
         V_TOTAL_SCORE_AMOUNT);
    END IF;
    
    /* 买家积分（score_type  2：赠送积分 注：赠送积分不产生形象值） */
    IF RESULT_ROW.SCORE_TYPE = 2 THEN
      UPDATE USERS U
         SET U.BUY_SCORE_USEABLE = U.BUY_SCORE_USEABLE + RESULT_ROW.SCORES
       WHERE U.ID = RESULT_ROW.USER_ID;
      /* 用户积分流水 */
      INSERT INTO SCORE_INCOME_EXPENSES
        (ID,
         USER_ID,
         USER_NAME,
         SOURCE_ID,
         SOURCE_TYPE,
         SCORES,
         SCORE_TYPE,
         DIRECTION,
         OPERATION_TYPE,
         CREATED_AT,
         REMARKS,
         SCORE_PARAM,
         SCORE_TIMES)
      VALUES
        (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
         RESULT_ROW.USER_ID,
         RESULT_ROW.TRUE_NAME,
         RESULT_ROW.ID,
         'SCORES',
         RESULT_ROW.SCORES,
         '0',
         '0',
         '1',
         SYSDATE,
         'P_USER_MAKE_SCORES',
         NULL,
         NULL);
    END IF;
    
    /* 卖家积分 （score_type 1：委托积分） */
    IF RESULT_ROW.SCORE_TYPE = 1 THEN
      UPDATE USERS U
         SET U.SELL_SCORE_AMOUNT  = U.SELL_SCORE_AMOUNT + RESULT_ROW.SCORES,
             U.SELL_SCORE_USEABLE = U.SELL_SCORE_USEABLE + RESULT_ROW.SCORES
       WHERE U.ID = RESULT_ROW.USER_ID;
      /* 用户积分流水 */
      INSERT INTO SCORE_INCOME_EXPENSES
        (ID,
         USER_ID,
         USER_NAME,
         SOURCE_ID,
         SOURCE_TYPE,
         SCORES,
         SCORE_TYPE,
         DIRECTION,
         OPERATION_TYPE,
         CREATED_AT,
         REMARKS,
         SCORE_PARAM,
         SCORE_TIMES)
      VALUES
        (SCORE_INCOME_EXPENSES_SEQ.NEXTVAL,
         RESULT_ROW.USER_ID,
         RESULT_ROW.TRUE_NAME,
         RESULT_ROW.ID,
         'SCORES',
         RESULT_ROW.SCORES,
         '1',
         '0',
         '1',
         SYSDATE,
         'P_USER_MAKE_SCORES',
         NULL,
         NULL);
      /* 用户形象值流水 */
      INSERT INTO USER_LEVEL_DETAILS
        (ID,
         USER_ID,
         USER_NAME,
         USER_TYPE,
         SCORES,
         DIRECTION,
         OPERATE_TYPE,
         RESOURCE_ID,
         RESOURCE_TYPE,
         REMARKS,
         STATUS,
         CREATED_AT,
         EFFECTED_AT,
         EXPIRED_AT,
         USABLE_SCORES)
      VALUES
        (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
         RESULT_ROW.USER_ID,
         RESULT_ROW.TRUE_NAME,
         '1',
         RESULT_ROW.SCORES,
         '0',
         '1',
         RESULT_ROW.ID,
         'SCORES',
         'P_USER_MAKE_SCORES',
         '1',
         SYSDATE,
         SYSDATE,
         ADD_MONTHS(SYSDATE, 1 * 12),
         RESULT_ROW.SCORES);

    END IF;
    COMMIT;
  END LOOP;

  /*-----------------积分过期用户-----------------*/
  FOR RESULT_ROW IN C_EXPIRE_SCORES LOOP
    IF RESULT_ROW.USEABLE_SCORES > 0 THEN
      /* 买家积分（score_type 0:竟买积分 2：赠送积分 3：活动积分） */
      IF RESULT_ROW.SCORE_TYPE = 0 OR RESULT_ROW.SCORE_TYPE = 2 OR
         RESULT_ROW.SCORE_TYPE = 3 THEN
        UPDATE SCORES US
           SET US.USEABLE_SCORES = 0,
               US.SCORE_STATUS   = 9,
               US.UPDATED_AT     = SYSDATE
         WHERE ID = RESULT_ROW.ID;
        UPDATE USERS U
           SET BUY_SCORE_USEABLE = BUY_SCORE_USEABLE -
                                   RESULT_ROW.USEABLE_SCORES
         WHERE ID = RESULT_ROW.USER_ID;
      ELSIF RESULT_ROW.SCORE_TYPE = 1 THEN
        UPDATE SCORES US
           SET US.USEABLE_SCORES = 0,
               US.SCORE_STATUS   = 9,
               US.UPDATED_AT     = SYSDATE
         WHERE ID = RESULT_ROW.ID;
        UPDATE USERS U
           SET SELL_SCORE_USEABLE = SELL_SCORE_USEABLE -
                                    RESULT_ROW.USEABLE_SCORES
         WHERE ID = RESULT_ROW.USER_ID;
      END IF;

    ELSIF RESULT_ROW.USEABLE_SCORES = 0 THEN
      IF RESULT_ROW.SCORE_TYPE = 0 OR RESULT_ROW.SCORE_TYPE = 2 OR
         RESULT_ROW.SCORE_TYPE = 3 THEN
        UPDATE SCORES US
           SET US.USEABLE_SCORES = 0,
               US.SCORE_STATUS   = 9,
               US.UPDATED_AT     = SYSDATE
         WHERE ID = RESULT_ROW.ID;
      ELSIF RESULT_ROW.SCORE_TYPE = 1 THEN
        UPDATE SCORES US
           SET US.USEABLE_SCORES = 0,
               US.SCORE_STATUS   = 9,
               US.UPDATED_AT     = SYSDATE
         WHERE ID = RESULT_ROW.ID;
      END IF;
    END IF;
    COMMIT;
  END LOOP;
END P_USER_MAKE_SCORES;
 
/

-- ----------------------------
-- Procedure structure for P_USER_PAYMENT_REQUEST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_PAYMENT_REQUEST"
(
	P_USER_ID           IN NUMBER,
	P_ORDER_IDS         IN VARCHAR, --所有提交支付的订单,用逗号分隔
	P_AUCTION_ORDER_IDS IN VARCHAR, --竞拍订单
	P_EC_ORDER_IDS      IN VARCHAR, --商城订单
	P_AMOUNT            IN NUMBER, --总金额
	P_ORDERS_COUNT      IN NUMBER, --总订单数,包括商城和拍卖
	P_BALANCE           IN NUMBER, --使用第三方+余额支付时,余额部分
	P_PAY_ALL           IN NUMBER, --支付所有
	P_PAY_TYPE          IN VARCHAR2, --支付方式SDO/IPS
	P_REMARK            IN VARCHAR2, --备注
	P_PAYMENT_ID        OUT NUMBER, --支付单id
	CONSUME_SCORES      OUT NUMBER, --商城消耗积分
	RESULT_STATUS       OUT NUMBER
	/*
                                                            **1:用户不存在
                                                            **3:交易单不存在或已经处理
                                                            **2:余额不足
                                                            **4:金额参数与实际交易单金额不相等
                                                            **5:积分不足(商城)
                                                            */
) IS
	/**
     作者:李征
     日期:2012.05.26
     描述：生成IPS/SDO/余额支付请求记录
     
     修改人：dwen
     修改日期：2013-12-09
     修改内容：财付通支付，添加V_PAY_CHARGED_FEE参数
     
  */
	V_SQL               VARCHAR2(4000);
	V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
	V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
	V_EC_ORDERS_COUNT   NUMBER := 0; --商场订单数
	V_EC_TOTAL_AMUNT    NUMBER := 0; --商场订单金额
	V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
	V_NOW               DATE := SYSDATE;
	V_USER_ID           NUMBER := 0;
	V_USER_NAME         VARCHAR2(255);

	V_USER_ACCOUNT NUMBER;
	V_USER_SCORES  NUMBER;
	V_FINANCE_TYPE VARCHAR2(255);

	V_ORDER_TYPE VARCHAR2(255) := '0'; --订单类型0:拍卖 1:商城 2:商城+拍卖

	V_ORDERS_STRING VARCHAR2(10000) := '';

	V_EC_DEPOSITS     NUMBER := 0; --定金总额
	V_EC_DEPOSITS_NUM NUMBER := 0; --定金个数
	V_PAY_CHARGED_FEE NUMBER := 0; --网银手续费

	CURSOR C_ORDER_IDS(V_USER_ID NUMBER) IS
		SELECT ID
			FROM USER_ORDERS O
		 WHERE USER_ID = V_USER_ID
			 AND STATUS = '0'
			 AND IS_FREEZE = 0
		UNION ALL
		SELECT ID
			FROM EC_ORDER_GOODS EG
		 WHERE EG.USER_ID = V_USER_ID
			 AND EG.ORDER_STATUS = '0';
BEGIN
	BEGIN
		SELECT ID, BUY_SCORE_USEABLE, ACCOUNT, TRUE_NAME
			INTO V_USER_ID, V_USER_SCORES, V_USER_ACCOUNT, V_USER_NAME
			FROM USERS
		 WHERE ID = P_USER_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ROLLBACK;
			RESULT_STATUS := 1;
			RETURN;
	END;
	/*支付所有,不包括预约支付的*/
	IF P_PAY_ALL = 1 THEN
		SELECT COUNT(1), SUM(O.TOTAL_AMOUNT)
			INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT
			FROM USER_ORDERS O
		 WHERE USER_ID = V_USER_ID
			 AND NOT EXISTS
		 (SELECT L.ID
							FROM LEND_DETAILS LD
							JOIN LENDS L ON L.ID = LD.LEND_ID
							JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
						 WHERE LD.AUCTION_ID = O.AUCTION_ID
							 AND L.LEND_TYPE = '3'
							 AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
									 L.STATUS = '1'))
			 AND STATUS = '0'
			 AND IS_FREEZE = 0;
	
		SELECT COUNT(*),
					 SUM(ORDER_PRICE * GOODS_NUMBER),
					 SUM(CONSUME_SCORES * GOODS_NUMBER)
			INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES
			FROM EC_ORDER_GOODS
		 WHERE USER_ID = V_USER_ID
			 AND ORDER_STATUS = '0';
	
		IF V_EC_TOTAL_AMUNT IS NULL THEN
			V_EC_TOTAL_AMUNT := 0;
		END IF;
	
		IF V_EC_CONSUME_SCORES IS NULL THEN
			V_EC_CONSUME_SCORES := 0;
		END IF;
	
		IF V_EC_ORDERS_COUNT > 0 THEN
			V_ORDER_TYPE := '2'; --商城+拍卖订单一起支付
		ELSE
			V_ORDER_TYPE := '1'; --竞拍订单
		END IF;
	
		V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
		V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;
	
		--如果有欠款,一并支付了
		IF V_USER_ACCOUNT < 0 THEN
			V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + abs(V_USER_ACCOUNT);
		END IF;
	
		IF V_TOTAL_AMOUNT = 0 THEN
			RESULT_STATUS := 0;
			RETURN;
		END IF;
		/*拼接订单id*/
		FOR ID_ IN C_ORDER_IDS(V_USER_ID) LOOP
			V_ORDERS_STRING := V_ORDERS_STRING || ',' || ID_.ID;
		END LOOP;
	
		IF LENGTH(V_ORDERS_STRING) > 0 THEN
			V_ORDERS_STRING := SUBSTR(V_ORDERS_STRING, 2);
		END IF;
	
	ELSIF P_ORDER_IDS IS NOT NULL THEN
		BEGIN
			IF P_AUCTION_ORDER_IDS IS NOT NULL AND
				 LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
				V_ORDERS_STRING := P_AUCTION_ORDER_IDS;
			
				IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
					V_ORDERS_STRING := V_ORDERS_STRING || ',' || P_EC_ORDER_IDS;
				END IF;
			
			ELSE
				V_ORDERS_STRING := P_EC_ORDER_IDS;
			END IF;
		
			/*拍卖订单统计*/
			IF P_AUCTION_ORDER_IDS IS NOT NULL AND
				 LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
				V_SQL := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT) FROM USER_ORDERS O WHERE USER_ID=' ||
								 V_USER_ID || ' AND STATUS=0 AND IS_FREEZE = 0 AND ID IN (' ||
								 P_AUCTION_ORDER_IDS ||
								 ') AND NOT EXISTS (SELECT ID FROM LEND_DETAILS LD ' ||
								 'JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
								 ' AND VWMS.LENDSTATUS NOT IN (2, 9))';
				EXECUTE IMMEDIATE V_SQL
					INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;
			END IF;
			/*商城订单统计*/
			IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
				/*edit by zhangyi 增加商城投资理财部分的定金*/
				/*订金总额*/
			
				V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)' ||
								 'FROM ec_auction_book WHERE ORDER_ID IN' || '(' ||
								 P_EC_ORDER_IDS ||
								 ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID=' ||
								 V_USER_ID;
				EXECUTE IMMEDIATE V_SQL
					INTO V_EC_DEPOSITS, V_EC_DEPOSITS_NUM;
			
				V_SQL := 'SELECT COUNT(*),SUM(ORDER_PRICE*GOODS_NUMBER),SUM(CONSUME_SCORES*GOODS_NUMBER) FROM EC_ORDER_GOODS WHERE USER_ID=' ||
								 V_USER_ID || ' AND ORDER_STATUS=0 AND ID IN (' ||
								 P_EC_ORDER_IDS || ')';
				EXECUTE IMMEDIATE V_SQL
					INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES;
			END IF;
			/*数据订单数与参数数目不等*/
			IF V_ORDERS_COUNT + V_EC_ORDERS_COUNT != P_ORDERS_COUNT THEN
				ROLLBACK;
				RESULT_STATUS := 3;
				RETURN;
			ELSIF V_ORDERS_COUNT > 0 AND V_EC_ORDERS_COUNT > 0 THEN
				V_ORDER_TYPE := '2'; --商城+拍卖订单一起支付
			ELSIF V_ORDERS_COUNT = 0 AND V_EC_ORDERS_COUNT > 0 THEN
				V_ORDER_TYPE := '1'; --商城订单
			END IF;
		
			V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
			--如果有欠款,在网银支付时,一并支付
			IF V_USER_ACCOUNT < 0 THEN
				V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + abs(V_USER_ACCOUNT);
			END IF;
		
			/*IF V_TOTAL_AMOUNT != (P_AMOUNT + V_EC_DEPOSITS) \*加上订金*\
       THEN
        ROLLBACK;
        RESULT_STATUS := 4; --参数金额与实际统计金额不相等
        RETURN;
      END IF;*/
		
			/**积分不足*/
			IF V_USER_SCORES < V_EC_CONSUME_SCORES THEN
				ROLLBACK;
				RESULT_STATUS := 5;
				RETURN;
			END IF;
			CONSUME_SCORES := V_EC_CONSUME_SCORES;
		
		END;
	END IF;

	BEGIN
		IF P_BALANCE IS NOT NULL AND P_BALANCE > V_USER_ACCOUNT THEN
			ROLLBACK;
			RESULT_STATUS := 2;
			RETURN;
		END IF;
		/*使用余额+第三方支付时,减去余额部分*/
		IF P_BALANCE IS NOT NULL AND P_BALANCE > 0 THEN
			V_TOTAL_AMOUNT := V_TOTAL_AMOUNT - P_BALANCE;
		END IF;
	END;

	BEGIN
		IF P_PAY_TYPE = 'TENPAY' THEN
			--财付通收取手续费
			/* 余额+财付通支付情况*/
			V_PAY_CHARGED_FEE := P_AMOUNT - V_TOTAL_AMOUNT; --手续费=总金额-实际金额
		
			/*生成一条TENPAY支付请求记录*/
			P_USER_CREATE_IPS_PAYMENT(P_USER_ID,
																P_REMARK,
																V_ORDER_TYPE,
																V_ORDERS_STRING,
																V_TOTAL_AMOUNT,
																V_PAY_CHARGED_FEE,
																P_PAYMENT_ID,
																RESULT_STATUS);
		ELSE
			/*生成一条IPS/SDO支付请求记录*/
			P_USER_CREATE_IPS_PAYMENT(P_USER_ID,
																P_REMARK,
																V_ORDER_TYPE,
																V_ORDERS_STRING,
																V_TOTAL_AMOUNT,
																V_PAY_CHARGED_FEE,
																P_PAYMENT_ID,
																RESULT_STATUS);
		END IF;
	
		IF P_BALANCE IS NOT NULL AND P_BALANCE > 0 THEN
		
			IF P_PAY_TYPE = 'IPS' THEN
				V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
			ELSIF P_PAY_TYPE = 'SDO' THEN
				V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
			ELSIF P_PAY_TYPE = 'TENPAY' THEN
				V_FINANCE_TYPE := '33'; --余额+TENPAY支付时,余额部分
			END IF;
		
			/*
      生成余额流水,
      当第三方支付成功回调时,如果成功,删除该流水
      */
			INSERT INTO USER_ACCOUNTS
				(ID,
				 USER_ID,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 MONEY,
				 FINANCE_TYPE,
				 FINANCE_DATE,
				 REMARKS,
				 CREATED_AT,
				 ACCOUNT_OLD,
				 ACCOUNT_NEW,
				 DIRECTION,
				 STATUS)
			VALUES
				(USER_ACCOUNTS_SEQ.NEXTVAL,
				 V_USER_ID,
				 P_PAYMENT_ID,
				 'USER_IPS_PAYMENTS',
				 P_BALANCE,
				 V_FINANCE_TYPE, --余额+第三方支付时余额部分
				 V_NOW,
				 P_PAY_TYPE || ':' || V_TOTAL_AMOUNT || '+余额:' || P_BALANCE || '支付', --IPS/SDO
				 V_NOW,
				 V_USER_ACCOUNT,
				 V_USER_ACCOUNT,
				 '1', --支出
				 '2'); --余额占用,
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RESULT_STATUS := 6;
			RETURN;
	END;

	RESULT_STATUS := 0;
	RETURN;
END P_USER_PAYMENT_REQUEST;

 
/

-- ----------------------------
-- Procedure structure for P_USER_PAYMENT_REQUEST_bak
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_PAYMENT_REQUEST_bak"
(
  P_USER_ID           IN NUMBER,
  P_ORDER_IDS         IN VARCHAR, --所有提交支付的订单,用逗号分隔
  P_AUCTION_ORDER_IDS IN VARCHAR, --竞拍订单
  P_EC_ORDER_IDS      IN VARCHAR, --商城订单
  P_AMOUNT            IN NUMBER, --总金额
  P_ORDERS_COUNT      IN NUMBER, --总订单数,包括商城和拍卖
  P_BALANCE           IN NUMBER, --使用第三方+余额支付时,余额部分
  P_PAY_ALL           IN NUMBER, --支付所有
  P_PAY_TYPE          IN VARCHAR2, --支付方式SDO/IPS
  P_REMARK            IN VARCHAR2, --备注
  P_PAYMENT_ID        OUT NUMBER, --支付单id
  CONSUME_SCORES      OUT NUMBER, --商城消耗积分
  RESULT_STATUS       OUT NUMBER
  /*
                                                            **1:用户不存在
                                                            **3:交易单不存在或已经处理
                                                            **2:余额不足
                                                            **4:金额参数与实际交易单金额不相等
                                                            **5:积分不足(商城)
                                                            */
) IS
  /**
     作者:李征
     日期:2012.05.26
     描述：生成IPS/SDO/余额支付请求记录
     
     修改人：dwen
     修改日期：2013-12-09
     修改内容：财付通支付，添加V_PAY_CHARGED_FEE参数
     
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商场订单数
  V_EC_TOTAL_AMUNT    NUMBER := 0; --商场订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;
  V_USER_NAME         VARCHAR2(255);

  V_USER_ACCOUNT NUMBER;
  V_USER_SCORES  NUMBER;
  V_FINANCE_TYPE VARCHAR2(255);

  V_ORDER_TYPE VARCHAR2(255) := '0'; --订单类型0:拍卖 1:商城 2:商城+拍卖

  V_ORDERS_STRING VARCHAR2(10000) := '';

  V_EC_DEPOSITS     NUMBER := 0; --定金总额
  V_EC_DEPOSITS_NUM NUMBER := 0; --定金个数
  V_PAY_CHARGED_FEE NUMBER := 0; --网银手续费
  
  --王平定义变量start
    TYPE cur_type IS REF CURSOR;
    cur_user_order         cur_type;
    v_order_id             USER_ORDERS.ID%TYPE;
    v_order_auction_name   USER_ORDERS.auction_name%TYPE;
    v_order_auction_no     USER_ORDERS.auction_no%TYPE;
    v_order_category_id    auctions.auction_category_id%TYPE;
    v_order_ids            USER_ORDERS.ID%TYPE;
    ---end

  CURSOR C_ORDER_IDS(V_USER_ID NUMBER) IS
    SELECT ID
      FROM USER_ORDERS O
     WHERE USER_ID = V_USER_ID
       AND STATUS = '0'
       AND IS_FREEZE = 0
    UNION ALL
    SELECT ID
      FROM EC_ORDER_GOODS EG
     WHERE EG.USER_ID = V_USER_ID
       AND EG.ORDER_STATUS = '0';
BEGIN
  BEGIN
    SELECT ID, BUY_SCORE_USEABLE, ACCOUNT, TRUE_NAME
      INTO V_USER_ID, V_USER_SCORES, V_USER_ACCOUNT, V_USER_NAME
      FROM USERS
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;
  /*支付所有,不包括预约支付的*/
  IF P_PAY_ALL = 1 THEN
    SELECT COUNT(1), SUM(O.TOTAL_AMOUNT)
      INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT
      FROM USER_ORDERS O
     WHERE USER_ID = V_USER_ID
       AND NOT EXISTS
     (SELECT L.ID
              FROM LEND_DETAILS LD
              JOIN LENDS L ON L.ID = LD.LEND_ID
              JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID
             WHERE LD.AUCTION_ID = O.AUCTION_ID
               AND L.LEND_TYPE = '3'
               AND (VWMS.LENDSTATUS NOT IN ('2', '9', '10') OR
                   L.STATUS = '1'))
       AND STATUS = '0'
       AND IS_FREEZE = 0;
  
    SELECT COUNT(*),
           SUM(ORDER_PRICE * GOODS_NUMBER),
           SUM(CONSUME_SCORES * GOODS_NUMBER)
      INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES
      FROM EC_ORDER_GOODS
     WHERE USER_ID = V_USER_ID
       AND ORDER_STATUS = '0';
  
    IF V_EC_TOTAL_AMUNT IS NULL THEN
      V_EC_TOTAL_AMUNT := 0;
    END IF;
  
    IF V_EC_CONSUME_SCORES IS NULL THEN
      V_EC_CONSUME_SCORES := 0;
    END IF;
  
    IF V_EC_ORDERS_COUNT > 0 THEN
      V_ORDER_TYPE := '2'; --商城+拍卖订单一起支付
    ELSE
      V_ORDER_TYPE := '1'; --竞拍订单
    END IF;
  
    V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
    V_ORDERS_COUNT := V_ORDERS_COUNT + V_EC_ORDERS_COUNT;
  
    --如果有欠款,一并支付了
    IF V_USER_ACCOUNT < 0 THEN
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + abs(V_USER_ACCOUNT);
    END IF;
  
    IF V_TOTAL_AMOUNT = 0 THEN
      RESULT_STATUS := 0;
      RETURN;
    END IF;
    /*拼接订单id*/
    FOR ID_ IN C_ORDER_IDS(V_USER_ID) LOOP
      V_ORDERS_STRING := V_ORDERS_STRING || ',' || ID_.ID;
    END LOOP;
  
    IF LENGTH(V_ORDERS_STRING) > 0 THEN
      V_ORDERS_STRING := SUBSTR(V_ORDERS_STRING, 2);
    END IF;
       /* 添加收藏证书*/
     --执行收藏证书操作 P_Credential_ORDER_IDS
    IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
      --计算几个20元钱
      select count(1) into v_order_ids from USER_ORDERS where id in (P_Credential_ORDER_IDS);
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + v_order_ids*20;
      open cur_user_order for select us.id,us.auction_name,us.auction_no, a.auction_category_id from  
         USER_ORDERS US LEFT JOIN auctions A ON US.auction_id = A.ID  where us.id in (P_Credential_ORDER_IDS);
        loop 
        fetch cur_user_order into v_order_id,v_order_auction_name,v_order_auction_no,v_order_category_id;
        exit when cur_user_order%notfound;
        insert  into USER_COLLECTION_CERTIFICATE (id,ORDER_ID,CREATED_AT,NAME,TYPE,PRICE,COLLECTION_NO) 
           values(COLLECTION_CERTIFICATE_seq.nextval,
           v_order_id,
           'SH' || to_char(sysdate,'yyyy'),
           v_order_auction_name|| v_order_auction_no ||'_收藏证书',
           v_order_category_id,
           20,
           'SH2014');   
        end loop;
       close cur_user_order;
    END IF; 
  ELSIF P_ORDER_IDS IS NOT NULL THEN
    BEGIN
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND
         LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_ORDERS_STRING := P_AUCTION_ORDER_IDS;
      
        IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
          V_ORDERS_STRING := V_ORDERS_STRING || ',' || P_EC_ORDER_IDS;
        END IF;
      
      ELSE
        V_ORDERS_STRING := P_EC_ORDER_IDS;
      END IF;
    
      /*拍卖订单统计*/
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND
         LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT) FROM USER_ORDERS O WHERE USER_ID=' ||
                 V_USER_ID || ' AND STATUS=0 AND IS_FREEZE = 0 AND ID IN (' ||
                 P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT ID FROM LEND_DETAILS LD ' ||
                 'JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
                 ' AND VWMS.LENDSTATUS NOT IN (2, 9))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;
      END IF;
      /*商城订单统计*/
      IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
        /*edit by zhangyi 增加商城投资理财部分的定金*/
        /*订金总额*/
      
        V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)' ||
                 'FROM ec_auction_book WHERE ORDER_ID IN' || '(' ||
                 P_EC_ORDER_IDS ||
                 ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID=' ||
                 V_USER_ID;
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_DEPOSITS, V_EC_DEPOSITS_NUM;
      
        V_SQL := 'SELECT COUNT(*),SUM(ORDER_PRICE*GOODS_NUMBER),SUM(CONSUME_SCORES*GOODS_NUMBER) FROM EC_ORDER_GOODS WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND ID IN (' ||
                 P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES;
      END IF;
      /*数据订单数与参数数目不等*/
      IF V_ORDERS_COUNT + V_EC_ORDERS_COUNT != P_ORDERS_COUNT THEN
        ROLLBACK;
        RESULT_STATUS := 3;
        RETURN;
      ELSIF V_ORDERS_COUNT > 0 AND V_EC_ORDERS_COUNT > 0 THEN
        V_ORDER_TYPE := '2'; --商城+拍卖订单一起支付
      ELSIF V_ORDERS_COUNT = 0 AND V_EC_ORDERS_COUNT > 0 THEN
        V_ORDER_TYPE := '1'; --商城订单
      END IF;
    
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT;
      --如果有欠款,在网银支付时,一并支付
      IF V_USER_ACCOUNT < 0 THEN
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + abs(V_USER_ACCOUNT);
      END IF;
    
      /*IF V_TOTAL_AMOUNT != (P_AMOUNT + V_EC_DEPOSITS) \*加上订金*\
       THEN
        ROLLBACK;
        RESULT_STATUS := 4; --参数金额与实际统计金额不相等
        RETURN;
      END IF;*/
    
      /**积分不足*/
      IF V_USER_SCORES < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        RESULT_STATUS := 5;
        RETURN;
      END IF;
      CONSUME_SCORES := V_EC_CONSUME_SCORES;
      /* 添加收藏证书*/
     --执行收藏证书操作 P_Credential_ORDER_IDS
    IF P_Credential_ORDER_IDS IS NOT NULL AND LENGTH(P_Credential_ORDER_IDS) > 0 THEN
      --计算几个20元钱
      select count(1) into v_order_ids from USER_ORDERS where id in (P_Credential_ORDER_IDS);
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + v_order_ids*20;
      open cur_user_order for select us.id,us.auction_name,us.auction_no, a.auction_category_id from  
         USER_ORDERS US LEFT JOIN auctions A ON US.auction_id = A.ID  where us.id in (P_Credential_ORDER_IDS);
        loop 
        fetch cur_user_order into v_order_id,v_order_auction_name,v_order_auction_no,v_order_category_id;
        exit when cur_user_order%notfound;
        insert  into USER_COLLECTION_CERTIFICATE (id,ORDER_ID,CREATED_AT,NAME,TYPE,PRICE,COLLECTION_NO) 
           values(COLLECTION_CERTIFICATE_seq.nextval,
           v_order_id,
           'SH' || to_char(sysdate,'yyyy'),
           v_order_auction_name|| v_order_auction_no ||'_收藏证书',
           v_order_category_id,
           20,
           'SH2014');   
        end loop;
       close cur_user_order;
    END IF; 
    
    END;
  END IF;

  BEGIN
    IF P_BALANCE IS NOT NULL AND P_BALANCE > V_USER_ACCOUNT THEN
      ROLLBACK;
      RESULT_STATUS := 2;
      RETURN;
    END IF;
    /*使用余额+第三方支付时,减去余额部分*/
    IF P_BALANCE IS NOT NULL AND P_BALANCE > 0 THEN
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT - P_BALANCE;
    END IF;
  END;

  BEGIN
    IF P_PAY_TYPE = 'TENPAY' THEN
      --财付通收取手续费
      /* 余额+财付通支付情况*/
      V_PAY_CHARGED_FEE := P_AMOUNT - V_TOTAL_AMOUNT; --手续费=总金额-实际金额
    
      /*生成一条TENPAY支付请求记录*/
      P_USER_CREATE_IPS_PAYMENT(P_USER_ID,
                                P_REMARK,
                                V_ORDER_TYPE,
                                V_ORDERS_STRING,
                                V_TOTAL_AMOUNT,
                                V_PAY_CHARGED_FEE,
                                P_PAYMENT_ID,
                                RESULT_STATUS);
    ELSE
      /*生成一条IPS/SDO支付请求记录*/
      P_USER_CREATE_IPS_PAYMENT(P_USER_ID,
                                P_REMARK,
                                V_ORDER_TYPE,
                                V_ORDERS_STRING,
                                V_TOTAL_AMOUNT,
                                V_PAY_CHARGED_FEE,
                                P_PAYMENT_ID,
                                RESULT_STATUS);
    END IF;
  
    IF P_BALANCE IS NOT NULL AND P_BALANCE > 0 THEN
    
      IF P_PAY_TYPE = 'IPS' THEN
        V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
      ELSIF P_PAY_TYPE = 'SDO' THEN
        V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
      ELSIF P_PAY_TYPE = 'TENPAY' THEN
        V_FINANCE_TYPE := '33'; --余额+TENPAY支付时,余额部分
      END IF;
    
      /*
      生成余额流水,
      当第三方支付成功回调时,如果成功,删除该流水
      */
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         REMARKS,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         P_PAYMENT_ID,
         'USER_IPS_PAYMENTS',
         P_BALANCE,
         V_FINANCE_TYPE, --余额+第三方支付时余额部分
         V_NOW,
         P_PAY_TYPE || ':' || V_TOTAL_AMOUNT || '+余额:' || P_BALANCE || '支付', --IPS/SDO
         V_NOW,
         V_USER_ACCOUNT,
         V_USER_ACCOUNT,
         '1', --支出
         '2'); --余额占用,
      --生成收藏证书流水
            INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         REMARKS,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         P_PAYMENT_ID,
         'USER_IPS_PAYMENTS',
         P_BALANCE,
         '34', --34，收藏证书流水
         V_NOW,
         P_PAY_TYPE || ':' || V_TOTAL_AMOUNT || '+余额:' || P_BALANCE || '支付', --IPS/SDO
         V_NOW,
         V_USER_ACCOUNT,
         V_USER_ACCOUNT,
         '1', --支出
         '2'); --余额占用,
      --更新,交易单有收藏证书
            UPDATE USER_ORDERS us set HAS_COLLECTION_CERTIFICATE ='1' where us.id in (P_Credential_ORDER_IDS);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RESULT_STATUS := 6;
      RETURN;
  END;

  RESULT_STATUS := 0;
  RETURN;
END P_USER_PAYMENT_REQUEST_bak;

 
/

-- ----------------------------
-- Procedure structure for P_USER_PAYMENT_REQUEST2
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_PAYMENT_REQUEST2"(P_USER_ID           IN NUMBER,
                                                      P_ORDER_IDS         IN VARCHAR, --所有提交支付的订单,用逗号分隔
                                                      P_AUCTION_ORDER_IDS IN VARCHAR, --竞拍订单
                                                      P_EC_ORDER_IDS      IN VARCHAR, --商城订单
                                                      P_AMOUNT            IN NUMBER, --总金额
                                                      P_ORDERS_COUNT      IN NUMBER, --总订单数,包括商城和拍卖
                                                      P_BALANCE           IN NUMBER, --使用第三方+余额支付时,余额部分
                                                      P_CERTIFICATE_IDS   IN VARCHAR, --需要收藏证书的交易单
                                                      P_PAY_TYPE          IN VARCHAR2, --支付方式SDO/IPS/ALIPAY
                                                      P_REMARK            IN VARCHAR2, --备注
                                                      P_PAYMENT_ID        OUT NUMBER, --支付单id
                                                      CONSUME_SCORES      OUT NUMBER, --商城消耗积分
                                                      RESULT_STATUS       OUT NUMBER
                                                      /*
                                                                                                                                                                        **1:用户不存在
                                                                                                                                                                        **3:交易单不存在或已经处理
                                                                                                                                                                        **2:余额不足
                                                                                                                                                                        **4:金额参数与实际交易单金额不相等
                                                                                                                                                                        **5:积分不足(商城)
                                                                                                                                                                        */) IS
  /**
     作者:李征
     日期:2012.05.26
     描述：生成IPS/SDO/余额支付请求记录
     
     修改人：dwen
     修改日期：2013-12-09
     修改内容：财付通支付，添加V_PAY_CHARGED_FEE参数
      
     修改人：guqj
     修改日期：2015-01-16
     修改内容：支付宝支付ALIPAY，业务流程与IPS/SDO/TENPAY相同
     
  */
  V_SQL               VARCHAR2(4000);
  V_ORDERS_COUNT      NUMBER := 0; --竞拍订单数
  V_TOTAL_AMOUNT      NUMBER := 0; --竞拍订单金额
  V_EC_ORDERS_COUNT   NUMBER := 0; --商场订单数
  V_EC_TOTAL_AMUNT    NUMBER := 0; --商场订单金额
  V_EC_CONSUME_SCORES NUMBER := 0; --商城消耗积分
  V_NOW               DATE := SYSDATE;
  V_USER_ID           NUMBER := 0;
  V_USER_NAME         VARCHAR2(255);

  V_USER_ACCOUNT NUMBER;
  V_USER_SCORES  NUMBER;
  V_FINANCE_TYPE VARCHAR2(255);

  V_ORDER_TYPE VARCHAR2(255) := '0'; --订单类型0:拍卖 1:商城 2:商城+拍卖

  V_ORDERS_STRING VARCHAR2(10000) := '';

  V_EC_DEPOSITS     NUMBER := 0; --定金总额
  V_EC_DEPOSITS_NUM NUMBER := 0; --定金个数
  V_PAY_CHARGED_FEE NUMBER := 0; --网银手续费

  V_COLLECTION_CERTIFICATE NUMBER := 0;

BEGIN
  BEGIN
    SELECT ID, BUY_SCORE_USEABLE, ACCOUNT, TRUE_NAME
      INTO V_USER_ID, V_USER_SCORES, V_USER_ACCOUNT, V_USER_NAME
      FROM USERS
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ROLLBACK;
      RESULT_STATUS := 1;
      RETURN;
  END;

  IF P_ORDER_IDS IS NOT NULL THEN
    BEGIN
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_ORDERS_STRING := P_AUCTION_ORDER_IDS;
      
        IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
          V_ORDERS_STRING := V_ORDERS_STRING || ',' || P_EC_ORDER_IDS;
        END IF;
      
      ELSE
        V_ORDERS_STRING := P_EC_ORDER_IDS;
      END IF;
    
      /*拍卖订单统计*/
      IF P_AUCTION_ORDER_IDS IS NOT NULL AND LENGTH(P_AUCTION_ORDER_IDS) > 0 THEN
        V_SQL := 'SELECT COUNT(*),SUM(TOTAL_AMOUNT) FROM USER_ORDERS O WHERE USER_ID=' || V_USER_ID ||
                 ' AND STATUS=0 AND IS_FREEZE = 0 AND ID IN (' || P_AUCTION_ORDER_IDS ||
                 ') AND NOT EXISTS (SELECT ID FROM LEND_DETAILS LD ' ||
                 'JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
                 ' AND VWMS.LENDSTATUS NOT IN (2, 9))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_ORDERS_COUNT, V_TOTAL_AMOUNT;
      END IF;
      /*收藏证书*/
      IF P_CERTIFICATE_IDS IS NOT NULL AND LENGTH(P_CERTIFICATE_IDS) > 1 THEN
        V_SQL := 'SELECT COUNT(*) FROM USER_ORDERS O WHERE USER_ID=' || V_USER_ID ||
                 ' AND STATUS=0 AND IS_FREEZE = 0 AND ID IN (' || P_CERTIFICATE_IDS ||
                 ') AND NOT EXISTS (SELECT ID FROM LEND_DETAILS LD ' ||
                 'JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
                 ' AND VWMS.LENDSTATUS NOT IN (2, 9))';
        EXECUTE IMMEDIATE V_SQL
          INTO V_COLLECTION_CERTIFICATE;
      
        IF V_COLLECTION_CERTIFICATE > 0 THEN
          V_SQL := 'UPDATE USER_ORDERS O SET HAS_COLLECTION_CERTIFICATE=1 WHERE USER_ID=' || V_USER_ID ||
                   ' AND STATUS=0 AND IS_FREEZE = 0 AND ID IN (' || P_CERTIFICATE_IDS ||
                   ') AND NOT EXISTS (SELECT ID FROM LEND_DETAILS LD ' ||
                   'JOIN V_WMS_LEND_STATUS_INFO VWMS ON VWMS.LENDID = LD.LEND_ID WHERE LD.AUCTION_ID = O.AUCTION_ID' ||
                   ' AND VWMS.LENDSTATUS NOT IN (2, 9))';
          EXECUTE IMMEDIATE V_SQL;
        END IF;
      END IF;
    
      /*商城订单统计*/
      IF P_EC_ORDER_IDS IS NOT NULL AND LENGTH(P_EC_ORDER_IDS) > 0 THEN
        /*edit by zhangyi 增加商城投资理财部分的定金*/
        /*订金总额*/
      
        V_SQL := 'SELECT nvl(SUM(DEPOSIT), 0),nvl(COUNT(DEPOSIT), 0)' || 'FROM ec_auction_book WHERE ORDER_ID IN' || '(' ||
                 P_EC_ORDER_IDS || ') AND STATUS IN(4,5) AND DEPOSIT_STATUS=1 AND USER_ID=' || V_USER_ID;
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_DEPOSITS, V_EC_DEPOSITS_NUM;
      
        V_SQL := 'SELECT COUNT(*),SUM(ORDER_PRICE*GOODS_NUMBER),SUM(CONSUME_SCORES*GOODS_NUMBER) FROM EC_ORDER_GOODS WHERE USER_ID=' ||
                 V_USER_ID || ' AND ORDER_STATUS=0 AND ID IN (' || P_EC_ORDER_IDS || ')';
        EXECUTE IMMEDIATE V_SQL
          INTO V_EC_ORDERS_COUNT, V_EC_TOTAL_AMUNT, V_EC_CONSUME_SCORES;
      END IF;
      /*数据订单数与参数数目不等*/
      IF V_ORDERS_COUNT + V_EC_ORDERS_COUNT != P_ORDERS_COUNT THEN
        ROLLBACK;
        RESULT_STATUS := 3;
        RETURN;
      ELSIF V_ORDERS_COUNT > 0 AND V_EC_ORDERS_COUNT > 0 THEN
        V_ORDER_TYPE := '2'; --商城+拍卖订单一起支付
      ELSIF V_ORDERS_COUNT = 0 AND V_EC_ORDERS_COUNT > 0 THEN
        V_ORDER_TYPE := '1'; --商城订单
      END IF;
    
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + V_EC_TOTAL_AMUNT + V_COLLECTION_CERTIFICATE * 20;
      --如果有欠款,在网银支付时,一并支付
      IF V_USER_ACCOUNT < 0 THEN
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + ABS(V_USER_ACCOUNT);
      END IF;
    
      /*IF V_TOTAL_AMOUNT != (P_AMOUNT + V_EC_DEPOSITS) \*加上订金*\
       THEN
        ROLLBACK;
        RESULT_STATUS := 4; --参数金额与实际统计金额不相等
        RETURN;
      END IF;*/
    
      /**积分不足*/
      IF V_USER_SCORES < V_EC_CONSUME_SCORES THEN
        ROLLBACK;
        RESULT_STATUS := 5;
        RETURN;
      END IF;
      CONSUME_SCORES := V_EC_CONSUME_SCORES;
    
    END;
  END IF;

  BEGIN
    IF P_BALANCE IS NOT NULL AND P_BALANCE > V_USER_ACCOUNT THEN
      ROLLBACK;
      RESULT_STATUS := 2;
      RETURN;
    END IF;
    /*使用余额+第三方支付时,减去余额部分*/
    IF P_BALANCE IS NOT NULL AND P_BALANCE > 0 THEN
      V_TOTAL_AMOUNT := V_TOTAL_AMOUNT - P_BALANCE;
    END IF;
  END;

  BEGIN
    IF P_PAY_TYPE = 'TENPAY' OR  P_PAY_TYPE = 'ALIPAY' OR  P_PAY_TYPE = 'WEIXINPAY' THEN
      --财付通/支付宝收取手续费
      /* 余额+财付通支付情况*/
      V_PAY_CHARGED_FEE := P_AMOUNT - V_TOTAL_AMOUNT; --手续费=总金额-实际金额
    
      /*生成一条TENPAY支付请求记录*/
      P_USER_CREATE_IPS_PAYMENT(P_USER_ID,
                                P_REMARK,
                                V_ORDER_TYPE,
                                V_ORDERS_STRING,
                                V_TOTAL_AMOUNT,
                                V_PAY_CHARGED_FEE,
                                P_PAYMENT_ID,
                                RESULT_STATUS);
    ELSE
      /*生成一条IPS/SDO支付请求记录*/
      P_USER_CREATE_IPS_PAYMENT(P_USER_ID,
                                P_REMARK,
                                V_ORDER_TYPE,
                                V_ORDERS_STRING,
                                V_TOTAL_AMOUNT,
                                V_PAY_CHARGED_FEE,
                                P_PAYMENT_ID,
                                RESULT_STATUS);
    END IF;
  
    IF P_BALANCE IS NOT NULL AND P_BALANCE > 0 THEN
    
      IF P_PAY_TYPE = 'IPS' THEN
        V_FINANCE_TYPE := '24'; --余额+IPS支付时,余额部分
      ELSIF P_PAY_TYPE = 'SDO' THEN
        V_FINANCE_TYPE := '25'; --余额+SDO支付时,余额部分
      ELSIF P_PAY_TYPE = 'TENPAY' THEN
        V_FINANCE_TYPE := '33'; --余额+TENPAY支付时,余额部分
      ELSIF P_PAY_TYPE = 'ALIPAY' THEN
        V_FINANCE_TYPE := '43'; --余额+ALIPAY支付时,余额部分
			ELSIF P_PAY_TYPE = 'WEIXINPAY' THEN
        V_FINANCE_TYPE := '53'; --余额+WEIXINPAY支付时,余额部分
      END IF;
    
      /*
      生成余额流水,
      当第三方支付成功回调时,如果成功,删除该流水
      */
      INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         SOURCE_ID,
         SOURCE_TYPE,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         REMARKS,
         CREATED_AT,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         STATUS)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         V_USER_ID,
         P_PAYMENT_ID,
         'USER_IPS_PAYMENTS',
         P_BALANCE,
         V_FINANCE_TYPE, --余额+第三方支付时余额部分
         V_NOW,
         P_PAY_TYPE || ':' || V_TOTAL_AMOUNT || '+余额:' || P_BALANCE || '支付', --IPS/SDO
         V_NOW,
         V_USER_ACCOUNT,
         V_USER_ACCOUNT,
         '1', --支出
         '2'); --余额占用,
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RESULT_STATUS := 6;
      RETURN;
  END;

  RESULT_STATUS := 0;
  RETURN;
END P_USER_PAYMENT_REQUEST2;

 
/

-- ----------------------------
-- Procedure structure for P_USER_PHONES_SEND_COUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_PHONES_SEND_COUNT" (
                                                          P_USER_ID   IN NUMBER,
                                                          P_PHONE_NO  IN VARCHAR
                                                          ) IS



V_COUNT NUMBER := 0;
BEGIN
   BEGIN
   SELECT COUNT(1)
      INTO V_COUNT
      FROM USER_PHONES UP
     WHERE UP.USER_ID = P_USER_ID
       AND UP.PHONE_NO = P_PHONE_NO
       AND trunc(UP.UPDATED_AT,'dd')=trunc(SYSDATE,'dd');
   END;
   IF V_COUNT>0 THEN
     BEGIN

       UPDATE USER_PHONES UP SET
       UP.SEND_COUNT= nvl(UP.SEND_COUNT,0)+1
       WHERE UP.USER_ID = P_USER_ID AND UP.PHONE_NO = P_PHONE_NO;
     END;
   ELSE
     BEGIN
       UPDATE USER_PHONES UP SET
       UP.SEND_COUNT=1
       WHERE UP.USER_ID = P_USER_ID AND UP.PHONE_NO = P_PHONE_NO;
     END;
   END IF;

END;


 
/

-- ----------------------------
-- Procedure structure for P_USER_QUICKLY_REGISTER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_QUICKLY_REGISTER"
(
	P_NICKNAME    VARCHAR,
	P_PASSWORD    VARCHAR,
	P_MOBILE      VARCHAR,
	P_EMAIL       VARCHAR,
	P_IP          VARCHAR,
	P_CLIENT_ID   VARCHAR,
	RESULT_STATUS OUT NUMBER,
	P_USER_ID     OUT NUMBER
) IS
	V_USERIDTMP NUMBER;
	V_COUNT     NUMBER := 0;
BEGIN
	/*
    作者:李征
    时间:2011-12-20
    描述:客户端快速注册
  */
	SELECT COUNT(*)
		INTO V_COUNT
		FROM USERS
	 WHERE lower(NICKNAME) = lower(P_NICKNAME);
	IF V_COUNT > 0 THEN
		RESULT_STATUS := 1;
		RETURN;
	END IF;

	SELECT COUNT(*)
		INTO V_COUNT
		FROM USER_VIRTUAL_ACCOUNTS
	 WHERE lower(NAME) = lower(P_NICKNAME);
	IF V_COUNT > 0 THEN
		RESULT_STATUS := 1;
		RETURN;
	END IF;

	SELECT COUNT(*) INTO V_COUNT FROM USERS WHERE EMAIL = P_EMAIL;
	IF V_COUNT > 0 THEN
		RESULT_STATUS := 2;
		RETURN;
	END IF;

	/*SELECT COUNT(*) INTO v_count FROM USERS WHERE MOBILE_TEL = P_MOBILE;
  IF v_count > 0 THEN
    result_status := 3;
    RETURN;
  END IF;*/

	BEGIN
		SELECT USERS_SEQ.NEXTVAL INTO V_USERIDTMP FROM DUAL;

		INSERT INTO USERS
			(ID, PASSWORD, NICKNAME, REGIP, REGISTER_DATE, BUY_LEVEL, SELL_LEVEL)
		VALUES
			(V_USERIDTMP, P_PASSWORD, P_NICKNAME, P_IP, SYSDATE, 0, 10);

		INSERT INTO USER_DETAILS
			(USER_ID,
			 MOBILE_TEL,
			 APP_ID,
			 EMAIL,
			 COUNTRY_ID,
			 PROVINCE_ID,
			 CITY_ID,
			 CREATED_AT)
		VALUES
			(V_USERIDTMP, P_MOBILE, P_CLIENT_ID, P_EMAIL, 40, 69, 3, SYSDATE);

		/*将数据添加到用户昵称表中*/
		INSERT INTO USER_VIRTUAL_ACCOUNTS
			(ID, NAME, USER_ID, IS_DEFAULT, CREATED_AT, STATUS)
		VALUES
			(USER_VIRTUAL_ACCOUNTS_SEQ.NEXTVAL,
			 P_NICKNAME,
			 V_USERIDTMP,
			 1,
			 SYSDATE,
			 1);
	EXCEPTION
		WHEN OTHERS THEN
			RESULT_STATUS := -1;
			ROLLBACK;
			RETURN;
	END;
	result_status := 0;
	P_USER_ID     := V_USERIDTMP;
END P_USER_QUICKLY_REGISTER;


 
/

-- ----------------------------
-- Procedure structure for P_USER_REFUND_4_ENGLISH
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_REFUND_4_ENGLISH"
(
	P_USER_ID        IN NUMBER,
	P_AMOUNT         IN NUMBER,
	P_REFUND_TYPE    IN VARCHAR,
	P_USER_BANK_ID   IN NUMBER,
	P_PAYPAL_ACCOUNT IN VARCHAR,
	P_CART_TYPE      IN VARCHAR,
	P_CART_ID        IN VARCHAR,
	P_START_AT       IN DATE,
	RESULT_STATUS    OUT NUMBER
	/*
                    创建人:李征
                    日期:2012.05.21
                    描述:英文站用户申请退款
                    RESULT_STATUS
                    0:成功
                    1:用户不存在
                    2:未身份认证
                    3:余额不足
                    4:帐户冻结,不能申请退款
                    5:退款金额不合法
                    2012-07-18 取消身份认证
                    @修改版本 v1.0
                      修改人: Dwen
                      修改日期:2013-04-01
                      修改内容:添加上门自取
                */
) IS
	V_USER_ID           NUMBER;
	V_USER_ACCOUNT      NUMBER;
	V_USERNAME          VARCHAR(255);
	V_USER_STATUS       VARCHAR2(255);
	V_USER_ID_AUTH      VARCHAR2(255);
	V_REFUND_REQUEST_ID NUMBER;
	V_REFUND_ID         NUMBER;
BEGIN
	BEGIN
		IF P_AMOUNT IS NULL OR P_AMOUNT <= 0 THEN
			RESULT_STATUS := 5;
			RETURN;
		END IF;

		SELECT U.ID, U.ACCOUNT, U.STATUS, U.TRUE_NAME, D.ID_AUTH_STATUS
			INTO V_USER_ID,
					 V_USER_ACCOUNT,
					 V_USER_STATUS,
					 V_USERNAME,
					 V_USER_ID_AUTH
			FROM USERS U
			JOIN USER_DETAILS D ON D.USER_ID = U.ID
		 WHERE ID = P_USER_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 1;
			RETURN;
	END;

	--余额不足
	IF V_USER_ACCOUNT < P_AMOUNT THEN
		ROLLBACK;
		RESULT_STATUS := 3;
		RETURN;
	END IF;
	--帐户冻结,不能申请退款
	IF V_USER_STATUS != 0 AND V_USER_STATUS != 3 THEN
		ROLLBACK;
		RESULT_STATUS := 4;
		RETURN;
	END IF;

	BEGIN
		SELECT USER_REFUND_REQUESTS_SEQ.NEXTVAL INTO V_REFUND_ID FROM DUAL;
		IF P_REFUND_TYPE = 3 THEN
			--paypal
			INSERT INTO user_refund_requests
				(ID,
				 AMOUNT,
				 USER_ID,
				 USER_NAME,
				 REFUND_TYPE,
				 BANK_ACCOUNT,
				 status,
				 created_at)
			VALUES
				(USER_REFUND_REQUESTS_SEQ.NEXTVAL,
				 P_AMOUNT,
				 P_USER_ID,
				 V_USERNAME,
				 '3',
				 P_PAYPAL_ACCOUNT,
				 0,
				 SYSDATE);
		ELSIF P_REFUND_TYPE = 1 THEN
			--银行划帐 HSBC
			INSERT INTO USER_REFUND_REQUESTS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 REFUND_TYPE,
				 CURRENCY,
				 USER_BANK_ID,
				 BANK_NAME,
				 BRANCH_NAME,
				 BANK_ACCOUNT,
				 ID_CARD,
				 ID_CARD_NAME,
				 STATUS,
				 CREATED_AT)
				SELECT V_REFUND_ID,
							 P_USER_ID,
							 V_USERNAME,
							 P_AMOUNT,
							 P_REFUND_TYPE,
							 'RMB',
							 P_USER_BANK_ID,
							 UB.BANK_NAME,
							 UB.BRANCH_NAME,
							 UB.BANK_NO,
							 UB.ID_CARD,
							 UB.NAME,
							 0,
							 SYSDATE
					FROM USER_BANKS UB
				 WHERE UB.ID = P_USER_BANK_ID
					 AND UB.USER_ID = P_USER_ID
					 AND STATUS = '1';
		ELSIF P_REFUND_TYPE = 2 THEN
			SELECT USER_REFUND_REQUESTS_SEQ.NEXTVAL
				INTO V_REFUND_REQUEST_ID
				FROM DUAL;
			--上门自取
			INSERT INTO user_refund_requests
				(ID, AMOUNT, USER_ID, USER_NAME, REFUND_TYPE, status, created_at)
			VALUES
				(V_REFUND_REQUEST_ID,
				 P_AMOUNT,
				 P_USER_ID,
				 V_USERNAME,
				 '2',
				 0,
				 SYSDATE);
			INSERT INTO BOOKINGS
				(ID,
				 SOURCE_ID,
				 SOURCE_TYPE,
				 USER_NAME,
				 CARD_TYPE,
				 CARD_ID,
				 END_AT,
				 START_AT,
				 BOOKINT_AT,
				 STATUS,
				 CREATED_AT)
			VALUES
				(BOOKINGS_SEQ.NEXTVAL,
				 V_REFUND_REQUEST_ID,
				 'USER_REFUND_REQUESTS',
				 V_USERNAME,
				 P_CART_TYPE,
				 P_CART_ID,
				 P_START_AT,
				 P_START_AT,
				 P_START_AT,
				 '1',
				 SYSDATE);
		END IF;
		--更新用户余额,占用退款余额
		UPDATE USERS
			 SET ACCOUNT        = ACCOUNT - P_AMOUNT,
					 freeze_account = freeze_account + P_AMOUNT
		 WHERE ID = P_USER_ID;

		RESULT_STATUS := 0;
		RETURN;
	END;
END P_USER_REFUND_4_ENGLISH;


 
/

-- ----------------------------
-- Procedure structure for P_USER_REFUND_BOOKING_REQUEST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_REFUND_BOOKING_REQUEST"
(
	P_USER_ID       IN NUMBER,
	P_USER_NAME     IN VARCHAR,
	P_CARD_TYPE     IN VARCHAR,
	P_CARD_ID       IN VARCHAR,
  P_REMARK        IN VARCHAR,
  P_REFUND_REMARK IN VARCHAR,
  P_START_AT      IN DATE,
  P_END_AT        IN DATE,
  P_AMOUNT        IN NUMBER,
  P_REFUND_TYPE   IN VARCHAR,
  P_CURRENCY      IN VARCHAR,
  RESULT_STATUS   OUT NUMBER
) IS
  /*
    创建人:李征
    日期:2012.05.05
    描述:退款上门自取

    2012-07-18 取消身份认证
  */
  V_REFUND_REQUEST_ID NUMBER;
  V_USER_ID           NUMBER;
  V_USER_ACCOUNT      NUMBER;
  V_USER_STATUS       VARCHAR2(255);
  V_USER_ID_AUTH      VARCHAR2(255);
  V_USER_NAME         VARCHAR2(255);
BEGIN
  BEGIN
    SELECT U.ID,
           U.ACCOUNT,
           U.STATUS,
           D.ID_AUTH_STATUS,
           DECODE(U.TRUE_NAME, NULL, U.NICKNAME, U.TRUE_NAME)
      INTO V_USER_ID,
           V_USER_ACCOUNT,
           V_USER_STATUS,
           V_USER_ID_AUTH,
           V_USER_NAME
      FROM USERS U
      JOIN USER_DETAILS D ON D.USER_ID = U.ID
     WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULT_STATUS := 1;
      RETURN;
  END;
  --未身份认证
  /*IF V_USER_ID_AUTH != 2 THEN
    ROLLBACK;
    RESULT_STATUS := 2;
    RETURN;
  END IF;*/

  --余额不足
  IF V_USER_ACCOUNT < P_AMOUNT THEN
    ROLLBACK;
    RESULT_STATUS := 3;
    RETURN;
  END IF;
  --帐户冻结,不能申请退款
  IF V_USER_STATUS != 0 AND V_USER_STATUS != 3 THEN
    ROLLBACK;
    RESULT_STATUS := 4;
    RETURN;
  END IF;

  SELECT USER_REFUND_REQUESTS_SEQ.NEXTVAL
    INTO V_REFUND_REQUEST_ID
    FROM DUAL;
  INSERT INTO USER_REFUND_REQUESTS
    (ID,
     USER_ID,
     USER_NAME,
     ADMIN_ID,
     ADMIN_NAME,
     AMOUNT,
     REFUND_TYPE,
     CURRENCY,
     STATUS,
     REMARKS,
     CREATED_AT)
  VALUES
    (V_REFUND_REQUEST_ID,
     P_USER_ID,
     P_USER_NAME,
     P_USER_ID,
     V_USER_NAME,
     P_AMOUNT,
     P_REFUND_TYPE,
     P_CURRENCY,
     '0',
     P_REFUND_REMARK,
     SYSDATE);

  INSERT INTO BOOKINGS
    (ID,
     SOURCE_ID,
     SOURCE_TYPE,
     USER_NAME,
     CARD_TYPE,
     CARD_ID,
     END_AT,
     START_AT,
     BOOKINT_AT,
     REMARKS,
     STATUS,
     CREATED_AT)
  VALUES
    (BOOKINGS_SEQ.NEXTVAL,
     V_REFUND_REQUEST_ID,
     'USER_REFUND_REQUESTS',
     P_USER_NAME,
     P_CARD_TYPE,
     P_CARD_ID,
     P_END_AT,
     P_START_AT,
     P_START_AT,
     P_REMARK,
     '1',
     SYSDATE);

  --生成余额流水

  /*INSERT INTO USER_ACCOUNTS
    (ID,
     USER_ID,
     MONEY,
     FINANCE_TYPE,
     FINANCE_DATE,
     FINANCE_ID,
     FINANCE_NAME,
     SOURCE_ID,
     SOURCE_TYPE,
     ACCOUNT_OLD,
     ACCOUNT_NEW,
     DIRECTION,
     CREATED_AT)
  VALUES
    (USER_ACCOUNTS_SEQ.NEXTVAL,
     P_USER_ID,
     P_AMOUNT,
     3, --退款转出
     SYSDATE,
     P_USER_ID,
     P_USER_NAME,
     V_REFUND_REQUEST_ID,
     'USER_REFUND_REQUESTS',
     V_USER_ACCOUNT,
     V_USER_ACCOUNT - P_AMOUNT,
     '1', --支出
     SYSDATE);
     */
  --更新用户余额,占用退款余额
  UPDATE USERS
     SET ACCOUNT        = ACCOUNT - P_AMOUNT,
         freeze_account = freeze_account + P_AMOUNT
   WHERE ID = P_USER_ID;

  RESULT_STATUS := 0;
  RETURN;

END P_USER_REFUND_BOOKING_REQUEST;


 
/

-- ----------------------------
-- Procedure structure for P_USER_REFUND_REQUEST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_REFUND_REQUEST"
(
	P_USER_ID         IN NUMBER,
	P_AMOUNT          IN NUMBER,
	P_REFUND_TYPE     IN VARCHAR,
	P_USER_BANK_ID    IN NUMBER,
	P_USER_ADDRESS_ID IN VARCHAR,
	P_REMARKS         IN VARCHAR,
	RESULT_STATUS     OUT NUMBER
	/*
                                                            ??????:????
                                                            ????:2012.05.21
                                                            ????:????????????????
                                                            RESULT_STATUS
                                                            0:????
                                                            1:??????????
                                                            2:??????????
                                                            3:????????
                                                            4:????????,????????????

                                                            2012-07-18 ????????????
                                                        */
) IS
	V_USER_ID      NUMBER;
	V_USER_ACCOUNT NUMBER;
	V_USERNAME     VARCHAR(255);
	V_USER_STATUS  VARCHAR2(255);
	V_USER_ID_AUTH VARCHAR2(255);

	V_REFUND_ID NUMBER;

	v_row NUMBER;
BEGIN
	BEGIN
		SELECT U.ID, U.ACCOUNT, U.STATUS, U.TRUE_NAME, D.ID_AUTH_STATUS
			INTO V_USER_ID,
					 V_USER_ACCOUNT,
					 V_USER_STATUS,
					 V_USERNAME,
					 V_USER_ID_AUTH
			FROM USERS U
			JOIN USER_DETAILS D ON D.USER_ID = U.ID
		 WHERE ID = P_USER_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RESULT_STATUS := 1;
			RETURN;
	END;
	--??????????
	/*IF V_USER_ID_AUTH != 2 THEN
    ROLLBACK;
    RESULT_STATUS := 2;
    RETURN;
  END IF;*/
  IF P_REFUND_TYPE IS NULL OR P_AMOUNT IS NULL OR P_AMOUNT = 0 THEN
    ROLLBACK;
    RESULT_STATUS := 5;
    RETURN;
  END IF;
	--????????
	IF V_USER_ACCOUNT < P_AMOUNT THEN
		ROLLBACK;
		RESULT_STATUS := 3;
		RETURN;
	END IF;
	--????????,????????????
	IF V_USER_STATUS != 0 AND V_USER_STATUS != 3 THEN
		ROLLBACK;
		RESULT_STATUS := 4;
		RETURN;
	END IF;

	BEGIN
		SELECT USER_REFUND_REQUESTS_SEQ.NEXTVAL INTO V_REFUND_ID FROM DUAL;
		IF P_REFUND_TYPE = 0 THEN
			--????????
			INSERT INTO USER_REFUND_REQUESTS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 REFUND_TYPE,
				 CURRENCY,
				 ADDRESS,
				 POSTCODE,
				 STATUS,
				 REMARKS,
				 CREATED_AT)
				SELECT V_REFUND_ID,
							 P_USER_ID,
							 V_USERNAME,
							 P_AMOUNT,
							 P_REFUND_TYPE,
							 'RMB',
							 UA.ADDRESS,
							 UA.POSTCODE,
							 0,
							 P_REMARKS,
							 SYSDATE
					FROM USER_ADDRESSES UA
				 WHERE UA.ID = P_USER_ADDRESS_ID
					 AND UA.USER_ID = P_USER_ID
					 AND UA.STATUS = '1';
		ELSIF P_REFUND_TYPE = 1 THEN
			--????????
			INSERT INTO USER_REFUND_REQUESTS
				(ID,
				 USER_ID,
				 USER_NAME,
				 AMOUNT,
				 REFUND_TYPE,
				 CURRENCY,
				 USER_BANK_ID,
				 BANK_NAME,
				 BRANCH_NAME,
				 BANK_ACCOUNT,
				 ID_CARD,
				 ID_CARD_NAME,
				 STATUS,
				 REMARKS,
				 CREATED_AT)
				SELECT V_REFUND_ID,
							 P_USER_ID,
							 V_USERNAME,
							 P_AMOUNT,
							 P_REFUND_TYPE,
							 'RMB',
							 P_USER_BANK_ID,
							 UB.BANK_NAME,
							 UB.BRANCH_NAME,
							 UB.BANK_NO,
							 UB.ID_CARD,
							 UB.NAME,
							 0,
							 P_REMARKS,
							 SYSDATE
					FROM USER_BANKS UB
				 WHERE UB.ID = P_USER_BANK_ID
					 AND UB.USER_ID = P_USER_ID
					 AND STATUS = '1';
		END IF;
		v_row := SQL%ROWCOUNT;
		--????????????
		IF P_REFUND_TYPE = 0 OR P_REFUND_TYPE = 1 THEN
			/*INSERT INTO USER_ACCOUNTS
        (ID,
         USER_ID,
         MONEY,
         FINANCE_TYPE,
         FINANCE_DATE,
         FINANCE_ID,
         FINANCE_NAME,
         SOURCE_ID,
         SOURCE_TYPE,
         ACCOUNT_OLD,
         ACCOUNT_NEW,
         DIRECTION,
         CREATED_AT)
      VALUES
        (USER_ACCOUNTS_SEQ.NEXTVAL,
         P_USER_ID,
         P_AMOUNT,
         3, --????????
         SYSDATE,
         P_USER_ID,
         V_USERNAME,
         V_REFUND_ID,
         'USER_REFUND_REQUESTS',
         V_USER_ACCOUNT,
         V_USER_ACCOUNT - P_AMOUNT,
         '1', --????
         SYSDATE);
         */
			--????????????,????????????
			IF v_row = 1 THEN
				UPDATE USERS
					 SET ACCOUNT        = ACCOUNT - P_AMOUNT,
							 freeze_account = freeze_account + P_AMOUNT
				 WHERE ID = P_USER_ID;
			ELSE
				ROLLBACK;
				result_status := 1;
				RETURN;
			END IF;
		END IF;
		RESULT_STATUS := 0;
		RETURN;
	END;
END P_USER_REFUND_REQUEST;


 
/

-- ----------------------------
-- Procedure structure for P_USER_REG_NEW
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_REG_NEW"
(
	P_NICKNAME        VARCHAR2, --用户昵称
	P_PWD             VARCHAR2, --密码
	P_EMAIL           VARCHAR2, --注册邮箱
	P_VALIDATION_CODE VARCHAR2, --验证码
	P_IS_AGREE_MENT   NUMBER, --是否同意新的拍卖规则
	P_TEL             VARCHAR, --手机号
	P_REG_IP          VARCHAR2, --注册IP
	P_APP_ID          NUMBER, --用户注册时的终端ID
  P_COUNTRY_ID      NUMBER, --用户注册时的国家ID
  P_PROVINCE_ID     NUMBER, --用户注册时的省份ID
  P_CITY_ID         NUMBER, --用户注册时的城市ID
	P_USER_ID         OUT NUMBER, --用户编号
	P_RESULT_STATUS   OUT NUMBER
	/**
                                                              0: OK
                                                              1: 昵称重复
                                                              2: EMAIL重复
                                                              3: 添加失败
                                                              4: 手机号不能为空
                                                              5: 手机号已经被认证
                                                              6: 验证码过期
                                                              */
	/*
                                                                 创建人:李征
                                                                 更新日期:2012.04.23
                                                                 描述: 上海站注册,需手机验证
                                                              */
) AS
	V_RESULT_COUNT NUMBER; --结果集总数
	V_USER_ID      NUMBER; --用户编号
  V_SCORE_GIFT_RESULT NUMBER; --29周年庆注册送100积分
BEGIN

	SELECT COUNT(*)
		INTO V_RESULT_COUNT
		FROM USERS U, USER_DETAILS UD, USER_PHONES UP
	 WHERE U.ID = UD.USER_ID
		 AND U.ID = UP.USER_ID
		 AND (U.MOBILE_PHONE = P_TEL OR (UP.PHONE_NO = P_TEL));

	IF V_RESULT_COUNT > 0 THEN
		P_RESULT_STATUS := 5;
		RETURN;
	END IF;

	SELECT COUNT(*)
		INTO V_RESULT_COUNT
		FROM USER_PHONES UP
	 WHERE UP.VALIDATION_CODE = P_VALIDATION_CODE
		 AND UP.PHONE_NO = P_TEL
		 AND UP.CREATED_AT > SYSDATE - INTERVAL '15' MINUTE;

	IF V_RESULT_COUNT = 0 THEN
		P_RESULT_STATUS := 6;
		RETURN;
	END IF;

	SELECT COUNT(1)
		INTO V_RESULT_COUNT
		FROM USER_VIRTUAL_ACCOUNTS UVA, USERS U
	 WHERE UVA.USER_ID = U.ID
		 AND (LOWER(UVA.NAME) = LOWER(P_NICKNAME) OR
				 LOWER(NAME) = LOWER(P_NICKNAME));

	IF V_RESULT_COUNT > 0 THEN
		P_RESULT_STATUS := 1;
		RETURN;
	END IF;

	/*SELECT COUNT(1) INTO V_RESULT_COUNT FROM USERS WHERE EMAIL = P_EMAIL;

  IF V_RESULT_COUNT > 0 THEN
    P_RESULT_STATUS := 2;
    RETURN;
  END IF;*/

	BEGIN
		SELECT USERS_SEQ.NEXTVAL INTO V_USER_ID FROM DUAL;
		--向用户表中新增数据
		INSERT INTO USERS
			(ID,
			 PASSWORD,
			 NICKNAME,
			 MOBILE_PHONE,
			 REGISTER_DATE,
			 REGIP,
			 QUOTA,
			 ACCOUNT,
			 BAILS,
			 TOTAL_ACCOUNT,
			 TOTAL_QUOTA,
			 BUY_LEVEL,
			 SELL_LEVEL,
			 ISAGREEMENT,
			 AGREE_DATE,
			 CREATED_AT,
			 UPDATED_AT)
		VALUES
			(V_USER_ID,
			 P_PWD,
			 P_NICKNAME,
			 P_TEL,
			 SYSDATE,
			 P_REG_IP,
			 0,
			 0,
			 0,
			 0,
			 0,
			 0, --注册会员
			 10, --注册会员
			 P_IS_AGREE_MENT,
			 SYSDATE,
			 SYSDATE,
			 SYSDATE);
		--向用户明细表中新增对应数据
		INSERT INTO USER_DETAILS
			(USER_ID,
			 COUNTRY_ID,
			 PROVINCE_ID,
			 CITY_ID,
			 REGISTER_IP,
			 CREATED_AT,
			 UPDATED_AT,
			 EMAIL,
			 MOBILE_TEL,
			 APP_ID)
		VALUES
			(V_USER_ID,
			 P_COUNTRY_ID,
			 P_PROVINCE_ID,
			 P_CITY_ID,
			 P_REG_IP,
			 SYSDATE,
			 SYSDATE,
			 P_EMAIL,
			 P_TEL,
			 P_APP_ID);
		/*将数据添加到用户昵称表中*/
		INSERT INTO USER_VIRTUAL_ACCOUNTS
			(ID, NAME, USER_ID, IS_DEFAULT, CREATED_AT, STATUS)
		VALUES
			(USER_VIRTUAL_ACCOUNTS_SEQ.NEXTVAL,
			 P_NICKNAME,
			 V_USER_ID,
			 1,
			 SYSDATE,
			 1);

		UPDATE USER_PHONES UP
			 SET UP.USER_ID = V_USER_ID
		 WHERE UP.PHONE_NO = P_TEL
			 AND UP.VALIDATION_CODE = P_VALIDATION_CODE;
    
		P_USER_ID       := V_USER_ID;
		P_RESULT_STATUS := 0;
    
    /**29周年庆注册送100积分*/
    --IF SYSDATE > TO_DATE('2014-05-23 00:00:00', 'yyyy-mm-dd hh24:mi:ss') AND SYSDATE < TO_DATE('2014-05-31 00:00:00', 'yyyy-mm-dd hh24:mi:ss') THEN
      P_SCORE_GIFT(V_USER_ID, 100, 1, SYSDATE, NULL, NULL, '29周年庆注册送100积分', '0', V_SCORE_GIFT_RESULT);
    --END IF;
		RETURN;

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			P_RESULT_STATUS := 3;
			RETURN;
	END;
END P_USER_REG_NEW;

 
/

-- ----------------------------
-- Procedure structure for P_USER_REGISTER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_REGISTER"
(
  P_PASSWORD    VARCHAR,
  P_TRUENAME    VARCHAR,
  P_SEX         CHAR,
  P_EMAIL       VARCHAR,
  P_USERLANG    CHAR,
  P_COUNTRY_ID  NUMBER,
  P_PROVINCE_ID NUMBER,
  P_CITY_ID     NUMBER,
  P_QUOTA       NUMBER,

  P_TEL          VARCHAR,
  P_MOBILE       VARCHAR,
  P_FAX          VARCHAR,
  P_OTHERCONTACT VARCHAR,
  P_NICKNAME     VARCHAR,

  USERID        OUT NUMBER,
  ID            OUT NUMBER,
  RESULT_STATUS OUT NUMBER
  /**
                                                       0: OK
                                                       1: NICKNAME DUPLICATE
                                                       2: EMAIL DUPLICATE
                                                       3: BOTH
                                                       4: UNKNOW
                                                       */
) AS

  /*
      创建人:李征
      日期:2012-04-01
      描述:英文站注册
  */

  USERIDTMP     NUMBER;
  V_COUNTRY_ID  NUMBER := P_COUNTRY_ID;
  V_PROVINCE_ID NUMBER := P_PROVINCE_ID;
  V_CITY_ID     NUMBER := P_CITY_ID;

  V_COUNT NUMBER;
BEGIN
  /*CHECK UNIQUE*/
  USERID        := 0;
  ID            := 0;
  RESULT_STATUS := 0;

  /*nickname duplicate*/
  SELECT COUNT(1) INTO V_COUNT FROM USERS WHERE NICKNAME = P_NICKNAME;

  IF V_COUNT > 0 THEN
    RESULT_STATUS := 1;
    RETURN;
  END IF;

  SELECT COUNT(1) INTO V_COUNT FROM USERS WHERE EMAIL = P_EMAIL;
  IF V_COUNT > 0 THEN
    RESULT_STATUS := 2;
    RETURN;
  END IF;

  BEGIN
    SELECT USERS_SEQ.NEXTVAL INTO USERIDTMP FROM DUAL;
    BEGIN
      SELECT ID
        INTO V_COUNTRY_ID
        FROM USER_COUNTRIES
       WHERE ID = P_COUNTRY_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_COUNTRY_ID := NULL;
    END;
    BEGIN
      SELECT ID
        INTO V_PROVINCE_ID
        FROM USER_PROVINCES
       WHERE ID = P_PROVINCE_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_PROVINCE_ID := NULL;
    END;
    BEGIN
      SELECT ID INTO V_CITY_ID FROM USER_CITIES WHERE ID = P_CITY_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_CITY_ID := NULL;
    END;

    INSERT INTO USERS
      (ID,
       PASSWORD,
       TRUE_NAME,
       SEX,
       EMAIL,
       REGISTER_DATE,
       quota,
       total_quota,
       USER_LANG,
       NICKNAME)
    VALUES
      (USERIDTMP,
       P_PASSWORD,
       P_TRUENAME,
       P_SEX,
       P_EMAIL,
       SYSDATE,
       P_QUOTA,
       p_quota,
       P_USERLANG,
       P_NICKNAME);

    INSERT INTO USER_DETAILS
      (USER_ID,
       COUNTRY_ID,
       PROVINCE_ID,
       CITY_ID,
       TEL,
       MOBILE_TEL,
       FAX,
       OTHER_CONTACT,
       APP_ID)
    VALUES
      (USERIDTMP,
       V_COUNTRY_ID,
       V_PROVINCE_ID,
       V_CITY_ID,
       P_TEL,
       P_MOBILE,
       P_FAX,
       P_OTHERCONTACT,
       '5');

    INSERT INTO user_quotas
      (ID,
       user_id,
       amount,
       direction,
       quota_type,
       operate_type,
       remarks,
       created_at)
    VALUES
      (USER_QUOTAS_SEQ.NEXTVAL,
       USERIDTMP,
       P_QUOTA,
       0,
       0,
       1,
       'Register',
       SYSDATE);

    IF SQLCODE <> 0 THEN
      USERID        := 0;
      ID            := 0;
      RESULT_STATUS := 4;
      ROLLBACK;
    END IF;

    IF SQLCODE = 0 THEN
      USERID := USERIDTMP;
      ID     := USERIDTMP;
    END IF;
  END;
END P_USER_REGISTER;


 
/

-- ----------------------------
-- Procedure structure for P_USER_REGISTERTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_REGISTERTION"
(
	P_NICKNAME      VARCHAR2, --用户昵称
	P_PWD           VARCHAR2, --密码
	P_EMAIL         VARCHAR2, --注册邮箱
	P_IS_AGREE_MENT NUMBER, --是否同意新的拍卖规则
	P_TEL           VARCHAR, --手机号
	P_REG_IP        VARCHAR2, --注册IP
	P_APP_ID        NUMBER, --用户注册时的终端ID
  P_COUNTRY_ID    NUMBER, --用户注册时的国家ID
  P_PROVINCE_ID   NUMBER, --用户注册时的省份ID
  P_CITY_ID       NUMBER, --用户注册时的城市ID
	P_USER_ID       OUT NUMBER, --用户编号
	P_RESULT_STATUS OUT NUMBER
	/**
                            0: OK
                            1: 昵称重复
                            2: EMAIL重复
                            3: 添加失败
                            */
	/*
                               创建人:李征
                               更新日期:2012.04.23
                               描述:中文站前台注册
                            */
) AS
	V_RESULT_COUNT NUMBER; --结果集总数
	V_USER_ID      NUMBER; --用户编号
  V_SCORE_GIFT_RESULT NUMBER; --29周年庆注册送100积分
BEGIN

	SELECT COUNT(1)
		INTO V_RESULT_COUNT
		FROM USER_VIRTUAL_ACCOUNTS
	 WHERE NAME = P_NICKNAME;

	IF V_RESULT_COUNT > 0 THEN
		P_RESULT_STATUS := 1;
		RETURN;
	END IF;

	/*SELECT COUNT(1) INTO V_RESULT_COUNT FROM USERS WHERE EMAIL = P_EMAIL;

  IF V_RESULT_COUNT > 0 THEN
    P_RESULT_STATUS := 2;
    RETURN;
  END IF;*/

	BEGIN
		SELECT USERS_SEQ.NEXTVAL INTO V_USER_ID FROM DUAL;
		--向用户表中新增数据
		INSERT INTO USERS
			(ID,
			 PASSWORD,
			 NICKNAME,
			 REGISTER_DATE,
			 REGIP,
			 QUOTA,
			 ACCOUNT,
			 BAILS,
			 TOTAL_ACCOUNT,
			 TOTAL_QUOTA,
			 BUY_LEVEL,
			 SELL_LEVEL,
			 ISAGREEMENT,
			 AGREE_DATE,
			 CREATED_AT,
			 UPDATED_AT)
		VALUES
			(V_USER_ID,
			 P_PWD,
			 P_NICKNAME,
			 SYSDATE,
			 P_REG_IP,
			 0,
			 0,
			 0,
			 0,
			 0,
			 0, --注册会员
			 10, --注册会员
			 P_IS_AGREE_MENT,
			 SYSDATE,
			 SYSDATE,
			 SYSDATE);
		--向用户明细表中新增对应数据
		INSERT INTO USER_DETAILS
			(USER_ID,
			 COUNTRY_ID,
			 PROVINCE_ID,
			 CITY_ID,
			 REGISTER_IP,
			 CREATED_AT,
			 UPDATED_AT,
			 EMAIL,
			 MOBILE_TEL,
			 APP_ID)
		VALUES
			(V_USER_ID,
			 P_COUNTRY_ID,
			 P_PROVINCE_ID,
			 P_CITY_ID,
			 P_REG_IP,
			 SYSDATE,
			 SYSDATE,
			 P_EMAIL,
			 P_TEL,
			 P_APP_ID);
		/*将数据添加到用户昵称表中*/
		INSERT INTO USER_VIRTUAL_ACCOUNTS
			(ID, NAME, USER_ID, IS_DEFAULT, CREATED_AT, STATUS)
		VALUES
			(USER_VIRTUAL_ACCOUNTS_SEQ.NEXTVAL,
			 P_NICKNAME,
			 V_USER_ID,
			 1,
			 SYSDATE,
			 1);

		P_USER_ID       := V_USER_ID;
		P_RESULT_STATUS := 0;
    
    /**29周年庆注册送100积分
    IF SYSDATE > TO_DATE('2014-05-23 00:00:00', 'yyyy-mm-dd hh24:mi:ss') AND SYSDATE < TO_DATE('2014-05-31 00:00:00', 'yyyy-mm-dd hh24:mi:ss') THEN
      P_SCORE_GIFT(V_USER_ID, 100, 1, SYSDATE, NULL, NULL, '29周年庆注册送100积分', '0', V_SCORE_GIFT_RESULT);
    END IF;*/
    
		RETURN;

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			P_RESULT_STATUS := 3;
			RETURN;
	END;
END P_USER_REGISTERTION;


 
/

-- ----------------------------
-- Procedure structure for P_USER_REMARKS_LIUJING
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_USER_REMARKS_LIUJING"  is
   cursor user_cur is

    /* select * from users ur
     where ur.user_notes is not null ;*/
     select * from auctions
      where contract_id in (
       select contract_id
       from contract_details  con
       where con.created_at <= to_date('2012-06-18 00:00:00','yyyy-mm-dd hh24:mi:ss')
       and con.audit_date is  null
       and con.status <=10
      )
      and remarks is not null;

begin
   for user_result in user_cur loop

     insert into  common_remarks(id,
                                   source_id,
                                   source_type,
                                   custom_type,
                                   content,
                                   admin_id,
                                   admin_name,
                                   sort_order,
                                   status,
                                   created_at,
                                   updated_at)
     values (
       common_remarks_seq.nextval,
       user_result.id,
       'AUCTIONS',
       '拍品备注',
       user_result.remarks,
       60001,
       '管理员',
        0,
        1,
        sysdate,
        sysdate
     );
   end loop;

end P_USER_REMARKS_LIUJING;


 
/

-- ----------------------------
-- Procedure structure for P_USER_SCORE_AMOUNT_INIT
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."P_USER_SCORE_AMOUNT_INIT"(P_USER_ID NUMBER) is
  /*竞买/委托形象值不为0的用户*/
  CURSOR C_USERS IS
    SELECT U.ID, U.BUY_SCORE_AMOUNT, U.SELL_SCORE_AMOUNT
      FROM USERS U
     WHERE U.USER_LANG != '2'
       AND ID = P_USER_ID
       AND (U.BUY_SCORE_AMOUNT > 0 OR U.SELL_SCORE_AMOUNT > 0);
  /*竞买形象值流水*/
  CURSOR C_BUY_SCORE_AMOUNT(UID NUMBER) IS
    SELECT ID, USER_ID, USER_TYPE, SCORES
      FROM USER_LEVEL_DETAILS D
     WHERE D.DIRECTION = '0'
       AND D.USER_ID = UID
       AND D.USER_TYPE = '0'
       AND D.OPERATE_TYPE = '1'
     ORDER BY D.CREATED_AT DESC, ID DESC;
  /*委托形象值流水*/
  CURSOR C_SELL_SCORE_AMOUNT(UID NUMBER) IS
    SELECT ID, USER_ID, USER_TYPE, SCORES
      FROM USER_LEVEL_DETAILS D
     WHERE D.DIRECTION = '0'
       AND D.USER_ID = UID
       AND D.USER_TYPE = '1'
     ORDER BY D.CREATED_AT DESC, ID DESC;

  V_USER_ID           NUMBER;
  V_BUY_SCORE_AMOUNT  NUMBER := 0;
  V_EXPIRED_PART      NUMBER := 0;
  V_SELL_SCORE_AMOUNT NUMBER := 0;

  E_BREAK EXCEPTION;

begin
  DBMS_OUTPUT.ENABLE(1000000);

  FOR RESULT_USER IN C_USERS LOOP
    IF RESULT_USER.BUY_SCORE_AMOUNT > 0 THEN
      BEGIN
        /*竞买形象值*/
        FOR RESULT_SCORES IN C_BUY_SCORE_AMOUNT(RESULT_USER.ID) LOOP
          --按时间,保留最新生成总合=前用户竞买形象值相等的记录, 其它的失效
          V_BUY_SCORE_AMOUNT := V_BUY_SCORE_AMOUNT + RESULT_SCORES.SCORES;
          --一笔笔相加,直到大于等于当前用户竞买形象值
          IF V_BUY_SCORE_AMOUNT > RESULT_USER.BUY_SCORE_AMOUNT THEN
            --最后一笔已经使用部分
            V_EXPIRED_PART := V_BUY_SCORE_AMOUNT -
                              RESULT_USER.BUY_SCORE_AMOUNT;
            /*最后一笔部分有效*/
            UPDATE USER_LEVEL_DETAILS D
               SET D.USABLE_SCORES = RESULT_SCORES.SCORES - V_EXPIRED_PART,
                   D.EFFECTED_AT   = SYSDATE,
                   D.STATUS        = '1'
             WHERE ID = RESULT_SCORES.ID;
          
            UPDATE USER_LEVEL_DETAILS D
               SET D.STATUS = '2', D.USABLE_SCORES = 0
             WHERE USER_ID = RESULT_USER.ID
               AND D.EFFECTED_AT IS NULL;
          
            RAISE E_BREAK;
            /*不足当前用户有效竞买形象值的记录保留, 设置生效时间为现在*/
          ELSIF V_BUY_SCORE_AMOUNT < RESULT_USER.BUY_SCORE_AMOUNT THEN
            UPDATE USER_LEVEL_DETAILS D
               SET D.EFFECTED_AT   = SYSDATE,
                   D.USABLE_SCORES = RESULT_SCORES.SCORES,
                   D.STATUS='1'
             WHERE ID = RESULT_SCORES.ID;
          END IF;
        
        END LOOP;
      EXCEPTION
        WHEN E_BREAK THEN
          DBMS_OUTPUT.put_line('用户:' || RESULT_USER.ID || ' 可用竞买形象值初始完成');
        WHEN OTHERS THEN
          ROLLBACK;
      END;
    END IF;
  
    /*委托形象值*/
    IF RESULT_USER.SELL_SCORE_AMOUNT > 0 THEN
      BEGIN
        FOR RESULT_SCORES IN C_SELL_SCORE_AMOUNT(RESULT_USER.ID) LOOP
          --按时间,保留最新生成总合=前用户委托形象值相等的记录, 其它的失效
          V_SELL_SCORE_AMOUNT := V_SELL_SCORE_AMOUNT + RESULT_SCORES.SCORES;
          --一笔笔相加,直到大于等于当前用户委托形象值
          IF V_SELL_SCORE_AMOUNT > RESULT_USER.SELL_SCORE_AMOUNT THEN
            --最后一笔已经使用部分
            V_EXPIRED_PART := V_SELL_SCORE_AMOUNT -
                              RESULT_USER.SELL_SCORE_AMOUNT;
            /*最后一笔部分有效*/
            UPDATE USER_LEVEL_DETAILS D
               SET D.USABLE_SCORES = RESULT_SCORES.SCORES - V_EXPIRED_PART,
                   D.EFFECTED_AT   = SYSDATE,
                   D.STATUS        = '1'
             WHERE ID = RESULT_SCORES.ID;
          
            UPDATE USER_LEVEL_DETAILS D
               SET D.STATUS = '2', D.USABLE_SCORES = 0
             WHERE USER_ID = RESULT_USER.ID
               AND D.EFFECTED_AT IS NULL;
          
            RAISE E_BREAK;
            /*不足当前用户有效竞买形象值的记录保留, 设置生效时间为现在*/
          ELSIF V_SELL_SCORE_AMOUNT < RESULT_USER.SELL_SCORE_AMOUNT THEN
            UPDATE USER_LEVEL_DETAILS D
               SET D.EFFECTED_AT   = SYSDATE,
                   D.STATUS='1',
                   D.USABLE_SCORES = RESULT_SCORES.SCORES
             WHERE ID = RESULT_SCORES.ID;
          END IF;
        
        END LOOP;
      EXCEPTION
        WHEN E_BREAK THEN
          DBMS_OUTPUT.put_line('用户:' || RESULT_USER.ID || ' 可用委托形象值初始完成');
        WHEN OTHERS THEN
          ROLLBACK;
      END;
    END IF;
  END LOOP;
end P_USER_SCORE_AMOUNT_INIT;

 
/

-- ----------------------------
-- Procedure structure for P_USER_SELL_LEVEL_CHANGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_SELL_LEVEL_CHANGE"
/*
     作者：   Dwen
     日期：   2011-12-07
     描述：   卖方会员级别变更
     买方级别说明:
            10 :  注册会员
            11 :  一星会员
            12 :  二星会员
            13 :  三星会员
            14 :  四星会员
            15 :  五星会员
     异常说明：
     S0001   : 卖方升级异常
     S0002   : 卖方保级降级异常

     日期: 2013.03.12 11:00
     更新人: 李征
     描述: 冻结用户可正常升降级
     U.ISLOCK != 1
     
     修改人：Dwen
     修改日期：2014-01-03
     描述：修改用降级业务规则(规则见readmine#162)
  */
 IS

	/** 取当日卖方积分过期会员 */
	CURSOR C_USER_LEVEL_EXPIRED_SELL IS
		SELECT U.ID,
					 U.TRUE_NAME,
					 U.SELL_LEVEL,
					 U.SELL_SCORE_AMOUNT,
					 U.SELL_LEVEL_STARTED_AT
			FROM USERS U
		 WHERE U.USER_LANG != 2
			 AND to_char(U.SELL_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') =
					 to_char(SYSDATE, 'yyyy-MM-dd');

	/** 卖方需要升级的会员 */
	CURSOR C_USER_LEVEL_SELL IS
		SELECT U.ID,
					 U.TRUE_NAME,
					 U.BUY_LEVEL,
					 U.BUY_SCORE_AMOUNT,
					 U.BUY_LEVEL_STARTED_AT,
					 U.SELL_LEVEL,
					 U.SELL_SCORE_AMOUNT,
					 U.SELL_LEVEL_STARTED_AT
			FROM USERS U
		 WHERE U.USER_LANG != 2 
			 AND (U.SELL_LEVEL = 10 AND U.SELL_SCORE_AMOUNT > 0)
				OR (U.SELL_LEVEL = 11 AND U.SELL_SCORE_AMOUNT >= 250)
				OR (U.SELL_LEVEL = 12 AND U.SELL_SCORE_AMOUNT >= 1200)
				OR (U.SELL_LEVEL = 13 AND U.SELL_SCORE_AMOUNT >= 4000)
				OR (U.SELL_LEVEL = 14 AND U.SELL_SCORE_AMOUNT >= 20000);
        
  V_COUNT_DAYS NUMBER:=0;/* 级别有效期天数 */
BEGIN

	/** 卖方会员升级 */
	FOR RESULT_ROW IN C_USER_LEVEL_SELL LOOP
		IF RESULT_ROW.SELL_LEVEL >= 10 AND RESULT_ROW.SELL_LEVEL < 15 THEN
			CASE
				WHEN RESULT_ROW.SELL_LEVEL = 10 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 250 - 1200 - 4000 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 14,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 5450,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '10',
							 '14',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 5450,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
            /* 形象值流水过期处理 */
            P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,5450);
					ELSIF RESULT_ROW.SELL_SCORE_AMOUNT - 250 - 1200 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 13,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1450,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '10',
							 '13',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 1450,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
               /* 形象值流水过期处理 */
               P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1450);
					ELSIF RESULT_ROW.SELL_SCORE_AMOUNT - 250 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 12,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '10',
							 '12',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 250,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
            /* 形象值流水过期处理 */
            P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
					ELSIF RESULT_ROW.SELL_SCORE_AMOUNT > 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL = 11, U.SELL_LEVEL_STARTED_AT = SYSDATE
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '10',
							 '11',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 11 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 250 - 1200 - 4000 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 14,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 5450,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '11',
							 '14',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 5450,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,5450);
					ELSIF RESULT_ROW.SELL_SCORE_AMOUNT - 250 - 1200 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 13,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1450,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '11',
							 '13',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 1450,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1450);
					ELSIF RESULT_ROW.SELL_SCORE_AMOUNT - 250 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 12,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '11',
							 '12',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 250,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
            /* 形象值流水过期处理 */
            P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 12 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 1200 - 4000 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 14,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 5200,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '12',
							 '14',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 5200,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,5200);
					ELSIF RESULT_ROW.SELL_SCORE_AMOUNT - 1200 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 13,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1200,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '12',
							 '13',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 1200,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1200);
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 13 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 4000 >= 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 14,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 4000,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '13',
							 '14',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 4000,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,4000);
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 14 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 20000 >= 0 AND
						 CEIL(SYSDATE - RESULT_ROW.SELL_LEVEL_STARTED_AT) >= 365 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 15,
									 U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 20000,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '0',
							 '14',
							 '15',
							 '1',
							 'upgrade',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 20000,
							 '1',
							 '3',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,20000);
					END IF;
			END CASE; END IF;
		COMMIT;
	END LOOP;

	/** =================卖家会员到期不够保级则降一级==================== **/
	FOR RESULT_ROW IN C_USER_LEVEL_EXPIRED_SELL LOOP
		IF RESULT_ROW.SELL_LEVEL > 11 AND RESULT_ROW.SELL_LEVEL <= 15 THEN
			CASE
				WHEN RESULT_ROW.SELL_LEVEL = 12 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 250 < 0 THEN
						UPDATE USERS U
							 SET U.SELL_LEVEL            = 11,
									 U.SELL_SCORE_AMOUNT     = 0,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '1',
							 '12',
							 '11',
							 '1',
							 'demetion LEVEL12->11',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 RESULT_ROW.SELL_SCORE_AMOUNT,
							 '1',
							 '4',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,RESULT_ROW.SELL_SCORE_AMOUNT);
					ELSE
						UPDATE USERS U
							 SET U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '4',
							 '12',
							 '12',
							 '1',
							 'noChangeLevel',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 250,
							 '1',
							 '5',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 13 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 1200 < 0 THEN
          /* 
            形象值<250 1级 形象值=0
            形象值>=250 2级  形象值=形象值-250
            */
            /* 形象值<250 1级 形象值=0 */
            IF RESULT_ROW.SELL_SCORE_AMOUNT < 250 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 11,
                     U.SELL_SCORE_AMOUNT     = 0,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '13',
                 '11',
                 '1',
                 'demetion LEVEL13->11',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 RESULT_ROW.SELL_SCORE_AMOUNT,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,RESULT_ROW.SELL_SCORE_AMOUNT);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT >= 250 THEN 
            /*形象值>=250 2级  形象值=形象值-250*/
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 12,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '13',
                 '12',
                 '1',
                 'demetion LEVEL13->12',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 250,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                /* 形象值流水过期处理 */
                P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
            END IF;

					ELSE
						UPDATE USERS U
							 SET U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1200,
									 U.SELL_LEVEL_STARTED_AT = SYSDATE,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '4',
							 '13',
							 '13',
							 '1',
							 'noChangeLevel',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 1200,
							 '1',
							 '5',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1200);
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 14 THEN
					IF RESULT_ROW.SELL_SCORE_AMOUNT - 4000 < 0 THEN
          /*
            形象值<250 1级 形象值=0
            形象值<1200&形象值>=250 2级  形象值=形象值-250
            形象值>=1200 3级  形象值=形象值-1200
          */
          /* 形象值<250 1级 形象值=0 */
          IF RESULT_ROW.SELL_SCORE_AMOUNT < 250 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 11,
                     U.SELL_SCORE_AMOUNT     = 0,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '14',
                 '11',
                 '1',
                 'demetion LEVEL14->11',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 RESULT_ROW.SELL_SCORE_AMOUNT,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,RESULT_ROW.SELL_SCORE_AMOUNT);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT >= 250 AND 
            RESULT_ROW.SELL_SCORE_AMOUNT < 1200 THEN
            /* 形象值<1200&形象值>=250 2级  形象值=形象值-250 */
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 12,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '14',
                 '12',
                 '1',
                 'demetion LEVEL14->12',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 250,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
          ELSIF RESULT_ROW.SELL_SCORE_AMOUNT >= 1200 THEN 
          /* 形象值>=1200 3级  形象值=形象值-1200 */
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 13,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1200,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '14',
                 '13',
                 '1',
                 'demetion LEVEL14->13',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 1200,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1200);
          END IF;

					ELSE
						UPDATE USERS U
							 SET U.SELL_SCORE_AMOUNT = U.SELL_SCORE_AMOUNT - 4000,
									 U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
						 WHERE U.ID = RESULT_ROW.ID;
						INSERT INTO USER_LEVEL_HISTS
							(ID,
							 USER_ID,
							 CHANGE_TYPE,
							 USER_CHANGE_LEVEL,
							 USER_CHANGED_LEVEL,
							 USER_TYPE,
							 CHANGE_REASON,
							 START_DATE,
							 EXPIRE_DATE,
							 OP)
						VALUES
							(USER_LEVEL_HISTS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 '4',
							 '14',
							 '14',
							 '1',
							 'noChangeLevel',
							 SYSDATE,
							 ADD_MONTHS(SYSDATE, 1 * 12),
							 'PROC P_USER_SELL_LEVEL_CHANGE');
						/* 用户形象值流水 */
						INSERT INTO USER_LEVEL_DETAILS
							(ID,
							 USER_ID,
							 USER_NAME,
							 USER_TYPE,
							 SCORES,
							 DIRECTION,
							 OPERATE_TYPE,
							 RESOURCE_ID,
							 RESOURCE_TYPE,
							 REMARKS,
							 CREATED_AT)
						VALUES
							(USER_LEVEL_DETAILS_SEQ.NEXTVAL,
							 RESULT_ROW.ID,
							 RESULT_ROW.TRUE_NAME,
							 '1',
							 4000,
							 '1',
							 '5',
							 RESULT_ROW.ID,
							 'USERS',
							 'PROC P_USER_SELL_LEVEL_CHANGE',
							 SYSDATE);
              /* 形象值流水过期处理 */
              P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,4000);
					END IF;
				WHEN RESULT_ROW.SELL_LEVEL = 15 THEN
          /* 级别有效期天数 (取最近的第一条，进行判断)*/
          SELECT H.EXPIRE_DATE-H.START_DATE INTO V_COUNT_DAYS FROM (SELECT * FROM USER_LEVEL_HISTS WHERE USER_TYPE=1 AND USER_ID=RESULT_ROW.ID ORDER BY ID DESC) H WHERE ROWNUM=1;
          /* =========== 一年有效期 ============ */
          IF V_COUNT_DAYS > 360 THEN
            IF RESULT_ROW.SELL_SCORE_AMOUNT >= 20000 THEN
              UPDATE USERS U
                 SET U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 20000,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '4',
                 '15',
                 '15',
                 '1',
                 'noChangeLevel',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 20000,
                 '1',
                 '5',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,20000);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT >= 10000 AND RESULT_ROW.SELL_SCORE_AMOUNT < 20000 THEN
              UPDATE USERS U
                 SET U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 10000,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 6)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '4',
                 '15',
                 '15',
                 '1',
                 'noChangeLevel',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 6),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 10000,
                 '1',
                 '5',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,10000);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 10000 AND RESULT_ROW.SELL_SCORE_AMOUNT >= 4000 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 14,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 4000,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '14',
                 '1',
                 'demetion LEVEL15->14',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 4000,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,4000);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 4000 AND RESULT_ROW.SELL_SCORE_AMOUNT >= 1200 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 13,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1200,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '13',
                 '1',
                 'demetion LEVEL15->13',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 1200,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1200);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 1200 AND RESULT_ROW.SELL_SCORE_AMOUNT >= 250 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 12,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '12',
                 '1',
                 'demetion LEVEL15->12',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 250,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 250 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 11,
                     U.SELL_SCORE_AMOUNT     = 0,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '11',
                 '1',
                 'demetion LEVEL15->11',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 RESULT_ROW.SELL_SCORE_AMOUNT,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                /* 形象值流水过期处理 */
                P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,RESULT_ROW.SELL_SCORE_AMOUNT);
            END IF;
          /* ===========6个月有效期=========== */  
          ELSE 
            IF RESULT_ROW.SELL_SCORE_AMOUNT >= 20000 THEN
              UPDATE USERS U
                 SET U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 20000,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '4',
                 '15',
                 '15',
                 '1',
                 'noChangeLevel',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 20000,
                 '1',
                 '5',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,20000);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 20000 AND RESULT_ROW.SELL_SCORE_AMOUNT >= 4000 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 14,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 4000,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '14',
                 '1',
                 'demetion LEVEL15->14',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 4000,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,4000);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 4000 AND RESULT_ROW.SELL_SCORE_AMOUNT >= 1200 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 13,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 1200,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '13',
                 '1',
                 'demetion LEVEL15->13',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 1200,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,1200);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 1200 AND RESULT_ROW.SELL_SCORE_AMOUNT >= 250 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 12,
                     U.SELL_SCORE_AMOUNT     = U.SELL_SCORE_AMOUNT - 250,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '12',
                 '1',
                 'demetion LEVEL15->12',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 250,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,250);
            ELSIF RESULT_ROW.SELL_SCORE_AMOUNT < 250 THEN
              UPDATE USERS U
                 SET U.SELL_LEVEL            = 11,
                     U.SELL_SCORE_AMOUNT     = 0,
                     U.SELL_LEVEL_STARTED_AT = SYSDATE,
                     U.SELL_LEVEL_EXPIRED_AT = ADD_MONTHS(SYSDATE, 1 * 12)
               WHERE U.ID = RESULT_ROW.ID;
              INSERT INTO USER_LEVEL_HISTS
                (ID,
                 USER_ID,
                 CHANGE_TYPE,
                 USER_CHANGE_LEVEL,
                 USER_CHANGED_LEVEL,
                 USER_TYPE,
                 CHANGE_REASON,
                 START_DATE,
                 EXPIRE_DATE,
                 OP)
              VALUES
                (USER_LEVEL_HISTS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 '1',
                 '15',
                 '11',
                 '1',
                 'demetion LEVEL15->11',
                 SYSDATE,
                 ADD_MONTHS(SYSDATE, 1 * 12),
                 'PROC P_USER_SELL_LEVEL_CHANGE');
              /* 用户形象值流水 */
              INSERT INTO USER_LEVEL_DETAILS
                (ID,
                 USER_ID,
                 USER_NAME,
                 USER_TYPE,
                 SCORES,
                 DIRECTION,
                 OPERATE_TYPE,
                 RESOURCE_ID,
                 RESOURCE_TYPE,
                 REMARKS,
                 CREATED_AT)
              VALUES
                (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
                 RESULT_ROW.ID,
                 RESULT_ROW.TRUE_NAME,
                 '1',
                 RESULT_ROW.SELL_SCORE_AMOUNT,
                 '1',
                 '4',
                 RESULT_ROW.ID,
                 'USERS',
                 'PROC P_USER_SELL_LEVEL_CHANGE',
                 SYSDATE);
                 /* 形象值流水过期处理 */
                 P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,RESULT_ROW.SELL_SCORE_AMOUNT);
            END IF;
          END IF;

			END CASE; END IF;
		COMMIT;
	END LOOP;
END P_USER_SELL_LEVEL_CHANGE;
 
/

-- ----------------------------
-- Procedure structure for P_USER_SELL_LEVEL_CHG
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_SELL_LEVEL_CHG"
/*
     作者： lizheng
     日期： 2014.1.28
     描述： 卖方会员级别变更
     卖方级别说明:
            10 :  注册会员
            11 :  一星会员
            12 :  二星会员
            13 :  三星会员
            14 :  四星会员
            15 :  五星会员
  
  
     修改人：lizheng
     修改日期：2014.1.28
     描述：修改用降级业务规则(规则见readmine#162)
  */
 IS
  V_NOW DATE := SYSDATE;
  /** 卖方过期或需要升级的会员  */
  CURSOR C_USER_LEVEL_BUY IS
    SELECT U.ID,
           U.TRUE_NAME,
           U.SELL_LEVEL,
           U.SELL_SCORE_AMOUNT,
           U.SELL_LEVEL_STARTED_AT,
           U.SELL_LEVEL_EXPIRED_AT
      FROM USERS U
     WHERE U.USER_LANG != 2
          --AND U.ID = 1029960
       AND (TO_CHAR(U.SELL_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') = TO_CHAR(V_NOW, 'yyyy-MM-dd') OR
           ((U.SELL_LEVEL = 10 AND U.SELL_SCORE_AMOUNT > 0) OR
           (U.SELL_LEVEL = 11 AND U.SELL_SCORE_AMOUNT >= 250) OR
           (U.SELL_LEVEL = 12 AND U.SELL_SCORE_AMOUNT >= 1200) OR
           (U.SELL_LEVEL = 13 AND U.SELL_SCORE_AMOUNT >= 4000) OR
           (U.SELL_LEVEL = 14 AND U.SELL_SCORE_AMOUNT >= 20000)));

  --V_COUNT_DAYS NUMBER := 0; /* 级别有效期天数 */

  TYPE LEVEL_ARRAY_TYPE IS VARRAY(5) OF NUMBER(38);
  --每一等级需要的形象值
  V_LEVEL_CHANGE_ARRAY     LEVEL_ARRAY_TYPE := LEVEL_ARRAY_TYPE(0, 250, 1200, 4000, 20000);
  V_USER_SELL_SCORES       NUMBER := 0; --升/降/保过后当前形象值
  V_USER_SELL_LEVEL_CHANGE NUMBER := 1; --变更的级别

  V_IS_LEVEL_EXPIRED NUMBER; --是否过期用户
  V_IS_DEMOTION      NUMBER; --是否过期重新计算等级用户
  V_GIFT_QUOTA       NUMBER := 0; --赠送额度
  V_ADD_MONTH        DATE; --升/降级到期时间

  V_CHANGE_TYPE  NUMBER; --级别变更历史类型 0升级,1降级,4保级
  V_OPERATE_TYPE NUMBER; --形象值操作类型 3升级4降级5保级

  V_LEVEL  NUMBER;
  V_REMARK VARCHAR2(50);
  V_DEBUG  VARCHAR2(1000);

BEGIN
  DBMS_OUTPUT.ENABLE(1000000);

  FOR RESULT_ROW IN C_USER_LEVEL_BUY LOOP
    V_IS_LEVEL_EXPIRED := 0;
    V_IS_DEMOTION      := 0;
    V_GIFT_QUOTA       := 0;
    V_ADD_MONTH        := ADD_MONTHS(V_NOW, 12);
    V_CHANGE_TYPE      := 0;
    V_REMARK           := '';
  
    V_DEBUG := RESULT_ROW.ID;
    --@1.是否过期用户
    IF TRUNC(RESULT_ROW.SELL_LEVEL_EXPIRED_AT) = TRUNC(V_NOW) THEN
      V_DEBUG            := V_DEBUG || '过期(' ||
                            TO_CHAR(RESULT_ROW.SELL_LEVEL_EXPIRED_AT, 'yyyy-MM-dd') || ')';
      V_IS_LEVEL_EXPIRED := 1;
      /*五星用户,满20000可延1年.满10000可延期半年.否则按实际等级计算*/
      IF RESULT_ROW.SELL_LEVEL = 15 THEN
        IF RESULT_ROW.SELL_SCORE_AMOUNT >= 20000 THEN
          V_USER_SELL_SCORES       := RESULT_ROW.SELL_SCORE_AMOUNT - 20000;
          V_USER_SELL_LEVEL_CHANGE := 15;
        ELSIF RESULT_ROW.SELL_SCORE_AMOUNT >= 10000 THEN
          V_USER_SELL_SCORES       := RESULT_ROW.SELL_SCORE_AMOUNT - 10000;
          V_ADD_MONTH              := ADD_MONTHS(V_NOW, 6);
          V_USER_SELL_LEVEL_CHANGE := 15;
        ELSE
          V_IS_DEMOTION := 1;
        END IF;
      ELSE
        V_IS_DEMOTION := 1;
      END IF;
    END IF;
    --END @1.是否过期用户
  
    --@2过期且非5星保级/延长用户 或 未过期需要升级用户
    IF (V_IS_LEVEL_EXPIRED = 1 AND V_IS_DEMOTION = 1) OR
       (V_IS_LEVEL_EXPIRED = 0 AND V_IS_DEMOTION = 0) THEN
    
      V_USER_SELL_SCORES := RESULT_ROW.SELL_SCORE_AMOUNT;
      --@3计算对应级别
      FOR I IN 10 .. 14 LOOP
        IF I = RESULT_ROW.SELL_LEVEL THEN
          --未过期用户只判断升级
          IF V_IS_LEVEL_EXPIRED = 0 THEN
            V_LEVEL                  := I + 1;
            V_USER_SELL_LEVEL_CHANGE := RESULT_ROW.SELL_LEVEL;
          ELSE
            --过期用户根据实际形象值计算对应级别
            V_LEVEL                  := 2;
            V_USER_SELL_LEVEL_CHANGE := 11; --最低降到1级
          END IF;
        
          --计算对应级别
          FOR J IN V_LEVEL .. V_LEVEL_CHANGE_ARRAY.COUNT LOOP
            IF V_USER_SELL_SCORES - V_LEVEL_CHANGE_ARRAY(J) < 0 THEN
              EXIT;
            END IF;
            V_USER_SELL_LEVEL_CHANGE := J + 10;
            V_USER_SELL_SCORES       := V_USER_SELL_SCORES - V_LEVEL_CHANGE_ARRAY(J);
          END LOOP;
        
          /*@4升到5星, 需要4星满1年.*/
          IF V_USER_SELL_LEVEL_CHANGE = 15 AND
             (RESULT_ROW.SELL_LEVEL < 14 OR
             (RESULT_ROW.SELL_LEVEL = 14 AND V_NOW - RESULT_ROW.SELL_LEVEL_STARTED_AT < 365)) THEN
            V_USER_SELL_LEVEL_CHANGE := 14;
            V_USER_SELL_SCORES       := V_USER_SELL_SCORES + 20000;
          END IF;
          --END @4
          EXIT;
        END IF;
      END LOOP;
      --END @3
    END IF;
    --END @2
    --******************DEBUG************************
    IF V_IS_LEVEL_EXPIRED = 1 THEN
      V_DEBUG := V_DEBUG || ', 从';
      V_DEBUG := V_DEBUG || (RESULT_ROW.SELL_LEVEL - 10) || '星到' || (V_USER_SELL_LEVEL_CHANGE - 10) || '星(' ||
                 TO_CHAR(V_NOW, 'YYYY-MM-DD') || '~' || TO_CHAR(V_ADD_MONTH, 'YYYY-MM-DD') ||
                 '),当前形象值' || RESULT_ROW.SELL_SCORE_AMOUNT || ', 共消耗' ||
                 (RESULT_ROW.SELL_SCORE_AMOUNT - V_USER_SELL_SCORES) || '形象值, 剩余形象值为' ||
                 V_USER_SELL_SCORES;
      DBMS_OUTPUT.PUT_LINE(V_DEBUG);
    ELSE
      IF V_USER_SELL_LEVEL_CHANGE > RESULT_ROW.SELL_LEVEL THEN
        V_DEBUG := V_DEBUG || '升级, 从';
        V_DEBUG := V_DEBUG || (RESULT_ROW.SELL_LEVEL - 10) || '星到' ||
                   (V_USER_SELL_LEVEL_CHANGE - 10) || '星(' || TO_CHAR(V_NOW, 'YYYY-MM-DD') || '~' ||
                   TO_CHAR(V_ADD_MONTH, 'YYYY-MM-DD') || '), 共消耗' ||
                   (RESULT_ROW.SELL_SCORE_AMOUNT - V_USER_SELL_SCORES) || '形象值, 当前形象值为' ||
                   V_USER_SELL_SCORES;
        DBMS_OUTPUT.PUT_LINE(V_DEBUG);
      ELSE
        V_DEBUG := V_DEBUG || '无变化';
        DBMS_OUTPUT.PUT_LINE(V_DEBUG);
      END IF;
    END IF;
    --******************DEBUG END************************
  
    --******************操作用户数据,记录流水和历史*****
    IF V_IS_LEVEL_EXPIRED = 1 OR
       (V_IS_LEVEL_EXPIRED = 0 AND V_USER_SELL_LEVEL_CHANGE > RESULT_ROW.SELL_LEVEL) THEN
      /*更新用户信息*/
      UPDATE USERS U
         SET U.SELL_LEVEL            = V_USER_SELL_LEVEL_CHANGE,
             U.SELL_SCORE_AMOUNT     = V_USER_SELL_SCORES,
             U.SELL_LEVEL_STARTED_AT = V_NOW,
             U.SELL_LEVEL_EXPIRED_AT = V_ADD_MONTH
       WHERE U.ID = RESULT_ROW.ID;
    
      IF RESULT_ROW.SELL_LEVEL = V_USER_SELL_LEVEL_CHANGE THEN
        V_REMARK       := 'noChangeLevel';
        V_CHANGE_TYPE  := 4;
        V_OPERATE_TYPE := 5;
      ELSIF RESULT_ROW.SELL_LEVEL > V_USER_SELL_LEVEL_CHANGE THEN
        V_REMARK       := 'demetion LEVEL' || RESULT_ROW.SELL_LEVEL || '->' ||
                          V_USER_SELL_LEVEL_CHANGE;
        V_CHANGE_TYPE  := 1;
        V_OPERATE_TYPE := 4;
      ELSIF RESULT_ROW.SELL_LEVEL < V_USER_SELL_LEVEL_CHANGE THEN
        V_REMARK       := 'upgrade';
        V_CHANGE_TYPE  := 0;
        V_OPERATE_TYPE := 3;
      END IF;
    
      /*级别变更历史*/
      INSERT INTO USER_LEVEL_HISTS
        (ID,
         USER_ID,
         CHANGE_TYPE,
         USER_CHANGE_LEVEL,
         USER_CHANGED_LEVEL,
         CONSUME_SCORES,
         USER_TYPE,
         CHANGE_REASON,
         START_DATE,
         EXPIRE_DATE,
         OP)
      VALUES
        (USER_LEVEL_HISTS_SEQ.NEXTVAL,
         RESULT_ROW.ID,
         V_CHANGE_TYPE,
         RESULT_ROW.SELL_LEVEL,
         V_USER_SELL_LEVEL_CHANGE,
         (RESULT_ROW.SELL_SCORE_AMOUNT - V_USER_SELL_SCORES),
         '1', --委托
         V_REMARK,
         V_NOW,
         V_ADD_MONTH,
         'PROC P_USER_SELL_LEVEL_CHANGE');
      IF RESULT_ROW.SELL_SCORE_AMOUNT - V_USER_SELL_SCORES > 0 THEN
        /* 用户形象值流水 */
        INSERT INTO USER_LEVEL_DETAILS
          (ID,
           USER_ID,
           USER_NAME,
           USER_TYPE,
           SCORES,
           DIRECTION,
           OPERATE_TYPE,
           RESOURCE_ID,
           RESOURCE_TYPE,
           REMARKS,
           CREATED_AT)
        VALUES
          (USER_LEVEL_DETAILS_SEQ.NEXTVAL,
           RESULT_ROW.ID,
           RESULT_ROW.TRUE_NAME,
           '1', --委托
           (RESULT_ROW.SELL_SCORE_AMOUNT - V_USER_SELL_SCORES),
           '1', --减少
           V_OPERATE_TYPE, --
           RESULT_ROW.ID,
           'USERS',
           'PROC P_USER_SELL_LEVEL_CHANGE',
           SYSDATE);
        --操作扣除相应的形象值
        P_VALUES_SELLER_EXCHANGE(RESULT_ROW.ID,
                                 (RESULT_ROW.SELL_SCORE_AMOUNT - V_USER_SELL_SCORES));
      END IF;
    END IF;
  END LOOP;
END P_USER_SELL_LEVEL_CHG;

 
/

-- ----------------------------
-- Procedure structure for P_USER_SIGN
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_SIGN"(I_USER_ID IN NUMBER,
                                        RESULT_STATUS OUT NUMBER,
                                        SIGN_COUNT OUT NUMBER)
/* 作者：仝玉甫
 * 日期：2014-5-20
 * 描述：29周年庆签到送20积分
 */
IS
  V_SIGN_COUNT NUMBER;
  V_SCORE_GIFT_RESULT NUMBER;
BEGIN
  RESULT_STATUS := 1;
  IF SYSDATE < TO_DATE('2014-05-23 00:00:00', 'yyyy-mm-dd hh24:mi:ss') OR SYSDATE > TO_DATE('2014-05-31 00:00:00', 'yyyy-mm-dd hh24:mi:ss') THEN
    --RESULT_STATUS := 0;
    --RETURN;
    NULL;
  END IF;
  SELECT COUNT(*) INTO V_SIGN_COUNT FROM USER_SIGN U WHERE U.USER_ID = I_USER_ID AND TO_CHAR(U.SIGN_DATE, 'yyyy-MM-dd') = TO_CHAR(SYSDATE, 'yyyy-mm-dd');
  IF V_SIGN_COUNT = 0 THEN
    INSERT INTO USER_SIGN(ID, USER_ID, SIGN_DATE) VALUES(USER_SIGN_SEQ.NEXTVAL, I_USER_ID, SYSDATE);
    SELECT COUNT(*) INTO SIGN_COUNT FROM USER_SIGN U WHERE U.USER_ID = I_USER_ID;
    P_SCORE_GIFT(I_USER_ID, 20, 1, SYSDATE, NULL, NULL, '29周年庆签到送20积分', '0', V_SCORE_GIFT_RESULT);
    IF V_SCORE_GIFT_RESULT <> 0 THEN
      ROLLBACK;
    END IF;
  ELSE
    RESULT_STATUS := 2;
  END IF;
END P_USER_SIGN;

 
/

-- ----------------------------
-- Procedure structure for P_USER_TITLE_CNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_TITLE_CNT"
(
  P_USER_ID             IN NUMBER,
  NOT_YET_PAID_COUNT    OUT NUMBER,
  NOT_YET_SHIPPED_COUNT OUT NUMBER,
  MSG_COUNT             OUT NUMBER,
  NOT_SETTLEMENT_COUNT  OUT NUMBER,
  WATCH_COUNT           OUT NUMBER,
  BID_COUNT             OUT NUMBER
) IS
  /**
  作者：张禕
  描述：计算用户head 的各项数字
  修改: 2013.05.14 李征
  上海站,登录后页头数字统计
  **/
  V_NOT_YET_PAID_COUNT    NUMBER;
  V_NOT_YET_SHIPPED_COUNT NUMBER;
  V_MSG_COUNT             NUMBER;
  V_NOT_SETTLEMENT_COUNT  NUMBER;
  V_WATCH_COUNT           NUMBER;
  V_BID_COUNT             NUMBER;
BEGIN
  --未支付总数,未发货总数
  BEGIN
    IF P_USER_ID IS NULL THEN
      NOT_YET_PAID_COUNT    := 0;
      NOT_YET_SHIPPED_COUNT := 0;
      MSG_COUNT             := 0;
      RETURN;
    END IF;

    SELECT SUM(T.NOT_YET_PAID) AS NOT_YET_PAID
      INTO V_NOT_YET_PAID_COUNT
      FROM (SELECT COUNT(DECODE(O.USER_ID,
                                P_USER_ID,
                                DECODE(O.STATUS, 0, 1, NULL))) AS NOT_YET_PAID

              FROM USER_ORDERS O
             WHERE O.USER_ID = P_USER_ID
               AND NOT EXISTS
             (SELECT UR.ID
                      FROM USER_REFUNDS UR
                     WHERE UR.ID = O.USER_REFUND_ID
                       AND DECODE(UR.STATUS, NULL, 0, 8, 0, 1) = 1)
            UNION ALL
            SELECT COUNT(DECODE(O.USER_ID,
                                P_USER_ID,
                                DECODE(O.ORDER_STATUS, 0, 1, NULL),
                                NULL)) AS NOT_YET_PAID
              FROM EC_ORDER_GOODS O
             INNER JOIN EC_GOODS EG ON EG.ID = O.GOODS_ID

             WHERE O.USER_ID = P_USER_ID) T;

    SELECT SUM(CNT)
      INTO V_NOT_YET_SHIPPED_COUNT
      FROM (SELECT COUNT(*) AS CNT,
                   SUM(O.TOTAL_AMOUNT) AS SUM_TOTAL,
                   0 AS SUM_SCORES,
                   1 AS TYPE_,
                   SUM(O.IS_FREEZE) AS FREEZE_CNT
              FROM USER_ORDERS O, AUCTIONS A
             WHERE O.AUCTION_ID = A.ID
               AND O.STATUS = '1'
               AND O.USER_ID = P_USER_ID
               AND DECODE(O.LOGISTIC_DETAIL_ID, NULL, 0, 1) = 0
               AND NOT EXISTS
             (SELECT O.ID
                      FROM USER_REFUNDS UR
                     WHERE UR.ID = O.USER_REFUND_ID
                       AND DECODE(UR.STATUS, NULL, 0, 8, 0, 1) = 1)
               AND NOT EXISTS
             (SELECT ld.id
                      FROM LOGISTIC_LADINGS l, LOGISTIC_LADING_DETAILS ld
                     WHERE l.id = ld.LOGISTIC_LADING_ID
                       AND ld.AUCTION_ID = A.ID
                       AND ld.LOGISTIC_STATUS != '3')
               AND NOT EXISTS
             (SELECT LLD.ID
                      FROM LOGISTIC_LADING_DETAILS     lld,
                           v_wms_log_order_status_info v
                     WHERE lld.AUCTION_ID = O.AUCTION_ID
                       AND V.logisticId = LLD.logistic_lading_id
                       AND V.logisticStatus != 6)
            UNION ALL
            SELECT COUNT(*) AS CNT,
                   SUM(END_PRICE) AS SUM_TOTAL,
                   0 AS SUM_SCORES,
                   2 AS TYPE_,
                   0 AS FREEZE_CNT
              FROM V_CONSIGN_RTN_DELIVERY_LST T
             WHERE T.USER_ID = P_USER_ID
               AND NOT EXISTS
             (SELECT LLD.ID
                      FROM LOGISTIC_LADING_DETAILS     lld,
                           v_wms_log_order_status_info v
                     WHERE lld.AUCTION_ID = T.ID
                       AND V.logisticId = LLD.logistic_lading_id
                       AND V.logisticStatus != 6)
            UNION ALL
            SELECT COUNT(EGO.ID) AS CNT,
                   SUM(EGO.ORDER_PRICE * EGO.GOODS_NUMBER) AS SUM_TOTAL,
                   SUM(EGO.CONSUME_SCORES * EGO.GOODS_NUMBER) AS SUM_SCORES,
                   3 AS TYPE_,
                   0 AS FREEZE_CNT
              FROM EC_ORDER_GOODS EGO, EC_GOODS G
             WHERE G.ID = EGO.GOODS_ID
               AND EGO.USER_ID = P_USER_ID
               AND EGO.ORDER_STATUS = '1'
               AND EGO.CANCEL_DATE IS NULL
               AND EGO.UNITE_CONSIGN_ID IS NULL);

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NOT_YET_PAID_COUNT := 0;
      RETURN;
    WHEN OTHERS THEN
      V_NOT_YET_PAID_COUNT := 0;
      RETURN;
  END;

  --未打开短信
  BEGIN
    SELECT COUNT(ID)
      INTO V_MSG_COUNT
      FROM MESSAGES
     WHERE TO_ID = P_USER_ID
       AND IS_RECEIVE_DEL = 0
       AND MSG_TYPE = 0
       AND MSG_STATUS = 0;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_MSG_COUNT := 0;
      RETURN;
    WHEN OTHERS THEN
      V_MSG_COUNT := 0;
      RETURN;
  END;
  --未结算数
  BEGIN

    SELECT COUNT(0)
      INTO V_NOT_SETTLEMENT_COUNT
      FROM CONTRACTS C, AUCTIONS A
     WHERE C.ID = A.CONTRACT_ID
       AND A.STATUS <> '0'
       AND C.IS_DISCARD <> '1'
       AND C.USER_ID = P_USER_ID
       AND A.SETTLEMENT_STATUS IN (0, 2);

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NOT_SETTLEMENT_COUNT := 0;
      RETURN;
    WHEN OTHERS THEN
      V_NOT_SETTLEMENT_COUNT := 0;
      RETURN;
  END;

  --我的关注
  BEGIN
    SELECT COUNT(0)
      INTO V_WATCH_COUNT
      FROM USER_AUCTIONS        UA,
           AUCTIONS             A,
           AUCTION_MAX_PRICES   AMP,
           CLIENT_CATEGORY_PATH CCP
     WHERE A.ID = UA.AUCTION_ID
       AND A.ID = AMP.AUCTION_ID
       AND CCP.CATEGORY_ID = A.AUCTION_CATEGORY_ID
       AND UA.USER_ID = P_USER_ID
       AND CCP.ROOT_CATEGORY_ID != 800
       AND A.STATUS = '2'
       AND A.AUCTION_TYPE = '1'
       AND A.END_AT > SYSDATE
       AND A.START_AT <= SYSDATE;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_WATCH_COUNT := 0;
      RETURN;
    WHEN OTHERS THEN
      V_WATCH_COUNT := 0;
      RETURN;
  END;

  --我的出价
  BEGIN
    SELECT COUNT(A.ID)
      INTO V_BID_COUNT
      FROM AUCTIONS A, AUCTION_MAX_PRICES AMP, CLIENT_CATEGORY_PATH CCP
     WHERE AMP.AUCTION_ID = A.ID
       AND CCP.CATEGORY_ID = A.AUCTION_CATEGORY_ID
       AND A.STATUS = '2'
       AND A.END_AT > SYSDATE
       AND CCP.ROOT_CATEGORY_ID != 800
       AND EXISTS (SELECT AP.ID
              FROM AUCTION_PRICES AP
             WHERE AP.AUCTION_ID = A.ID
               AND AP.USER_ID = P_USER_ID);

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_BID_COUNT := 0;
      RETURN;
    WHEN OTHERS THEN
      V_BID_COUNT := 0;
      RETURN;
  END;

  NOT_YET_PAID_COUNT    := V_NOT_YET_PAID_COUNT;
  NOT_YET_SHIPPED_COUNT := V_NOT_YET_SHIPPED_COUNT;
  MSG_COUNT             := V_MSG_COUNT;
  NOT_SETTLEMENT_COUNT  := V_NOT_SETTLEMENT_COUNT;
  WATCH_COUNT           := V_WATCH_COUNT;
  BID_COUNT             := V_BID_COUNT;

  RETURN;

END P_USER_TITLE_CNT;
/

-- ----------------------------
-- Procedure structure for P_USER_UPDATE_DEFAULT_ADDRESS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_UPDATE_DEFAULT_ADDRESS" (P_ID          IN NUMBER,
                                                          P_USER_ID     IN NUMBER,
                                                          RESULT_STATUS OUT NUMBER) IS

  /*
   * 0: 成功
     1：地址不存在
  */

BEGIN
  /**
  作者：黄超
  日期:2012-3-31
  描述：修改用户默认的收货地址
  **/


  BEGIN
    UPDATE USER_ADDRESSES
       SET ISDEFAULT = 0, UPDATED_AT = SYSDATE
     WHERE ID IN (SELECT ID
                   FROM USER_ADDRESSES
                  WHERE USER_ID = P_USER_ID
                    AND ISDEFAULT = 1);

    UPDATE USER_ADDRESSES
       SET ISDEFAULT = 1, UPDATED_AT = SYSDATE
     WHERE ID = P_ID
       AND USER_ID = P_USER_ID;

    RESULT_STATUS := 0;
    RETURN;
  EXCEPTION
    WHEN OTHERS THEN
      RESULT_STATUS := 1;
      ROLLBACK;
      RETURN;
  END;
END P_USER_UPDATE_DEFAULT_ADDRESS;


 
/

-- ----------------------------
-- Procedure structure for P_USER_UPDATE_DEFAULT_BANK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_UPDATE_DEFAULT_BANK" (P_ID          IN NUMBER,
                                                       P_USER_ID     IN NUMBER,
                                                       RESULT_STATUS OUT NUMBER) IS

BEGIN
  /**
     作者：黄超
     日期：2012-1-16
     描述：修改用户默认的银行账户
  **/
  BEGIN
    UPDATE USER_BANKS
       SET IS_DEFAULT = 0
     WHERE ID IN (SELECT ID
                   FROM USER_BANKS
                  WHERE USER_ID = P_USER_ID
                    AND IS_DEFAULT = 1);
    UPDATE USER_BANKS SET IS_DEFAULT = 1 WHERE ID = P_ID;
    RESULT_STATUS := 1;
  EXCEPTION
    WHEN OTHERS THEN
      RESULT_STATUS := 0;
      ROLLBACK;
      RETURN;
  END;
END P_USER_UPDATE_DEFAULT_BANK;


 
/

-- ----------------------------
-- Procedure structure for P_USER_UPDATE_PASSWORD
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_UPDATE_PASSWORD" (P_USER_ID    IN NUMBER,
                                                   P_OLD_PWD    IN VARCHAR2,
                                                   P_NEW_PWD    IN VARCHAR2,
                                                   RESULTSTATUS OUT NUMBER
                                                   /**
                                                           resultStatus: 0-成功，1-用户不存在，2-原密码错误，3-其他
                                                           **/) IS
  P_ID NUMBER := 0;
BEGIN
  /**
   作者：黄超
   日期：2012-2-16
   描述：用户修改账户密码
  **/
  BEGIN
    SELECT ID INTO P_ID FROM USERS WHERE ID = P_USER_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULTSTATUS := 1;
      RETURN;
  END;
  BEGIN
    SELECT ID
      INTO P_ID
      FROM USERS U
     WHERE U.ID = P_USER_ID
       AND U.PASSWORD = P_OLD_PWD;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RESULTSTATUS := 2;
      RETURN;
  END;
  BEGIN
    UPDATE USERS U
       SET U.PASSWORD = P_NEW_PWD
     WHERE U.ID = P_USER_ID
       AND U.PASSWORD = P_OLD_PWD;
    RESULTSTATUS := 0;
  EXCEPTION
    WHEN OTHERS THEN
      RESULTSTATUS := 3;
      ROLLBACK;
      RETURN;
  END;
END P_USER_UPDATE_PASSWORD;


 
/

-- ----------------------------
-- Procedure structure for P_USER_UPDATE_VIRTUAL_ACCOUNT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_USER_UPDATE_VIRTUAL_ACCOUNT" (P_VIRTUAL_ACCOUNT_ID IN NUMBER,
                                                          P_USER_ID            IN NUMBER,
                                                          P_OPERATION_TYPE_ID  IN NUMBER,
                                                          /**操作类型：0:修改默认;1:删除虚拟名称;**/
                                                          RESULT_STATUS OUT NUMBER
                                                          /**结果状态:0:成功;1:失败;*/) IS
  V_TMP_VIRTUAL_ACCOUNT_ID NUMBER := 0;
BEGIN
  IF P_OPERATION_TYPE_ID = 0 THEN
    BEGIN
      --修改默认
      UPDATE USER_VIRTUAL_ACCOUNTS UVA
         SET UVA.IS_DEFAULT = 0, UVA.UPDATED_AT = SYSDATE
       WHERE UVA.USER_ID = P_USER_ID
         AND UVA.IS_DEFAULT = '1';

      UPDATE USER_VIRTUAL_ACCOUNTS UVA
         SET UVA.IS_DEFAULT = '1', UVA.UPDATED_AT = SYSDATE
       WHERE UVA.ID = P_VIRTUAL_ACCOUNT_ID;

      UPDATE USERS U
         SET NICKNAME=(SELECT NAME FROM USER_VIRTUAL_ACCOUNTS UVA WHERE UVA.ID = P_VIRTUAL_ACCOUNT_ID)
      WHERE U.ID=P_USER_ID;

      RESULT_STATUS := 0;

      COMMIT;
      RETURN;
    EXCEPTION
      WHEN OTHERS THEN
        RESULT_STATUS := 1;
        ROLLBACK;
        RETURN;
    END;
  END IF;
  IF P_OPERATION_TYPE_ID = 1 THEN
    BEGIN
      --删除虚拟账户
      DELETE USER_VIRTUAL_ACCOUNTS WHERE ID = P_VIRTUAL_ACCOUNT_ID;
      RESULT_STATUS := 0;
      COMMIT;
      RETURN;
    EXCEPTION
      WHEN OTHERS THEN
        RESULT_STATUS := 1;
        ROLLBACK;
        RETURN;
    END;
  END IF;
END;


 
/

-- ----------------------------
-- Procedure structure for P_VALUES_BUYER_EXCHANGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_VALUES_BUYER_EXCHANGE"(P_USER_ID         IN NUMBER, --用户id
                                                    P_EXCHANGE_SCORES IN NUMBER --形象值
                                                    ) IS
  /*
        作者： Dwen
        日期： 2014-01-24
        描述： 竞买方级别变更时，每笔最先过期形象值，进行过期处理
        1、查询所有竞买方可用形象值流水，最快过期的放在最前面
        2、一笔笔流水进行扣，扣到与变更级别形象值相等为止，如果最后一笔没扣完，
        更新该笔流水中可用形象值。
  */
  V_BUY_EXCHANGE_SCORES NUMBER := 0; --形象值统计变量

  /* 按最快过期形象值，查询当前用户所有竞买方可用形象值流水*/
  CURSOR C_USER_VALUES_BUYER IS
    SELECT D.ID, D.USER_ID, D.SCORES, D.USABLE_SCORES
      FROM USER_LEVEL_DETAILS D
     WHERE D.DIRECTION = '0'
       AND D.STATUS = '1'
       AND D.USER_TYPE = '0'
       AND D.EXPIRED_AT > SYSDATE
       AND D.USER_ID = P_USER_ID
     ORDER BY D.EXPIRED_AT, D.ID;
BEGIN
  V_BUY_EXCHANGE_SCORES := P_EXCHANGE_SCORES;
  /* 循环扣除形象值 */
  FOR RESULT_ROW IN C_USER_VALUES_BUYER LOOP
    /* 当笔够扣情况 */
    IF RESULT_ROW.USABLE_SCORES > V_BUY_EXCHANGE_SCORES AND V_BUY_EXCHANGE_SCORES > 0 THEN
      /* 更改当笔可用形象值余额 */
      UPDATE USER_LEVEL_DETAILS D
         SET D.UPDATED_AT    = SYSDATE,
             D.USABLE_SCORES = D.USABLE_SCORES - V_BUY_EXCHANGE_SCORES,
             D.REMARKS       = '竞买方级别变更形象值失效'
       WHERE D.ID = RESULT_ROW.ID;
      /* 当笔够扣情况，形象值统计变量设为0 */
      V_BUY_EXCHANGE_SCORES := 0;
    
      /* 当笔不够扣情况 */
    ELSIF RESULT_ROW.USABLE_SCORES < V_BUY_EXCHANGE_SCORES AND V_BUY_EXCHANGE_SCORES > 0 THEN
      /* 更改当笔形象值流水为过期 */
      UPDATE USER_LEVEL_DETAILS D
         SET D.STATUS        = 2,
             D.UPDATED_AT    = SYSDATE,
             D.USABLE_SCORES = D.USABLE_SCORES - RESULT_ROW.USABLE_SCORES,
             D.REMARKS       = '竞买方级别变更形象值失效'
       WHERE D.ID = RESULT_ROW.ID;
      /* 当笔不够扣情况，进行梯次从每笔里面扣除，扣满为止*/
      V_BUY_EXCHANGE_SCORES := V_BUY_EXCHANGE_SCORES - RESULT_ROW.USABLE_SCORES;
    
      /* 当笔与需扣相等情况 */
    ELSIF RESULT_ROW.USABLE_SCORES = V_BUY_EXCHANGE_SCORES AND V_BUY_EXCHANGE_SCORES > 0 THEN
      /* 更改当笔形象值流水为过期 */
      UPDATE USER_LEVEL_DETAILS D
         SET D.STATUS        = 2,
             D.UPDATED_AT    = SYSDATE,
             D.USABLE_SCORES = D.USABLE_SCORES - RESULT_ROW.USABLE_SCORES,
             D.REMARKS       = '竞买方级别变更形象值失效'
       WHERE D.ID = RESULT_ROW.ID;
      /* 当笔够扣情况，形象值统计变量设为0 */
      V_BUY_EXCHANGE_SCORES := 0;
    
    END IF;
    /* 退出循环 */
    IF V_BUY_EXCHANGE_SCORES <= 0 THEN
      EXIT;
    END IF;
  END LOOP;
END P_VALUES_BUYER_EXCHANGE;

 
/

-- ----------------------------
-- Procedure structure for P_VALUES_SELLER_EXCHANGE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."P_VALUES_SELLER_EXCHANGE"(P_USER_ID         IN NUMBER, --用户id
                                                     P_EXCHANGE_SCORES IN NUMBER --形象值
                                                     ) IS
  /*
        作者： Dwen
        日期： 2014-01-24
        描述： 委托方级别变更时，每笔最先过期形象值，进行过期处理
        1、查询所有委托方可用形象值流水，最快过期的放在最前面
        2、一笔笔流水进行扣，扣到与变更级别形象值相等为止，如果最后一笔没扣完，
        更新该笔流水中可用形象值。
  */
  V_SELL_EXCHANGE_SCORES NUMBER := 0; --形象值统计变量

  /* 按最快过期形象值，查询当前用户所有竞买方可用形象值流水*/
  CURSOR C_USER_VALUES_SELLER IS
    SELECT D.ID, D.USER_ID, D.SCORES, D.USABLE_SCORES
      FROM USER_LEVEL_DETAILS D
     WHERE D.DIRECTION = '0'
       AND D.STATUS = '1'
       AND D.USER_TYPE = '1'
       AND D.EXPIRED_AT > SYSDATE
       AND D.USER_ID = P_USER_ID
     ORDER BY D.EXPIRED_AT, D.ID;
BEGIN
  V_SELL_EXCHANGE_SCORES := P_EXCHANGE_SCORES;
  /* 循环扣除形象值 */
  FOR RESULT_ROW IN C_USER_VALUES_SELLER LOOP
    /* 当笔够扣情况 */
    IF RESULT_ROW.USABLE_SCORES > V_SELL_EXCHANGE_SCORES AND V_SELL_EXCHANGE_SCORES > 0 THEN
      /* 更改当笔可用形象值余额 */
      UPDATE USER_LEVEL_DETAILS D
         SET D.UPDATED_AT    = SYSDATE,
             D.USABLE_SCORES = D.USABLE_SCORES - V_SELL_EXCHANGE_SCORES,
             D.REMARKS       = '委托方级别变更形象值失效'
       WHERE D.ID = RESULT_ROW.ID;
      /* 当笔够扣情况，形象值统计变量设为0 */
      V_SELL_EXCHANGE_SCORES := 0;
      /* 当笔不够扣情况 */
    ELSIF RESULT_ROW.USABLE_SCORES < V_SELL_EXCHANGE_SCORES AND V_SELL_EXCHANGE_SCORES > 0 THEN
      /* 更改当笔形象值流水为过期 */
      UPDATE USER_LEVEL_DETAILS D
         SET D.STATUS        = 2,
             D.UPDATED_AT    = SYSDATE,
             D.USABLE_SCORES = D.USABLE_SCORES - RESULT_ROW.USABLE_SCORES,
             D.REMARKS       = '委托方级别变更形象值失效'
       WHERE D.ID = RESULT_ROW.ID;
      /* 当笔不够扣情况，进行梯次从每笔里面扣除，扣满为止*/
      V_SELL_EXCHANGE_SCORES := V_SELL_EXCHANGE_SCORES - RESULT_ROW.USABLE_SCORES;
      /* 当笔与需扣相等情况 */
    ELSIF RESULT_ROW.USABLE_SCORES = V_SELL_EXCHANGE_SCORES AND V_SELL_EXCHANGE_SCORES > 0 THEN
      /* 更改当笔形象值流水为过期 */
      UPDATE USER_LEVEL_DETAILS D
         SET D.STATUS        = 2,
             D.UPDATED_AT    = SYSDATE,
             D.USABLE_SCORES = D.USABLE_SCORES - RESULT_ROW.USABLE_SCORES,
             D.REMARKS       = '委托方级别变更形象值失效'
       WHERE D.ID = RESULT_ROW.ID;
      /* 当笔够扣情况，形象值统计变量设为0 */
      V_SELL_EXCHANGE_SCORES := 0;
    END IF;
    /* 退出循环 */
    IF V_SELL_EXCHANGE_SCORES <= 0 THEN
      EXIT;
    END IF;
  END LOOP;
END P_VALUES_SELLER_EXCHANGE;

 
/

-- ----------------------------
-- Procedure structure for QIANYI_COMEBACK_TRUST
-- ----------------------------
CREATE OR REPLACE procedure "ZHAO"."QIANYI_COMEBACK_TRUST"  as
   cursor comback_cur is
     select * from user_refunds ur
     where ur.settlement_status = 1 and ur.status = 9 and ur.comeback_settlement_id >0;
  v_end_price number(16,2);
begin
   for comback_result in comback_cur loop

     select end_price
     into v_end_price
     from auctions au
     where au.id = comback_result.auction_id;

     insert into  comeback_trust_charge(id,
       user_id,
       user_name,
       user_refunds_ids,
       payment_price,
       created_at,
       status,
       remarks,
       end_price)
     values(
       comeback_trust_charge_seq.nextval,
       comback_result.user_id,
       comback_result.user_name,
       comback_result.id,
       comback_result.amount,
       sysdate,
       2,
       '结算后退货，追回委托款 2012-06-18 数据迁移。',
       v_end_price
     ) ;
   end loop;

end QIANYI_COMEBACK_TRUST;


 
/

-- ----------------------------
-- Procedure structure for SINA_COLLECTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ZHAO"."SINA_COLLECTION" as
begin
  /*
  新浪推送数据
  作者:马磊
  */
  update auction_collection a
     set (a.is_end, a.end_price, a.end_date) = (select
     decode(b.status, '3', '1', '0') as is_end,
     d.max_price * (1 + b.buy_charge_fee / 100),
     b.end_at
  from auctions b
   left join auction_max_prices d on b.id =  d.auction_id
   where d.max_price is not null
   and a.auction_id = b.id)
  where a.is_end = '0'
 and exists(select 1
            from auctions b
            left join auction_max_prices d on b.id = d.auction_id
           where d.max_price is not null
             and a.auction_id = b.id);
  commit;
end sina_collection;


 
/

-- ----------------------------
-- Function structure for F_AUCTION_SETTLEMENT_TIME
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_AUCTION_SETTLEMENT_TIME"(settlement_status in varchar2,updated_at in timestamp, contract_id in number)
  return timestamp is
  v_status_time timestamp;
begin
  if settlement_status = '0' then
     v_status_time := updated_at;
  elsif settlement_status = '2' then
     v_status_time := updated_at;
  elsif settlement_status = '3' then
    select  sett.created_at
     into v_status_time
     from settlements  sett where sett.contract_id =  contract_id and sett.status !=3  and rownum = 1;
  elsif settlement_status = '1' then
    select  sett.f_check_date
     into v_status_time
    from settlements  sett where sett.contract_id =  contract_id and sett.status !=3  and rownum = 1;
  else
    v_status_time := updated_at;
  end if;
  return  v_status_time;
end F_AUCTION_SETTLEMENT_TIME;


 
/

-- ----------------------------
-- Function structure for F_AUCTION_STATUS
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_AUCTION_STATUS"(auctionId      in number,
                                            auction_status in varchar2)
  return varchar2 is
  v_order_status             varchar2(225);
  v_refund_settlement_status varchar2(225);
  v_refund_stock_status      varchar2(225);
  v_refund_status            varchar2(225);
  v_refund_id                number(38);
  v_return_status            varchar2(2000);

  /*
    author : chengyufen
    date : 2012-2-28
    describe : 查询拼接拍品状态 (物流模块调用)
  */
begin
  v_return_status := '';
  if auctionId is not null then
    if auction_status = '3' or auction_status = '7' then
      /**根据ID查询交易状态*/
      select uo.status st,
             uo.user_refund_id,
             ur.settlement_status,
             ur.stock_status,
             ur.status
        into v_order_status,
             v_refund_id,
             v_refund_settlement_status,
             v_refund_stock_status,
             v_refund_status
        from user_orders uo
        left join user_refunds ur on uo.user_refund_id = ur.id
       where uo.auction_id = auctionId;
   end if;

    if auction_status is not null then
      if auction_status = 0 then
        v_return_status := '未上挂';
      elsif auction_status = 1 then
        v_return_status := '预展中';
      elsif auction_status = 2 then
        v_return_status := '竞拍中';
      elsif auction_status = 4 then
        v_return_status := '撤拍';
      elsif auction_status = 5 then
        v_return_status := '已冻结';
      elsif auction_status = 6 then
        v_return_status := '流拍';
      elsif auction_status = 7 then

        if v_refund_settlement_status = 1 then
          if v_refund_stock_status = 3 then
            v_return_status := '结算后退货追回款项';
          else
            v_return_status := '结算后退货';
          end if;
        elsif v_refund_settlement_status = 0 then
          v_return_status := '结算前退货';
        end if;

      elsif auction_status = 8 then
        v_return_status := '退拍';
      elsif auction_status = 9 then
        v_return_status := '已删除';
      elsif auction_status = 10 then
        v_return_status := '未预展';
      elsif auction_status = 11 then
        v_return_status := '有理由撤拍';
      elsif auction_status = 12 then
        v_return_status := '无理由撤拍';
      elsif auction_status = 3 then
        if v_order_status = 0 then
          v_return_status := '未支付';
        elsif v_order_status = 1 then
          if v_refund_status is  null then
            v_return_status := '竞拍已支付';
          else
            if v_refund_status = '8' then
              v_return_status := '退货失败';
            end if;
          end if;
        elsif v_order_status = 2 then
          v_return_status := '不支付';
        elsif v_order_status = 3 then
          v_return_status := '已冻结';
        elsif v_order_status = 4 then
          v_return_status := '不支付';
        elsif v_order_status = 5 then
          v_return_status := '不支付';
        end if;
      end if;
    end if;
  end if;
  return v_return_status;
end f_auction_status;


 
/

-- ----------------------------
-- Function structure for F_AUCTION_STATUS_1
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_AUCTION_STATUS_1"(auctionId      in number,
                                              auction_status in varchar2)
  return varchar2 is
  v_order_status             varchar2(225);
  v_refund_settlement_status varchar2(225);
  v_refund_stock_status      varchar2(225);
  v_refund_status            varchar2(225);
  v_refund_id                number(38);
  v_return_status            varchar2(2000);

  /*
    author : chengyufen
    date : 2012-2-28
    describe : 查询拼接拍品状态 (物流模块调用)
  */
begin
  v_return_status := '';
  if auctionId is not null then
    if auction_status = '3' then
      /**根据ID查询交易状态*/
      select uo.status st,
             uo.user_refund_id,
             ur.settlement_status,
             ur.stock_status,
             ur.status
        into v_order_status,
             v_refund_id,
             v_refund_settlement_status,
             v_refund_stock_status,
             v_refund_status
        from user_orders uo, user_refunds ur
       where uo.user_refund_id = ur.id
         and uo.auction_id = auctionId;
    end if;

    if auction_status is not null then
      if auction_status = 0 then
        v_return_status := '未上挂';
      elsif auction_status = 1 then
        v_return_status := '预展中';
      elsif auction_status = 2 then
        v_return_status := '竞拍中';
      elsif auction_status = 4 then
        v_return_status := '撤拍';
      elsif auction_status = 5 then
        v_return_status := '已冻结';
      elsif auction_status = 6 then
        v_return_status := '流拍';
      elsif auction_status = 7 then

        if v_refund_settlement_status = 1 then
          if v_refund_stock_status = 3 then
            v_return_status := '结算后退货追回款项';
          else
            v_return_status := '结算后退货';
          end if;
        elsif v_refund_settlement_status = 0 then
          v_return_status := '结算前退货';
        end if;

      elsif auction_status = 8 then
        v_return_status := '退拍';
      elsif auction_status = 9 then
        v_return_status := '已删除';
      elsif auction_status = 10 then
        v_return_status := '未预展';
      elsif auction_status = 11 then
        v_return_status := '有理由撤拍';
      elsif auction_status = 12 then
        v_return_status := '无理由撤拍';
      elsif auction_status = 3 then
        if v_order_status = 0 then
          v_return_status := '未支付';
        elsif v_order_status = 1 then
          if v_refund_status = '8' then
            v_return_status := '退货失败';
          else
            v_return_status := '竞拍已支付';
          end if;
        elsif v_order_status = 2 then
          v_return_status := '不支付';
        elsif v_order_status = 3 then
          v_return_status := '已冻结';
        elsif v_order_status = 4 then
          v_return_status := '不支付';
        elsif v_order_status = 5 then
          v_return_status := '不支付';
        end if;
      end if;
    end if;
  end if;
  return v_return_status;
end f_auction_status_1;


 
/

-- ----------------------------
-- Function structure for F_AUCTION_STATUS_2
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_AUCTION_STATUS_2" (auctionId in number,auction_status in varchar2) return varchar2 is
  v_order_status             varchar2(225);
  v_refund_settlement_status varchar2(225);
  v_refund_stock_status      varchar2(225);
  v_refund_status            varchar2(225);
  v_refund_id                number(38);
  v_return_status            varchar2(2000);

 /*
    author : chengyufen
    date : 2012-2-28
    describe : 查询拼接拍品状态 (物流模块调用)
  */
begin
  v_return_status := '';
  if auctionId is not null then
     if auction_status = '3' then
       /**根据ID查询交易状态*/
      select status,user_refund_id into v_order_status,v_refund_id from user_orders where auction_id = auctionId;
     end if;
     /**根据ID查询退货状态*/
     if auction_status = '7' then
        select settlement_status, stock_status,status
          into v_refund_settlement_status, v_refund_stock_status,v_refund_status
          from user_refunds
         where auction_id = auctionId;
     end if;

    if auction_status is not null then
      if auction_status = 0 then
        v_return_status := '未上挂';
      elsif auction_status = 1 then
        v_return_status := '预展中';
      elsif auction_status = 2 then
        v_return_status := '竞拍中';
      elsif auction_status = 4 then
        v_return_status := '撤拍';
      elsif auction_status = 5 then
        v_return_status := '已冻结';
      elsif auction_status = 6 then
        v_return_status := '流拍';
     /* elsif auction_status = 7 then
        v_return_status := '已退货';*/
      elsif auction_status = 8 then
        v_return_status := '退拍';
      elsif auction_status = 9 then
        v_return_status := '已删除';
      elsif auction_status = 10 then
        v_return_status := '未预展';
      elsif auction_status = 11 then
        v_return_status := '有理由撤拍';
      elsif auction_status = 12 then
        v_return_status := '无理由撤拍';
      elsif v_order_status = 0 then
        v_return_status := '未支付';
      elsif auction_status = 3 and v_order_status = 1 then
        v_return_status := '竞拍已支付';
      elsif auction_status = 3 and v_order_status = 2 then
        v_return_status := '不支付';
      elsif v_order_status = 3 then
        v_return_status := '已冻结';
      elsif auction_status = 3 and v_order_status = 4 then
        v_return_status := '不支付';
      elsif auction_status = 3 and v_order_status = 5 then
        v_return_status := '不支付';

      elsif  v_refund_settlement_status = 1 and v_refund_status='9' and v_refund_stock_status!='3' then
        v_return_status := '结算后退货';
      elsif  v_refund_settlement_status = 0 and v_refund_status='9' then
        v_return_status := '结算前退货';
      elsif  v_refund_settlement_status=1 and v_refund_status='9' and v_refund_stock_status = 3 then
        v_return_status := '结算后退货追回款项';
      elsif  v_refund_status='8' then
        v_return_status := '退货失败';
      end if;
    end if;
  end if;
  return v_return_status;
end f_auction_status_2;


 
/

-- ----------------------------
-- Function structure for F_AUCTION_TRANS_STATUS
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_AUCTION_TRANS_STATUS" (auctionStatus in varchar2,
                                                  isPreview     in varchar2,
                                                  startAt       in date)
  return varchar2 is
  v_auction_status_name varchar2(50);
begin
  if auctionStatus = '0' then
    v_auction_status_name := '未上挂';
  elsif (auctionStatus = '1') or (auctionStatus = '2' and isPreview = '1' and
        startAt > sysdate) then
    v_auction_status_name := '预展中';
  elsif (auctionStatus = '10') or
        (auctionStatus = '2' and isPreview = '0' and startAt > sysdate) then
    v_auction_status_name := '未预展';
  elsif auctionStatus = '2' and startAt <= sysdate then
    v_auction_status_name := '竞拍中';
  elsif auctionStatus = '3' then
    v_auction_status_name := '已拍出';
  elsif auctionStatus = '4' then
    v_auction_status_name := '已撤拍';
  elsif auctionStatus = '5' then
    v_auction_status_name := '已冻结';
  elsif auctionStatus = '6' then
    v_auction_status_name := '已流拍';
  elsif auctionStatus = '7' then
    v_auction_status_name := '已退货';
  elsif auctionStatus = '8' then
    v_auction_status_name := '已退拍';
  elsif auctionStatus = '9' then
    v_auction_status_name := '已删除';
  elsif auctionStatus = '11' then
    v_auction_status_name := '有理由撤拍';
  elsif auctionStatus = '12' then
    v_auction_status_name := '无理由撤拍';
  end if;
  return v_auction_status_name;
end f_auction_trans_status;


 
/

-- ----------------------------
-- Function structure for F_AUCTION_TRANS_STATUS_KEY
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_AUCTION_TRANS_STATUS_KEY" (auctionStatus in varchar2,
                                                  isPreview     in varchar2,
                                                  startAt       in date)
  return varchar2 is
  v_auction_status  varchar2(50);
begin
  if auctionStatus = '0' then
    v_auction_status:='0';
  elsif (auctionStatus = '1') or (auctionStatus = '2' and isPreview = '1' and
        startAt > sysdate) then
    v_auction_status:='1';
  elsif (auctionStatus = '10') or
        (auctionStatus = '2' and isPreview = '0' and startAt > sysdate) then
    v_auction_status:='10';
  elsif auctionStatus = '2' and startAt <= sysdate then
    v_auction_status:='2';
  elsif auctionStatus = '3' then
     v_auction_status:='3';
  elsif auctionStatus = '4' then
     v_auction_status:='4';
  elsif auctionStatus = '5' then
     v_auction_status:='5';
  elsif auctionStatus = '6' then
     v_auction_status:='6';
  elsif auctionStatus = '7' then
     v_auction_status:='7';
  elsif auctionStatus = '8' then
     v_auction_status:='8';
  elsif auctionStatus = '9' then
     v_auction_status:='9';
  elsif auctionStatus = '11' then
     v_auction_status:='11';
  elsif auctionStatus = '12' then
     v_auction_status:='12';
  end if;
  return v_auction_status;
end f_auction_trans_status_key;


 
/

-- ----------------------------
-- Function structure for F_CONTRACT_OP_ID
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_CONTRACT_OP_ID"(op_id      in number,
                                            opType     in varchar2,
                                            contractId in number)
  return number is
  v_op_id number;
begin
  if op_id = '' or op_id is null then
    if opType = 'collate' then
      select assigned_to_id
        into v_op_id
        from contract_assigns
       where contract_id = contractId
         and status = '1'
         and assign_type = '2';
    elsif opType = 'draw' then
      select assigned_to_id
        into v_op_id
        from contract_assigns
       where contract_id = contractId
         and status = '1'
         and assign_type = '4';
    elsif opType = 'audit' then
      select assigned_to_id
        into v_op_id
        from contract_assigns
       where contract_id = contractId
         and status = '1'
         and assign_type = '6';
    end if;
  else
    v_op_id := op_id;
  end if;
  return v_op_id;
end F_CONTRACT_OP_ID;


 
/

-- ----------------------------
-- Function structure for F_CONTRACT_OP_NAME
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_CONTRACT_OP_NAME"(op_name      in varchar2,
                                            opType     in varchar2,
                                            contractId in number)
  return varchar2 is
  v_op_name varchar2(50);
begin
  if op_name = '' or op_name is null then
    if opType = 'collate' then
      select assigned_to_name
        into v_op_name
        from contract_assigns
       where contract_id = contractId
         and status = '1'
         and assign_type = '2';
    elsif opType = 'draw' then
      select assigned_to_name
        into v_op_name
        from contract_assigns
       where contract_id = contractId
         and status = '1'
         and assign_type = '4';
    elsif opType = 'audit' then
      select assigned_to_name
        into v_op_name
        from contract_assigns
       where contract_id = contractId
         and status = '1'
         and assign_type = '6';
    end if;
  else
    v_op_name := op_name;
  end if;
  return v_op_name;
end F_CONTRACT_OP_NAME;


 
/

-- ----------------------------
-- Function structure for F_CONTRACT_STATUS
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_CONTRACT_STATUS"(contractStatus in varchar2,type in varchar2)  return varchar2 is
  v_auction_status_name varchar2(50);
begin
 if type = 'all' then
    if contractStatus = '0' then
      v_auction_status_name := '交付中';
    elsif contractStatus = '1' then
      v_auction_status_name := '整理分配中';
    elsif contractStatus = '2' then
      v_auction_status_name := '整理中';
    elsif contractStatus = '3' then
      v_auction_status_name := '整理检查中';
     elsif contractStatus = '4' then
      v_auction_status_name := '制图交接中';
    elsif contractStatus = '5' then
      v_auction_status_name := '制图分配中';
    elsif contractStatus = '6' then
      v_auction_status_name := '制图中';
    elsif contractStatus = '7' then
      v_auction_status_name := '制图检查中';
    elsif contractStatus = '8' then
      v_auction_status_name := '审核交接中';
     elsif contractStatus = '9' then
      v_auction_status_name := '审核分配中';
    elsif contractStatus = '10' then
      v_auction_status_name := '审核中';
    elsif contractStatus = '11' then
      v_auction_status_name := '审核完毕';
    elsif contractStatus = '12' then
      v_auction_status_name := '申请入库完毕';
    elsif contractStatus = '13' then
      v_auction_status_name := '上传完毕';
     elsif contractStatus = '14' then
      v_auction_status_name := '结算完毕';
    end if;
 else
    if contractStatus = '0' then
      v_auction_status_name := '交付中';
    elsif contractStatus = '1' then
      v_auction_status_name := '整理中';
    elsif contractStatus = '2' then
      v_auction_status_name := '整理中';
    elsif contractStatus = '3' then
      v_auction_status_name := '整理中';
     elsif contractStatus = '4' then
      v_auction_status_name := '整理完毕';
    elsif contractStatus = '5' then
      v_auction_status_name := '制图中';
    elsif contractStatus = '6' then
      v_auction_status_name := '制图中';
    elsif contractStatus = '7' then
      v_auction_status_name := '制图中';
    elsif contractStatus = '8' then
      v_auction_status_name := '制图完毕';
     elsif contractStatus = '9' then
      v_auction_status_name := '审核中';
    elsif contractStatus = '10' then
      v_auction_status_name := '审核中';
    elsif contractStatus = '11' then
      v_auction_status_name := '审核完毕';
    elsif contractStatus = '12' then
      v_auction_status_name := '申请入库完毕';
    elsif contractStatus = '13' then
      v_auction_status_name := '上传完毕';
     elsif contractStatus = '14' then
      v_auction_status_name := '结算完毕';
    end if;
 end if;
 return v_auction_status_name;
end F_CONTRACT_STATUS;


 
/

-- ----------------------------
-- Function structure for F_CONTRACT_STATUS_TIME
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_CONTRACT_STATUS_TIME"(contractStatus in varchar2,
                                                  contractId     in number)
  return timestamp is
  v_status_time timestamp;
begin
  if contractStatus = '0' then
    select created_at
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '1' then
    select created_at
      into v_status_time
      from contract_assigns
     where contract_id = contractId
       and status = '1'
       and assign_type = '1';  -- 整理交接
  elsif contractStatus = '2' then
     select created_at
      into v_status_time
      from contract_assigns
     where contract_id = contractId
       and status = '1'
       and assign_type = '2';  -- 整理分配
  elsif contractStatus = '3' then
     select collate_date
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '4' then
    select collate_check_date
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '5' then
    select created_at
      into v_status_time
      from contract_assigns
     where contract_id = contractId
       and status = '1'
       and assign_type = '3';  -- 整理制图交接
  elsif contractStatus = '6' then
    select created_at
      into v_status_time
      from contract_assigns
     where contract_id = contractId
       and status = '1'
       and assign_type = '4';  -- 制图分配
  elsif contractStatus = '7' then
    select draw_date
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '8' then
    select draw_check_date
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '9' then
    select created_at
      into v_status_time
      from contract_assigns
     where contract_id = contractId
       and status = '1'
       and assign_type = '5';  -- 制图审核交接
  elsif contractStatus = '10' then
    select created_at
      into v_status_time
      from contract_assigns
     where contract_id = contractId
       and status = '1'
       and assign_type = '6';  -- 审核分配
  elsif contractStatus = '11' then
   select audit_date
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '12' then
    select in_storage_at
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '13' then
   select upload_date
      into v_status_time
      from contract_details
     where contract_id = contractId;
  elsif contractStatus = '14' then
   select updated_at
      into v_status_time
      from contract_details
     where contract_id = contractId;
  else
    select updated_at
      into v_status_time
      from contract_details
     where contract_id = contractId;
  end if;
  return v_status_time;
end F_CONTRACT_STATUS_TIME;


 
/

-- ----------------------------
-- Function structure for F_GET_CATEGORY_PATH
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_GET_CATEGORY_PATH"
(
	P_ID              IN NUMBER,
	P_FIRST_PARENT_ID OUT NUMBER
) RETURN VARCHAR2 IS
	V_RESULT      VARCHAR2(255) := '';
	V_ID          NUMBER;
	V_PARENT_ID   NUMBER;
	V_NAME_PINYIN VARCHAR2(255);
	/*
       作者:李征
       描述:根据类别id,获取完整类别路径 如:157/180/185
  */
BEGIN
	P_FIRST_PARENT_ID := -1;

	SELECT C.ID, C.PARENT_ID, C.NAME_PINYIN
		INTO V_ID, V_PARENT_ID, V_NAME_PINYIN
		FROM AUCTION_CATEGORIES C
	 WHERE C.ID = p_id;

	V_RESULT := V_ID;

	IF V_PARENT_ID = 0 THEN
		P_FIRST_PARENT_ID := V_ID;
		RETURN V_RESULT;
	ELSIF V_PARENT_ID != 0 THEN
		V_RESULT := F_GET_CATEGORY_PATH(V_PARENT_ID, P_FIRST_PARENT_ID) || '/' ||
								V_RESULT;
	END IF;
	RETURN(V_RESULT);
END F_GET_CATEGORY_PATH;


 
/

-- ----------------------------
-- Function structure for F_GET_CATEGORY_PINYIN_PATH
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_GET_CATEGORY_PINYIN_PATH"(P_ID IN NUMBER)
	RETURN VARCHAR2 IS
	V_RESULT      VARCHAR2(255) := '';
	V_ID          NUMBER;
	V_PARENT_ID   NUMBER;
	V_NAME_PINYIN VARCHAR2(255);
	/*
     作者:李征
     描述:根据类别id,获取类别的拼音路径,如:youpiao-zhaongguoyoupiao-minguo
  */
BEGIN
	SELECT C.ID, C.PARENT_ID, C.NAME_PINYIN
		INTO V_ID, V_PARENT_ID, V_NAME_PINYIN
		FROM AUCTION_CATEGORIES C
	 WHERE C.ID = p_id;

	V_RESULT := V_NAME_PINYIN;

	IF V_PARENT_ID = 0 THEN
		RETURN V_RESULT;
	ELSIF V_PARENT_ID != 0 THEN
		V_RESULT := F_GET_CATEGORY_PINYIN_PATH(V_PARENT_ID) || '-' || V_RESULT;
	END IF;
	RETURN(V_RESULT);
END F_GET_CATEGORY_PINYIN_PATH;


 
/

-- ----------------------------
-- Function structure for F_GET_DEPOSIT_SCORE_SOURCE_ID
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_GET_DEPOSIT_SCORE_SOURCE_ID"(P_SCORE_TYPE NUMBER,P_SCORE_STATUS NUMBER,P_USER_ID NUMBER,P_EFF_DATE IN DATE)
  return varchar2 is

  /*
     ????:ZHANGYI
     ????:????????id??????????(yyyy-mm-dd)????????????source_id?? ????????
  */

  V_RESULT             VARCHAR2(4000) := '';
  V_BUY_RESULT         VARCHAR2(4000) := '';
  V_SEND_RESULT        VARCHAR2(4000) := '';
  V_B_SEND_RESULT      VARCHAR2(4000) := '';
  --转换积分
  cursor ID_CUR is
  SELECT DISTINCT SUM(S.USEABLE_SCORES) AS SUM_USEABLE_SCORES
    FROM SCORES S
   WHERE S.SCORE_TYPE = P_SCORE_TYPE
     AND S.SCORE_STATUS = P_SCORE_STATUS
     AND S.USER_ID=P_USER_ID
     AND S.SCORE_SOURCE=2
     AND trunc(S.EFFECTED_AT,'dd')=trunc(P_EFF_DATE,'dd');
  --交易积分
  cursor BUY_CUR is
  SELECT DISTINCT LD.LOGISTIC_ID
 FROM SCORES S,LOGISTIC_DETAILS LD,USER_ORDERS UO
   WHERE S.SCORE_TYPE = 0
     AND S.SOURCE_ID=UO.ID
     AND UO.LOGISTIC_DETAIL_ID=LD.ID
     AND S.SCORE_STATUS = P_SCORE_STATUS
     AND S.USER_ID=P_USER_ID
     AND S.SCORE_SOURCE=0
     AND trunc(S.EFFECTED_AT,'dd')=trunc(P_EFF_DATE,'dd');
  --前台赠送积分
  cursor SEND_CUR is
  SELECT DISTINCT SUM(S.USEABLE_SCORES) AS SUM_USEABLE_SCORES
    FROM SCORES S
   WHERE S.SCORE_TYPE = P_SCORE_TYPE
     AND S.SCORE_STATUS = P_SCORE_STATUS
     AND S.USER_ID=P_USER_ID
     AND S.SCORE_SOURCE=4
     AND trunc(S.EFFECTED_AT,'dd')=trunc(P_EFF_DATE,'dd');
  --后台赠送积分
  cursor B_SEND_CUR is
  SELECT DISTINCT SUM(S.USEABLE_SCORES) AS SUM_USEABLE_SCORES
    FROM SCORES S
   WHERE S.SCORE_TYPE = P_SCORE_TYPE
     AND S.SCORE_STATUS = P_SCORE_STATUS
     AND S.USER_ID=P_USER_ID
     AND S.SCORE_SOURCE=1
     AND trunc(S.EFFECTED_AT,'dd')=trunc(P_EFF_DATE,'dd');
begin

  V_RESULT := '';
  V_BUY_RESULT := '';
  V_SEND_RESULT := '';
  V_B_SEND_RESULT := '';
  for ID_CUR_RESULT in ID_CUR loop
      if  ID_CUR_RESULT.SUM_USEABLE_SCORES is not null then
          V_RESULT := V_RESULT || ',' ||
      end if;
  end loop;

  for BUY_CUR_RESULT in BUY_CUR loop
      if  BUY_CUR_RESULT.LOGISTIC_ID is not null then
          V_BUY_RESULT := V_BUY_RESULT || ',' ||
      end if;
  end loop;

  for SEND_CUR_RESULT in SEND_CUR loop
      if  SEND_CUR_RESULT.SUM_USEABLE_SCORES is not null then
          V_SEND_RESULT := V_SEND_RESULT || ',' ||
      end if;
  end loop;

  for B_SEND_RESULT in B_SEND_CUR loop
      if  B_SEND_RESULT.SUM_USEABLE_SCORES is not null then
          V_B_SEND_RESULT := V_B_SEND_RESULT || ',' ||
      end if;
  end loop;

  if  V_RESULT is not null then
    if length(V_RESULT)>0 then
       V_RESULT :=substr(V_RESULT,2,length(V_RESULT));
    end if;
  end if;

  if  V_BUY_RESULT is not null then
    if length(V_BUY_RESULT)>0 then
       V_BUY_RESULT :=substr(V_BUY_RESULT,2,length(V_BUY_RESULT));
    end if;
  end if;

  if  V_SEND_RESULT is not null then
    if length(V_SEND_RESULT)>0 then
       V_SEND_RESULT :=substr(V_SEND_RESULT,2,length(V_SEND_RESULT));
    end if;
  end if;

  if  V_B_SEND_RESULT is not null then
    if length(V_B_SEND_RESULT)>0 then
       V_B_SEND_RESULT :=substr(V_B_SEND_RESULT,2,length(V_B_SEND_RESULT));
    end if;
  end if;

   V_RESULT := V_RESULT || ':' || V_BUY_RESULT || ':' || V_SEND_RESULT || ':' || V_B_SEND_RESULT;

  return(V_RESULT);
end F_GET_DEPOSIT_SCORE_SOURCE_ID;


 
/

-- ----------------------------
-- Function structure for F_GET_PARENT_CATEGORY
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_GET_PARENT_CATEGORY"(P_ID IN NUMBER)
  RETURN VARCHAR2 IS
  V_RESULT      VARCHAR2(255) := '';
  V_ID          NUMBER;
  V_PARENT_ID   NUMBER;
  V_NAME_PINYIN VARCHAR2(255);
BEGIN
  SELECT C.ID, C.PARENT_ID, C.NAME_PINYIN
    INTO V_ID, V_PARENT_ID, V_NAME_PINYIN
    FROM AUCTION_CATEGORIES C
   WHERE C.ID = p_id;

  V_RESULT := V_NAME_PINYIN;

  IF V_PARENT_ID = 0 THEN
    RETURN V_RESULT;
  ELSIF V_PARENT_ID != 0 THEN
    V_RESULT := F_GET_PARENT_CATEGORY(V_PARENT_ID)||'-'||V_RESULT;
  END IF;
  RETURN(V_RESULT);
END F_GET_PARENT_CATEGORY;


 
/

-- ----------------------------
-- Function structure for F_IP_TRANSLATION
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_IP_TRANSLATION"(ip in varchar2) return number is
  ip_tr number(38);
begin
  ip_tr := regexp_substr(trim(ip), '[^.]+', 1, 1) * 256 * 256 * 256 +
           regexp_substr(trim(ip), '[^.]+', 1, 2) * 256 * 256 +
           regexp_substr(trim(ip), '[^.]+', 1, 3) * 256 +
           regexp_substr(trim(ip), '[^.]+', 1, 4);
  if ip_tr is not null then
    return(ip_tr);
  end if;
end F_IP_TRANSLATION;
/

-- ----------------------------
-- Function structure for F_IP_TRANSLATION_AREA
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_IP_TRANSLATION_AREA"(ip in varchar2)
  return varchar2 is
/*  把输入的ip转换成省市
马磊
*/  ip_province varchar2(200);
  ip_city     varchar2(200);
  ip_area     varchar2(200);
begin
  select aa.province, aa.city
    into ip_province, ip_city
    from (select decode(a.province, NULL, a.area1, a.province) province,
                 decode(a.city, NULL, a.area1, a.city) city,
                 f_ip_translation(ip) / a.ip_start_num rk
            from ip a
           where f_ip_translation(ip) >= a.ip_start_num
             and f_ip_translation(ip) <= a.ip_end_num
           order by rk) aa
   where rownum = 1;
  ip_area := ip_province || ',' || ip_city;

  if ip_area is not null then
    return(ip_area);
  end if;
end F_IP_TRANSLATION_area;
/

-- ----------------------------
-- Function structure for F_LOGISTIC_KEEP_PRICE_PERCENT
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_LOGISTIC_KEEP_PRICE_PERCENT"(logisticTypeId in number)
  return varchar2 is
  /* 物流发货方式的保价率 @author wei.tao */
  v_keep_price_percent varchar2(2000);

  cursor percent_cur is
    select keep_price_percent, min_keep_price, max_keep_price
      from logistic_type_fees
     where logistic_type_id = logisticTypeId;

begin
  v_keep_price_percent := ' ';

  for percent_cur_result in percent_cur loop

    if v_keep_price_percent = ' ' then
      v_keep_price_percent := percent_cur_result.min_keep_price || '-' ||
                              percent_cur_result.max_keep_price || ',' ||
                              to_char(percent_cur_result.keep_price_percent * 10,
                                      'FM9999990.0099') || '';

    else
      v_keep_price_percent := v_keep_price_percent || '<br/>' ||
                              percent_cur_result.min_keep_price || '-' ||
                              percent_cur_result.max_keep_price || ',' ||
                              to_char(percent_cur_result.keep_price_percent * 10,
                                      'FM9999990.0099') || '';

    end if;
  end loop;

  return v_keep_price_percent;
end F_LOGISTIC_KEEP_PRICE_PERCENT;


 
/

-- ----------------------------
-- Function structure for F_MESSAGE_BOX_ATTACHMENT
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_MESSAGE_BOX_ATTACHMENT"(messageId in number)
  return varchar2 is
  /* 站内信收/发件箱附件 @author wei.tao */
  v_message_attachment varchar2(2000);

  cursor attachment_cur is
    select file_path, url from attachments where message_id = messageId;

begin
  v_message_attachment := ' ';

  for attachment_cur_result in attachment_cur loop
    if v_message_attachment = ' ' then
      if attachment_cur_result.file_path is not null then
        v_message_attachment := attachment_cur_result.url ||
                                attachment_cur_result.file_path || ';';
      else
        v_message_attachment := ' ' || ';';
      end if;
    else
      v_message_attachment := v_message_attachment ||
                              attachment_cur_result.url ||
                              attachment_cur_result.file_path || ';';
    end if;

  end loop;

  return v_message_attachment;
end F_MESSAGE_BOX_ATTACHMENT;


 
/

-- ----------------------------
-- Function structure for F_MOBILE_SEND_COUNT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_MOBILE_SEND_COUNT" ( mobileId   in number)
  return varchar2 is
    /* 返回发送成功短信的数量 @author wei.tao*/
  v_failure_count number;
begin
  v_failure_count := 0;
  select count(1)
    into v_failure_count
    from sms s
   where  s.sent_at = (select sent_at from sms where id = mobileId);
  return v_failure_count;
end f_mobile_send_count;


 
/

-- ----------------------------
-- Function structure for F_MOBILE_SEND_FAILURE_COUNT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_MOBILE_SEND_FAILURE_COUNT" ( mobileId   in number)
  return varchar2 is
   /* 返回发送失败短信的数量 @author wei.tao*/
  v_failure_count number;
begin
  v_failure_count := 0;
  select count(1)
    into v_failure_count
    from sms s
   where s.status = '3'
     and s.sent_at = (select sent_at from sms where id = mobileId);
  return v_failure_count;
end f_mobile_send_failure_count;


 
/

-- ----------------------------
-- Function structure for F_MOBILE_SEND_STATUS
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_MOBILE_SEND_STATUS" (mobileId in number)
  return varchar2 is
   /*手机发送时只要有一个发送失败就返回发送失败的状态 @author wei.tao*/
  v_SEND_STATUS      varchar2(2000); --函数返回的状态
  v_SEND_STATUS_BYID varchar2(2000); --某一条短信的状态
  cursor status_cur is
    select id, status
      from sms
     where sent_at = (select sent_at from sms where id = mobileId);
begin
  select status into v_SEND_STATUS_BYID from sms where id = mobileId;
  v_SEND_STATUS := v_SEND_STATUS_BYID;
  for status_result in status_cur loop
    if status_result.status = '3' then
      v_SEND_STATUS := '3';
      exit;
    end if;
  end loop;
  return v_SEND_STATUS;
end F_MOBILE_SEND_STATUS;


 
/

-- ----------------------------
-- Function structure for F_RECEIVE_MESSAGE
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_RECEIVE_MESSAGE"(vartype in varchar2)
  return t_table
  pipelined as

  v_obj_table obj_tab;
  cursor mycur(to_string varchar2) is
    select msg.name,
           aa.id,
           aa.from_id,
           aa.true_name,
           aa.subject,
           aa.parent_id,
           aa.content,
           aa.TRANSACT_STATUS,
           aa.created_at,
           aa.TRANSACT_DATE,
           aa.msg_category_id,
           aa.originalName
      from (select mes.id,
                   mes.from_id,
                   us.true_name,
                   mes.subject,
                   mes.parent_id,
                   mes.content,
                   mes.TRANSACT_STATUS,
                   mes.created_at,
                   mes.TRANSACT_DATE,
                   mes.msg_category_id,
                   F_MESSAGE_BOX_ATTACHMENT(mes.id) as originalName
              from messages mes,users us
             where mes.from_id = us.id
               and mes.msg_type = '0'
               and mes.is_receive_del = 0
               and mes.TRANSACT_STATUS = 0
               and mes.id in
                   (select *
                      from (select regexp_substr(to_string, '[^,]+', 1, rownum) n
                              from dual
                            connect by rownum < 10000)
                     where n is not null)) aa
      left join msg_categories msg on msg.id = aa.msg_category_id;

BEGIN

  for CUR_TEMP_TABLE in mycur(vartype) loop

    v_obj_table := obj_tab (CUR_TEMP_TABLE.name,
                             CUR_TEMP_TABLE.id,
                             CUR_TEMP_TABLE.from_id,
                             CUR_TEMP_TABLE.true_name,
                             CUR_TEMP_TABLE.subject,
                             CUR_TEMP_TABLE.parent_id,
                             CUR_TEMP_TABLE.content,
                             CUR_TEMP_TABLE.TRANSACT_STATUS,
                             CUR_TEMP_TABLE.created_at,
                             CUR_TEMP_TABLE.TRANSACT_DATE,
                             CUR_TEMP_TABLE.msg_category_id,
                             CUR_TEMP_TABLE.originalName);

    pipe row(v_obj_table);
  end loop;

  RETURN;
END f_receive_message;


 
/

-- ----------------------------
-- Function structure for F_RECEIVE_MESSAGE_FIND
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_RECEIVE_MESSAGE_FIND"(p_start in number,
                                                  p_end   in number)
  return varchar2 as
  Result varchar2(1000);

  CURSOR sort_message is
    select /*+ FIRST_ROWS */ id
      from (select rank() over(order by mes.id desc) num, mes.id
              from messages mes, users us
             where mes.from_id = us.id
               and mes.msg_type = '0'
               and mes.is_receive_del = 0
               and mes.TRANSACT_STATUS = 0) bb
     where bb.num > p_start
       and bb.num <= p_end;

BEGIN

  FOR RESULT_ROW in sort_message loop
    Result := Result || RESULT_ROW.id || ',';
  END loop;
  Result := SUBSTR(Result, 0, LENGTH(Result) - 1);
  RETURN (Result);
END f_receive_message_find;


 
/

-- ----------------------------
-- Function structure for F_SCORE_BUY_TIMES_LIUJING
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_SCORE_BUY_TIMES_LIUJING"(auctionId in number, /*拍品ID*/
                                              userId   in number,  /*竞买方编号*/
                                              startAt in date,   /*开拍时间*/
                                              endAt in date    /*结标时间*/
                                              )
 /*竞买积分倍数计算 （程序未用，平常维护用） @author ：liujing*/
 return number is
  V_SCORE_TIMES number;
begin

        SELECT MAX(SCOPE_TIMES)
            INTO V_SCORE_TIMES
            FROM (/*SELECT AU.BUY_SCORE_TIMES SCOPE_TIMES
                    FROM AUCTIONS AU
                   WHERE AU.ID = auctionId
                  UNION ALL*/
                  SELECT SS.SCORE_TIMES SCOPE_TIMES
                    FROM SCORE_SETTINGS SS
                   WHERE SS.SCORE_TYPE = '0'
                     AND SS.RESOURCE_TYPE = 'AUCTION_SPECIAL_TOPICS'
                     AND SS.RESOURCE_ID =  (select A.AUCTION_SPECIAL_TOPIC_ID
                                       from AUCTIONS A
                                     where A.ID = auctionId)
                     AND SS.USER_LEVEL_ID =
                         (SELECT US.BUY_LEVEL
                            FROM USERS US
                           WHERE ID = userId)
                  UNION ALL
                  SELECT SST.SCORE_TIMES
                    FROM SCORE_SETTINGS SST
                   WHERE SST.SCORE_TYPE = '0'
                     AND SST.RESOURCE_TYPE = 'SCORE_TIME_SETTINGS'
                     AND SST.RESOURCE_ID IN
                         (SELECT STS.ID
                            FROM SCORE_TIME_SETTINGS STS
                           WHERE STS.START_AT <= endAt
                             AND STS.END_AT >= startAt)
    								 AND SST.USER_LEVEL_ID =
												 (SELECT US.BUY_LEVEL
														FROM USERS US
													 WHERE ID = userId));

  return V_SCORE_TIMES;
end F_SCORE_BUY_TIMES_LIUJING;


 
/

-- ----------------------------
-- Function structure for F_SCORE_SELL_TIMES_LIUJING
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_SCORE_SELL_TIMES_LIUJING"(auctionId in number, /*拍品ID*/
                                              userId   in number,  /*委托方编号*/
                                              contractId in number /*合同编号*/
                                              )
   /*委托积分倍数计算 （程序未用，平常维护用） @author ：liujing*/
  return number is
  V_SCORE_TIMES number;
begin

      SELECT MAX(SCOPE_TIMES)
          INTO V_SCORE_TIMES
          FROM (/*SELECT AU.SEll_SCORE_TIMES SCOPE_TIMES --拍品积分倍数
                  FROM AUCTIONS AU
                 WHERE AU.ID = auctionId
                UNION ALL*/
                SELECT SS.SCORE_TIMES SCOPE_TIMES
                  FROM SCORE_SETTINGS SS
                 WHERE SS.SCORE_TYPE = '1' --1代表委托，0代表竞买
                   AND SS.RESOURCE_TYPE = 'AUCTION_SPECIAL_TOPICS' --专场积分倍数
                   AND SS.RESOURCE_ID =
                       (select A.AUCTION_SPECIAL_TOPIC_ID
                          from AUCTIONS A
                         where A.ID = auctionId)
                   AND SS.USER_LEVEL_ID =
                       (SELECT US.SELL_LEVEL
                          FROM USERS US
                         WHERE ID = userId)
                UNION ALL
                SELECT SST.SCORE_TIMES
                  FROM SCORE_SETTINGS SST
                 WHERE SST.SCORE_TYPE = '1' --1代表委托，0代表竞买
                   AND SST.RESOURCE_TYPE = 'SCORE_TIME_SETTINGS' --时间积分倍数
                   AND SST.RESOURCE_ID IN
                       (SELECT STS.ID
                          FROM SCORE_TIME_SETTINGS STS
                         WHERE trunc(STS.START_AT, 'dd') <=
                               (select trunc(con.sign_date, 'dd')
                                  from contracts con
                                 where con.id = contractId)
                           AND trunc(STS.END_AT, 'dd') >=
                               (select trunc(con.sign_date, 'dd')
                                  from contracts con
                                 where con.id = contractId))
                   AND SST.USER_LEVEL_ID =
                       (SELECT US.SELL_LEVEL
                          FROM USERS US
                         WHERE ID = userId));

  return V_SCORE_TIMES;
end F_SCORE_SELL_TIMES_LIUJING;


 
/

-- ----------------------------
-- Function structure for F_SETTLEMENT_AUCTION_STATUS
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_SETTLEMENT_AUCTION_STATUS"(auctionStatus in varchar2,
                                                       orderStatus   in varchar2)
  return varchar2 is
  v_status varchar2(2000);
begin
  if auctionStatus = '0' then
    v_status := '未上挂';
  elsif auctionStatus = '10' then
    v_status := '未预展';
  elsif auctionStatus = '1' then
    v_status := '预展中';
  elsif auctionStatus = '2' then
    v_status := '竞拍中';
  elsif auctionStatus = '3' then
    if orderStatus = '0' then
      v_status := '未支付';
    elsif orderStatus = '1' then
      v_status := '已支付';
    elsif orderStatus = '2' then
      v_status := '不支付';
    elsif orderStatus = '4' then
      v_status := '有理由不支付';
    elsif orderStatus = '5' then
      v_status := '无理由不支付';
    else
      v_status := '已拍出';
    end if;
  elsif auctionStatus = '7' then
    v_status := '已退货';
  elsif auctionStatus = '8' then
    v_status := '已退拍';
  elsif auctionStatus = '6' then
    v_status := '已流拍';
  elsif auctionStatus = '11' then
    v_status := '有理由撤拍';
  elsif auctionStatus = '12' then
    v_status := '无理由撤拍';
  end if;

  return v_status;
end F_SETTLEMENT_AUCTION_STATUS;


 
/

-- ----------------------------
-- Function structure for F_SETTLEMENT_COUNT
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_SETTLEMENT_COUNT"(v_settlement_id      in number,
                                              opType     in varchar2) return  number is
  v_count number;
begin
  if opType = 'outBid' then

    select count(1)
    into v_count
    from
      ( select settdel.id, (select lld.id from logistic_lading_details lld where lld.auction_id = au.id and rownum =1) lld_id
        from settlement_details settdel, auctions au
        /*left join user_orders uo on uo.auction_id = au.id*/
       where settdel.settlement_id = v_settlement_id
         and settdel.auction_id = au.id
         --流拍
         and au.logistic_detail_id is null
         and au.status = 6
       )
      where lld_id is null;

  elsif opType = 'return' then

   select count(1)
    into v_count
    from
      ( select settdel.id, (select lld.id from logistic_lading_details lld where lld.auction_id = au.id and rownum =1) lld_id
        from settlement_details settdel, auctions au
        /*left join user_orders uo on uo.auction_id = au.id*/
       where settdel.settlement_id = v_settlement_id
         and settdel.auction_id = au.id
         --退拍
         and au.logistic_detail_id is null
         and au.status = 8
       )
      where lld_id is null;

  elsif opType = 'cancel' then
    select count(1)
    into v_count
    from
      ( select settdel.id, (select lld.id from logistic_lading_details lld where lld.auction_id = au.id and rownum =1) lld_id
        from settlement_details settdel, auctions au
       /* left join user_orders uo on uo.auction_id = au.id*/
       where settdel.settlement_id = v_settlement_id
         and settdel.auction_id = au.id
         --撤拍
         and au.logistic_detail_id is null
         and au.status in (11,12)
       )
      where lld_id is null;

  elsif opType = 'notPay' then

   select count(1)
    into v_count
    from
      ( select settdel.id, (select lld.id from logistic_lading_details lld where lld.auction_id = au.id and rownum =1) lld_id
        from settlement_details settdel, auctions au
        left join user_orders uo on uo.auction_id = au.id
       where settdel.settlement_id = v_settlement_id
         and settdel.auction_id = au.id
         --不支付
         and uo.status in (2,4,5)
         and uo.logistic_detail_id  is null
       )
      where lld_id is null;

  elsif opType='comeback' then
    select count(1)
     into v_count
    from
      ( select settdel.id,(select lld.id from logistic_lading_details lld where lld.auction_id = au.id and lld.owner_type = 2  and rownum =1) lld_id
        from settlement_details settdel, auctions au
        left join user_orders uo on uo.auction_id = au.id
        left join user_refunds ur on ur.id = uo.user_refund_id
       where settdel.settlement_id = v_settlement_id
         and settdel.auction_id = au.id

         --结算前退货
         and ur.settlement_status = 0
         and ur.status = 9
         and au.logistic_detail_id  is null

       )
      where lld_id is null;
  end if;
  return v_count;

end F_SETTLEMENT_COUNT;


 
/

-- ----------------------------
-- Function structure for F_SETTLEMENT_DESPATCH_OP
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_SETTLEMENT_DESPATCH_OP" (settlementId in number) return varchar2 is
    v_finance_op varchar2(2000);
    cursor finance_op_cur is
    select finance from settlement_despatches d where d.settlement_id=settlementId;
begin
    v_finance_op := '';
    for finance_op_result in finance_op_cur loop
        if  finance_op_result.finance is not null then
           v_finance_op := v_finance_op || finance_op_result.finance||'       ' ;
        end if;
    end loop;
    return v_finance_op;
end F_SETTLEMENT_DESPATCH_OP;


 
/

-- ----------------------------
-- Function structure for F_SETTLEMENT_DESPATCH_TYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."F_SETTLEMENT_DESPATCH_TYPE" (settlementId in number) return varchar2 is
    v_checkout_type varchar2(2000);
    cursor ctype_cur is
    select checkout_type from settlement_despatches d where d.settlement_id=settlementId;
  /*
    author : chengyufen
    date : 2012-2-28
    describe : 结算单分配方式查询 (结算模块用)
  */
begin
    v_checkout_type := '   ';
    for ctype_result in ctype_cur loop
        if settlementId is not null and ctype_result.checkout_type is not null then
           if ctype_result.checkout_type = '0' then
                   v_checkout_type := v_checkout_type || '现金支出    ';
            elsif ctype_result.checkout_type = '1' then
                   v_checkout_type := v_checkout_type || '邮政汇款    ';
            elsif ctype_result.checkout_type = '2' then
                   v_checkout_type := v_checkout_type || '转余额    ';
            elsif ctype_result.checkout_type = '3' then
                   v_checkout_type := v_checkout_type || '银行转账    ';
            elsif ctype_result.checkout_type = '4' then
                   v_checkout_type := v_checkout_type || '现金支出台湾    ';
            elsif ctype_result.checkout_type = '5' then
                   v_checkout_type := v_checkout_type || 'IPS转账    ';
            elsif ctype_result.checkout_type = '6' then
                   v_checkout_type := v_checkout_type || '转账(公)    ';
            elsif ctype_result.checkout_type = '7' then
                   v_checkout_type := v_checkout_type || '汇丰    ';
            elsif ctype_result.checkout_type = '8' then
                   v_checkout_type := v_checkout_type || 'PayPal    ';
            elsif ctype_result.checkout_type = '9' then
                   v_checkout_type := v_checkout_type || '盛付通    ';
            elsif ctype_result.checkout_type = '10' then
                   v_checkout_type := v_checkout_type || '财付通    ';
            end if;
    /*       v_checkout_type := v_checkout_type || '-' ||ctype_result.checkout_type; */
        else
           v_checkout_type := ctype_result.checkout_type;
        end if;
    end loop;
    return v_checkout_type;
end F_SETTLEMENT_DESPATCH_TYPE;


 
/

-- ----------------------------
-- Function structure for F_STRSPLIT
-- ----------------------------
CREATE OR REPLACE function "ZHAO"."F_STRSPLIT"(av_str   varchar2, --要分割的字符串
                                      av_split varchar2, --分隔符号
                                      av_index number --取第几个元素
                                      ) return varchar2 is
  lv_str        varchar2(1024);
  lv_strOfIndex varchar2(1024);
  lv_length     number;
begin
  lv_str    := ltrim(rtrim(av_str));
  lv_str    := concat(lv_str, av_split);
  lv_length := av_index;
  if lv_length = 0 then
    lv_strOfIndex := substr(lv_str,
                            1,
                            instr(lv_str, av_split) - length(av_split));
  else
    lv_length     := av_index + 1;
    lv_strOfIndex := substr(lv_str,
                            instr(lv_str, av_split, 1, av_index) +
                            length(av_split),
                            instr(lv_str, av_split, 1, lv_length) -
                            instr(lv_str, av_split, 1, av_index) -
                            length(av_split));
  end if;
  return lv_strOfIndex;
end F_StrSplit;
/

-- ----------------------------
-- Function structure for FN_SPLIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."FN_SPLIT"
(
   p_list varchar2,
   p_sep varchar2 := ','
)  return type_split pipelined
 is
   l_idx  pls_integer;
   v_list  varchar2(4000) := p_list;
begin
  if p_list is null then
     return;
  end if;

   loop
      l_idx := instr(v_list,p_sep);
      if l_idx > 0 then
          pipe row(substr(v_list,1,l_idx-1));
          v_list := substr(v_list,l_idx+length(p_sep));
      else
          pipe row(v_list);
          exit;
      end if;
   end loop;
   return;
end fn_split;

 
 
 
/

-- ----------------------------
-- Function structure for STRCAT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."STRCAT"(input varchar2 )
RETURN varchar2
PARALLEL_ENABLE AGGREGATE USING strcat_type;


 
/

-- ----------------------------
-- Function structure for TO_UTC_DATE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."TO_UTC_DATE" (DATE_OBJ DATE)
	RETURN VARCHAR2 AS
	V_DATE_STR     VARCHAR2(20);
	V_TMP_DATE_STR VARCHAR2(19);
	V_DATE         TIMESTAMP;
  /*
      创建人:李征
      日期:
      描述:solr索引时需要转换成UTC时间
  */
BEGIN
	SELECT sys_extract_utc(CAST(DATE_OBJ AS TIMESTAMP))
		INTO V_DATE
		FROM DUAL;
	V_TMP_DATE_STR := TO_CHAR(V_DATE, 'yyyy-mm-dd hh24:mi:ss');
	V_DATE_STR     := substr(V_TMP_DATE_STR, 0, 10) || 'T' ||
										substr(V_TMP_DATE_STR, 12, 19) || 'Z';
	RETURN V_DATE_STR;
END TO_UTC_DATE;


 
/

-- ----------------------------
-- Function structure for TO_XML_SCHEMA_DATE_FORMAT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ZHAO"."TO_XML_SCHEMA_DATE_FORMAT"
(DATE_OBJ DATE)
RETURN VARCHAR2 AS
V_DATE_STR VARCHAR2(20);
V_TMP_DATE_STR VARCHAR2(19);
V_DATE TIMESTAMP;
BEGIN
  SELECT sys_extract_utc(cast(DATE_OBJ as timestamp)) INTO V_DATE FROM DUAL;
  V_TMP_DATE_STR:=TO_CHAR(V_DATE,'yyyy-mm-dd hh24:mi:ss');
  V_DATE_STR:= substr(V_TMP_DATE_STR,0,10)||'T'||substr(V_TMP_DATE_STR,12,19)||'Z';
  RETURN V_DATE_STR;
END TO_XML_SCHEMA_DATE_FORMAT;


 
/

-- ----------------------------
-- Sequence structure for ADMINS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."ADMINS_SEQ";
CREATE SEQUENCE "ZHAO"."ADMINS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3669
 CACHE 20;

-- ----------------------------
-- Sequence structure for ARTICLE_QUOTES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."ARTICLE_QUOTES_SEQ";
CREATE SEQUENCE "ZHAO"."ARTICLE_QUOTES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 111
 CACHE 20;

-- ----------------------------
-- Sequence structure for ARTISTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."ARTISTS_SEQ";
CREATE SEQUENCE "ZHAO"."ARTISTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1441
 CACHE 20;

-- ----------------------------
-- Sequence structure for ATTACHMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."ATTACHMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."ATTACHMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 27491
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_APPLY_STORAGE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_APPLY_STORAGE_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_APPLY_STORAGE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 123
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_AUDITS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_AUDITS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_AUDITS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 19220
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_BASE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_BASE_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_BASE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1904
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_BIDDINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_BIDDINGS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_BIDDINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10469350
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CATALOGUE_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CATALOGUE_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CATALOGUE_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 41
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CATALOGUE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CATALOGUE_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CATALOGUE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 61
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CATEGORIES_MAPPING_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CATEGORIES_MAPPING_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CATEGORIES_MAPPING_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 101
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CATEGORIES_SEO_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CATEGORIES_SEO_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CATEGORIES_SEO_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 279
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CATEGORIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CATEGORIES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CATEGORIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10494
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CHARACTERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CHARACTERS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CHARACTERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 53
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CLASS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CLASS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CLASS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 3462
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_CLASS_SUB_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_CLASS_SUB_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_CLASS_SUB_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 16782
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_COLLECTION_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_COLLECTION_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_COLLECTION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 156291
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_DELAY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_DELAY_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_DELAY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 325
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_EVENT_DIVER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_EVENT_DIVER_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_EVENT_DIVER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_FEE_SETTINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_FEE_SETTINGS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_FEE_SETTINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 57
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_FEES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_FEES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_FEES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1900749
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_FORUM_RELATED_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_FORUM_RELATED_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_FORUM_RELATED_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1478
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_KEY_WORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_KEY_WORDS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_KEY_WORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 60962721
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_KEY_WORDS_TEMP_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_KEY_WORDS_TEMP_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_KEY_WORDS_TEMP_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 11566094
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_MAX_PRICES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_MAX_PRICES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_MAX_PRICES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 11448335
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PICTURES_COVERLOGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PICTURES_COVERLOGS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PICTURES_COVERLOGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999999999999
 START WITH 12921
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PICTURES_LOGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PICTURES_LOGS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PICTURES_LOGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 33250
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PICTURES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PICTURES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PICTURES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 6930050196
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PRICE_MODIFIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PRICE_MODIFIES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PRICE_MODIFIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 5108
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PRICES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PRICES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PRICES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 49860339
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PROMOTION_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PROMOTION_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PROMOTION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 7314
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PROPERTY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PROPERTY_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PROPERTY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 8856
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_PROXY_PRICES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_PROXY_PRICES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_PROXY_PRICES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 5666703
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_SPECIAL_TOPICS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_SPECIAL_TOPICS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_SPECIAL_TOPICS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10955
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_STATUS_CHANGE_LOGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 9230240
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_TRANSLATES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_TRANSLATES_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_TRANSLATES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2105133
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_UPDATE_LOGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_UPDATE_LOGS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_UPDATE_LOGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 74777
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_UPLOADS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_UPLOADS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_UPLOADS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 5745
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTION_WORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTION_WORDS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTION_WORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 13849
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTIONS_MODE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTIONS_MODE_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTIONS_MODE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 801
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1974682
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTIONS_TEST_SEQUENCE
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTIONS_TEST_SEQUENCE";
CREATE SEQUENCE "ZHAO"."AUCTIONS_TEST_SEQUENCE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999999999999999999999
 START WITH 67
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUCTIONS_VIRTUAL_STORAGE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE_SEQ";
CREATE SEQUENCE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 3762
 CACHE 20;

-- ----------------------------
-- Sequence structure for AUDITS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."AUDITS_SEQ";
CREATE SEQUENCE "ZHAO"."AUDITS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 6067
 CACHE 20;

-- ----------------------------
-- Sequence structure for BANKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."BANKS_SEQ";
CREATE SEQUENCE "ZHAO"."BANKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 20
 CACHE 20;

-- ----------------------------
-- Sequence structure for BOOKINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."BOOKINGS_SEQ";
CREATE SEQUENCE "ZHAO"."BOOKINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 19588
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLASS_AREA_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLASS_AREA_SEQ";
CREATE SEQUENCE "ZHAO"."CLASS_AREA_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLASS_SUB_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLASS_SUB_SEQ";
CREATE SEQUENCE "ZHAO"."CLASS_SUB_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1134
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLASS_TIME_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLASS_TIME_SEQ";
CREATE SEQUENCE "ZHAO"."CLASS_TIME_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLASS_TYPE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLASS_TYPE_SEQ";
CREATE SEQUENCE "ZHAO"."CLASS_TYPE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLASSES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLASSES_SEQ";
CREATE SEQUENCE "ZHAO"."CLASSES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1844
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLIENT_CATEGORY_PATH_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLIENT_CATEGORY_PATH_SEQ";
CREATE SEQUENCE "ZHAO"."CLIENT_CATEGORY_PATH_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10494
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLIENT_ERROR_MSG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLIENT_ERROR_MSG_SEQ";
CREATE SEQUENCE "ZHAO"."CLIENT_ERROR_MSG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 63
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLIENT_FOCUS_CONFIG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLIENT_FOCUS_CONFIG_SEQ";
CREATE SEQUENCE "ZHAO"."CLIENT_FOCUS_CONFIG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 87
 NOCACHE ;

-- ----------------------------
-- Sequence structure for CLIENT_INDEX_CONFIG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLIENT_INDEX_CONFIG_SEQ";
CREATE SEQUENCE "ZHAO"."CLIENT_INDEX_CONFIG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 4
 NOCACHE ;

-- ----------------------------
-- Sequence structure for CLIENT_USER_CONFIGURATIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLIENT_USER_CONFIGURATIONS_SEQ";
CREATE SEQUENCE "ZHAO"."CLIENT_USER_CONFIGURATIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3675
 CACHE 20;

-- ----------------------------
-- Sequence structure for CLIENT_USER_DEVICETOKEN_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CLIENT_USER_DEVICETOKEN_SEQ";
CREATE SEQUENCE "ZHAO"."CLIENT_USER_DEVICETOKEN_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 11449
 CACHE 20;

-- ----------------------------
-- Sequence structure for CMS_IMAGE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CMS_IMAGE_SEQ";
CREATE SEQUENCE "ZHAO"."CMS_IMAGE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 81
 CACHE 20;

-- ----------------------------
-- Sequence structure for COLLECTION_CERTIFICATE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COLLECTION_CERTIFICATE_SEQ";
CREATE SEQUENCE "ZHAO"."COLLECTION_CERTIFICATE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 21
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMEBACK_EC_GOODS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMEBACK_EC_GOODS_SEQ";
CREATE SEQUENCE "ZHAO"."COMEBACK_EC_GOODS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 27200003
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMEBACK_EC_STORAGE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMEBACK_EC_STORAGE_SEQ";
CREATE SEQUENCE "ZHAO"."COMEBACK_EC_STORAGE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 26800003
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMEBACK_STOCK_RESALE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMEBACK_STOCK_RESALE_SEQ";
CREATE SEQUENCE "ZHAO"."COMEBACK_STOCK_RESALE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMEBACK_TRUST_CHARGE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMEBACK_TRUST_CHARGE_SEQ";
CREATE SEQUENCE "ZHAO"."COMEBACK_TRUST_CHARGE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 284
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMMON_REMARK_CATEGORIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMMON_REMARK_CATEGORIES_SEQ";
CREATE SEQUENCE "ZHAO"."COMMON_REMARK_CATEGORIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMMON_REMARKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMMON_REMARKS_SEQ";
CREATE SEQUENCE "ZHAO"."COMMON_REMARKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 447712
 CACHE 20;

-- ----------------------------
-- Sequence structure for COMPANY_FINANCE_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."COMPANY_FINANCE_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."COMPANY_FINANCE_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 8943
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_ASSIGNS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_ASSIGNS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_ASSIGNS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 105368
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_ATTACHMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_ATTACHMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_ATTACHMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 61
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 72225
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_SETTINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_SETTINGS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_SETTINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10006
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_SIGNERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_SIGNERS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_SIGNERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 315
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_SMS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_SMS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_SMS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2576
 CACHE 20;

-- ----------------------------
-- Sequence structure for CONTRACT_TAIPEI_SQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACT_TAIPEI_SQ";
CREATE SEQUENCE "ZHAO"."CONTRACT_TAIPEI_SQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 81835
 NOCACHE ;

-- ----------------------------
-- Sequence structure for CONTRACTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CONTRACTS_SEQ";
CREATE SEQUENCE "ZHAO"."CONTRACTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 133325
 CACHE 20;

-- ----------------------------
-- Sequence structure for CUSTOMER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."CUSTOMER_SEQ";
CREATE SEQUENCE "ZHAO"."CUSTOMER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 21
 CACHE 20;

-- ----------------------------
-- Sequence structure for DATA_DICTIONARY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DATA_DICTIONARY_SEQ";
CREATE SEQUENCE "ZHAO"."DATA_DICTIONARY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 15512
 CACHE 20;

-- ----------------------------
-- Sequence structure for DAYSPAY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DAYSPAY_SEQ";
CREATE SEQUENCE "ZHAO"."DAYSPAY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999
 START WITH 81
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for DELIVER_FEE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DELIVER_FEE_SEQ";
CREATE SEQUENCE "ZHAO"."DELIVER_FEE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 81
 CACHE 20;

-- ----------------------------
-- Sequence structure for DELIVER_REGIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DELIVER_REGIONS_SEQ";
CREATE SEQUENCE "ZHAO"."DELIVER_REGIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 501
 CACHE 20;

-- ----------------------------
-- Sequence structure for DISCUSS_QUOTES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DISCUSS_QUOTES_SEQ";
CREATE SEQUENCE "ZHAO"."DISCUSS_QUOTES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 61
 CACHE 20;

-- ----------------------------
-- Sequence structure for DR_PM_SEQ_NAMES_ID
-- ----------------------------
DROP SEQUENCE "ZHAO"."DR_PM_SEQ_NAMES_ID";
CREATE SEQUENCE "ZHAO"."DR_PM_SEQ_NAMES_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for DS_SEARCH_CONDITIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DS_SEARCH_CONDITIONS_SEQ";
CREATE SEQUENCE "ZHAO"."DS_SEARCH_CONDITIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 860
 CACHE 20;

-- ----------------------------
-- Sequence structure for DS_SEARCH_DEFINITIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DS_SEARCH_DEFINITIONS_SEQ";
CREATE SEQUENCE "ZHAO"."DS_SEARCH_DEFINITIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 269
 CACHE 20;

-- ----------------------------
-- Sequence structure for DS_SEARCH_LINKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DS_SEARCH_LINKS_SEQ";
CREATE SEQUENCE "ZHAO"."DS_SEARCH_LINKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999999999999999999999
 START WITH 41
 CACHE 20;

-- ----------------------------
-- Sequence structure for DS_SEARCH_OPTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."DS_SEARCH_OPTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."DS_SEARCH_OPTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1780
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_ADS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_ADS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_ADS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2493
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_AUCTION_BOOK_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_AUCTION_BOOK_SEQ";
CREATE SEQUENCE "ZHAO"."EC_AUCTION_BOOK_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1200
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_BOARDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_BOARDS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_BOARDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 141
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_BRANDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_BRANDS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_BRANDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1001
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_CART_KEY_TIME_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_CART_KEY_TIME_SEQ";
CREATE SEQUENCE "ZHAO"."EC_CART_KEY_TIME_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 21554
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_CARTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_CARTS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_CARTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 21081
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_CONTRACTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_CONTRACTS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_CONTRACTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 90367
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_FEEDBACKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_FEEDBACKS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_FEEDBACKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 5285
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_GOOD_PICTURES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_GOOD_PICTURES_SEQ";
CREATE SEQUENCE "ZHAO"."EC_GOOD_PICTURES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2334
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_GOODS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_GOODS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_GOODS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 12527
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_ORDER_GOODS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_ORDER_GOODS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_ORDER_GOODS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 17733
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_SETTLEMENT_DESPATCHES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_SETTLEMENT_DESPATCHES_SEQ";
CREATE SEQUENCE "ZHAO"."EC_SETTLEMENT_DESPATCHES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 61786
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_SETTLEMENT_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_SETTLEMENT_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_SETTLEMENT_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 19887
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_SETTLEMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_SETTLEMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_SETTLEMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10783
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_STORAGE_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_STORAGE_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."EC_STORAGE_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 4250
 CACHE 20;

-- ----------------------------
-- Sequence structure for EC_STORAGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EC_STORAGES_SEQ";
CREATE SEQUENCE "ZHAO"."EC_STORAGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2844
 CACHE 20;

-- ----------------------------
-- Sequence structure for EDM_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EDM_SEQ";
CREATE SEQUENCE "ZHAO"."EDM_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 101
 CACHE 20;

-- ----------------------------
-- Sequence structure for EMPLOYEES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."EMPLOYEES_SEQ";
CREATE SEQUENCE "ZHAO"."EMPLOYEES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 11
 CACHE 20;

-- ----------------------------
-- Sequence structure for ETL_AUCTIONS_LOG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."ETL_AUCTIONS_LOG_SEQ";
CREATE SEQUENCE "ZHAO"."ETL_AUCTIONS_LOG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for FEEDBACK_QUOTES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FEEDBACK_QUOTES_SEQ";
CREATE SEQUENCE "ZHAO"."FEEDBACK_QUOTES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999999999
 START WITH 41
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for FEEDBACK_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FEEDBACK_SEQ";
CREATE SEQUENCE "ZHAO"."FEEDBACK_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3597
 CACHE 20;

-- ----------------------------
-- Sequence structure for FINANCE_BANK_CURRENCIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FINANCE_BANK_CURRENCIES_SEQ";
CREATE SEQUENCE "ZHAO"."FINANCE_BANK_CURRENCIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 14
 CACHE 20;

-- ----------------------------
-- Sequence structure for FINANCE_BANKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FINANCE_BANKS_SEQ";
CREATE SEQUENCE "ZHAO"."FINANCE_BANKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for FINANCE_COMPANY_BANKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FINANCE_COMPANY_BANKS_SEQ";
CREATE SEQUENCE "ZHAO"."FINANCE_COMPANY_BANKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10064
 CACHE 20;

-- ----------------------------
-- Sequence structure for FINANCE_CURRENCIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FINANCE_CURRENCIES_SEQ";
CREATE SEQUENCE "ZHAO"."FINANCE_CURRENCIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10061
 CACHE 20;

-- ----------------------------
-- Sequence structure for FINANCE_DEPOSIT_TYPES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FINANCE_DEPOSIT_TYPES_SEQ";
CREATE SEQUENCE "ZHAO"."FINANCE_DEPOSIT_TYPES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10006
 CACHE 20;

-- ----------------------------
-- Sequence structure for FINANCE_EXCHANGE_RATES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FINANCE_EXCHANGE_RATES_SEQ";
CREATE SEQUENCE "ZHAO"."FINANCE_EXCHANGE_RATES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 7069
 CACHE 20;

-- ----------------------------
-- Sequence structure for FOREIGN_DELIVER_TYPES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."FOREIGN_DELIVER_TYPES_SEQ";
CREATE SEQUENCE "ZHAO"."FOREIGN_DELIVER_TYPES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10189
 CACHE 20;

-- ----------------------------
-- Sequence structure for GOOD_EC_PICTURES_LOGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."GOOD_EC_PICTURES_LOGS_SEQ";
CREATE SEQUENCE "ZHAO"."GOOD_EC_PICTURES_LOGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 27
 CACHE 20;

-- ----------------------------
-- Sequence structure for GUIDANCES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."GUIDANCES_SEQ";
CREATE SEQUENCE "ZHAO"."GUIDANCES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 342
 CACHE 20;

-- ----------------------------
-- Sequence structure for HELP_CENTER_PAGE_CFG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HELP_CENTER_PAGE_CFG_SEQ";
CREATE SEQUENCE "ZHAO"."HELP_CENTER_PAGE_CFG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for HELP_CENTER_PAGE_IDF_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HELP_CENTER_PAGE_IDF_SEQ";
CREATE SEQUENCE "ZHAO"."HELP_CENTER_PAGE_IDF_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for HELP_CENTER_QUESTION_BIND_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HELP_CENTER_QUESTION_BIND_SEQ";
CREATE SEQUENCE "ZHAO"."HELP_CENTER_QUESTION_BIND_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for HELP_CENTER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HELP_CENTER_SEQ";
CREATE SEQUENCE "ZHAO"."HELP_CENTER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 380
 CACHE 20;

-- ----------------------------
-- Sequence structure for HELP_KEYWORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HELP_KEYWORDS_SEQ";
CREATE SEQUENCE "ZHAO"."HELP_KEYWORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for HIBERNATE_SEQUENCE
-- ----------------------------
DROP SEQUENCE "ZHAO"."HIBERNATE_SEQUENCE";
CREATE SEQUENCE "ZHAO"."HIBERNATE_SEQUENCE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 21
 CACHE 20;

-- ----------------------------
-- Sequence structure for HOSANE_AUCTION_REGISTER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HOSANE_AUCTION_REGISTER_SEQ";
CREATE SEQUENCE "ZHAO"."HOSANE_AUCTION_REGISTER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999
 START WITH 336
 CACHE 20;

-- ----------------------------
-- Sequence structure for HOSANE_FREEZE_BAIL_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HOSANE_FREEZE_BAIL_SEQ";
CREATE SEQUENCE "ZHAO"."HOSANE_FREEZE_BAIL_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999
 START WITH 274
 CACHE 20;

-- ----------------------------
-- Sequence structure for HOSANE_USER_AUCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."HOSANE_USER_AUCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."HOSANE_USER_AUCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 284
 CACHE 20;

-- ----------------------------
-- Sequence structure for INDEX_ANNOUNCEMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."INDEX_ANNOUNCEMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."INDEX_ANNOUNCEMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 142990
 CACHE 20;

-- ----------------------------
-- Sequence structure for INDEX_CONFIG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."INDEX_CONFIG_SEQ";
CREATE SEQUENCE "ZHAO"."INDEX_CONFIG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 142725
 CACHE 20;

-- ----------------------------
-- Sequence structure for KEYWORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."KEYWORDS_SEQ";
CREATE SEQUENCE "ZHAO"."KEYWORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1335049
 CACHE 20;

-- ----------------------------
-- Sequence structure for KUAIDI_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."KUAIDI_SEQ";
CREATE SEQUENCE "ZHAO"."KUAIDI_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 69
 CACHE 20;

-- ----------------------------
-- Sequence structure for LEND_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LEND_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."LEND_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 33754
 CACHE 20;

-- ----------------------------
-- Sequence structure for LENDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LENDS_SEQ";
CREATE SEQUENCE "ZHAO"."LENDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 8940
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGGED_EXCEPTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGGED_EXCEPTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."LOGGED_EXCEPTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 425
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTIC_COMPANIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTIC_COMPANIES_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTIC_COMPANIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 147
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTIC_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTIC_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTIC_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 243815
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTIC_LADING_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTIC_LADING_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTIC_LADING_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 166019
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTIC_LADINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTIC_LADINGS_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTIC_LADINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 203822
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTIC_TYPE_FEES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTIC_TYPE_FEES_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTIC_TYPE_FEES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 515
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTIC_TYPES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTIC_TYPES_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTIC_TYPES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10307
 CACHE 20;

-- ----------------------------
-- Sequence structure for LOGISTICS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."LOGISTICS_SEQ";
CREATE SEQUENCE "ZHAO"."LOGISTICS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 804334
 CACHE 20;

-- ----------------------------
-- Sequence structure for MESSAGE_MARKET_USERDETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."MESSAGE_MARKET_USERDETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."MESSAGE_MARKET_USERDETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 451761
 CACHE 20;

-- ----------------------------
-- Sequence structure for MESSAGE_MARKETS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."MESSAGE_MARKETS_SEQ";
CREATE SEQUENCE "ZHAO"."MESSAGE_MARKETS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 281
 CACHE 20;

-- ----------------------------
-- Sequence structure for MESSAGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."MESSAGES_SEQ";
CREATE SEQUENCE "ZHAO"."MESSAGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10997832
 CACHE 20;

-- ----------------------------
-- Sequence structure for MSG_CATEGORIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."MSG_CATEGORIES_SEQ";
CREATE SEQUENCE "ZHAO"."MSG_CATEGORIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 68
 CACHE 20;

-- ----------------------------
-- Sequence structure for MSG_TEMPLATES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."MSG_TEMPLATES_SEQ";
CREATE SEQUENCE "ZHAO"."MSG_TEMPLATES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 327
 CACHE 20;

-- ----------------------------
-- Sequence structure for PAINT_CONFIG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PAINT_CONFIG_SEQ";
CREATE SEQUENCE "ZHAO"."PAINT_CONFIG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 81
 CACHE 20;

-- ----------------------------
-- Sequence structure for PARTNER_PAYMENT_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PARTNER_PAYMENT_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."PARTNER_PAYMENT_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for PARTNER_PAYMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PARTNER_PAYMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."PARTNER_PAYMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for PARTNERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PARTNERS_SEQ";
CREATE SEQUENCE "ZHAO"."PARTNERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for PLSQL_PROFILER_RUNNUMBER
-- ----------------------------
DROP SEQUENCE "ZHAO"."PLSQL_PROFILER_RUNNUMBER";
CREATE SEQUENCE "ZHAO"."PLSQL_PROFILER_RUNNUMBER"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for PRI_ADMIN_POSTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_ADMIN_POSTS_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_ADMIN_POSTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1569
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRI_ADMIN_USERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_ADMIN_USERS_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_ADMIN_USERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999
 START WITH 164
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRI_ADMINS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_ADMINS_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_ADMINS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 61117
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRI_DEPTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_DEPTS_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_DEPTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 403
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRI_FUNCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_FUNCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_FUNCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 800001429
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRI_POSTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_POSTS_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_POSTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2001
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRI_ROLES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRI_ROLES_SEQ";
CREATE SEQUENCE "ZHAO"."PRI_ROLES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 12471
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRIZE_CATEGORY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRIZE_CATEGORY_SEQ";
CREATE SEQUENCE "ZHAO"."PRIZE_CATEGORY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2105
 CACHE 20;

-- ----------------------------
-- Sequence structure for PRIZE_CONFIG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PRIZE_CONFIG_SEQ";
CREATE SEQUENCE "ZHAO"."PRIZE_CONFIG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 485
 CACHE 20;

-- ----------------------------
-- Sequence structure for PROCESS_FORM_DATA_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROCESS_FORM_DATA_SEQ";
CREATE SEQUENCE "ZHAO"."PROCESS_FORM_DATA_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 790
 CACHE 20;

-- ----------------------------
-- Sequence structure for PROCESS_FORM_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROCESS_FORM_SEQ";
CREATE SEQUENCE "ZHAO"."PROCESS_FORM_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 13689
 CACHE 20;

-- ----------------------------
-- Sequence structure for PROCESS_RUN_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROCESS_RUN_SEQ";
CREATE SEQUENCE "ZHAO"."PROCESS_RUN_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 6130
 CACHE 20;

-- ----------------------------
-- Sequence structure for PROCESS_TYPE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROCESS_TYPE_SEQ";
CREATE SEQUENCE "ZHAO"."PROCESS_TYPE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 183
 CACHE 20;

-- ----------------------------
-- Sequence structure for PROPERTY_EXCLUDE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROPERTY_EXCLUDE_SEQ";
CREATE SEQUENCE "ZHAO"."PROPERTY_EXCLUDE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1425
 CACHE 20;

-- ----------------------------
-- Sequence structure for PROPERTY_GROUP_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROPERTY_GROUP_SEQ";
CREATE SEQUENCE "ZHAO"."PROPERTY_GROUP_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 174
 NOCACHE ;

-- ----------------------------
-- Sequence structure for PROPERTY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROPERTY_SEQ";
CREATE SEQUENCE "ZHAO"."PROPERTY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 10451
 NOCACHE ;

-- ----------------------------
-- Sequence structure for PROPERTY_SET_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PROPERTY_SET_SEQ";
CREATE SEQUENCE "ZHAO"."PROPERTY_SET_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 161
 CACHE 20;

-- ----------------------------
-- Sequence structure for PUB_GAOJING_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PUB_GAOJING_SEQ";
CREATE SEQUENCE "ZHAO"."PUB_GAOJING_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1021
 CACHE 20;

-- ----------------------------
-- Sequence structure for PUB_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."PUB_SEQ";
CREATE SEQUENCE "ZHAO"."PUB_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1021
 CACHE 20;

-- ----------------------------
-- Sequence structure for QRTZ_JOB_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."QRTZ_JOB_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."QRTZ_JOB_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 701
 CACHE 20;

-- ----------------------------
-- Sequence structure for QUOTES_AMOUNT_CUR_CLICK_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."QUOTES_AMOUNT_CUR_CLICK_SEQ";
CREATE SEQUENCE "ZHAO"."QUOTES_AMOUNT_CUR_CLICK_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 141
 CACHE 20;

-- ----------------------------
-- Sequence structure for REMIND_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."REMIND_SEQ";
CREATE SEQUENCE "ZHAO"."REMIND_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 96305
 CACHE 20;

-- ----------------------------
-- Sequence structure for REMIND_SYSTEM_SETTING_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."REMIND_SYSTEM_SETTING_SEQ";
CREATE SEQUENCE "ZHAO"."REMIND_SYSTEM_SETTING_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 25
 CACHE 20;

-- ----------------------------
-- Sequence structure for REMIND_USER_SETTING_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."REMIND_USER_SETTING_SEQ";
CREATE SEQUENCE "ZHAO"."REMIND_USER_SETTING_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 18349
 CACHE 20;

-- ----------------------------
-- Sequence structure for RIGHTS_ROLES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."RIGHTS_ROLES_SEQ";
CREATE SEQUENCE "ZHAO"."RIGHTS_ROLES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for RIGHTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."RIGHTS_SEQ";
CREATE SEQUENCE "ZHAO"."RIGHTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3436
 CACHE 20;

-- ----------------------------
-- Sequence structure for ROLES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."ROLES_SEQ";
CREATE SEQUENCE "ZHAO"."ROLES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1583
 CACHE 20;

-- ----------------------------
-- Sequence structure for S_PRO_TYPE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."S_PRO_TYPE_SEQ";
CREATE SEQUENCE "ZHAO"."S_PRO_TYPE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 103
 CACHE 20;

-- ----------------------------
-- Sequence structure for S_PRO_USER_ASSIGN_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."S_PRO_USER_ASSIGN_SEQ";
CREATE SEQUENCE "ZHAO"."S_PRO_USER_ASSIGN_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 267
 CACHE 20;

-- ----------------------------
-- Sequence structure for S_PROCESS_DEFINITION_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."S_PROCESS_DEFINITION_SEQ";
CREATE SEQUENCE "ZHAO"."S_PROCESS_DEFINITION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 290
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCHEMA_MIGRATIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCHEMA_MIGRATIONS_SEQ";
CREATE SEQUENCE "ZHAO"."SCHEMA_MIGRATIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_CONSUME_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_CONSUME_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_CONSUME_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 298867
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_CONSUMES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_CONSUMES_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_CONSUMES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 213765
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_GIFT_DEDUCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_GIFT_DEDUCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_GIFT_DEDUCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2938
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_INCOME_EXPENSES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_INCOME_EXPENSES_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_INCOME_EXPENSES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 359761
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_SETTINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_SETTINGS_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_SETTINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 5962
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_SUCCESS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_SUCCESS_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_SUCCESS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 641
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORE_TIME_SETTINGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORE_TIME_SETTINGS_SEQ";
CREATE SEQUENCE "ZHAO"."SCORE_TIME_SETTINGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 121
 CACHE 20;

-- ----------------------------
-- Sequence structure for SCORES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SCORES_SEQ";
CREATE SEQUENCE "ZHAO"."SCORES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1396399
 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_USER_ID
-- ----------------------------
DROP SEQUENCE "ZHAO"."SEQ_USER_ID";
CREATE SEQUENCE "ZHAO"."SEQ_USER_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1080
 CACHE 20;

-- ----------------------------
-- Sequence structure for SETTLEMENT_DESPATCHES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SETTLEMENT_DESPATCHES_SEQ";
CREATE SEQUENCE "ZHAO"."SETTLEMENT_DESPATCHES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 89733
 CACHE 20;

-- ----------------------------
-- Sequence structure for SETTLEMENT_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SETTLEMENT_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."SETTLEMENT_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1936613
 CACHE 20;

-- ----------------------------
-- Sequence structure for SETTLEMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SETTLEMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."SETTLEMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 117376
 CACHE 20;

-- ----------------------------
-- Sequence structure for SMS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SMS_SEQ";
CREATE SEQUENCE "ZHAO"."SMS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 96504
 CACHE 20;

-- ----------------------------
-- Sequence structure for STORAGE_CHARGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."STORAGE_CHARGES_SEQ";
CREATE SEQUENCE "ZHAO"."STORAGE_CHARGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2701
 CACHE 20;

-- ----------------------------
-- Sequence structure for STORAGE_COMPLETED_CHARGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."STORAGE_COMPLETED_CHARGES_SEQ";
CREATE SEQUENCE "ZHAO"."STORAGE_COMPLETED_CHARGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 28241
 CACHE 20;

-- ----------------------------
-- Sequence structure for STORAGE_WAIT_CHARGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."STORAGE_WAIT_CHARGES_SEQ";
CREATE SEQUENCE "ZHAO"."STORAGE_WAIT_CHARGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 258112
 CACHE 20;

-- ----------------------------
-- Sequence structure for STORAGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."STORAGES_SEQ";
CREATE SEQUENCE "ZHAO"."STORAGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 4
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SYSTEM_LOGS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SYSTEM_LOGS_SEQ";
CREATE SEQUENCE "ZHAO"."SYSTEM_LOGS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1166201
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SYSTEM_MODULES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SYSTEM_MODULES_SEQ";
CREATE SEQUENCE "ZHAO"."SYSTEM_MODULES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 62
 CACHE 20;

-- ----------------------------
-- Sequence structure for SYSTEM_REMIND_SETTING_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."SYSTEM_REMIND_SETTING_SEQ";
CREATE SEQUENCE "ZHAO"."SYSTEM_REMIND_SETTING_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_AUCTION_KEY_WORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_AUCTION_KEY_WORDS_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_AUCTION_KEY_WORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 49843232
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_AUCTION_SCORE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_AUCTION_SCORE_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_AUCTION_SCORE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_AUCTION_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_AUCTION_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_AUCTION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1494605
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_AUCTIONS_STATE_NUMS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_AUCTIONS_STATE_NUMS_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_AUCTIONS_STATE_NUMS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 75886
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_CONTRACT_TOTAL_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_CONTRACT_TOTAL_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_CONTRACT_TOTAL_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 107921
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_GOOD_EC_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_GOOD_EC_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_GOOD_EC_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 4430
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_PERIOD_COST_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_PERIOD_COST_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_PERIOD_COST_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 5503
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_SCORE_SUCCESS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_SCORE_SUCCESS_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_SCORE_SUCCESS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 291
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_SETTLEMENT_AUCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_SETTLEMENT_AUCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_SETTLEMENT_AUCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_SETTLEMENT_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_SETTLEMENT_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_SETTLEMENT_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_SYM_AUCTION_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_SYM_AUCTION_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_SYM_AUCTION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 181
 CACHE 20;

-- ----------------------------
-- Sequence structure for TEMP_USERORDERS_DELAY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."TEMP_USERORDERS_DELAY_SEQ";
CREATE SEQUENCE "ZHAO"."TEMP_USERORDERS_DELAY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1845095
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ACCOUNTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_ACCOUNTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_ACCOUNTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1210324
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ACTIVITY_INFO_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_ACTIVITY_INFO_SEQ";
CREATE SEQUENCE "ZHAO"."USER_ACTIVITY_INFO_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1444
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ADDRESS_VERIFIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_ADDRESS_VERIFIES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_ADDRESS_VERIFIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1189
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ADDRESSES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_ADDRESSES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_ADDRESSES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 77372
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_AUCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_AUCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_AUCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 7654146
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_BANK_VERIFIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_BANK_VERIFIES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_BANK_VERIFIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1244
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_BANKS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_BANKS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_BANKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 31315
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_CITIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_CITIES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_CITIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 56145
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_COLLECTION_CERT_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_COLLECTION_CERT_SEQ";
CREATE SEQUENCE "ZHAO"."USER_COLLECTION_CERT_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 507
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_COLLECTION_SHIPS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_COLLECTION_SHIPS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_COLLECTION_SHIPS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 137975
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_COLLECTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_COLLECTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_COLLECTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 17
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_COUNTRIES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_COUNTRIES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_COUNTRIES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10087
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 8036998
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_DEVICE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_DEVICE_SEQ";
CREATE SEQUENCE "ZHAO"."USER_DEVICE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 801
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_EMAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_EMAILS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_EMAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 9921
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_FEEDBACK_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_FEEDBACK_SEQ";
CREATE SEQUENCE "ZHAO"."USER_FEEDBACK_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 61
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_FINDERROR_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_FINDERROR_SEQ";
CREATE SEQUENCE "ZHAO"."USER_FINDERROR_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 9916
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_IPS_PAYMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_IPS_PAYMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_IPS_PAYMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 428553
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_KEYWORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_KEYWORDS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_KEYWORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 8477
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LEVEL_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LEVEL_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LEVEL_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 308096
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LEVEL_HISTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LEVEL_HISTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LEVEL_HISTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 38036
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LEVELS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LEVELS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LEVELS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 16
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LISTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LISTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LISTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 261
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LOANS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LOANS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LOANS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 264
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LOST_AUCTIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LOST_AUCTIONS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LOST_AUCTIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_LOTTERY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_LOTTERY_SEQ";
CREATE SEQUENCE "ZHAO"."USER_LOTTERY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999
 START WITH 11542
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_MARGINS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_MARGINS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_MARGINS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 174298
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ORDER_DELAYS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_ORDER_DELAYS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_ORDER_DELAYS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1833788
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ORDERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_ORDERS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_ORDERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1876079
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PAY_NOTIFIER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PAY_NOTIFIER_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PAY_NOTIFIER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999
 START WITH 193
 NOCACHE ;

-- ----------------------------
-- Sequence structure for USER_PAYMENTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PAYMENTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PAYMENTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 679454
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PHONES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PHONES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PHONES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 10747
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PICTURE_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PICTURE_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PICTURE_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 6
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PICTURES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PICTURES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PICTURES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 2
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PROVINCES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PROVINCES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PROVINCES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 23642
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PUSH_DETAIL_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PUSH_DETAIL_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PUSH_DETAIL_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 821
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_PUSH_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_PUSH_SEQ";
CREATE SEQUENCE "ZHAO"."USER_PUSH_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 281
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_QUOTA_USAGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_QUOTA_USAGES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_QUOTA_USAGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 33139375
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_QUOTA_USEAGES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_QUOTA_USEAGES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_QUOTA_USEAGES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 181
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_QUOTAS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_QUOTAS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_QUOTAS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 194352
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_REFUND_REQUESTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_REFUND_REQUESTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_REFUND_REQUESTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 36683
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_REFUNDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_REFUNDS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_REFUNDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 26097
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_REGIONS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_REGIONS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_REGIONS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_REMIT_DESPATCHES_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_REMIT_DESPATCHES_SEQ";
CREATE SEQUENCE "ZHAO"."USER_REMIT_DESPATCHES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 146966
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_REMITS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_REMITS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_REMITS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 169893
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_RESET_PASSWORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_RESET_PASSWORDS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_RESET_PASSWORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3579
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_SIGN_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_SIGN_SEQ";
CREATE SEQUENCE "ZHAO"."USER_SIGN_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 81
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_TRANSFERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_TRANSFERS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_TRANSFERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1682
 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_VIRTUAL_ACCOUNTS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USER_VIRTUAL_ACCOUNTS_SEQ";
CREATE SEQUENCE "ZHAO"."USER_VIRTUAL_ACCOUNTS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 30076
 CACHE 20;

-- ----------------------------
-- Sequence structure for USERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."USERS_SEQ";
CREATE SEQUENCE "ZHAO"."USERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 8039051
 CACHE 20;

-- ----------------------------
-- Sequence structure for VERSIONING_PM_SEQ_NAMES_ID
-- ----------------------------
DROP SEQUENCE "ZHAO"."VERSIONING_PM_SEQ_NAMES_ID";
CREATE SEQUENCE "ZHAO"."VERSIONING_PM_SEQ_NAMES_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for VIPUSER_ASSIGN_HISTORY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."VIPUSER_ASSIGN_HISTORY_SEQ";
CREATE SEQUENCE "ZHAO"."VIPUSER_ASSIGN_HISTORY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3586
 CACHE 20;

-- ----------------------------
-- Sequence structure for VIPUSER_CALL_RECORDS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."VIPUSER_CALL_RECORDS_SEQ";
CREATE SEQUENCE "ZHAO"."VIPUSER_CALL_RECORDS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 742
 CACHE 20;

-- ----------------------------
-- Sequence structure for VIPUSER_DETAILS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."VIPUSER_DETAILS_SEQ";
CREATE SEQUENCE "ZHAO"."VIPUSER_DETAILS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1722
 CACHE 20;

-- ----------------------------
-- Sequence structure for VIPUSER_MEMO_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."VIPUSER_MEMO_SEQ";
CREATE SEQUENCE "ZHAO"."VIPUSER_MEMO_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 309
 CACHE 20;

-- ----------------------------
-- Sequence structure for VIPUSER_PHONE_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."VIPUSER_PHONE_SEQ";
CREATE SEQUENCE "ZHAO"."VIPUSER_PHONE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 523810
 CACHE 20;

-- ----------------------------
-- Sequence structure for VIPUSERS_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."VIPUSERS_SEQ";
CREATE SEQUENCE "ZHAO"."VIPUSERS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1722
 CACHE 20;

-- ----------------------------
-- Sequence structure for WEB_DATA_DICTIONARY_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEB_DATA_DICTIONARY_SEQ";
CREATE SEQUENCE "ZHAO"."WEB_DATA_DICTIONARY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 838
 CACHE 20;

-- ----------------------------
-- Sequence structure for WEB_HELPCENTER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEB_HELPCENTER_SEQ";
CREATE SEQUENCE "ZHAO"."WEB_HELPCENTER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for WEB_INDEX_ADVERT_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEB_INDEX_ADVERT_SEQ";
CREATE SEQUENCE "ZHAO"."WEB_INDEX_ADVERT_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 101
 CACHE 20;

-- ----------------------------
-- Sequence structure for WEB_INDEX_CONFIG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEB_INDEX_CONFIG_SEQ";
CREATE SEQUENCE "ZHAO"."WEB_INDEX_CONFIG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1196
 CACHE 20;

-- ----------------------------
-- Sequence structure for WEB_INDEX_FORUM_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEB_INDEX_FORUM_SEQ";
CREATE SEQUENCE "ZHAO"."WEB_INDEX_FORUM_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 41
 CACHE 20;

-- ----------------------------
-- Sequence structure for WEIXIN_GRAPHIC_MATERIAL_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_GRAPHIC_MATERIAL_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_GRAPHIC_MATERIAL_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 32
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for WEIXIN_KEYWORD_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_KEYWORD_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_KEYWORD_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 61
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for WEIXIN_MENU_DETAIL_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_MENU_DETAIL_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_MENU_DETAIL_SEQ"
 INCREMENT BY 1
 MINVALUE 10
 MAXVALUE 9999999999999999999999999999
 START WITH 70
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for WEIXIN_MENU_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_MENU_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_MENU_SEQ"
 INCREMENT BY 1
 MINVALUE 11
 MAXVALUE 9999999999999999999999999999
 START WITH 71
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for WEIXIN_MSG_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_MSG_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_MSG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 781
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for WEIXIN_TEST_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_TEST_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_TEST_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for WEIXIN_USER_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WEIXIN_USER_SEQ";
CREATE SEQUENCE "ZHAO"."WEIXIN_USER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 141
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for WIN_PRIZE_RECORD_SEQ
-- ----------------------------
DROP SEQUENCE "ZHAO"."WIN_PRIZE_RECORD_SEQ";
CREATE SEQUENCE "ZHAO"."WIN_PRIZE_RECORD_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 12301
 CACHE 20;

-- ----------------------------
-- Indexes structure for table APPLICATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table APPLICATION
-- ----------------------------
ALTER TABLE "ZHAO"."APPLICATION" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table APPLICATION
-- ----------------------------
ALTER TABLE "ZHAO"."APPLICATION" ADD PRIMARY KEY ("NAME");

-- ----------------------------
-- Indexes structure for table APPLICATIONUSERTYPE
-- ----------------------------

-- ----------------------------
-- Checks structure for table APPLICATIONUSERTYPE
-- ----------------------------
ALTER TABLE "ZHAO"."APPLICATIONUSERTYPE" ADD CHECK ("APPNAME" IS NOT NULL);
ALTER TABLE "ZHAO"."APPLICATIONUSERTYPE" ADD CHECK ("USERTYPENAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table APPLICATIONUSERTYPE
-- ----------------------------
ALTER TABLE "ZHAO"."APPLICATIONUSERTYPE" ADD PRIMARY KEY ("APPNAME", "USERTYPENAME");

-- ----------------------------
-- Indexes structure for table ARTICLE_QUOTES
-- ----------------------------

-- ----------------------------
-- Triggers structure for table ARTICLE_QUOTES
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."ARTICLE_QUOTES_SEQ" BEFORE INSERT ON "ZHAO"."ARTICLE_QUOTES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
select ARTICLE_QUOTES_SEQ.nextval into:New.id from dual;
end;

-- ----------------------------
-- Checks structure for table ARTICLE_QUOTES
-- ----------------------------
ALTER TABLE "ZHAO"."ARTICLE_QUOTES" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."ARTICLE_QUOTES" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "ZHAO"."ARTICLE_QUOTES" ADD CHECK ("TITLE" IS NOT NULL);
ALTER TABLE "ZHAO"."ARTICLE_QUOTES" ADD CHECK ("AUTHOR" IS NOT NULL);
ALTER TABLE "ZHAO"."ARTICLE_QUOTES" ADD CHECK ("CONTENT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ARTICLE_QUOTES
-- ----------------------------
ALTER TABLE "ZHAO"."ARTICLE_QUOTES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table ARTISTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table ARTISTS
-- ----------------------------
ALTER TABLE "ZHAO"."ARTISTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ARTISTS
-- ----------------------------
ALTER TABLE "ZHAO"."ARTISTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table ATTACHMENTS
-- ----------------------------
CREATE INDEX "ZHAO"."I_ATTACHMENTS_MESSAGE_ID"
ON "ZHAO"."ATTACHMENTS" ("MESSAGE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table ATTACHMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."ATTACHMENTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ATTACHMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."ATTACHMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_APPLY_STORAGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_APPLY_STORAGE
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_APPLY_STORAGE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_APPLY_STORAGE" ADD CHECK ("AUCTION_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_APPLY_STORAGE
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_APPLY_STORAGE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_ART
-- ----------------------------
CREATE INDEX "ZHAO"."AUCTION_ART_NAME"
ON "ZHAO"."AUCTION_ART" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_ART
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_ART" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_ART" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_ART" ADD CHECK ("TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_ART
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_ART" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_AUDITS
-- ----------------------------
CREATE INDEX "ZHAO"."I_AUCTION_AUDITS_AUCTION_ID"
ON "ZHAO"."AUCTION_AUDITS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_AUDITS_AUDIT_ID"
ON "ZHAO"."AUCTION_AUDITS" ("AUDIT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_AUDITS_BUSINESS_ID"
ON "ZHAO"."AUCTION_AUDITS" ("BUSINESS_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_AUDITS_CATEGORY_ID"
ON "ZHAO"."AUCTION_AUDITS" ("CATEGORY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_AUDITS_CONTRACT_ID"
ON "ZHAO"."AUCTION_AUDITS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_AUDITS_EMPLOYEE_ID"
ON "ZHAO"."AUCTION_AUDITS" ("EMPLOYEE_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UN_AUCTION_AUDITS"
ON "ZHAO"."AUCTION_AUDITS" ("CONTRACT_ID" ASC, "AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_AUDITS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_AUDITS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_AUDITS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_AUDITS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_BID_STATISTIC
-- ----------------------------
CREATE INDEX "ZHAO"."PK_AUCTION_BID_STATS"
ON "ZHAO"."AUCTION_BID_STATISTIC" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table AUCTION_BIDDINGS
-- ----------------------------
CREATE INDEX "ZHAO"."AUCTION_BIDDING_CONSIGN"
ON "ZHAO"."AUCTION_BIDDINGS" ("CONSIGN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."AUCTION_BIDDING_TYPE"
ON "ZHAO"."AUCTION_BIDDINGS" ("BIDDING" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."AUCTION_BIDDING_UID"
ON "ZHAO"."AUCTION_BIDDINGS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."AUCTION_BIDDING_UID_AID"
ON "ZHAO"."AUCTION_BIDDINGS" ("USER_ID" ASC, "AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."AUCTION_BIDDING_WATCHING"
ON "ZHAO"."AUCTION_BIDDINGS" ("WATCHING" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_BIDDINGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_BIDDINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_BIDDINGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_BIDDINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table AUCTION_CATALOGUE
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATALOGUE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table AUCTION_CATALOGUE_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATALOGUE_DETAILS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CATALOGUE_DETAILS" ADD CHECK ("CATALOGUE_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTION_CATEGORIES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_CATEGORIES_IS_SHOW"
ON "ZHAO"."AUCTION_CATEGORIES" ("IS_SHOW" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CATEGORIES_NAME"
ON "ZHAO"."AUCTION_CATEGORIES" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CATEGORIES_PARENT_ID"
ON "ZHAO"."AUCTION_CATEGORIES" ("PARENT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_CATEGORIES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_CATEGORIES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_CATEGORIES_MAPPING
-- ----------------------------
CREATE INDEX "ZHAO"."INDEC_AUCTION_CATEGORY_ID"
ON "ZHAO"."AUCTION_CATEGORIES_MAPPING" ("AUCTION_CATEGORY_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_CATEGORIES_MAPPING
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES_MAPPING" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_CATEGORIES_MAPPING
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES_MAPPING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_CATEGORIES_SEO
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_CATEGORIES_SEO
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES_SEO" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES_SEO" ADD CHECK ("CATEGORY_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_CATEGORIES_SEO
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CATEGORIES_SEO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_CHARACTERS
-- ----------------------------
CREATE INDEX "ZHAO"."I_CHARACTERS_IS_SHOW"
ON "ZHAO"."AUCTION_CHARACTERS" ("IS_SHOW" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_CHARACTERS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CHARACTERS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_CHARACTERS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CHARACTERS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_CLASS
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_CLASS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CLASS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CLASS" ADD CHECK ("AUCTION_NO" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CLASS" ADD CHECK ("CLASS_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_CLASS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CLASS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_CLASS_SUB
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_CLASS_SUB
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CLASS_SUB" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CLASS_SUB" ADD CHECK ("AUCTION_NO" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CLASS_SUB" ADD CHECK ("CLASS_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_CLASS_SUB" ADD CHECK ("CLASS_SUB_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_CLASS_SUB
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_CLASS_SUB" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_COLLECTION
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_AUCTION_COLL_AUCTION_ID"
ON "ZHAO"."AUCTION_COLLECTION" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTION_COLL_AUCTION_NO"
ON "ZHAO"."AUCTION_COLLECTION" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTION_COLL_IS_END"
ON "ZHAO"."AUCTION_COLLECTION" ("IS_END" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTION_COLL_IS_END_SEND"
ON "ZHAO"."AUCTION_COLLECTION" ("IS_END_SEND" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_COLLECTION
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_COLLECTION" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_COLLECTION
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_COLLECTION" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_DELAY
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_DELAY
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_DELAY" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_DELAY
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_DELAY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_DELAY_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_AUCTION_DELAY_DETAIL_AID"
ON "ZHAO"."AUCTION_DELAY_DETAILS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_DELAY_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_DELAY_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_DELAY_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_DELAY_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_EVENT_DIVER
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_EVENT_DIVER
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_EVENT_DIVER" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_EVENT_DIVER
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_EVENT_DIVER" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_EXPAND
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_EXPAND
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_EXPAND" ADD CHECK ("AUCTION_CODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_EXPAND
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_EXPAND" ADD PRIMARY KEY ("AUCTION_CODE");

-- ----------------------------
-- Indexes structure for table AUCTION_FEE_SETTINGS
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_FEE_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_FEE_SETTINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_FEE_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_FEE_SETTINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_FEES
-- ----------------------------
CREATE INDEX "ZHAO"."I_AUCTION_FEES_AUCTION_ID"
ON "ZHAO"."AUCTION_FEES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_AUCTION_FEES"
ON "ZHAO"."AUCTION_FEES" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table AUCTION_FEES
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."TRI_AUCTION_FEE_UPDATE" AFTER UPDATE OF "AUCTION_ID","CHARGE_FEE","CHARGE_FEE_PERCENT","CHARGE_PRICE","CUSTODY_DAY_FEE","CUSTODY_FEE","INSURE_FEE","INSURE_FEE_PERCENT","INSURE_PRICE","ONLOAD_FEE" ON "ZHAO"."AUCTION_FEES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
declare
  integrity_error exception;
  errno       integer;
  errmsg      varchar2(1000);
  v_status    varchar2(255);
  v_user_id   number(38);
  v_user_name varchar2(255);
  v_contract_id number(38);
  v_auction_no number(38);
  remark varchar2(4000);
  remark_old varchar2(4000);
begin

       select cd.status, con.user_id, con.user_name,con.id,auction_no
        into v_status, v_user_id, v_user_name,v_contract_id,v_auction_no
        from contract_details cd, contracts con, auctions a
       where cd.contract_id = con.id
         and a.contract_id = con.id
         and a.id = :new.auction_id;
     /**
         当数据没修改的时候  不加到remark字段中；
     */    
     if  :old.charge_fee != :new.charge_fee then
         remark_old := '服务费:' || :old.charge_fee;
         remark := '服务费:' || :new.charge_fee;
     end if;
     
     if  :old.insure_fee != :new.insure_fee then
         remark_old :=remark_old || ' 保险费:' || :old.insure_fee;
         remark :=remark || ' 保险费:' || :new.insure_fee;
     end if;

     if  :old.onload_fee != :new.onload_fee then
         remark_old := remark_old || ' 制作费:' || :old.onload_fee;
         remark := remark || ' 制作费:' || :new.onload_fee;
     end if;

     if  :old.custody_fee != :new.custody_fee then
         remark_old := remark_old ||  ' 保管费 :' || :old.custody_fee;
         remark := remark || ' 保管费:' || :new.custody_fee;
     end if;
     
     if  :old.charge_fee_percent != :new.charge_fee_percent then
         remark_old := remark_old ||  ' 服务费百分比:' || :old.charge_fee_percent;
         remark := remark || ' 服务费百分比:' || :new.charge_fee_percent;
     end if;

     if  :old.charge_price != :new.charge_price then
         remark_old := remark_old ||  ' 服务费金额 :' || :old.charge_price;
         remark := remark || ' 服务费金额 :' || :new.charge_price;
     end if;
     
     if  :old.insure_price != :new.insure_price then
         remark_old := remark_old ||  ' 保险额 :' || :old.insure_price;
         remark := remark || ' 保险额  :' || :new.insure_price;
     end if;

     if  :old.insure_fee_percent != :new.insure_fee_percent then
         remark_old := remark_old ||  ' 保险费百分比 :' || :old.insure_fee_percent;
         remark := remark || ' 保险费百分比 :' || :new.insure_fee_percent;
     end if;
     if  :old.custody_day_fee  != :new.custody_day_fee then
         remark_old := remark_old ||  ' 每天收取保管费 :' || :old.custody_day_fee;
         remark := remark || ' 每天收取保管费  :' || :new.custody_day_fee;
     end if;
     
     insert into auction_update_logs
            (id,
             auction_no,
             contract_id,
             user_id,
             user_name,
             contract_status,
             updated_at,
             updated_man,
             remark_old ,
             remark
             )
          values
            (auction_update_logs_seq.nextval,
             v_auction_no,
             v_contract_id,
             v_user_id,
             v_user_name,
             v_status,
             sysdate,
             :new.admin_name,
             remark_old,
             remark
             );


exception
  when integrity_error then
    raise_application_error(errno, errmsg);
end;


-- ----------------------------
-- Checks structure for table AUCTION_FEES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_FEES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTION_FORUM_RELATED
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_FORUM_RELATED
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_FORUM_RELATED" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_FORUM_RELATED" ADD CHECK ("FORUM_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_FORUM_RELATED
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_FORUM_RELATED" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table AUCTION_FORUM_RELATED_HUIHUI
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_FORUM_RELATED_HUIHUI" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_FORUM_RELATED_HUIHUI" ADD CHECK ("FORUM_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table AUCTION_KEY_WORDS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_KEY_WORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTION_MAX_PRICES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_MAX_PRICES_AUCTION_ID"
ON "ZHAO"."AUCTION_MAX_PRICES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MAX_PRICES_USER_ID"
ON "ZHAO"."AUCTION_MAX_PRICES" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UN_AUCTION_MAX_PRICES"
ON "ZHAO"."AUCTION_MAX_PRICES" ("USER_ID" ASC, "AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_MAX_PRICES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_MAX_PRICES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_MAX_PRICES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_MAX_PRICES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_MAX_PRICES_BPLUS
-- ----------------------------
CREATE INDEX "ZHAO"."IDX_MAX_BPLUS"
ON "ZHAO"."AUCTION_MAX_PRICES_BPLUS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_MAX_UID_BPLUS"
ON "ZHAO"."AUCTION_MAX_PRICES_BPLUS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UN_AUCTION_MAX_PRICES_BPLUS"
ON "ZHAO"."AUCTION_MAX_PRICES_BPLUS" ("USER_ID" ASC, "AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_MAX_PRICES_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_MAX_PRICES_BPLUS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_MAX_PRICES_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_MAX_PRICES_BPLUS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_MAX_PRICES_NEW
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_MAX_PRICES_N_AUCTION_ID"
ON "ZHAO"."AUCTION_MAX_PRICES_NEW" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MAX_PRICES_N_USER_ID"
ON "ZHAO"."AUCTION_MAX_PRICES_NEW" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UN_AUCTION_MAX_PRICES_NEW"
ON "ZHAO"."AUCTION_MAX_PRICES_NEW" ("USER_ID" ASC, "AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table AUCTION_MAX_PRICES_NEW
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."TRI_AUCTION_MAX_PRICE" AFTER UPDATE ON "ZHAO"."AUCTION_MAX_PRICES_NEW" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
DECLARE

BEGIN

/*     IF inserting THEN
        insert into auction_max_prices values (:NEW.id,:NEW.user_id,:NEW.auction_id,:NEW.max_price,:NEW.proxy_price,:NEW.auction_time,
        :NEW.nickname,:NEW.app_id,:NEW.created_at,:NEW.updated_at);*/
       IF updating THEN
        update auction_max_prices set user_id=:NEW.user_id,max_price=:NEW.max_price,proxy_price=:NEW.proxy_price,auction_time=:NEW.auction_time,
        nickname=:NEW.nickname,app_id=:NEW.app_id,updated_at=:NEW.updated_at where auction_id=:OLD.auction_id;
       END IF;
end;


-- ----------------------------
-- Checks structure for table AUCTION_MAX_PRICES_NEW
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_MAX_PRICES_NEW" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_MAX_PRICES_NEW
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_MAX_PRICES_NEW" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PICTURES
-- ----------------------------
CREATE INDEX "ZHAO"."I_PICTURES_ON_AUCTION_ID"
ON "ZHAO"."AUCTION_PICTURES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PICTURES_ON_PIC_ORDER"
ON "ZHAO"."AUCTION_PICTURES" ("PIC_ORDER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PICTURES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PICTURES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PICTURES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PICTURES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PICTURES_COVERLOGS
-- ----------------------------
CREATE INDEX "ZHAO"."AUCTION_COVER_ID_INDEX"
ON "ZHAO"."AUCTION_PICTURES_COVERLOGS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table AUCTION_PICTURES_COVERLOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PICTURES_COVERLOGS" ADD UNIQUE ("ID");

-- ----------------------------
-- Checks structure for table AUCTION_PICTURES_COVERLOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PICTURES_COVERLOGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTION_PICTURES_LOGS
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_PICTURES_LOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PICTURES_LOGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PICTURES_LOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PICTURES_LOGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PRICE_MODIFIES
-- ----------------------------
CREATE INDEX "ZHAO"."I_PRICE_MODIFIES_AUCTION_ID"
ON "ZHAO"."AUCTION_PRICE_MODIFIES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PRICE_MODIFIES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICE_MODIFIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PRICE_MODIFIES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICE_MODIFIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PRICES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_AUCTION_PRICES_ON_IS_MAX"
ON "ZHAO"."AUCTION_PRICES" ("IS_MAX" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_PRICES_AUCTION_ID"
ON "ZHAO"."AUCTION_PRICES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_PRICES_CREATED_AT"
ON "ZHAO"."AUCTION_PRICES" ("CREATED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_PRICES_USER_ID"
ON "ZHAO"."AUCTION_PRICES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PRICES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PRICES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PRICES_BPLUS
-- ----------------------------
CREATE INDEX "ZHAO"."IDX_PRICES_BPLUS_AID"
ON "ZHAO"."AUCTION_PRICES_BPLUS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_PRICES_BPLUS_CRT"
ON "ZHAO"."AUCTION_PRICES_BPLUS" ("CREATED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_PRICES_BPLUS_UID"
ON "ZHAO"."AUCTION_PRICES_BPLUS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PRICES_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES_BPLUS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PRICES_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES_BPLUS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PRICES_PARTITION
-- ----------------------------
CREATE INDEX "ZHAO"."IND_AUCTION_PRICES_P_ON_IS_MAX"
ON "ZHAO"."AUCTION_PRICES_PARTITION" ("IS_MAX" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_PRICES_P_AUCTION_ID"
ON "ZHAO"."AUCTION_PRICES_PARTITION" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_PRICES_P_USER_ID"
ON "ZHAO"."AUCTION_PRICES_PARTITION" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PRICES_PARTITION
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES_PARTITION" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PRICES_PARTITION
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES_PARTITION" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PRICES_PARTITION_BPLUS
-- ----------------------------
CREATE INDEX "ZHAO"."I_PRICE_BPLUS_P_AID"
ON "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PRICE_BPLUS_P_UDI"
ON "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PRICES_PARTITION_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PRICES_PARTITION_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PRICES_PARTITION_BPLUS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PROMOTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_PROMOTION
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROMOTION" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PROMOTION
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROMOTION" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table AUCTION_PROPERTY
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROPERTY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_PROPERTY" ADD CHECK ("AUCTION_NO" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTION_PROXY_PRICES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_PROXY_PRICES_AUCTION_ID"
ON "ZHAO"."AUCTION_PROXY_PRICES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_PROXY_PRICES_USER_ID"
ON "ZHAO"."AUCTION_PROXY_PRICES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PROXY_PRICES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROXY_PRICES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PROXY_PRICES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROXY_PRICES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_PROXY_PRICES_BPLUS
-- ----------------------------
CREATE INDEX "ZHAO"."IDX_PROXY_AID"
ON "ZHAO"."AUCTION_PROXY_PRICES_BPLUS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_PROXY_UID"
ON "ZHAO"."AUCTION_PROXY_PRICES_BPLUS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_PROXY_PRICES_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROXY_PRICES_BPLUS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_PROXY_PRICES_BPLUS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_PROXY_PRICES_BPLUS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_SOURCES
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_SOURCES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_SOURCES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_SOURCES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_SOURCES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_SPECIAL_TOPICS
-- ----------------------------
CREATE INDEX "ZHAO"."I_AUCTION_SPECIAL_TOPICS_NAME"
ON "ZHAO"."AUCTION_SPECIAL_TOPICS" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_SPECIAL_TOPICS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_SPECIAL_TOPICS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_SPECIAL_TOPICS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_SPECIAL_TOPICS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_STATUS_CHANGE_LOGS
-- ----------------------------
CREATE INDEX "ZHAO"."AC_STATS_CHG_LOG_ID_IDX"
ON "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_AUCTION_STATUS_CHANGE_LOGS"
ON "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_STATUS_CHANGE_LOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ADD CHECK ("AUCTION_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ADD CHECK ("OLD_STATUS" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ADD CHECK ("NEW_STATUS" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTION_STATUS_CHANGE_LOGS" ADD CHECK ("UPDATED_AT" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTION_TRANSLATES
-- ----------------------------
CREATE INDEX "ZHAO"."I_TRANSLATES_ADMIN_ID"
ON "ZHAO"."AUCTION_TRANSLATES" ("ADMIN_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_TRANSLATES_ADMIN_NAME"
ON "ZHAO"."AUCTION_TRANSLATES" ("ADMIN_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_TRANSLATES_AUCTION_ID"
ON "ZHAO"."AUCTION_TRANSLATES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_TRANSLATES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_TRANSLATES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_TRANSLATES
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_TRANSLATES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_UPDATE_LOGS
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_UPDATE_LOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_UPDATE_LOGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_UPDATE_LOGS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_UPDATE_LOGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_UPLOADS
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTION_UPLOADS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_UPLOADS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_UPLOADS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_UPLOADS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTION_WORDS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_AUCTION_WORDS_ON_KEY"
ON "ZHAO"."AUCTION_WORDS" ("KEY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTION_WORDS_ON_VALUE"
ON "ZHAO"."AUCTION_WORDS" ("VALUE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_WORDS_ADMIN_ID"
ON "ZHAO"."AUCTION_WORDS" ("ADMIN_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTION_WORDS_ADMIN_NAME"
ON "ZHAO"."AUCTION_WORDS" ("ADMIN_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTION_WORDS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_WORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTION_WORDS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTION_WORDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUCTIONS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_AUCTION_NO"
ON "ZHAO"."AUCTIONS" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_AUCTION_TYPE"
ON "ZHAO"."AUCTIONS" ("AUCTION_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_AUDIT_STATUS"
ON "ZHAO"."AUCTIONS" ("AUDIT_STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_CODE"
ON "ZHAO"."AUCTIONS" ("CODE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_CONTRACT_ID"
ON "ZHAO"."AUCTIONS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_END_AT"
ON "ZHAO"."AUCTIONS" ("END_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_IS_PREVIEW"
ON "ZHAO"."AUCTIONS" ("IS_PREVIEW" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_LETTER"
ON "ZHAO"."AUCTIONS" ("LETTER" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_NAME"
ON "ZHAO"."AUCTIONS" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_RELATED_ID"
ON "ZHAO"."AUCTIONS" ("RELATED_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_START_AT"
ON "ZHAO"."AUCTIONS" ("START_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_ON_STATUS"
ON "ZHAO"."AUCTIONS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTIONS_TOPIC_ID"
ON "ZHAO"."AUCTIONS" ("AUCTION_SPECIAL_TOPIC_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTIONS_CATEGORY_ID"
ON "ZHAO"."AUCTIONS" ("AUCTION_CATEGORY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTIONS_CHARACTER_ID"
ON "ZHAO"."AUCTIONS" ("AUCTION_CHARACTER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTIONS_LOGISTIC_DETAIL_ID"
ON "ZHAO"."AUCTIONS" ("LOGISTIC_DETAIL_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTIONS_RESALE_STATUS"
ON "ZHAO"."AUCTIONS" ("RESALE_STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_AUCTIONS_SETTLEMENT_STATUS"
ON "ZHAO"."AUCTIONS" ("SETTLEMENT_STATUS" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_AUCTIONS"
ON "ZHAO"."AUCTIONS" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table AUCTIONS
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."TRI_AUCTION_MAX_PRICE_NEW" AFTER UPDATE OF "STATUS" ON "ZHAO"."AUCTIONS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
DECLARE
  id_n           number(38);
  user_id_n      number(38);
  auction_id_n   number(38);
  max_price_n    number(16, 2);
  proxy_price_n  number(16, 2);
  auction_time_n number(38);
  nickname_n     varchar2(255 char);
  app_id_n       varchar2(255 char);
  created_at_n   date;
  updated_at_n   date;
  isfind         number(38);
  isfind_auction_max         number(38);

BEGIN                        
  BEGIN
  select auction_id into isfind_auction_max from auction_max_prices where auction_id = :OLD.id;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN 
  isfind_auction_max:=-1;
  END;

  IF :OLD.STATUS != :NEW.STATUS and :NEW.STATUS = 2 and isfind_auction_max!=:OLD.id THEN
  --如果max_price中没有数据，自行插入一条，结果是seq与后台插入的不同
  insert into auction_max_prices_new (ID,AUCTION_ID,MAX_PRICE,CREATED_AT) 
  values (auction_max_prices_seq.nextval,:NEW.id,:NEW.initial_price,sysdate);
  
  ELSIF :OLD.STATUS != :NEW.STATUS and :NEW.STATUS = 2 and isfind_auction_max=:OLD.id THEN
    select id,
           user_id,
           auction_id,
           max_price,
           proxy_price,
           auction_time,
           nickname,
           app_id,
           created_at,
           updated_at
      into id_n,
           user_id_n,
           auction_id_n,
           max_price_n,
           proxy_price_n,
           auction_time_n,
           nickname_n,
           app_id_n,
           created_at_n,
           updated_at_n
      from auction_max_prices a
     where a.auction_id = :OLD.id;

      --查找是否存在记录,有先删除，再插入
      
       BEGIN
       select auction_id into isfind from auction_max_prices_new where auction_id=:OLD.id;
       EXCEPTION
       WHEN NO_DATA_FOUND THEN
       NULL;
       END;

        
        BEGIN
        IF isfind = auction_id_n THEN
          delete from auction_max_prices_new where auction_id = isfind;
        END IF;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
        NULL;
        END;
        
        insert into auction_max_prices_new values
        (id_n, user_id_n,auction_id_n,max_price_n,proxy_price_n,auction_time_n,nickname_n,app_id_n,created_at_n,updated_at_n);
        
   ELSIF :OLD.STATUS = :NEW.STATUS THEN
    NULL;
   ELSE
    delete from auction_max_prices_new where auction_id = :OLD.id;
  END IF;
end;

CREATE OR REPLACE TRIGGER "ZHAO"."TRI_AUCTION_UPDATE" AFTER UPDATE OF "AUCTION_CATEGORY_ID","AUCTION_CHARACTER_ID","AUCTION_SPECIAL_TOPIC_ID","AUCTION_TYPE","DESCR","DYNAMIC_ATTRIBUTE","INITIAL_PRICE","STORAGE_CHARGES" ON "ZHAO"."AUCTIONS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
declare
  integrity_error exception;
  errno       integer;
  errmsg      varchar2(1000);
  v_status    varchar2(255);
  v_user_id   number(38);
  v_user_name varchar2(255);
  remark varchar2(4000);
  remark_old varchar2(4000);
begin

   select cd.status, con.user_id, con.user_name
            into v_status, v_user_id, v_user_name
            from contract_details cd, contracts con
           where cd.contract_id = con.id
             and contract_id = :new.contract_id;
/* if  ( --整理完毕 并且 名称或者分类修改过
       (v_status >=3)
         and
       (:old.name != :new.name or :old.auction_category_id != :new.auction_category_id or :old.dynamic_attribute!=:new.dynamic_attribute)
      )
   or
     (  --审核完毕 并且  品相或者描述修改过
       (v_status >=11)
         and
       (:old.auction_character_id != :new.auction_character_id or :old.descr != :new.descr or :old.dynamic_attribute!=:new.dynamic_attribute)
     )
  then*/
     if  :old.initial_price != :new.initial_price then
         remark_old := '底价:' || :old.initial_price;
         remark := '底价:' || :new.initial_price;
     end if;

     if  :old.storage_charges != :new.storage_charges then
         remark_old :=remark_old || ' 体积重量:' || :old.storage_charges;
         remark :=remark || ' 体积重量:' || :new.storage_charges;
     end if;

       insert into auction_update_logs
            (id,
             auction_no,
             contract_id,
             user_id,
             user_name,
             contract_status,
             auction_character_old_id,
             auction_character_id,
             auction_category_old_id,
             auction_category_id,
             descr_old,
             descr,
             updated_at,
             updated_man,
             name_old,
             name_new,
             dynamic_attribute_old,
             dynamic_attribute_new,
             auction_special_topic_old_id,
             auction_special_topic_id,
             auction_old_type,
             auction_type,
             remark_old ,
             remark)
          values
            (auction_update_logs_seq.nextval,
             :new.auction_no,
             :new.contract_id,
             v_user_id,
             v_user_name,
             v_status,
             :old.auction_character_id,
             :new.auction_character_id,
             :old.auction_category_id,
             :new.auction_category_id,
             :old.descr,
             :new.descr,
             sysdate,
             :new.admin_name,
             :old.name,
             :new.name,
             :old.dynamic_attribute,
             :new.dynamic_attribute ,
             :old.auction_special_topic_id ,
             :new.auction_special_topic_id,
             :old.auction_type ,
             :new.auction_type ,
             remark_old,
             remark);

 /* end if;*/

exception
  when integrity_error then
    raise_application_error(errno, errmsg);
end;


-- ----------------------------
-- Checks structure for table AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."AUCTIONS" ADD CHECK ("EXIT_BAN" IS NOT NULL);

-- ----------------------------
-- Checks structure for table AUCTIONS_0723
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS_0723" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table AUCTIONS_0725
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS_0725" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table AUCTIONS_TEST
-- ----------------------------

-- ----------------------------
-- Checks structure for table AUCTIONS_TEST
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS_TEST" ADD CHECK ("AUCTION_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTIONS_TEST
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS_TEST" ADD PRIMARY KEY ("AUCTION_NO");

-- ----------------------------
-- Indexes structure for table AUCTIONS_VIRTUAL_STORAGE
-- ----------------------------
CREATE INDEX "ZHAO"."I_AUCTIONS_VIRTUAL_STORAGE_ID"
ON "ZHAO"."AUCTIONS_VIRTUAL_STORAGE" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."PK_AUCTIONS_VIRTUAL_STORAGE"
ON "ZHAO"."AUCTIONS_VIRTUAL_STORAGE" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUCTIONS_VIRTUAL_STORAGE
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUCTIONS_VIRTUAL_STORAGE
-- ----------------------------
ALTER TABLE "ZHAO"."AUCTIONS_VIRTUAL_STORAGE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table AUDITS
-- ----------------------------
CREATE INDEX "ZHAO"."AUDITABLE_INDEX"
ON "ZHAO"."AUDITS" ("AUDITABLE_ID" ASC, "AUDITABLE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUDITS_ON_CREATED_AT"
ON "ZHAO"."AUDITS" ("CREATED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."USER_INDEX"
ON "ZHAO"."AUDITS" ("USER_ID" ASC, "USER_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table AUDITS
-- ----------------------------
ALTER TABLE "ZHAO"."AUDITS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table AUDITS
-- ----------------------------
ALTER TABLE "ZHAO"."AUDITS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table BANKS
-- ----------------------------

-- ----------------------------
-- Checks structure for table BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."BANKS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."BANKS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table BOOKINGS
-- ----------------------------

-- ----------------------------
-- Checks structure for table BOOKINGS
-- ----------------------------
ALTER TABLE "ZHAO"."BOOKINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table BOOKINGS
-- ----------------------------
ALTER TABLE "ZHAO"."BOOKINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CLASS_AREA
-- ----------------------------

-- ----------------------------
-- Checks structure for table CLASS_AREA
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_AREA" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLASS_AREA
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_AREA" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table CLASS_SUB
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_SUB" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASS_SUB" ADD CHECK ("CLASS_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASS_SUB" ADD CHECK ("SORT_NO" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASS_SUB" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASS_SUB" ADD CHECK ("NAME_GBK" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table CLASS_TIME
-- ----------------------------

-- ----------------------------
-- Checks structure for table CLASS_TIME
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_TIME" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLASS_TIME
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_TIME" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CLASS_TYPE
-- ----------------------------

-- ----------------------------
-- Checks structure for table CLASS_TYPE
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_TYPE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLASS_TYPE
-- ----------------------------
ALTER TABLE "ZHAO"."CLASS_TYPE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CLASSES
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."PK_CLASSES"
ON "ZHAO"."CLASSES" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CLASSES
-- ----------------------------
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("NAME_GBK" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("MID_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("MIN_NAME_GBK" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("SHORT_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("SHORT_NAME_GBK" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES" ADD CHECK ("CATEGORY_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLASSES
-- ----------------------------
ALTER TABLE "ZHAO"."CLASSES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table CLASSES_TEMP
-- ----------------------------
ALTER TABLE "ZHAO"."CLASSES_TEMP" ADD CHECK ("MID_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."CLASSES_TEMP" ADD CHECK ("SHORT_NAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table CLIENT_CATEGORY_PATH
-- ----------------------------

-- ----------------------------
-- Checks structure for table CLIENT_CATEGORY_PATH
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_CATEGORY_PATH" ADD CHECK ("CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."CLIENT_CATEGORY_PATH" ADD CHECK ("CATEGORY_PATH" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLIENT_CATEGORY_PATH
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_CATEGORY_PATH" ADD PRIMARY KEY ("CATEGORY_ID");

-- ----------------------------
-- Indexes structure for table CLIENT_ERROR_MSG
-- ----------------------------
CREATE INDEX "ZHAO"."UN_ERROR_CODE"
ON "ZHAO"."CLIENT_ERROR_MSG" ("ERROR_CODE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CLIENT_ERROR_MSG
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_ERROR_MSG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLIENT_ERROR_MSG
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_ERROR_MSG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CLIENT_FOCUS_CONFIG
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."PK_CLIENT_FOCUS_CONFIG"
ON "ZHAO"."CLIENT_FOCUS_CONFIG" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CLIENT_FOCUS_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_FOCUS_CONFIG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLIENT_FOCUS_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_FOCUS_CONFIG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CLIENT_USER_CONFIGURATIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table CLIENT_USER_CONFIGURATIONS
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_USER_CONFIGURATIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLIENT_USER_CONFIGURATIONS
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_USER_CONFIGURATIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CLIENT_USER_DEVICETOKEN
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."USER_DEVICETOKEN_IDX"
ON "ZHAO"."CLIENT_USER_DEVICETOKEN" ("DEVICETOKEN" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CLIENT_USER_DEVICETOKEN
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_USER_DEVICETOKEN" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CLIENT_USER_DEVICETOKEN
-- ----------------------------
ALTER TABLE "ZHAO"."CLIENT_USER_DEVICETOKEN" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table COMEBACK_STOCK_RESALE
-- ----------------------------
CREATE INDEX "ZHAO"."I_COM_STO_RES_USE_ID"
ON "ZHAO"."COMEBACK_STOCK_RESALE" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table COMEBACK_STOCK_RESALE
-- ----------------------------
ALTER TABLE "ZHAO"."COMEBACK_STOCK_RESALE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table COMEBACK_STOCK_RESALE
-- ----------------------------
ALTER TABLE "ZHAO"."COMEBACK_STOCK_RESALE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table COMEBACK_TRUST_CHARGE
-- ----------------------------
CREATE INDEX "ZHAO"."I_COM_TRU_CHA_USE_ID"
ON "ZHAO"."COMEBACK_TRUST_CHARGE" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table COMEBACK_TRUST_CHARGE
-- ----------------------------
ALTER TABLE "ZHAO"."COMEBACK_TRUST_CHARGE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table COMEBACK_TRUST_CHARGE
-- ----------------------------
ALTER TABLE "ZHAO"."COMEBACK_TRUST_CHARGE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table COMMON_REMARK_CATEGORIES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_REMARK_CATEGORIES_NAME"
ON "ZHAO"."COMMON_REMARK_CATEGORIES" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table COMMON_REMARK_CATEGORIES
-- ----------------------------
ALTER TABLE "ZHAO"."COMMON_REMARK_CATEGORIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table COMMON_REMARK_CATEGORIES
-- ----------------------------
ALTER TABLE "ZHAO"."COMMON_REMARK_CATEGORIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table COMMON_REMARKS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_COMMON_REMARKS_ON_SOURCE"
ON "ZHAO"."COMMON_REMARKS" ("SOURCE_ID" ASC, "SOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_COMMON_REMARKS_ADMIN_ID"
ON "ZHAO"."COMMON_REMARKS" ("ADMIN_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_COMMON_REMARKS_CUSTOM_TYPE"
ON "ZHAO"."COMMON_REMARKS" ("CUSTOM_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table COMMON_REMARKS
-- ----------------------------
ALTER TABLE "ZHAO"."COMMON_REMARKS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table COMMON_REMARKS
-- ----------------------------
ALTER TABLE "ZHAO"."COMMON_REMARKS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table COMPANY_FINANCE_DETAILS
-- ----------------------------

-- ----------------------------
-- Checks structure for table COMPANY_FINANCE_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."COMPANY_FINANCE_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table COMPANY_FINANCE_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."COMPANY_FINANCE_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CONTRACT_ASSIGNS
-- ----------------------------
CREATE INDEX "ZHAO"."I_CONTRACT_ASSIGNS_CONTRACT_ID"
ON "ZHAO"."CONTRACT_ASSIGNS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACT_ASSIGNS_FROM_ID"
ON "ZHAO"."CONTRACT_ASSIGNS" ("FROM_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACT_ASSIGNS_SUBMIT_ID"
ON "ZHAO"."CONTRACT_ASSIGNS" ("SUBMIT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACT_ASSIGNS_TO_ID"
ON "ZHAO"."CONTRACT_ASSIGNS" ("ASSIGNED_TO_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CONTRACT_ASSIGNS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_ASSIGNS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CONTRACT_ASSIGNS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_ASSIGNS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CONTRACT_ATTACHMENTS
-- ----------------------------
CREATE INDEX "ZHAO"."I_ATTACHMENTS_CONTRACT_ID"
ON "ZHAO"."CONTRACT_ATTACHMENTS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CONTRACT_ATTACHMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_ATTACHMENTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CONTRACT_ATTACHMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_ATTACHMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CONTRACT_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_CONTRACT_DET_INSTORAGEAT"
ON "ZHAO"."CONTRACT_DETAILS" ("IN_STORAGE_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACT_DETAILS_CONTRACT_ID"
ON "ZHAO"."CONTRACT_DETAILS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACT_DETAILS_COOPSTATUS"
ON "ZHAO"."CONTRACT_DETAILS" ("COOPERATE_STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACT_DETAILS_USER_ID"
ON "ZHAO"."CONTRACT_DETAILS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CONTRACT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CONTRACT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CONTRACT_SETTINGS
-- ----------------------------

-- ----------------------------
-- Checks structure for table CONTRACT_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_SETTINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CONTRACT_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_SETTINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CONTRACT_SMS
-- ----------------------------

-- ----------------------------
-- Checks structure for table CONTRACT_SMS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_SMS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CONTRACT_SMS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACT_SMS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CONTRACTS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_CONTRACTS_ON_CATEGORY_ID"
ON "ZHAO"."CONTRACTS" ("CATEGORY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CONTRACTS_ON_USER_ID"
ON "ZHAO"."CONTRACTS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CONTRACTS_ON_USER_LEVEL"
ON "ZHAO"."CONTRACTS" ("USER_LEVEL" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CONTRACTS_ON_USER_NAME"
ON "ZHAO"."CONTRACTS" ("USER_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CONTRACT_CREATED_AT"
ON "ZHAO"."CONTRACTS" ("CREATED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACTS_CONTRACT_SIGNER_ID"
ON "ZHAO"."CONTRACTS" ("CONTRACT_SIGNER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_CONTRACTS_SPECIAL_TOPIC_ID"
ON "ZHAO"."CONTRACTS" ("SPECIAL_TOPIC_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table CONTRACTS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CONTRACTS
-- ----------------------------
ALTER TABLE "ZHAO"."CONTRACTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table CUSTOMER
-- ----------------------------
ALTER TABLE "ZHAO"."CUSTOMER" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table DELIVER_FEE
-- ----------------------------

-- ----------------------------
-- Checks structure for table DELIVER_FEE
-- ----------------------------
ALTER TABLE "ZHAO"."DELIVER_FEE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table DELIVER_FEE
-- ----------------------------
ALTER TABLE "ZHAO"."DELIVER_FEE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table DELIVER_REGIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table DELIVER_REGIONS
-- ----------------------------
ALTER TABLE "ZHAO"."DELIVER_REGIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table DELIVER_REGIONS
-- ----------------------------
ALTER TABLE "ZHAO"."DELIVER_REGIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table DISCUSS_QUOTES
-- ----------------------------

-- ----------------------------
-- Triggers structure for table DISCUSS_QUOTES
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."DISCUSS_QUOTES_SEQ" BEFORE INSERT ON "ZHAO"."DISCUSS_QUOTES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
select DISCUSS_QUOTES_SEQ.nextval into:New.id from dual;
end;

-- ----------------------------
-- Checks structure for table DISCUSS_QUOTES
-- ----------------------------
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD CHECK ("BELONG_TYPE" IS NOT NULL);
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD CHECK ("CONTENT" IS NOT NULL);
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD CHECK ("ARTICLE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table DISCUSS_QUOTES
-- ----------------------------
ALTER TABLE "ZHAO"."DISCUSS_QUOTES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table DR_FS_FSENTRY
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."DR_FS_FSENTRY_IDX"
ON "ZHAO"."DR_FS_FSENTRY" ("FSENTRY_PATH" ASC, "FSENTRY_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table DR_FS_FSENTRY
-- ----------------------------
ALTER TABLE "ZHAO"."DR_FS_FSENTRY" ADD CHECK ("FSENTRY_PATH" IS NOT NULL);
ALTER TABLE "ZHAO"."DR_FS_FSENTRY" ADD CHECK ("FSENTRY_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."DR_FS_FSENTRY" ADD CHECK ("FSENTRY_LASTMOD" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table DR_FSENTRY
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."DR_FSENTRY_IDX"
ON "ZHAO"."DR_FSENTRY" ("FSENTRY_PATH" ASC, "FSENTRY_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table DR_FSENTRY
-- ----------------------------
ALTER TABLE "ZHAO"."DR_FSENTRY" ADD CHECK ("FSENTRY_PATH" IS NOT NULL);
ALTER TABLE "ZHAO"."DR_FSENTRY" ADD CHECK ("FSENTRY_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."DR_FSENTRY" ADD CHECK ("FSENTRY_LASTMOD" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table DR_PM_BINVAL
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."DR_PM_BINVAL_IDX"
ON "ZHAO"."DR_PM_BINVAL" ("BINVAL_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table DR_PM_BINVAL
-- ----------------------------
ALTER TABLE "ZHAO"."DR_PM_BINVAL" ADD CHECK ("BINVAL_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table DR_PM_BUNDLE
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."DR_PM_BUNDLE_IDX"
ON "ZHAO"."DR_PM_BUNDLE" ("NODE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table DR_PM_BUNDLE
-- ----------------------------
ALTER TABLE "ZHAO"."DR_PM_BUNDLE" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."DR_PM_BUNDLE" ADD CHECK ("BUNDLE_DATA" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table DR_PM_NAMES
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."DR_PM_NAMES_IDX"
ON "ZHAO"."DR_PM_NAMES" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table DR_PM_NAMES
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."DR_PM_T1" BEFORE INSERT ON "ZHAO"."DR_PM_NAMES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin select DR_PM_seq_names_id.nextval into :new.id from dual; end;



-- ----------------------------
-- Checks structure for table DR_PM_NAMES
-- ----------------------------
ALTER TABLE "ZHAO"."DR_PM_NAMES" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table DR_PM_NAMES
-- ----------------------------
ALTER TABLE "ZHAO"."DR_PM_NAMES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table DR_PM_REFS
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."DR_PM_REFS_IDX"
ON "ZHAO"."DR_PM_REFS" ("NODE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table DR_PM_REFS
-- ----------------------------
ALTER TABLE "ZHAO"."DR_PM_REFS" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."DR_PM_REFS" ADD CHECK ("REFS_DATA" IS NOT NULL);

-- ----------------------------
-- Checks structure for table EC_AUCTION_BOOK
-- ----------------------------
ALTER TABLE "ZHAO"."EC_AUCTION_BOOK" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table EDM
-- ----------------------------

-- ----------------------------
-- Triggers structure for table EDM
-- ----------------------------
CREATE OR REPLACE TRIGGER "ZHAO"."EDM_SEQ" BEFORE INSERT ON "ZHAO"."EDM" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
select EDM_SEQ.nextval into:New.id from dual;
end;

-- ----------------------------
-- Checks structure for table EDM
-- ----------------------------
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("TITLE" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("BANNER_PIC_LINK" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("SPECIAL" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("AUCTIONS" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("TITLE" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("BANNER_PIC_LINK" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("SPECIAL" IS NOT NULL);
ALTER TABLE "ZHAO"."EDM" ADD CHECK ("AUCTIONS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table EDM
-- ----------------------------
ALTER TABLE "ZHAO"."EDM" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table EMPLOYEES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_EMPLOYEES_ON_LOGIN"
ON "ZHAO"."EMPLOYEES" ("LOGIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_EMPLOYEES_ON_NAME"
ON "ZHAO"."EMPLOYEES" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_EMPLOYEES_ON_POSITION"
ON "ZHAO"."EMPLOYEES" ("POSITION" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_EMPLOYEES_ON_STATUS"
ON "ZHAO"."EMPLOYEES" ("STATUS" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table EMPLOYEES
-- ----------------------------
ALTER TABLE "ZHAO"."EMPLOYEES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table EMPLOYEES
-- ----------------------------
ALTER TABLE "ZHAO"."EMPLOYEES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table EMPLOYES
-- ----------------------------

-- ----------------------------
-- Checks structure for table EMPLOYES
-- ----------------------------
ALTER TABLE "ZHAO"."EMPLOYES" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."EMPLOYES" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table EMPLOYES
-- ----------------------------
ALTER TABLE "ZHAO"."EMPLOYES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table EVENTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table EVENTS
-- ----------------------------
ALTER TABLE "ZHAO"."EVENTS" ADD CHECK ("EVENT_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table EVENTS
-- ----------------------------
ALTER TABLE "ZHAO"."EVENTS" ADD PRIMARY KEY ("EVENT_ID");

-- ----------------------------
-- Indexes structure for table FEEDBACK
-- ----------------------------

-- ----------------------------
-- Checks structure for table FEEDBACK
-- ----------------------------
ALTER TABLE "ZHAO"."FEEDBACK" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FEEDBACK
-- ----------------------------
ALTER TABLE "ZHAO"."FEEDBACK" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FEEDBACK_QUOTES
-- ----------------------------

-- ----------------------------
-- Checks structure for table FEEDBACK_QUOTES
-- ----------------------------
ALTER TABLE "ZHAO"."FEEDBACK_QUOTES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FEEDBACK_QUOTES
-- ----------------------------
ALTER TABLE "ZHAO"."FEEDBACK_QUOTES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FINANCE_BANK_CURRENCIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table FINANCE_BANK_CURRENCIES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_BANK_CURRENCIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FINANCE_BANK_CURRENCIES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_BANK_CURRENCIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FINANCE_BANKS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_FINANCE_BANKS_ON_NAME"
ON "ZHAO"."FINANCE_BANKS" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table FINANCE_BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_BANKS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FINANCE_BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_BANKS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FINANCE_COMPANY_BANKS
-- ----------------------------
CREATE INDEX "ZHAO"."I_COMP_BANK_DEPOSIT_TYPE_ID"
ON "ZHAO"."FINANCE_COMPANY_BANKS" ("FINANCE_DEPOSIT_TYPE_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_FINANCE_COMPANY_BANKS_NAME"
ON "ZHAO"."FINANCE_COMPANY_BANKS" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table FINANCE_COMPANY_BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_COMPANY_BANKS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FINANCE_COMPANY_BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_COMPANY_BANKS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FINANCE_CURRENCIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table FINANCE_CURRENCIES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_CURRENCIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FINANCE_CURRENCIES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_CURRENCIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FINANCE_DEPOSIT_TYPES
-- ----------------------------
CREATE INDEX "ZHAO"."I_FINANCE_DEPOSIT_TYPES_NAME"
ON "ZHAO"."FINANCE_DEPOSIT_TYPES" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table FINANCE_DEPOSIT_TYPES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_DEPOSIT_TYPES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FINANCE_DEPOSIT_TYPES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_DEPOSIT_TYPES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FINANCE_EXCHANGE_RATES
-- ----------------------------
CREATE INDEX "ZHAO"."EXCHANGE_RATES_CURRENCY_ID"
ON "ZHAO"."FINANCE_EXCHANGE_RATES" ("FINANCE_CURRENCY_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table FINANCE_EXCHANGE_RATES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_EXCHANGE_RATES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FINANCE_EXCHANGE_RATES
-- ----------------------------
ALTER TABLE "ZHAO"."FINANCE_EXCHANGE_RATES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FOREIGN_DELIVER_TYPES
-- ----------------------------

-- ----------------------------
-- Checks structure for table FOREIGN_DELIVER_TYPES
-- ----------------------------
ALTER TABLE "ZHAO"."FOREIGN_DELIVER_TYPES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table FOREIGN_DELIVER_TYPES
-- ----------------------------
ALTER TABLE "ZHAO"."FOREIGN_DELIVER_TYPES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table FS_FSENTRY
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."FS_FSENTRY_IDX"
ON "ZHAO"."FS_FSENTRY" ("FSENTRY_PATH" ASC, "FSENTRY_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table FS_FSENTRY
-- ----------------------------
ALTER TABLE "ZHAO"."FS_FSENTRY" ADD CHECK ("FSENTRY_PATH" IS NOT NULL);
ALTER TABLE "ZHAO"."FS_FSENTRY" ADD CHECK ("FSENTRY_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."FS_FSENTRY" ADD CHECK ("FSENTRY_LASTMOD" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table GUIDANCES
-- ----------------------------

-- ----------------------------
-- Checks structure for table GUIDANCES
-- ----------------------------
ALTER TABLE "ZHAO"."GUIDANCES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table GUIDANCES
-- ----------------------------
ALTER TABLE "ZHAO"."GUIDANCES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table HELP_CENTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table HELP_CENTER
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table HELP_CENTER
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table HELP_CENTER_PAGE_CFG
-- ----------------------------

-- ----------------------------
-- Checks structure for table HELP_CENTER_PAGE_CFG
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER_PAGE_CFG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table HELP_CENTER_PAGE_CFG
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER_PAGE_CFG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table HELP_CENTER_PAGE_IDF
-- ----------------------------

-- ----------------------------
-- Checks structure for table HELP_CENTER_PAGE_IDF
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER_PAGE_IDF" ADD CHECK ("PAGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table HELP_CENTER_PAGE_IDF
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER_PAGE_IDF" ADD PRIMARY KEY ("PAGE_ID");

-- ----------------------------
-- Indexes structure for table HELP_CENTER_QUESTION_BIND
-- ----------------------------

-- ----------------------------
-- Checks structure for table HELP_CENTER_QUESTION_BIND
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER_QUESTION_BIND" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."HELP_CENTER_QUESTION_BIND" ADD CHECK ("PARENT_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."HELP_CENTER_QUESTION_BIND" ADD CHECK ("HELP_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table HELP_CENTER_QUESTION_BIND
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_CENTER_QUESTION_BIND" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table HELP_KEYWORDS
-- ----------------------------

-- ----------------------------
-- Checks structure for table HELP_KEYWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_KEYWORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table HELP_KEYWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."HELP_KEYWORDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table HOSANE_ARTISTS
-- ----------------------------
CREATE INDEX "ZHAO"."ARTISTCODE"
ON "ZHAO"."HOSANE_ARTISTS" ("ARTISTCODE" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_ARTIST_ARTISTID"
ON "ZHAO"."HOSANE_ARTISTS" ("ARTISTID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table HOSANE_AUCTION
-- ----------------------------
CREATE INDEX "ZHAO"."ARTISTSID"
ON "ZHAO"."HOSANE_AUCTION" ("ARTISTSID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."BUY_ACCOUNT_CODE"
ON "ZHAO"."HOSANE_AUCTION" ("BUY_ACCOUNT_CODE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."CONTRACTID"
ON "ZHAO"."HOSANE_AUCTION" ("CONTRACTID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."HOSANE_AUCTIONCODE"
ON "ZHAO"."HOSANE_AUCTION" ("AUCTIONCODE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SELL_BUY_CODE"
ON "ZHAO"."HOSANE_AUCTION" ("SELL_ACCOUNT_CODE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IND_SPECIALCODE"
ON "ZHAO"."HOSANE_AUCTION" ("SPECIALCODE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."LOT"
ON "ZHAO"."HOSANE_AUCTION" ("LOT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."MARKID"
ON "ZHAO"."HOSANE_AUCTION" ("MARKID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."MATERIAL_ID"
ON "ZHAO"."HOSANE_AUCTION" ("MATERIALID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_HOSANE_AUCTION_ID"
ON "ZHAO"."HOSANE_AUCTION" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table HOSANE_AUCTION_CATAGORY
-- ----------------------------
CREATE INDEX "ZHAO"."CATAGORYCODE"
ON "ZHAO"."HOSANE_AUCTION_CATAGORY" ("CATAGORYCODE" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_HOSANE_AUCTION_CATAGORY"
ON "ZHAO"."HOSANE_AUCTION_CATAGORY" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table HOSANE_AUCTION_EXPAND
-- ----------------------------
ALTER TABLE "ZHAO"."HOSANE_AUCTION_EXPAND" ADD CHECK ("AUCTION_CODE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table HOSANE_AUCTION_SPECAIL
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."PK_HOSANE_AUCTION_SPECAIL"
ON "ZHAO"."HOSANE_AUCTION_SPECAIL" ("ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."SPECIALCODE"
ON "ZHAO"."HOSANE_AUCTION_SPECAIL" ("SPECIALCODE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table HOSANE_CONTRACTSEASON
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."PK_HOSANE_CONTRACTSEASON"
ON "ZHAO"."HOSANE_CONTRACTSEASON" ("ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UQ_HOSANE_CONTRACTSEASON"
ON "ZHAO"."HOSANE_CONTRACTSEASON" ("SEASONCODE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table HOSANE_DEFAULT_AUCTIONS
-- ----------------------------
CREATE INDEX "ZHAO"."HDA_LOT"
ON "ZHAO"."HOSANE_DEFAULT_AUCTIONS" ("LOT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table HOSANE_FREEZE_BAIL
-- ----------------------------
ALTER TABLE "ZHAO"."HOSANE_FREEZE_BAIL" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table HOSANE_USER_AUCTIONS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_HUA_ON_USER_ID"
ON "ZHAO"."HOSANE_USER_AUCTIONS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_HUA_AUCTION_ID"
ON "ZHAO"."HOSANE_USER_AUCTIONS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."UN_HUA"
ON "ZHAO"."HOSANE_USER_AUCTIONS" ("AUCTION_ID" ASC, "USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table HOSANE_USER_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."HOSANE_USER_AUCTIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table HOSANE_USER_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."HOSANE_USER_AUCTIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table INDEX_ANNOUNCEMENTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table INDEX_ANNOUNCEMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."INDEX_ANNOUNCEMENTS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."INDEX_ANNOUNCEMENTS" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "ZHAO"."INDEX_ANNOUNCEMENTS" ADD CHECK ("TITLE" IS NOT NULL);
ALTER TABLE "ZHAO"."INDEX_ANNOUNCEMENTS" ADD CHECK ("CONTENT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table INDEX_ANNOUNCEMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."INDEX_ANNOUNCEMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table INDEX_AUCTION
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_AUCTION_CAG"
ON "ZHAO"."INDEX_AUCTION" ("CATEGORIES" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTION_FORUM"
ON "ZHAO"."INDEX_AUCTION" ("FORUM_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_AUCTION_TIME"
ON "ZHAO"."INDEX_AUCTION" ("INDEX_TIME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table INDEX_FORUM
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_FORUM_CLASSES"
ON "ZHAO"."INDEX_FORUM" ("CLASSES_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_FORUM_FORUM"
ON "ZHAO"."INDEX_FORUM" ("FORUM_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_FORUM_IS_INDEX_S"
ON "ZHAO"."INDEX_FORUM" ("IS_INDEX_SAMPLE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_FORUM_IS_SAMPLE"
ON "ZHAO"."INDEX_FORUM" ("IS_SAMPLE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_FORUM_NAME"
ON "ZHAO"."INDEX_FORUM" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table INDEX_FORUM
-- ----------------------------
ALTER TABLE "ZHAO"."INDEX_FORUM" ADD CHECK ("CHI_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table INDEX_FORUM
-- ----------------------------
ALTER TABLE "ZHAO"."INDEX_FORUM" ADD PRIMARY KEY ("CHI_NO", "NAME", "FORUM_ID");

-- ----------------------------
-- Indexes structure for table JINIANBI
-- ----------------------------

-- ----------------------------
-- Checks structure for table JINIANBI
-- ----------------------------
ALTER TABLE "ZHAO"."JINIANBI" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."JINIANBI" ADD CHECK ("BELONG_YEAR" IS NOT NULL);
ALTER TABLE "ZHAO"."JINIANBI" ADD CHECK ("ZHAOYANSHENG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table JINIANBI
-- ----------------------------
ALTER TABLE "ZHAO"."JINIANBI" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table JINIANBI_SETINFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table JINIANBI_SETINFO
-- ----------------------------
ALTER TABLE "ZHAO"."JINIANBI_SETINFO" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."JINIANBI_SETINFO" ADD CHECK ("SET_SIZE" IS NOT NULL);
ALTER TABLE "ZHAO"."JINIANBI_SETINFO" ADD CHECK ("SET_SERIAL_NO" IS NOT NULL);
ALTER TABLE "ZHAO"."JINIANBI_SETINFO" ADD CHECK ("BELONG_YEAR" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table JINIANBI_SETINFO
-- ----------------------------
ALTER TABLE "ZHAO"."JINIANBI_SETINFO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table JTA
-- ----------------------------
ALTER TABLE "ZHAO"."JTA" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."JTA" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table KEYWORDS
-- ----------------------------

-- ----------------------------
-- Checks structure for table KEYWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."KEYWORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table KEYWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."KEYWORDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table KUAIDI
-- ----------------------------

-- ----------------------------
-- Checks structure for table KUAIDI
-- ----------------------------
ALTER TABLE "ZHAO"."KUAIDI" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table KUAIDI
-- ----------------------------
ALTER TABLE "ZHAO"."KUAIDI" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LEND_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_LEND_DETAILS_ON_LEND_ID"
ON "ZHAO"."LEND_DETAILS" ("LEND_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LEND_DETAILS_AUCTION_ID"
ON "ZHAO"."LEND_DETAILS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LEND_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."LEND_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LEND_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."LEND_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LENDS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_LENDS_ON_LEND_TYPE"
ON "ZHAO"."LENDS" ("LEND_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_LENDS_ON_USER_ID"
ON "ZHAO"."LENDS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LENDS
-- ----------------------------
ALTER TABLE "ZHAO"."LENDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LENDS
-- ----------------------------
ALTER TABLE "ZHAO"."LENDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGGED_EXCEPTIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table LOGGED_EXCEPTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGGED_EXCEPTIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGGED_EXCEPTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGGED_EXCEPTIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTIC_COMPANIES
-- ----------------------------
CREATE INDEX "ZHAO"."I_LOGISTIC_COMPANIES_NAME"
ON "ZHAO"."LOGISTIC_COMPANIES" ("NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOGISTIC_COMPANIES
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_COMPANIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTIC_COMPANIES
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_COMPANIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTIC_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_LOGISTIC_DETAILS_LOGISTIC_ID"
ON "ZHAO"."LOGISTIC_DETAILS" ("LOGISTIC_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LOGISTIC_DETAILS_STATUS"
ON "ZHAO"."LOGISTIC_DETAILS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LOGISTIC_DETAILS_USER_ID"
ON "ZHAO"."LOGISTIC_DETAILS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LOG_DET_OLD_LOG_ID"
ON "ZHAO"."LOGISTIC_DETAILS" ("OLD_LOGISTIC_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOGISTIC_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTIC_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTIC_LADING_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_LD_AUCTION_ID"
ON "ZHAO"."LOGISTIC_LADING_DETAILS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LD_LOGISTIC_LADING_ID"
ON "ZHAO"."LOGISTIC_LADING_DETAILS" ("LOGISTIC_LADING_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOGISTIC_LADING_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_LADING_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTIC_LADING_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_LADING_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTIC_LADINGS
-- ----------------------------
CREATE INDEX "ZHAO"."I_LOGISTIC_LADINGS_USER_ID"
ON "ZHAO"."LOGISTIC_LADINGS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOGISTIC_LADINGS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_LADINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTIC_LADINGS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_LADINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTIC_TYPE_FEES
-- ----------------------------

-- ----------------------------
-- Checks structure for table LOGISTIC_TYPE_FEES
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_TYPE_FEES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTIC_TYPE_FEES
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_TYPE_FEES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTIC_TYPES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_LOGISTIC_TYPES_ON_NAME"
ON "ZHAO"."LOGISTIC_TYPES" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LOG_TYP_LOG_COM_ID"
ON "ZHAO"."LOGISTIC_TYPES" ("LOGISTIC_COMPANY_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOGISTIC_TYPES
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_TYPES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTIC_TYPES
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTIC_TYPES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table LOGISTICS
-- ----------------------------
CREATE INDEX "ZHAO"."I_LOGISTICS_LOGISTIC_TYPE_ID"
ON "ZHAO"."LOGISTICS" ("LOGISTIC_TYPE_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LOGISTICS_USER_ADDRESS_ID"
ON "ZHAO"."LOGISTICS" ("USER_ADDRESS_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LOGSTICS_TRUE_OUT_DATE"
ON "ZHAO"."LOGISTICS" (TRUNC("TRUE_OUT_DATE") ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."L_LOGISTICS_CREATED_AT"
ON "ZHAO"."LOGISTICS" ("CREATED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."L_LOGISTICS_USER_ID"
ON "ZHAO"."LOGISTICS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOGISTICS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTICS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOGISTICS
-- ----------------------------
ALTER TABLE "ZHAO"."LOGISTICS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table MESSAGES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_APP_ID"
ON "ZHAO"."MESSAGES" ("APP_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_CREATED_AT"
ON "ZHAO"."MESSAGES" ("CREATED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_FROM_ID"
ON "ZHAO"."MESSAGES" ("FROM_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_IS_SEND_DEL"
ON "ZHAO"."MESSAGES" ("IS_SEND_DEL" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_MSG_STATUS"
ON "ZHAO"."MESSAGES" ("MSG_STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_MSG_TYPE"
ON "ZHAO"."MESSAGES" ("MSG_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_PARENT_ID"
ON "ZHAO"."MESSAGES" ("PARENT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_MESSAGES_ON_TO_ID"
ON "ZHAO"."MESSAGES" ("TO_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_MESSAGES_IS_RECEIVE_DEL"
ON "ZHAO"."MESSAGES" ("IS_RECEIVE_DEL" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_MESSAGES_MSG_CATEGORY_ID"
ON "ZHAO"."MESSAGES" ("MSG_CATEGORY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_MESSAGES_TRANSACT_STATUS"
ON "ZHAO"."MESSAGES" ("TRANSACT_STATUS" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table MESSAGES
-- ----------------------------
ALTER TABLE "ZHAO"."MESSAGES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table MESSAGES
-- ----------------------------
ALTER TABLE "ZHAO"."MESSAGES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table MSG_CATEGORIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table MSG_CATEGORIES
-- ----------------------------
ALTER TABLE "ZHAO"."MSG_CATEGORIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table MSG_CATEGORIES
-- ----------------------------
ALTER TABLE "ZHAO"."MSG_CATEGORIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table MSG_TEMPLATES
-- ----------------------------

-- ----------------------------
-- Checks structure for table MSG_TEMPLATES
-- ----------------------------
ALTER TABLE "ZHAO"."MSG_TEMPLATES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table MSG_TEMPLATES
-- ----------------------------
ALTER TABLE "ZHAO"."MSG_TEMPLATES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table PAINT_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table PAINT_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."PAINT_CONFIG" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PAINT_CONFIG" ADD CHECK ("AUCTION_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PAINT_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."PAINT_CONFIG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table PARTNER_PAYMENT_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_PARTNER_DETAILS_CONTRACT_ID"
ON "ZHAO"."PARTNER_PAYMENT_DETAILS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PARTNER_DETAILS_USER_ID"
ON "ZHAO"."PARTNER_PAYMENT_DETAILS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PARTNER_DETAILS_USER_NAME"
ON "ZHAO"."PARTNER_PAYMENT_DETAILS" ("USER_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PPD_PARTNER_PAYMENT_ID"
ON "ZHAO"."PARTNER_PAYMENT_DETAILS" ("PARTNER_PAYMENT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PPD_SETTLEMENT_ID"
ON "ZHAO"."PARTNER_PAYMENT_DETAILS" ("SETTLEMENT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table PARTNER_PAYMENT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."PARTNER_PAYMENT_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PARTNER_PAYMENT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."PARTNER_PAYMENT_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table PARTNER_PAYMENTS
-- ----------------------------
CREATE INDEX "ZHAO"."I_PARTNER_PAYMENTS_STATUS"
ON "ZHAO"."PARTNER_PAYMENTS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PARTNER_PAYMENTS_USER_ID"
ON "ZHAO"."PARTNER_PAYMENTS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PARTNER_PAYMENTS_USER_NAME"
ON "ZHAO"."PARTNER_PAYMENTS" ("USER_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_P_PAYMENTS_USER_BANK_ID"
ON "ZHAO"."PARTNER_PAYMENTS" ("USER_BANK_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table PARTNER_PAYMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."PARTNER_PAYMENTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PARTNER_PAYMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."PARTNER_PAYMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table PARTNERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table PARTNERS
-- ----------------------------
ALTER TABLE "ZHAO"."PARTNERS" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PARTNERS
-- ----------------------------
ALTER TABLE "ZHAO"."PARTNERS" ADD PRIMARY KEY ("USER_ID");

-- ----------------------------
-- Checks structure for table PAYMENT_FEE
-- ----------------------------
ALTER TABLE "ZHAO"."PAYMENT_FEE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table PLSQL_PROFILER_DATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table PLSQL_PROFILER_DATA
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_DATA" ADD CHECK ("LINE#" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PLSQL_PROFILER_DATA
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_DATA" ADD PRIMARY KEY ("RUNID", "UNIT_NUMBER", "LINE#");

-- ----------------------------
-- Indexes structure for table PLSQL_PROFILER_RUNS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table PLSQL_PROFILER_RUNS
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_RUNS" ADD PRIMARY KEY ("RUNID");

-- ----------------------------
-- Indexes structure for table PLSQL_PROFILER_UNITS
-- ----------------------------

-- ----------------------------
-- Checks structure for table PLSQL_PROFILER_UNITS
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_UNITS" ADD CHECK ("TOTAL_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PLSQL_PROFILER_UNITS
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_UNITS" ADD PRIMARY KEY ("RUNID", "UNIT_NUMBER");

-- ----------------------------
-- Checks structure for table PRIZE_CATEGORY
-- ----------------------------
ALTER TABLE "ZHAO"."PRIZE_CATEGORY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PRIZE_CATEGORY" ADD CHECK ("PRIZE_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table PRIZE_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."PRIZE_CONFIG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table PROPERTY
-- ----------------------------
ALTER TABLE "ZHAO"."PROPERTY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY" ADD CHECK ("PROPERTY_GROUP_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY" ADD CHECK ("NAME_GBK" IS NOT NULL);

-- ----------------------------
-- Checks structure for table PROPERTY_EXCLUDE
-- ----------------------------
ALTER TABLE "ZHAO"."PROPERTY_EXCLUDE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY_EXCLUDE" ADD CHECK ("EXCLUDE_PROPERTY_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table PROPERTY_GROUP
-- ----------------------------
ALTER TABLE "ZHAO"."PROPERTY_GROUP" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY_GROUP" ADD CHECK ("PROPERTY_SET_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY_GROUP" ADD CHECK ("GROUP_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY_GROUP" ADD CHECK ("GROUP_NAME_GBK" IS NOT NULL);

-- ----------------------------
-- Checks structure for table PROPERTY_SET
-- ----------------------------
ALTER TABLE "ZHAO"."PROPERTY_SET" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."PROPERTY_SET" ADD CHECK ("SET_NAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table QRTZ_BLOB_TRIGGERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_BLOB_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS" ADD CHECK ("TRIGGER_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_BLOB_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS" ADD PRIMARY KEY ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Indexes structure for table QRTZ_CALENDARS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_CALENDARS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_CALENDARS" ADD CHECK ("CALENDAR_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_CALENDARS" ADD CHECK ("CALENDAR" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_CALENDARS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_CALENDARS" ADD PRIMARY KEY ("CALENDAR_NAME");

-- ----------------------------
-- Indexes structure for table QRTZ_CRON_TRIGGERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_CRON_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" ADD CHECK ("TRIGGER_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" ADD CHECK ("CRON_EXPRESSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_CRON_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" ADD PRIMARY KEY ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Indexes structure for table QRTZ_FIRED_TRIGGERS
-- ----------------------------
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_JOB_GROUP"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("JOB_GROUP" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_JOB_NAME"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("JOB_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_JOB_REQ_RECOVERY"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("REQUESTS_RECOVERY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_JOB_STATEFUL"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("IS_STATEFUL" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_TRIG_GROUP"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("TRIGGER_GROUP" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_TRIG_INST_NAME"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("INSTANCE_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_TRIG_NAME"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("TRIGGER_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_TRIG_NM_GP"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("TRIGGER_NAME" ASC, "TRIGGER_GROUP" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_FT_TRIG_VOLATILE"
ON "ZHAO"."QRTZ_FIRED_TRIGGERS" ("IS_VOLATILE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table QRTZ_FIRED_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("ENTRY_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("TRIGGER_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("IS_VOLATILE" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("INSTANCE_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("FIRED_TIME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_FIRED_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_FIRED_TRIGGERS" ADD PRIMARY KEY ("ENTRY_ID");

-- ----------------------------
-- Indexes structure for table QRTZ_JOB_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."IDX_QRTZ_J_REQ_RECOVERY"
ON "ZHAO"."QRTZ_JOB_DETAILS" ("REQUESTS_RECOVERY" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table QRTZ_JOB_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("JOB_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("JOB_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("JOB_CLASS_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("IS_DURABLE" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("IS_VOLATILE" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("IS_STATEFUL" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD CHECK ("REQUESTS_RECOVERY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_JOB_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_JOB_DETAILS" ADD PRIMARY KEY ("JOB_NAME", "JOB_GROUP", "ID");

-- ----------------------------
-- Indexes structure for table QRTZ_JOB_LISTENERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_JOB_LISTENERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_JOB_LISTENERS" ADD CHECK ("JOB_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_LISTENERS" ADD CHECK ("JOB_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_JOB_LISTENERS" ADD CHECK ("JOB_LISTENER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_JOB_LISTENERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_JOB_LISTENERS" ADD PRIMARY KEY ("JOB_NAME", "JOB_GROUP", "JOB_LISTENER");

-- ----------------------------
-- Indexes structure for table QRTZ_LOCKS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_LOCKS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_LOCKS" ADD CHECK ("LOCK_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_LOCKS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_LOCKS" ADD PRIMARY KEY ("LOCK_NAME");

-- ----------------------------
-- Indexes structure for table QRTZ_PAUSED_TRIGGER_GRPS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_PAUSED_TRIGGER_GRPS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_PAUSED_TRIGGER_GRPS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_PAUSED_TRIGGER_GRPS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_PAUSED_TRIGGER_GRPS" ADD PRIMARY KEY ("TRIGGER_GROUP");

-- ----------------------------
-- Indexes structure for table QRTZ_SCHEDULER_STATE
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_SCHEDULER_STATE
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_SCHEDULER_STATE" ADD CHECK ("INSTANCE_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_SCHEDULER_STATE" ADD CHECK ("LAST_CHECKIN_TIME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_SCHEDULER_STATE" ADD CHECK ("CHECKIN_INTERVAL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_SCHEDULER_STATE
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_SCHEDULER_STATE" ADD PRIMARY KEY ("INSTANCE_NAME");

-- ----------------------------
-- Indexes structure for table QRTZ_SIMPLE_TRIGGERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_SIMPLE_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD CHECK ("TRIGGER_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD CHECK ("REPEAT_COUNT" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD CHECK ("REPEAT_INTERVAL" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD CHECK ("TIMES_TRIGGERED" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_SIMPLE_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD PRIMARY KEY ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Indexes structure for table QRTZ_TRIGGER_LISTENERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table QRTZ_TRIGGER_LISTENERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" ADD CHECK ("TRIGGER_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" ADD CHECK ("TRIGGER_LISTENER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_TRIGGER_LISTENERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" ADD PRIMARY KEY ("TRIGGER_NAME", "TRIGGER_GROUP", "TRIGGER_LISTENER");

-- ----------------------------
-- Indexes structure for table QRTZ_TRIGGERS
-- ----------------------------
CREATE INDEX "ZHAO"."IDX_QRTZ_T_NEXT_FIRE_TIME"
ON "ZHAO"."QRTZ_TRIGGERS" ("NEXT_FIRE_TIME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_T_NFT_ST"
ON "ZHAO"."QRTZ_TRIGGERS" ("NEXT_FIRE_TIME" ASC, "TRIGGER_STATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_T_STATE"
ON "ZHAO"."QRTZ_TRIGGERS" ("TRIGGER_STATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."IDX_QRTZ_T_VOLATILE"
ON "ZHAO"."QRTZ_TRIGGERS" ("IS_VOLATILE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table QRTZ_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("TRIGGER_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("TRIGGER_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("JOB_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("JOB_GROUP" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("IS_VOLATILE" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("TRIGGER_STATE" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("TRIGGER_TYPE" IS NOT NULL);
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD CHECK ("START_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table QRTZ_TRIGGERS
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_TRIGGERS" ADD PRIMARY KEY ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Indexes structure for table QUOTATIONS_AUCTION
-- ----------------------------
CREATE INDEX "ZHAO"."QUOTATIONS_CATEGORIES"
ON "ZHAO"."QUOTATIONS_AUCTION" ("CATEGORIES" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."QUOTATIONS_CHARACTERS"
ON "ZHAO"."QUOTATIONS_AUCTION" ("CHARACTERS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."QUOTATIONS_CHI"
ON "ZHAO"."QUOTATIONS_AUCTION" ("CHI_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."QUOTATIONS_CLASSES"
ON "ZHAO"."QUOTATIONS_AUCTION" ("CLASSES_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."QUOTATIONS_IS_SAMPLE"
ON "ZHAO"."QUOTATIONS_AUCTION" ("IS_SAMPLE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."QUOTATIONS_KEYPROPERTY"
ON "ZHAO"."QUOTATIONS_AUCTION" ("KEYPROPERTY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."QUOTATIONS_TIME"
ON "ZHAO"."QUOTATIONS_AUCTION" ("QUOTATION_TIME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table RALASAFE_BACKUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table RALASAFE_BACKUP
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_BACKUP" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_BACKUP
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_BACKUP" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_BUSINESSDATA
-- ----------------------------

-- ----------------------------
-- Uniques structure for table RALASAFE_BUSINESSDATA
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_BUSINESSDATA" ADD UNIQUE ("NAME");

-- ----------------------------
-- Checks structure for table RALASAFE_BUSINESSDATA
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_BUSINESSDATA" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_BUSINESSDATA" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_BUSINESSDATA
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_BUSINESSDATA" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_DECISION_ENTITLEMENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table RALASAFE_DECISION_ENTITLEMENT
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_DECISION_ENTITLEMENT" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_DECISION_ENTITLEMENT
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_DECISION_ENTITLEMENT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_PRIVILEGE
-- ----------------------------

-- ----------------------------
-- Uniques structure for table RALASAFE_PRIVILEGE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_PRIVILEGE" ADD UNIQUE ("NAME");

-- ----------------------------
-- Checks structure for table RALASAFE_PRIVILEGE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_PRIVILEGE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_PRIVILEGE" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_PRIVILEGE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_PRIVILEGE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_QUERY
-- ----------------------------

-- ----------------------------
-- Uniques structure for table RALASAFE_QUERY
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_QUERY" ADD UNIQUE ("NAME");

-- ----------------------------
-- Checks structure for table RALASAFE_QUERY
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_QUERY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_QUERY" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_QUERY
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_QUERY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_QUERY_ENTITLEMENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table RALASAFE_QUERY_ENTITLEMENT
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_QUERY_ENTITLEMENT" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_QUERY_ENTITLEMENT
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_QUERY_ENTITLEMENT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_RALASAFE_USERROLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table RALASAFE_RALASAFE_USERROLE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_RALASAFE_USERROLE" ADD CHECK ("USERID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_RALASAFE_USERROLE" ADD CHECK ("ROLEID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_RALASAFE_USERROLE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_RALASAFE_USERROLE" ADD PRIMARY KEY ("USERID", "ROLEID");

-- ----------------------------
-- Indexes structure for table RALASAFE_ROLE
-- ----------------------------

-- ----------------------------
-- Uniques structure for table RALASAFE_ROLE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_ROLE" ADD UNIQUE ("NAME");

-- ----------------------------
-- Checks structure for table RALASAFE_ROLE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_ROLE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_ROLE" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_ROLE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_ROLE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RALASAFE_ROLEPRIVILEGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table RALASAFE_ROLEPRIVILEGE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE" ADD CHECK ("ROLEID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE" ADD CHECK ("PRIVILEGEID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_ROLEPRIVILEGE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE" ADD PRIMARY KEY ("ROLEID", "PRIVILEGEID");

-- ----------------------------
-- Indexes structure for table RALASAFE_SEQUENCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table RALASAFE_SEQUENCE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_SEQUENCE" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_SEQUENCE
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_SEQUENCE" ADD PRIMARY KEY ("NAME");

-- ----------------------------
-- Indexes structure for table RALASAFE_USERCATEGORY
-- ----------------------------

-- ----------------------------
-- Uniques structure for table RALASAFE_USERCATEGORY
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_USERCATEGORY" ADD UNIQUE ("NAME");

-- ----------------------------
-- Checks structure for table RALASAFE_USERCATEGORY
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_USERCATEGORY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."RALASAFE_USERCATEGORY" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RALASAFE_USERCATEGORY
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_USERCATEGORY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table REMIND
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_REMIND_ADMIN_ID"
ON "ZHAO"."REMIND" ("ADMIN_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_REMIND_ADMIN_NAME"
ON "ZHAO"."REMIND" ("ADMIN_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_REMIND_REMIND_TYPE"
ON "ZHAO"."REMIND" ("REMIND_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_REMIND_STATUS"
ON "ZHAO"."REMIND" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_REMIND_USER_ID"
ON "ZHAO"."REMIND" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_REMIND_USER_NAME"
ON "ZHAO"."REMIND" ("USER_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table REMIND
-- ----------------------------
ALTER TABLE "ZHAO"."REMIND" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND" ADD CHECK ("REMIND_NAME" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table REMIND
-- ----------------------------
ALTER TABLE "ZHAO"."REMIND" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table REMIND_SYSTEM_SETTING
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_REMIND_SYSSETTING_PARM"
ON "ZHAO"."REMIND_SYSTEM_SETTING" ("IS_NEED_PARAMETER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table REMIND_SYSTEM_SETTING
-- ----------------------------
ALTER TABLE "ZHAO"."REMIND_SYSTEM_SETTING" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND_SYSTEM_SETTING" ADD CHECK ("REMIND_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table REMIND_SYSTEM_SETTING
-- ----------------------------
ALTER TABLE "ZHAO"."REMIND_SYSTEM_SETTING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table REMIND_USER_SETTING
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_SERVICE_OP_ID"
ON "ZHAO"."REMIND_USER_SETTING" ("SERVICE_OP_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SYSTEM_REMIND_IS_REMIND"
ON "ZHAO"."REMIND_USER_SETTING" ("IS_REMIND" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SYSTEM_REMIND_SET_ID"
ON "ZHAO"."REMIND_USER_SETTING" ("SYSTEM_REMIND_SET_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_ID"
ON "ZHAO"."REMIND_USER_SETTING" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table REMIND_USER_SETTING
-- ----------------------------
ALTER TABLE "ZHAO"."REMIND_USER_SETTING" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND_USER_SETTING" ADD CHECK ("SYSTEM_REMIND_SET_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND_USER_SETTING" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND_USER_SETTING" ADD CHECK ("SERVICE_OP_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."REMIND_USER_SETTING" ADD CHECK ("SERVICE_OP_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table REMIND_USER_SETTING
-- ----------------------------
ALTER TABLE "ZHAO"."REMIND_USER_SETTING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table RIGHTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table RIGHTS
-- ----------------------------
ALTER TABLE "ZHAO"."RIGHTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RIGHTS
-- ----------------------------
ALTER TABLE "ZHAO"."RIGHTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCHEMA_MIGRATIONS
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."UNIQUE_SCHEMA_MIGRATIONS"
ON "ZHAO"."SCHEMA_MIGRATIONS" ("VERSION" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCHEMA_MIGRATIONS
-- ----------------------------
ALTER TABLE "ZHAO"."SCHEMA_MIGRATIONS" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCHEMA_MIGRATIONS
-- ----------------------------
ALTER TABLE "ZHAO"."SCHEMA_MIGRATIONS" ADD PRIMARY KEY ("VERSION");

-- ----------------------------
-- Indexes structure for table SCORE_CONSUME_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_SCORE_CONSUME_D_SCORE_ID"
ON "ZHAO"."SCORE_CONSUME_DETAILS" ("SCORE_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SCORE_CONSUME_D_SONSUME_ID"
ON "ZHAO"."SCORE_CONSUME_DETAILS" ("SCORE_CONSUME_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCORE_CONSUME_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_CONSUME_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCORE_CONSUME_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_CONSUME_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCORE_CONSUMES
-- ----------------------------
CREATE INDEX "ZHAO"."I_SCORE_CONSUMES_USER_ID"
ON "ZHAO"."SCORE_CONSUMES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCORE_CONSUMES
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_CONSUMES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCORE_CONSUMES
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_CONSUMES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCORE_GIFT_DEDUCTIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SCORE_GIFT_DEDUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_GIFT_DEDUCTIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCORE_GIFT_DEDUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_GIFT_DEDUCTIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCORE_INCOME_EXPENSES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_SCORE_DETAIL_DERECTION"
ON "ZHAO"."SCORE_INCOME_EXPENSES" ("DIRECTION" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SCORE_DETAIL_SOURCE"
ON "ZHAO"."SCORE_INCOME_EXPENSES" ("SOURCE_ID" ASC, "SOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SCORE_DETAIL_USER_ID"
ON "ZHAO"."SCORE_INCOME_EXPENSES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCORE_INCOME_EXPENSES
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_INCOME_EXPENSES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCORE_INCOME_EXPENSES
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_INCOME_EXPENSES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCORE_SETTINGS
-- ----------------------------
CREATE INDEX "ZHAO"."I_SCORE_SETTINGS_ON_RESOURCE"
ON "ZHAO"."SCORE_SETTINGS" ("RESOURCE_ID" ASC, "RESOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SCORE_SETTINGS_USER_LEVEL_ID"
ON "ZHAO"."SCORE_SETTINGS" ("USER_LEVEL_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCORE_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_SETTINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCORE_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_SETTINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCORE_TIME_SETTINGS
-- ----------------------------
CREATE INDEX "ZHAO"."I_SCORE_TIME_SETTINGS_END_AT"
ON "ZHAO"."SCORE_TIME_SETTINGS" ("END_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SCORE_TIME_SETTINGS_START_AT"
ON "ZHAO"."SCORE_TIME_SETTINGS" ("START_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCORE_TIME_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_TIME_SETTINGS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SCORE_TIME_SETTINGS
-- ----------------------------
ALTER TABLE "ZHAO"."SCORE_TIME_SETTINGS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SCORES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_SCORES_EXPIRED_AT"
ON "ZHAO"."SCORES" ("EXPIRED_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SCORES_ON_SOURCE"
ON "ZHAO"."SCORES" ("SOURCE_ID" ASC, "SOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SCORES_ON_USER_ID"
ON "ZHAO"."SCORES" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SCORES_SCORE_STATUS"
ON "ZHAO"."SCORES" ("SCORE_STATUS" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_SCORES"
ON "ZHAO"."SCORES" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SCORES
-- ----------------------------
ALTER TABLE "ZHAO"."SCORES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table SETTLEMENT_DESPATCHES
-- ----------------------------
CREATE INDEX "ZHAO"."I_SETTLE_DESP_CHECKOUT_TYPE"
ON "ZHAO"."SETTLEMENT_DESPATCHES" ("CHECKOUT_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SETTLE_DESP_SETTLEMENT_ID"
ON "ZHAO"."SETTLEMENT_DESPATCHES" ("SETTLEMENT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SETTLE_DESP_USER_BANK_ID"
ON "ZHAO"."SETTLEMENT_DESPATCHES" ("USER_BANK_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SETTLE_DESP_USER_ID"
ON "ZHAO"."SETTLEMENT_DESPATCHES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SETTLEMENT_DESPATCHES
-- ----------------------------
ALTER TABLE "ZHAO"."SETTLEMENT_DESPATCHES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SETTLEMENT_DESPATCHES
-- ----------------------------
ALTER TABLE "ZHAO"."SETTLEMENT_DESPATCHES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SETTLEMENT_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_SETTLE_DETAIL_AUCTION_ID"
ON "ZHAO"."SETTLEMENT_DETAILS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SETTLE_DETAIL_SETTLEMENT_ID"
ON "ZHAO"."SETTLEMENT_DETAILS" ("SETTLEMENT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SETTLEMENT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."SETTLEMENT_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SETTLEMENT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."SETTLEMENT_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SETTLEMENTS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_SETTLEMENTS_BUCHECK_DATE"
ON "ZHAO"."SETTLEMENTS" ("BU_CHECK_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SETTLEMENTS_FCHECK_DATE"
ON "ZHAO"."SETTLEMENTS" ("F_CHECK_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SETTLEMENTS_ON_STATUS"
ON "ZHAO"."SETTLEMENTS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SETTLEMENTS_ON_USER_ID"
ON "ZHAO"."SETTLEMENTS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SETTLEMENTS_RESERVICE"
ON "ZHAO"."SETTLEMENTS" ("IS_RETURN_SERVICE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SETTLEMENTS_SERVICE_DATE"
ON "ZHAO"."SETTLEMENTS" ("RETURN_SERVICE_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_SETTLEMENTS_CONTRACT_ID"
ON "ZHAO"."SETTLEMENTS" ("CONTRACT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SETTLEMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."SETTLEMENTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SETTLEMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."SETTLEMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SMS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_SMS_ON_DEPARTMENT_ID"
ON "ZHAO"."SMS" ("DEPARTMENT_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SMS_ON_GATEWAY"
ON "ZHAO"."SMS" ("GATEWAY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SMS_ON_MESSAGE_TYPE"
ON "ZHAO"."SMS" ("MESSAGE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SMS_ON_SEND_TYPE"
ON "ZHAO"."SMS" ("SEND_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_SMS_ON_STATUS"
ON "ZHAO"."SMS" ("STATUS" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SMS
-- ----------------------------
ALTER TABLE "ZHAO"."SMS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SMS
-- ----------------------------
ALTER TABLE "ZHAO"."SMS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SMS_SERVICE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SMS_SERVICE
-- ----------------------------
ALTER TABLE "ZHAO"."SMS_SERVICE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SMS_SERVICE
-- ----------------------------
ALTER TABLE "ZHAO"."SMS_SERVICE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table STAMP_DATA
-- ----------------------------
CREATE INDEX "ZHAO"."STAMP_DATA1"
ON "ZHAO"."STAMP_DATA" ("KEYPROPERTY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA10"
ON "ZHAO"."STAMP_DATA" ("SHUIYIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA11"
ON "ZHAO"."STAMP_DATA" ("BEIJIAO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA2"
ON "ZHAO"."STAMP_DATA" ("QUANPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA3"
ON "ZHAO"."STAMP_DATA" ("SHANGPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA4"
ON "ZHAO"."STAMP_DATA" ("ZHONGSHANGPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA5"
ON "ZHAO"."STAMP_DATA" ("ZHONGCHAPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA6"
ON "ZHAO"."STAMP_DATA" ("XIUBUPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA7"
ON "ZHAO"."STAMP_DATA" ("CHIKONG" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA8"
ON "ZHAO"."STAMP_DATA" ("YOUCUO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA9"
ON "ZHAO"."STAMP_DATA" ("BIANTI" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_AUCTIONNO"
ON "ZHAO"."STAMP_DATA" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_BID"
ON "ZHAO"."STAMP_DATA" ("BID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_CHINO"
ON "ZHAO"."STAMP_DATA" ("CHI_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_END_AT"
ON "ZHAO"."STAMP_DATA" ("END_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table STAMP_DATA_EVERYDAY
-- ----------------------------
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY1"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("KEYPROPERTY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY10"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("SHUIYIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY11"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("BEIJIAO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY2"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("QUANPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY3"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("SHANGPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY4"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("ZHONGSHANGPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY5"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("ZHONGCHAPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY6"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("XIUBUPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY7"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("CHIKONG" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY8"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("YOUCUO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY9"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("BIANTI" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY_AUCTIONNO"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY_BID"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("BID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY_CHINO"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("CHI_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_EVERYDAY_END_AT"
ON "ZHAO"."STAMP_DATA_EVERYDAY" ("END_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table STAMP_DATA_ORIGINAL
-- ----------------------------
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL1"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("KEYPROPERTY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL10"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("SHUIYIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL11"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("BEIJIAO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL2"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("QUANPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL3"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("SHANGPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL4"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("ZHONGSHANGPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL5"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("ZHONGCHAPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL6"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("XIUBUPIN" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL7"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("CHIKONG" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL8"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("YOUCUO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL9"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("BIANTI" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL_AUCTIONNO"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL_BID"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("BID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL_CHINO"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("CHI_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_DATA_ORIGINAL_END_AT"
ON "ZHAO"."STAMP_DATA_ORIGINAL" ("END_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table STAMP_INDEX
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_FORUM"
ON "ZHAO"."STAMP_INDEX" ("FORUM" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_TIME"
ON "ZHAO"."STAMP_INDEX" ("INDEX_TIME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table STAMP_INDEX
-- ----------------------------
ALTER TABLE "ZHAO"."STAMP_INDEX" ADD CHECK ("INDEX_VALUE" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_INDEX" ADD CHECK ("FORUM" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_INDEX" ADD CHECK ("AMOUNT" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_INDEX" ADD CHECK ("INDEX_SUM" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_INDEX" ADD CHECK ("REAL_VALUE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table STAMP_PROPERTY_MAP
-- ----------------------------
CREATE INDEX "ZHAO"."STAMP_PROPERTY_GROUP"
ON "ZHAO"."STAMP_PROPERTY_MAP" ("GROUP_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_PROPERTY_PROPERTY_GROUP"
ON "ZHAO"."STAMP_PROPERTY_MAP" ("PROPERTY_GROUP" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_PROPERTY_PROPERTY_NAME"
ON "ZHAO"."STAMP_PROPERTY_MAP" ("PROPERTY_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."STAMP_PROPERTY_PROPERTY_PINYIN"
ON "ZHAO"."STAMP_PROPERTY_MAP" ("PROPERTY_PINYIN" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table STAMP_QUOTATION
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_CHARACTER"
ON "ZHAO"."STAMP_QUOTATION" ("CHARACTER" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CLASS_ID"
ON "ZHAO"."STAMP_QUOTATION" ("CLASS_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_CLASS_NO"
ON "ZHAO"."STAMP_QUOTATION" ("CLASS_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_KEY_PROPERTY"
ON "ZHAO"."STAMP_QUOTATION" ("KEY_PROPERTY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_LATEST"
ON "ZHAO"."STAMP_QUOTATION" ("LATEST" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_START"
ON "ZHAO"."STAMP_QUOTATION" ("STARTED_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table STAMP_QUOTATION
-- ----------------------------
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("KEY_PROPERTY" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("CLASS_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("AMOUNT_CUR" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("AMOUNT_LATEST" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("AMOUNT_PRE" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_AVG_CUR" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_AVG_PRE" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_MIN_CUR" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_MIN_PRE" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_MAX_CUR" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_MAX_PRE" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_AVG_LATEST" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("AMOUNT" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_AVG" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_HIGH" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("PRICE_LOW" IS NOT NULL);
ALTER TABLE "ZHAO"."STAMP_QUOTATION" ADD CHECK ("DEFAULT_QUOTATION" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table STORAGE_CHARGES
-- ----------------------------

-- ----------------------------
-- Checks structure for table STORAGE_CHARGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGE_CHARGES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table STORAGE_CHARGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGE_CHARGES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table STORAGE_COMPLETED_CHARGES
-- ----------------------------

-- ----------------------------
-- Checks structure for table STORAGE_COMPLETED_CHARGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGE_COMPLETED_CHARGES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table STORAGE_COMPLETED_CHARGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGE_COMPLETED_CHARGES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table STORAGE_WAIT_CHARGES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_STORAGE_ON_USERORDERID"
ON "ZHAO"."STORAGE_WAIT_CHARGES" ("USER_ORDER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table STORAGE_WAIT_CHARGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGE_WAIT_CHARGES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table STORAGE_WAIT_CHARGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGE_WAIT_CHARGES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table STORAGES
-- ----------------------------
ALTER TABLE "ZHAO"."STORAGES" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."STORAGES" ADD CHECK ("CODE" IS NOT NULL);
ALTER TABLE "ZHAO"."STORAGES" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Checks structure for table STUDENT_INF
-- ----------------------------
ALTER TABLE "ZHAO"."STUDENT_INF" ADD CHECK ("STUDENT_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."STUDENT_INF" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table SYS_EXPORT_SCHEMA_01
-- ----------------------------
CREATE INDEX "ZHAO"."SYS_MTABLE_000019441_IND_1"
ON "ZHAO"."SYS_EXPORT_SCHEMA_01" ("OBJECT_SCHEMA" ASC, "OBJECT_NAME" ASC, "OBJECT_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."SYS_MTABLE_000019441_IND_2"
ON "ZHAO"."SYS_EXPORT_SCHEMA_01" ("BASE_PROCESS_ORDER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SYS_EXPORT_SCHEMA_01
-- ----------------------------
ALTER TABLE "ZHAO"."SYS_EXPORT_SCHEMA_01" ADD UNIQUE ("PROCESS_ORDER", "DUPLICATE");

-- ----------------------------
-- Indexes structure for table SYS_EXPORT_SCHEMA_02
-- ----------------------------
CREATE INDEX "ZHAO"."SYS_MTABLE_000019464_IND_1"
ON "ZHAO"."SYS_EXPORT_SCHEMA_02" ("OBJECT_SCHEMA" ASC, "OBJECT_NAME" ASC, "OBJECT_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."SYS_MTABLE_000019464_IND_2"
ON "ZHAO"."SYS_EXPORT_SCHEMA_02" ("BASE_PROCESS_ORDER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SYS_EXPORT_SCHEMA_02
-- ----------------------------
ALTER TABLE "ZHAO"."SYS_EXPORT_SCHEMA_02" ADD UNIQUE ("PROCESS_ORDER", "DUPLICATE");

-- ----------------------------
-- Indexes structure for table SYS_EXPORT_SCHEMA_03
-- ----------------------------
CREATE INDEX "ZHAO"."SYS_MTABLE_000019478_IND_1"
ON "ZHAO"."SYS_EXPORT_SCHEMA_03" ("OBJECT_SCHEMA" ASC, "OBJECT_NAME" ASC, "OBJECT_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."SYS_MTABLE_000019478_IND_2"
ON "ZHAO"."SYS_EXPORT_SCHEMA_03" ("BASE_PROCESS_ORDER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SYS_EXPORT_SCHEMA_03
-- ----------------------------
ALTER TABLE "ZHAO"."SYS_EXPORT_SCHEMA_03" ADD UNIQUE ("PROCESS_ORDER", "DUPLICATE");

-- ----------------------------
-- Indexes structure for table SYSTEM_MODULES
-- ----------------------------

-- ----------------------------
-- Checks structure for table SYSTEM_MODULES
-- ----------------------------
ALTER TABLE "ZHAO"."SYSTEM_MODULES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SYSTEM_MODULES
-- ----------------------------
ALTER TABLE "ZHAO"."SYSTEM_MODULES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table TEMP_AUCTION
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."IND_TEMP_AUCTION"
ON "ZHAO"."TEMP_AUCTION" ("AUCTION_NO" ASC, "PIC_ORDER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table TEMP_AUCTION
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTION" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."TEMP_AUCTION" ADD CHECK ("AUCTION_NO" IS NOT NULL);
ALTER TABLE "ZHAO"."TEMP_AUCTION" ADD CHECK ("PIC_ORDER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_AUCTION
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTION" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table TEMP_AUCTION_KEY_WORDS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTION_KEY_WORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table TEMP_AUCTION_SCORE
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_AUCTION_SCORE
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTION_SCORE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_AUCTION_SCORE
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTION_SCORE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table TEMP_AUCTIONS_STATE_NUMS
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_AUCTIONS_STATE_NUMS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTIONS_STATE_NUMS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_AUCTIONS_STATE_NUMS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_AUCTIONS_STATE_NUMS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table TEMP_CONTRACT_TOTAL
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_CONTRACT_TOTAL
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_CONTRACT_TOTAL" ADD CHECK ("PK_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_CONTRACT_TOTAL
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_CONTRACT_TOTAL" ADD PRIMARY KEY ("PK_ID");

-- ----------------------------
-- Indexes structure for table TEMP_FINANCIAL_STATEMENTS_ONES
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_FINANCIAL_STATEMENTS_ONES
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_ONES" ADD CHECK ("F_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_FINANCIAL_STATEMENTS_ONES
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_ONES" ADD PRIMARY KEY ("F_ID");

-- ----------------------------
-- Indexes structure for table TEMP_FINANCIAL_STATEMENTS_TWOS
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_FINANCIAL_STATEMENTS_TWOS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_TWOS" ADD CHECK ("F_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_FINANCIAL_STATEMENTS_TWOS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_FINANCIAL_STATEMENTS_TWOS" ADD PRIMARY KEY ("F_ID");

-- ----------------------------
-- Indexes structure for table TEMP_PERIOD_COST
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."TEMP_PEROID_ID_PK"
ON "ZHAO"."TEMP_PERIOD_COST" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table TEMP_PERIOD_COST
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_PERIOD_COST" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_PERIOD_COST
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_PERIOD_COST" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table TEMP_SCORE_SUCCESS
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_SCORE_SUCCESS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SCORE_SUCCESS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_SCORE_SUCCESS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SCORE_SUCCESS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table TEMP_SETTLEMENT_AUCTIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_SETTLEMENT_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SETTLEMENT_AUCTIONS" ADD CHECK ("AUCTION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_SETTLEMENT_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SETTLEMENT_AUCTIONS" ADD PRIMARY KEY ("AUCTION_ID");

-- ----------------------------
-- Indexes structure for table TEMP_SETTLEMENT_DETAILS
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_SETTLEMENT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SETTLEMENT_DETAILS" ADD CHECK ("AUCTION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_SETTLEMENT_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SETTLEMENT_DETAILS" ADD PRIMARY KEY ("AUCTION_ID");

-- ----------------------------
-- Indexes structure for table TEMP_SYM_AUCTION
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."IND_TEMP_SYM_AUCTION"
ON "ZHAO"."TEMP_SYM_AUCTION" ("AUCTION_NO" ASC, "PIC_ORDER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table TEMP_SYM_AUCTION
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SYM_AUCTION" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."TEMP_SYM_AUCTION" ADD CHECK ("AUCTION_NO" IS NOT NULL);
ALTER TABLE "ZHAO"."TEMP_SYM_AUCTION" ADD CHECK ("PIC_ORDER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_SYM_AUCTION
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_SYM_AUCTION" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table TEMP_USERORDERS_DELAY
-- ----------------------------

-- ----------------------------
-- Checks structure for table TEMP_USERORDERS_DELAY
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_USERORDERS_DELAY" ADD CHECK ("ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table TEMP_USERORDERS_DELAY
-- ----------------------------
ALTER TABLE "ZHAO"."TEMP_USERORDERS_DELAY" ADD PRIMARY KEY ("ORDER_ID");

-- ----------------------------
-- Indexes structure for table TMP_USER_INFO
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table TMP_USER_INFO
-- ----------------------------
ALTER TABLE "ZHAO"."TMP_USER_INFO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_ACCOUNTS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_ACCOUNTS_ON_SOURCE"
ON "ZHAO"."USER_ACCOUNTS" ("SOURCE_ID" ASC, "SOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_ACCOUNTS_ON_USER_ID"
ON "ZHAO"."USER_ACCOUNTS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ACCOUNTS_FINANCE_DATE"
ON "ZHAO"."USER_ACCOUNTS" ("FINANCE_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ACCOUNTS_FINANCE_ID"
ON "ZHAO"."USER_ACCOUNTS" ("FINANCE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_ACCOUNTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ACCOUNTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_ACCOUNTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ACCOUNTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_ACTIVITY_INFO
-- ----------------------------
CREATE INDEX "ZHAO"."I_USER_ACTIVITY_INFO_USER_ID"
ON "ZHAO"."USER_ACTIVITY_INFO" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_ACTIVITY_INFO
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ACTIVITY_INFO" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_ACTIVITY_INFO
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ACTIVITY_INFO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_ADDRESS_VERIFIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_ADDRESS_VERIFIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ADDRESS_VERIFIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_ADDRESS_VERIFIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ADDRESS_VERIFIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_ADDRESSES
-- ----------------------------
CREATE INDEX "ZHAO"."I_USER_ADDRESSES_CITY_ID"
ON "ZHAO"."USER_ADDRESSES" ("CITY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ADDRESSES_COUNTRY_ID"
ON "ZHAO"."USER_ADDRESSES" ("COUNTRY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ADDRESSES_PROVINCE_ID"
ON "ZHAO"."USER_ADDRESSES" ("PROVINCE_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ADDRESSES_USER_ID"
ON "ZHAO"."USER_ADDRESSES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_ADDRESSES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ADDRESSES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_ADDRESSES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ADDRESSES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_AUCTIONS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_AUCTIONS_ON_USER_ID"
ON "ZHAO"."USER_AUCTIONS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_AUCTIONS_AUCTION_ID"
ON "ZHAO"."USER_AUCTIONS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_AUCTIONS_GOODS_ID"
ON "ZHAO"."USER_AUCTIONS" ("GOODS_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UN_USER_AUCTIONS"
ON "ZHAO"."USER_AUCTIONS" ("AUCTION_ID" ASC, "USER_ID" ASC, "GOODS_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_AUCTIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_AUCTIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_BANK_VERIFIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_BANK_VERIFIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_BANK_VERIFIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_BANK_VERIFIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_BANK_VERIFIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_BANKS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_BANKS_ON_BANK_NAME"
ON "ZHAO"."USER_BANKS" ("BANK_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_BANKS_ON_BANK_NO"
ON "ZHAO"."USER_BANKS" ("BANK_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_BANKS_ON_CITY_ID"
ON "ZHAO"."USER_BANKS" ("CITY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_BANKS_ON_COUNTRY_ID"
ON "ZHAO"."USER_BANKS" ("COUNTRY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_BANKS_ON_USER_ID"
ON "ZHAO"."USER_BANKS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_BANKS_PROVINCE_ID"
ON "ZHAO"."USER_BANKS" ("PROVINCE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_BANKS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_BANKS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_BANKS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_CITIES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_CITIES_ON_NAME"
ON "ZHAO"."USER_CITIES" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_CITIES_PROVINCE_ID"
ON "ZHAO"."USER_CITIES" ("PROVINCE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_CITIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_CITIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_CITIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_CITIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_CLASS
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_CLASS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_CLASS" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_CLASS" ADD CHECK ("CLASS_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_CLASS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_CLASS" ADD PRIMARY KEY ("USER_ID", "CLASS_ID");

-- ----------------------------
-- Indexes structure for table USER_COLLECTION_CERTIFICATE
-- ----------------------------
CREATE INDEX "ZHAO"."USER_COLL_ORDER_ID"
ON "ZHAO"."USER_COLLECTION_CERTIFICATE" ("ORDER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table USER_COLLECTION_CERTIFICATE
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COLLECTION_CERTIFICATE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_COLLECTION_SHIPS
-- ----------------------------
CREATE INDEX "ZHAO"."I_USER_COLL_SHIP_COLLECTION_ID"
ON "ZHAO"."USER_COLLECTION_SHIPS" ("USER_COLLECTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_COLL_SHIP_USER_ID"
ON "ZHAO"."USER_COLLECTION_SHIPS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_COLLECTION_SHIPS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COLLECTION_SHIPS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_COLLECTION_SHIPS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COLLECTION_SHIPS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_COLLECTIONS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_COLLECTIONS_ON_NAME"
ON "ZHAO"."USER_COLLECTIONS" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_COLLECTIONS_IS_SHOW"
ON "ZHAO"."USER_COLLECTIONS" ("IS_SHOW" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_COLLECTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COLLECTIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_COLLECTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COLLECTIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_COUNTRIES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_COUNTRIES_ON_NAME"
ON "ZHAO"."USER_COUNTRIES" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_COUNTRIES_REGION_ID"
ON "ZHAO"."USER_COUNTRIES" ("REGION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_COUNTRIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COUNTRIES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_COUNTRIES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_COUNTRIES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_DETAILS_ON_APP_ID"
ON "ZHAO"."USER_DETAILS" ("APP_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_DETAILS_ON_CITY_ID"
ON "ZHAO"."USER_DETAILS" ("CITY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_DETAILS_COUNTRY_ID"
ON "ZHAO"."USER_DETAILS" ("COUNTRY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_DETAILS_PROVINCE_ID"
ON "ZHAO"."USER_DETAILS" ("PROVINCE_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_DETAILS_REGION_ID"
ON "ZHAO"."USER_DETAILS" ("REGION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_DETAILS" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_DETAILS" ADD PRIMARY KEY ("USER_ID");

-- ----------------------------
-- Indexes structure for table USER_DEVICE
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."USER_DEVICE_UNIQUE"
ON "ZHAO"."USER_DEVICE" ("USER_ID" ASC, "DEVICE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_DEVICE
-- ----------------------------
ALTER TABLE "ZHAO"."USER_DEVICE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_DEVICE
-- ----------------------------
ALTER TABLE "ZHAO"."USER_DEVICE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_EMAILS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_EMAILS_ON_USER_ID"
ON "ZHAO"."USER_EMAILS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_EMAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_EMAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_EMAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_EMAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_FEEDBACK
-- ----------------------------
CREATE INDEX "ZHAO"."NORNAL_USER_FEEDBACK"
ON "ZHAO"."USER_FEEDBACK" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_FEEDBACK
-- ----------------------------
ALTER TABLE "ZHAO"."USER_FEEDBACK" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_FEEDBACK" ADD CHECK ("CONTENT" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_FEEDBACK" ADD CHECK ("TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_FEEDBACK
-- ----------------------------
ALTER TABLE "ZHAO"."USER_FEEDBACK" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_FINDERROR
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_FINDERROR
-- ----------------------------
ALTER TABLE "ZHAO"."USER_FINDERROR" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_FINDERROR
-- ----------------------------
ALTER TABLE "ZHAO"."USER_FINDERROR" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_IPS_PAYMENTS
-- ----------------------------
CREATE INDEX "ZHAO"."I_IPS_PAY_LOGISTIC_DETAIL_ID"
ON "ZHAO"."USER_IPS_PAYMENTS" ("LOGISTIC_DETAIL_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_IPS_PAY_LOGISTIC_TYPE_ID"
ON "ZHAO"."USER_IPS_PAYMENTS" ("LOGISTIC_TYPE_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_IPS_PAYMENTS_COUNTRY_ID"
ON "ZHAO"."USER_IPS_PAYMENTS" ("COUNTRY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_IPS_PAYMENTS_USER_ID"
ON "ZHAO"."USER_IPS_PAYMENTS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USE_IPS_PAY_USE_PAY_ID"
ON "ZHAO"."USER_IPS_PAYMENTS" ("USER_PAYMENT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_IPS_PAYMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_IPS_PAYMENTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_IPS_PAYMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_IPS_PAYMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_KEYWORDS
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_KEYWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_KEYWORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_KEYWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_KEYWORDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_LEVEL_COUNT
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table USER_LEVEL_COUNT
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVEL_COUNT" ADD PRIMARY KEY ("USER_LEVEL", "CREATE_DATE");

-- ----------------------------
-- Indexes structure for table USER_LEVEL_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_LEVEL_DETAILS_ON_RESOURCE"
ON "ZHAO"."USER_LEVEL_DETAILS" ("RESOURCE_ID" ASC, "RESOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_LEVEL_DETAILS_OPERATE_TYPE"
ON "ZHAO"."USER_LEVEL_DETAILS" ("OPERATE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_DETAILS_DIRECTION"
ON "ZHAO"."USER_LEVEL_DETAILS" ("DIRECTION" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_DETAILS_USER_ID"
ON "ZHAO"."USER_LEVEL_DETAILS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_DETAILS_USER_NAME"
ON "ZHAO"."USER_LEVEL_DETAILS" ("USER_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_DETAILS_USER_TYPE"
ON "ZHAO"."USER_LEVEL_DETAILS" ("USER_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_LEVEL_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVEL_DETAILS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_LEVEL_DETAILS" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_LEVEL_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVEL_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_LEVEL_HISTS
-- ----------------------------
CREATE INDEX "ZHAO"."I_USER_LEVEL_HISTS_CHANGE_TYPE"
ON "ZHAO"."USER_LEVEL_HISTS" ("CHANGE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_HISTS_START_DATE"
ON "ZHAO"."USER_LEVEL_HISTS" ("START_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_HISTS_USER_ID"
ON "ZHAO"."USER_LEVEL_HISTS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_LEVEL_HISTS_USER_TYPE"
ON "ZHAO"."USER_LEVEL_HISTS" ("USER_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_LEVEL_HISTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVEL_HISTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_LEVEL_HISTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVEL_HISTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_LEVELS
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_LEVELS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVELS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_LEVELS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LEVELS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_LISTS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_LISTS_ON_USER_ID"
ON "ZHAO"."USER_LISTS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_LISTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LISTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_LISTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LISTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_LOANS
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_LOANS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LOANS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_LOANS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LOANS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table USER_LOST_AUCTIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LOST_AUCTIONS" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_LOST_AUCTIONS" ADD CHECK ("AUCTION_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table USER_LOTTERY
-- ----------------------------
CREATE INDEX "ZHAO"."USER_LOTTERY_USERID"
ON "ZHAO"."USER_LOTTERY" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_LOTTERY
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LOTTERY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_LOTTERY" ADD CHECK ("U_NUM" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_LOTTERY" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_LOTTERY" ADD CHECK ("SPECIAL_CODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_LOTTERY
-- ----------------------------
ALTER TABLE "ZHAO"."USER_LOTTERY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_MARGINS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_MARGINS_ON_RESOURCE"
ON "ZHAO"."USER_MARGINS" ("RESOURCE_ID" ASC, "RESOURCE_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_MARGINS_ON_USER_ID"
ON "ZHAO"."USER_MARGINS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_MARGINS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_MARGINS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_MARGINS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_MARGINS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Uniques structure for table USER_NOTIFACATION
-- ----------------------------
ALTER TABLE "ZHAO"."USER_NOTIFACATION" ADD UNIQUE ("USER_ID");

-- ----------------------------
-- Indexes structure for table USER_ORDER_CANCEL
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_UO_CANCEL_ON_STATUS"
ON "ZHAO"."USER_ORDER_CANCEL" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_UO_CANCEL_ON_USER_ID"
ON "ZHAO"."USER_ORDER_CANCEL" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_UO_CANCEL_AUCTION_ID"
ON "ZHAO"."USER_ORDER_CANCEL" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_UO_CANCEL_AUCTION_NO"
ON "ZHAO"."USER_ORDER_CANCEL" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_UO_CANCEL_LOGISTIC_DETAIL_ID"
ON "ZHAO"."USER_ORDER_CANCEL" ("LOGISTIC_DETAIL_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_UO_CANCEL_USER_PAYMENT_ID"
ON "ZHAO"."USER_ORDER_CANCEL" ("USER_PAYMENT_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."UN_UO_CANCEL"
ON "ZHAO"."USER_ORDER_CANCEL" ("USER_ID" ASC, "AUCTION_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_ORDER_CANCEL
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ORDER_CANCEL" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_ORDER_CANCEL
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ORDER_CANCEL" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_ORDER_DELAYS
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_ORDER_DELAYS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ORDER_DELAYS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_ORDER_DELAYS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ORDER_DELAYS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_ORDERS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_ORDERS_LIMITPAYDATE"
ON "ZHAO"."USER_ORDERS" ("LIMIT_PAY_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_ORDERS_ON_STATUS"
ON "ZHAO"."USER_ORDERS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_ORDERS_ON_USER_ID"
ON "ZHAO"."USER_ORDERS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_ORDER_NEVERPAY_DATE"
ON "ZHAO"."USER_ORDERS" ("NEVER_PAY_DATE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_ORDER_USEREFUND_ID"
ON "ZHAO"."USER_ORDERS" ("USER_REFUND_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_ORDERS_LOGISTIC_DETAIL_ID"
ON "ZHAO"."USER_ORDERS" ("LOGISTIC_DETAIL_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ORDERS_AUCTION_ID"
ON "ZHAO"."USER_ORDERS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ORDERS_AUCTION_NO"
ON "ZHAO"."USER_ORDERS" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_ORDERS_USER_PAYMENT_ID"
ON "ZHAO"."USER_ORDERS" ("USER_PAYMENT_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_USER_ORDERS"
ON "ZHAO"."USER_ORDERS" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_ORDERS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ORDERS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table USER_ORDERS_BAK
-- ----------------------------
ALTER TABLE "ZHAO"."USER_ORDERS_BAK" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table USER_PAY_NOTIFIER
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_PAY_NOTIFIER
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PAY_NOTIFIER" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_PAY_NOTIFIER" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PAY_NOTIFIER
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PAY_NOTIFIER" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PAYMENTS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_PAYMENTS_ON_USER_ID"
ON "ZHAO"."USER_PAYMENTS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_PAYMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PAYMENTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PAYMENTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PAYMENTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PHONES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_PHONES_ON_USER_ID"
ON "ZHAO"."USER_PHONES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_PHONES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PHONES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PHONES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PHONES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PICTURE_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."I_PICTURE_DETAILS_AUCTION_ID"
ON "ZHAO"."USER_PICTURE_DETAILS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_PICTURE_DETAILS_PICTURE_ID"
ON "ZHAO"."USER_PICTURE_DETAILS" ("USER_PICTURE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_PICTURE_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PICTURE_DETAILS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PICTURE_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PICTURE_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PICTURES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_PICTURES_ON_USER_ID"
ON "ZHAO"."USER_PICTURES" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_PICTURES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PICTURES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PICTURES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PICTURES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PROVINCES
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_PROVINCES_ON_NAME"
ON "ZHAO"."USER_PROVINCES" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_PROVINCES_COUNTRY_ID"
ON "ZHAO"."USER_PROVINCES" ("COUNTRY_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_PROVINCES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PROVINCES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PROVINCES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PROVINCES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PUSH
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_PUSH
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PUSH" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_PUSH" ADD CHECK ("TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PUSH
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PUSH" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_PUSH_DETAIL
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_PUSH_DETAIL
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PUSH_DETAIL" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_PUSH_DETAIL
-- ----------------------------
ALTER TABLE "ZHAO"."USER_PUSH_DETAIL" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_QUOTA_USAGES
-- ----------------------------
CREATE INDEX "ZHAO"."I_USER_QUOTA_USAGES_AUCTION_ID"
ON "ZHAO"."USER_QUOTA_USAGES" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_QUOTA_USAGES_AUCTION_NO"
ON "ZHAO"."USER_QUOTA_USAGES" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_QUOTA_USAGES_STATUS"
ON "ZHAO"."USER_QUOTA_USAGES" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_QUOTA_USAGES_USER_ID"
ON "ZHAO"."USER_QUOTA_USAGES" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_USER_QUOTA_USAGES"
ON "ZHAO"."USER_QUOTA_USAGES" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_QUOTA_USAGES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_QUOTA_USAGES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table USER_QUOTAS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_QUOTAS_ON_USER_ID"
ON "ZHAO"."USER_QUOTAS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_QUOTAS_CREATED_AT"
ON "ZHAO"."USER_QUOTAS" ("CREATED_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_QUOTAS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_QUOTAS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_QUOTAS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_QUOTAS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_REFUND_REQUESTS
-- ----------------------------
CREATE INDEX "ZHAO"."I_REFUND_REQUESTS_USER_ID"
ON "ZHAO"."USER_REFUND_REQUESTS" ("USER_BANK_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REFUND_REQUESTS_USER_ID"
ON "ZHAO"."USER_REFUND_REQUESTS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_REFUND_REQUESTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REFUND_REQUESTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_REFUND_REQUESTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REFUND_REQUESTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_REFUNDS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_REFUNDS_COMPLETE_AT"
ON "ZHAO"."USER_REFUNDS" ("COMPLETE_AT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_REFUNDS_ON_STATUS"
ON "ZHAO"."USER_REFUNDS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USER_REFUNDS_ON_USER_ID"
ON "ZHAO"."USER_REFUNDS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_REFUNDS_LOGISTIC_DETAIL_ID"
ON "ZHAO"."USER_REFUNDS" ("LOGISTIC_DETAIL_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_REFUNDS_SETTLEMENT_STATUS"
ON "ZHAO"."USER_REFUNDS" ("SETTLEMENT_STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REFUNDS_AUCTION_ID"
ON "ZHAO"."USER_REFUNDS" ("AUCTION_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REFUNDS_AUCTION_NO"
ON "ZHAO"."USER_REFUNDS" ("AUCTION_NO" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REFUNDS_USER_ORDER_ID"
ON "ZHAO"."USER_REFUNDS" ("USER_ORDER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REFUND_CREATED_AT"
ON "ZHAO"."USER_REFUNDS" ("CREATED_AT" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_REFUNDS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REFUNDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_REFUNDS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REFUNDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_REGIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_REGIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REGIONS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_REGIONS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REGIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_REMIT_DESPATCHES
-- ----------------------------
CREATE INDEX "ZHAO"."I_REMIT_DESP_USER_ID"
ON "ZHAO"."USER_REMIT_DESPATCHES" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_REMIT_DESP_USER_REMIT_ID"
ON "ZHAO"."USER_REMIT_DESPATCHES" ("USER_REMIT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_REMIT_DESPATCHES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REMIT_DESPATCHES" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_REMIT_DESPATCHES
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REMIT_DESPATCHES" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_REMITS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_REMITS_ON_USER_ID"
ON "ZHAO"."USER_REMITS" ("USER_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REMITS_COMPANY_BANK_ID"
ON "ZHAO"."USER_REMITS" ("FINANCE_COMPANY_BANK_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_REMITS_DEPOSIT_TYPE_ID"
ON "ZHAO"."USER_REMITS" ("FINANCE_DEPOSIT_TYPE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_REMITS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REMITS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_REMITS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_REMITS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_RESET_PASSWORDS
-- ----------------------------
CREATE INDEX "ZHAO"."I_USER_RESET_PASSWORDS_USER_ID"
ON "ZHAO"."USER_RESET_PASSWORDS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_RESET_PASSWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_RESET_PASSWORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_RESET_PASSWORDS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_RESET_PASSWORDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table USER_SUBSCRIBE
-- ----------------------------
ALTER TABLE "ZHAO"."USER_SUBSCRIBE" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_SUBSCRIBE" ADD CHECK ("CATAGORY_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table USER_SUBSCRIPTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_SUBSCRIPTION
-- ----------------------------
ALTER TABLE "ZHAO"."USER_SUBSCRIPTION" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."USER_SUBSCRIPTION" ADD CHECK ("CATAGORY_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_SUBSCRIPTION
-- ----------------------------
ALTER TABLE "ZHAO"."USER_SUBSCRIPTION" ADD PRIMARY KEY ("USER_ID", "CATAGORY_ID");

-- ----------------------------
-- Indexes structure for table USER_SUBSCRIPTION_RECEIVE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table USER_SUBSCRIPTION_RECEIVE
-- ----------------------------
ALTER TABLE "ZHAO"."USER_SUBSCRIPTION_RECEIVE" ADD PRIMARY KEY ("USER_ID");

-- ----------------------------
-- Indexes structure for table USER_TRANSFERS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USER_TRANSFERS_ON_TO_ID"
ON "ZHAO"."USER_TRANSFERS" ("TO_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_USER_TRANSFERS_FROM_ID"
ON "ZHAO"."USER_TRANSFERS" ("FROM_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_TRANSFERS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_TRANSFERS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_TRANSFERS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_TRANSFERS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USER_VIRTUAL_ACCOUNTS
-- ----------------------------
CREATE UNIQUE INDEX "ZHAO"."I_USER_VIRTUAL_ACCOUNTS_NAME"
ON "ZHAO"."USER_VIRTUAL_ACCOUNTS" ("NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."I_VIRTUAL_ACCOUNTS_USER_ID"
ON "ZHAO"."USER_VIRTUAL_ACCOUNTS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USER_VIRTUAL_ACCOUNTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_VIRTUAL_ACCOUNTS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_VIRTUAL_ACCOUNTS
-- ----------------------------
ALTER TABLE "ZHAO"."USER_VIRTUAL_ACCOUNTS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table USERS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_USERS_ON_ACCOUNT"
ON "ZHAO"."USERS" ("ACCOUNT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_BAILS"
ON "ZHAO"."USERS" ("BAILS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_BUY_LEVEL"
ON "ZHAO"."USERS" ("BUY_LEVEL" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_NICKNAME"
ON "ZHAO"."USERS" ("NICKNAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_QUOTA"
ON "ZHAO"."USERS" ("QUOTA" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_SELL_LEVEL"
ON "ZHAO"."USERS" ("SELL_LEVEL" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_STATUS"
ON "ZHAO"."USERS" ("STATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_TRUE_NAME"
ON "ZHAO"."USERS" ("TRUE_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_USERS_ON_USER_LANG"
ON "ZHAO"."USERS" ("USER_LANG" ASC)
LOGGING
VISIBLE;
CREATE UNIQUE INDEX "ZHAO"."PK_USERS"
ON "ZHAO"."USERS" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table USERS
-- ----------------------------
ALTER TABLE "ZHAO"."USERS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table USERTYPE
-- ----------------------------

-- ----------------------------
-- Checks structure for table USERTYPE
-- ----------------------------
ALTER TABLE "ZHAO"."USERTYPE" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USERTYPE
-- ----------------------------
ALTER TABLE "ZHAO"."USERTYPE" ADD PRIMARY KEY ("NAME");

-- ----------------------------
-- Indexes structure for table VIPUSER_ASSIGN_HISTORY
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_VIPUSER_HIS_ON_USERID"
ON "ZHAO"."VIPUSER_ASSIGN_HISTORY" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table VIPUSER_ASSIGN_HISTORY
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY" ADD CHECK ("OPERATION_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table VIPUSER_ASSIGN_HISTORY
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_ASSIGN_HISTORY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table VIPUSER_CALL_RECORDS
-- ----------------------------

-- ----------------------------
-- Checks structure for table VIPUSER_CALL_RECORDS
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_CALL_RECORDS" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table VIPUSER_CALL_RECORDS
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_CALL_RECORDS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table VIPUSER_DETAILS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_VIPUSER_DETAILS_ON_VIPUS"
ON "ZHAO"."VIPUSER_DETAILS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table VIPUSER_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_DETAILS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."VIPUSER_DETAILS" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table VIPUSER_DETAILS
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_DETAILS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table VIPUSER_MEMO
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_VIPUSER_MEMO_ON_UID"
ON "ZHAO"."VIPUSER_MEMO" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table VIPUSER_MEMO
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_MEMO" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table VIPUSER_MEMO
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_MEMO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table VIPUSER_PHONE
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_VIPUSER_PHONE_ON_UID"
ON "ZHAO"."VIPUSER_PHONE" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table VIPUSER_PHONE
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_PHONE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table VIPUSER_PHONE
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSER_PHONE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table VIPUSERS
-- ----------------------------
CREATE INDEX "ZHAO"."INDEX_VIPUSERS_IS_VIP"
ON "ZHAO"."VIPUSERS" ("IS_VIP" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ZHAO"."INDEX_VIPUSERS_ON_USER_ID"
ON "ZHAO"."VIPUSERS" ("USER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table VIPUSERS
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSERS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."VIPUSERS" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table VIPUSERS
-- ----------------------------
ALTER TABLE "ZHAO"."VIPUSERS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEB_DATA_DICTIONARY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEB_DATA_DICTIONARY
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_DATA_DICTIONARY" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEB_DATA_DICTIONARY
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_DATA_DICTIONARY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEB_HELPCENTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEB_HELPCENTER
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_HELPCENTER" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEB_HELPCENTER
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_HELPCENTER" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEB_INDEX_ADVERT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEB_INDEX_ADVERT
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_INDEX_ADVERT" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEB_INDEX_ADVERT" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEB_INDEX_ADVERT
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_INDEX_ADVERT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEB_INDEX_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEB_INDEX_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_INDEX_CONFIG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEB_INDEX_CONFIG
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_INDEX_CONFIG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEB_INDEX_FORUM
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEB_INDEX_FORUM
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_INDEX_FORUM" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEB_INDEX_FORUM" ADD CHECK ("TITLE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEB_INDEX_FORUM
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_INDEX_FORUM" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEB_URL_NAME_MAPPING
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEB_URL_NAME_MAPPING
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_URL_NAME_MAPPING" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEB_URL_NAME_MAPPING
-- ----------------------------
ALTER TABLE "ZHAO"."WEB_URL_NAME_MAPPING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEEK
-- ----------------------------
CREATE INDEX "ZHAO"."IND_WEEK"
ON "ZHAO"."WEEK" ("WEEK" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table WEEK
-- ----------------------------
ALTER TABLE "ZHAO"."WEEK" ADD PRIMARY KEY ("DATE_NUM");

-- ----------------------------
-- Checks structure for table WEIXIN_AUTO_REPLY
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_AUTO_REPLY" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WEIXIN_GAOJING
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_GAOJING
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_GAOJING" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_GAOJING" ADD CHECK ("APP_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_GAOJING
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_GAOJING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_GRAPHIC_MATERIAL
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_GRAPHIC_MATERIAL
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_GRAPHIC_MATERIAL" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_GRAPHIC_MATERIAL
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_GRAPHIC_MATERIAL" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_KEYWORD
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_KEYWORD
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_KEYWORD" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_KEYWORD" ADD CHECK ("REPLY_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_KEYWORD
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_KEYWORD" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_MENU
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_MENU
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_MENU" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_MENU" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_MENU
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_MENU" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_MENU_DETAIL
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_MENU_DETAIL
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_MENU_DETAIL" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_MENU_DETAIL" ADD CHECK ("MENU_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_MENU_DETAIL
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_MENU_DETAIL" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_SEND_MSG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_SEND_MSG
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_SEND_MSG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_SEND_MSG
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_SEND_MSG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_TOUSU
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_TOUSU
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD CHECK ("OPEN_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD CHECK ("TIME_STAMP" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD CHECK ("MSG_TYPE" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD CHECK ("FEED_BACK_ID" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD CHECK ("APP_SIGNATURE" IS NOT NULL);
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD CHECK ("APP_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_TOUSU
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_TOUSU" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_TOUSU_REPLY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_TOUSU_REPLY
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_TOUSU_REPLY" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_TOUSU_REPLY
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_TOUSU_REPLY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_TREE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_TREE
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_TREE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_TREE
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_TREE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WEIXIN_USER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WEIXIN_USER
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_USER" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WEIXIN_USER
-- ----------------------------
ALTER TABLE "ZHAO"."WEIXIN_USER" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WIN_PRIZE_RECORD
-- ----------------------------
CREATE INDEX "ZHAO"."WIN_PRIZE_RECORD_INDEX"
ON "ZHAO"."WIN_PRIZE_RECORD" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table WIN_PRIZE_RECORD
-- ----------------------------
ALTER TABLE "ZHAO"."WIN_PRIZE_RECORD" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."PLSQL_PROFILER_DATA"
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_DATA" ADD FOREIGN KEY ("RUNID", "UNIT_NUMBER") REFERENCES "ZHAO"."PLSQL_PROFILER_UNITS" ("RUNID", "UNIT_NUMBER");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."PLSQL_PROFILER_UNITS"
-- ----------------------------
ALTER TABLE "ZHAO"."PLSQL_PROFILER_UNITS" ADD FOREIGN KEY ("RUNID") REFERENCES "ZHAO"."PLSQL_PROFILER_RUNS" ("RUNID");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."QRTZ_BLOB_TRIGGERS"
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_BLOB_TRIGGERS" ADD FOREIGN KEY ("TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "ZHAO"."QRTZ_TRIGGERS" ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."QRTZ_CRON_TRIGGERS"
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_CRON_TRIGGERS" ADD FOREIGN KEY ("TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "ZHAO"."QRTZ_TRIGGERS" ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."QRTZ_SIMPLE_TRIGGERS"
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_SIMPLE_TRIGGERS" ADD FOREIGN KEY ("TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "ZHAO"."QRTZ_TRIGGERS" ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."QRTZ_TRIGGER_LISTENERS"
-- ----------------------------
ALTER TABLE "ZHAO"."QRTZ_TRIGGER_LISTENERS" ADD FOREIGN KEY ("TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "ZHAO"."QRTZ_TRIGGERS" ("TRIGGER_NAME", "TRIGGER_GROUP");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."RALASAFE_RALASAFE_USERROLE"
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_RALASAFE_USERROLE" ADD FOREIGN KEY ("ROLEID") REFERENCES "ZHAO"."RALASAFE_ROLE" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ZHAO"."RALASAFE_ROLEPRIVILEGE"
-- ----------------------------
ALTER TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE" ADD FOREIGN KEY ("ROLEID") REFERENCES "ZHAO"."RALASAFE_ROLE" ("ID");
ALTER TABLE "ZHAO"."RALASAFE_ROLEPRIVILEGE" ADD FOREIGN KEY ("PRIVILEGEID") REFERENCES "ZHAO"."RALASAFE_PRIVILEGE" ("ID");
